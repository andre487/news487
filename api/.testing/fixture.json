[{"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Had so much fun today at @CSS_Minsk_JS. Delighted to make so many Belarusian friends. The organizers did an AMAZING‚Ä¶ https://t.co/tFs70po0FI", "author_name": "Zach Leatherman", "source_type": "twitter", "link": "https://twitter.com/zachleat/status/906971356419543041", "author_link": "https://twitter.com/zachleat", "published": "2017-09-10T20:03:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 3}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @Classic_picx: The reunion of ‚ÄòThe Sound of Music‚Äô family 45 years later. Rare Photo https://t.co/YqYd0QrNM7", "author_name": "Chris Heilmann", "source_type": "twitter", "link": "https://twitter.com/codepo8/status/906961686770343936", "author_link": "https://twitter.com/codepo8", "published": "2017-09-10T19:24:00", "source_title": "Twitter", "share_count": 596, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @Classic_picx: Designer Hartmut Esslinger (left) and Steve Jobs (right) with the prototype of the first iPhone in 1986 #iPhoneAt10 https‚Ä¶", "author_name": "Chris Heilmann", "source_type": "twitter", "link": "https://twitter.com/codepo8/status/906961507824439296", "author_link": "https://twitter.com/codepo8", "published": "2017-09-10T19:24:00", "source_title": "Twitter", "share_count": 720, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @Classic_picx: Times Square, New York City (1976) https://t.co/Ow6CWqHxyJ", "author_name": "Chris Heilmann", "source_type": "twitter", "link": "https://twitter.com/codepo8/status/906961449615900672", "author_link": "https://twitter.com/codepo8", "published": "2017-09-10T19:23:00", "source_title": "Twitter", "share_count": 230, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @Classic_picx: A 17 year old Boris Becker stormed to a historic #Wimbledon final in 1985. https://t.co/73NrVdUKGM", "author_name": "Chris Heilmann", "source_type": "twitter", "link": "https://twitter.com/codepo8/status/906961424726888448", "author_link": "https://twitter.com/codepo8", "published": "2017-09-10T19:23:00", "source_title": "Twitter", "share_count": 2541, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @Classic_picx: Morgan Freeman and Tim Robbins reunited for the 20th anniversary of Shawshank Redemption. 2014. https://t.co/Bl9jcCVQiA", "author_name": "Chris Heilmann", "source_type": "twitter", "link": "https://twitter.com/codepo8/status/906961351553146882", "author_link": "https://twitter.com/codepo8", "published": "2017-09-10T19:23:00", "source_title": "Twitter", "share_count": 2968, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @Classic_picx: The original studio model of the USS Enterprise (NCC-1701) used in 1966 #StarTrekDay https://t.co/ShyW92z290", "author_name": "Chris Heilmann", "source_type": "twitter", "link": "https://twitter.com/codepo8/status/906961010010972160", "author_link": "https://twitter.com/codepo8", "published": "2017-09-10T19:22:00", "source_title": "Twitter", "share_count": 1052, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "How to manage multi-node deployments with @rancher_labs and @Docker machine https://t.co/o4y2ARLDvY https://t.co/DVZI6jr8ll", "author_name": "DigitalOcean", "source_type": "twitter", "link": "https://twitter.com/digitalocean/status/906959224923619328", "author_link": "https://twitter.com/digitalocean", "published": "2017-09-10T19:15:00", "source_title": "Twitter", "share_count": 2, "favorite_count": 7}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "‚ö°Ô∏è Unwind with this Sunday read: ‚ÄúWe have simply accepted overextension as a way of life\" https://t.co/mcIWGwAjtC (@nytimes)", "author_name": "Pocket", "source_type": "twitter", "link": "https://twitter.com/Pocket/status/906958706549673986", "author_link": "https://twitter.com/Pocket", "published": "2017-09-10T19:13:00", "source_title": "Twitter", "share_count": 1, "favorite_count": 5}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Something about the changing summer -&gt; fall season makes me want to hang out in a coffee shop and be really productive üòä", "author_name": "Una Kravets in üá∫üá∏", "source_type": "twitter", "link": "https://twitter.com/Una/status/906953405725323269", "author_link": "https://twitter.com/Una", "published": "2017-09-10T18:51:00", "source_title": "Twitter", "share_count": 1, "favorite_count": 29}, {"source_name": "Twitter", "description": "", "tags": "computer science,tech,twitter", "source_link": "https://twitter.com", "title": "\"Appeal to authority\" can usefully be interpreted as \"flight from responsibility\"", "author_name": "Kent Beck", "source_type": "twitter", "link": "https://twitter.com/KentBeck/status/906953312267673600", "author_link": "https://twitter.com/KentBeck", "published": "2017-09-10T18:51:00", "source_title": "Twitter", "share_count": 9, "favorite_count": 32}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @aaronphilipxo: i'm a 16 yr old disabled, non-binary creative &amp; aspiring model. your rt's can help me get a chance at success &amp; opportun‚Ä¶", "author_name": "fantastic ms. üá∏üá™", "source_type": "twitter", "link": "https://twitter.com/fox/status/906950880699838465", "author_link": "https://twitter.com/fox", "published": "2017-09-10T18:41:00", "source_title": "Twitter", "share_count": 91109, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @ctrlaltjustine: If you own your own company, ensure your employees have a wellness budget. The cost of counseling shouldn't cost lives.", "author_name": "fantastic ms. üá∏üá™", "source_type": "twitter", "link": "https://twitter.com/fox/status/906949466963488768", "author_link": "https://twitter.com/fox", "published": "2017-09-10T18:36:00", "source_title": "Twitter", "share_count": 3, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "The definition of true friendship.üíñ https://t.co/hPvRtuB4HP", "author_name": "Bridget Kromhout", "source_type": "twitter", "link": "https://twitter.com/bridgetkromhout/status/906948121938288641", "author_link": "https://twitter.com/bridgetkromhout", "published": "2017-09-10T18:30:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 5}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "Curious about @letsencrypt? This guide gives a general overview of how the SSL auth works: https://t.co/wi41eNqcKM https://t.co/F5GhThbdA3", "author_name": "DigitalOcean", "source_type": "twitter", "link": "https://twitter.com/digitalocean/status/906945370768506881", "author_link": "https://twitter.com/digitalocean", "published": "2017-09-10T18:20:00", "source_title": "Twitter", "share_count": 8, "favorite_count": 28}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Are you an independent developer? Don't let tight budgets keep you out of #VelocityConf NY! Save 50% w/ code INDIE‚Ä¶ https://t.co/rfOcHAdGjC", "author_name": "O'Reilly Velocity", "source_type": "twitter", "link": "https://twitter.com/velocityconf/status/906940445254713344", "author_link": "https://twitter.com/velocityconf", "published": "2017-09-10T18:00:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 2}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Do you do anything in code to make \"Find in Project\" more useful? Tellll me.", "author_name": "Chris Coyier", "source_type": "twitter", "link": "https://twitter.com/chriscoyier/status/906930192983187456", "author_link": "https://twitter.com/chriscoyier", "published": "2017-09-10T17:19:00", "source_title": "Twitter", "share_count": 2, "favorite_count": 17}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "Control which users can transfer files and get SSH access by enabling SFTP without shell access. Learn more:‚Ä¶ https://t.co/Au1uD0giPw", "author_name": "DigitalOcean", "source_type": "twitter", "link": "https://twitter.com/digitalocean/status/906929729290285056", "author_link": "https://twitter.com/digitalocean", "published": "2017-09-10T17:17:00", "source_title": "Twitter", "share_count": 4, "favorite_count": 28}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @wattersjames: Pivotal Container Service Hardwires Cloud Foundry, Kubo to Google Cloud - The New Stack &lt;--lots of depth and quotes https‚Ä¶", "author_name": "Bridget Kromhout", "source_type": "twitter", "link": "https://twitter.com/bridgetkromhout/status/906924528894390272", "author_link": "https://twitter.com/bridgetkromhout", "published": "2017-09-10T16:57:00", "source_title": "Twitter", "share_count": 23, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @g33konaut: Berlin, here's your plan B for BER! https://t.co/PNnmyGDbAe", "author_name": "Chris Heilmann", "source_type": "twitter", "link": "https://twitter.com/codepo8/status/906921467169742848", "author_link": "https://twitter.com/codepo8", "published": "2017-09-10T16:45:00", "source_title": "Twitter", "share_count": 3, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @cutequeer96: English people will dead put anything in a sandwich. Fish fingers, chips, crisps, sausages. You name it, it's going in the‚Ä¶", "author_name": "Chris Heilmann", "source_type": "twitter", "link": "https://twitter.com/codepo8/status/906921403760312320", "author_link": "https://twitter.com/codepo8", "published": "2017-09-10T16:44:00", "source_title": "Twitter", "share_count": 6669, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "Get started with Hadoop one of the earliest and most influential open-source tools for storing and processing data‚Ä¶ https://t.co/BWLxhuPwdT", "author_name": "DigitalOcean", "source_type": "twitter", "link": "https://twitter.com/digitalocean/status/906920785524162563", "author_link": "https://twitter.com/digitalocean", "published": "2017-09-10T16:42:00", "source_title": "Twitter", "share_count": 7, "favorite_count": 27}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "‚úÖ  Trending this week on Pocket: \"It all comes down to money and who you know\" https://t.co/dyKTjHUiQ5 (@Mashable)", "author_name": "Pocket", "source_type": "twitter", "link": "https://twitter.com/Pocket/status/906916435804508160", "author_link": "https://twitter.com/Pocket", "published": "2017-09-10T16:25:00", "source_title": "Twitter", "share_count": 4, "favorite_count": 10}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "RT @iamakulov: Hint: when disabling rules in ESLint, comment why you do this. See how easier it is to understand the config: https://t.co/A‚Ä¶", "author_name": "ESLint", "source_type": "twitter", "link": "https://twitter.com/geteslint/status/906915960262606848", "author_link": "https://twitter.com/geteslint", "published": "2017-09-10T16:23:00", "source_title": "Twitter", "share_count": 7, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @ThePunnyWorld: https://t.co/jViBMlXklH", "author_name": "Dean Hume", "source_type": "twitter", "link": "https://twitter.com/DeanoHume/status/906911375758381056", "author_link": "https://twitter.com/DeanoHume", "published": "2017-09-10T16:04:00", "source_title": "Twitter", "share_count": 106, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @ReturntheHunter: Pok√©mon Go trying to murder people #HurrcaneIrma https://t.co/1ENqNUPO9p", "author_name": "Jason Grigsby, ‚òÅ4", "source_type": "twitter", "link": "https://twitter.com/grigs/status/906909854526193665", "author_link": "https://twitter.com/grigs", "published": "2017-09-10T15:58:00", "source_title": "Twitter", "share_count": 20056, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @mipsytipsy: It's like a murder mystery every day at work!  and YOU might be the villain!!  what could be more thrilling  :D", "author_name": "Bridget Kromhout", "source_type": "twitter", "link": "https://twitter.com/bridgetkromhout/status/906909800155447298", "author_link": "https://twitter.com/bridgetkromhout", "published": "2017-09-10T15:58:00", "source_title": "Twitter", "share_count": 31, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "@webinista FYI @webinista, this clip has a little more of interview where she is asked about Madison Keys. Her answ‚Ä¶ https://t.co/eQHvWYGr1W", "author_name": "Jason Grigsby, ‚òÅ4", "source_type": "twitter", "link": "https://twitter.com/grigs/status/906906311563939840", "author_link": "https://twitter.com/grigs", "published": "2017-09-10T15:44:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Sloane Stephens is my new favorite tennis player! /ht @webinista https://t.co/ScPPReLpmS", "author_name": "Jason Grigsby, ‚òÅ4", "source_type": "twitter", "link": "https://twitter.com/grigs/status/906905934936473600", "author_link": "https://twitter.com/grigs", "published": "2017-09-10T15:43:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 1}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "‚ÄòAnd next we invite Harry Roberts to the stage, who had the longest hands to take a selfie of us all.‚Äô\n‚Äî@CSS_Minsk_JS\n\nüò≥", "author_name": "Harry Roberts", "source_type": "twitter", "link": "https://twitter.com/csswizardry/status/906904440212529152", "author_link": "https://twitter.com/csswizardry", "published": "2017-09-10T15:37:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 23}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @kennybastani: Happy to announce @pivotal will be giving away 100 signed copies of @cloudnativejava at @cloudfoundry summit Europe. Hope‚Ä¶", "author_name": "Bridget Kromhout", "source_type": "twitter", "link": "https://twitter.com/bridgetkromhout/status/906901499799916544", "author_link": "https://twitter.com/bridgetkromhout", "published": "2017-09-10T15:25:00", "source_title": "Twitter", "share_count": 8, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "Help fix problems on an unstable platform:  https://t.co/s9m67AF4iV. Submit a pull request on GitHub.", "author_name": "Python Software", "source_type": "twitter", "link": "https://twitter.com/ThePSF/status/906895292351512576", "author_link": "https://twitter.com/ThePSF", "published": "2017-09-10T15:01:00", "source_title": "Twitter", "share_count": 7, "favorite_count": 12}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Need to catch up on the latest in #WebOps &amp; #DevOps? Check out these resources from @OReillyMedia https://t.co/k180rAhOiG", "author_name": "O'Reilly Velocity", "source_type": "twitter", "link": "https://twitter.com/velocityconf/status/906895184012746753", "author_link": "https://twitter.com/velocityconf", "published": "2017-09-10T15:00:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "Help fix problems on an unstable platform: https://t.co/eky2GFmUmw: email python-dev@python.org or open an issue on https://t.co/ZzfvbgyDdu", "author_name": "Python Software", "source_type": "twitter", "link": "https://twitter.com/ThePSF/status/906895066244972544", "author_link": "https://twitter.com/ThePSF", "published": "2017-09-10T15:00:00", "source_title": "Twitter", "share_count": 5, "favorite_count": 6}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @ihorzenich: Zack —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∫–∞–∫ —Ä–∞–∑–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã –ø–æ —Ä–∞–∑–Ω–æ–º—É –≥—Ä—É–∑–∏–ª–∏ —à—Ä–∏—Ñ—Ç—ã –∏ –∫–∞–∫ —Å–µ–π—á–∞—Å –Ω—É–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∏—Å–∞—Ç—å font‚Ä¶", "author_name": "Zach Leatherman", "source_type": "twitter", "link": "https://twitter.com/zachleat/status/906892405378572288", "author_link": "https://twitter.com/zachleat", "published": "2017-09-10T14:49:00", "source_title": "Twitter", "share_count": 2, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @aganaplocha: Did you know that web fonts are 20 years old? '97 - getting back to the web fonts history by @zachleat #cssminskjs #webfon‚Ä¶", "author_name": "Zach Leatherman", "source_type": "twitter", "link": "https://twitter.com/zachleat/status/906892006999420929", "author_link": "https://twitter.com/zachleat", "published": "2017-09-10T14:47:00", "source_title": "Twitter", "share_count": 3, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "RT @london_ajax: Happy for @codepo8 to speak at #halfstackconf! 17th Nov London JS conf in a pub. ¬£120 for talks, meals, swag &amp; party https‚Ä¶", "author_name": "JS Foundation", "source_type": "twitter", "link": "https://twitter.com/the_jsf/status/906891811624435713", "author_link": "https://twitter.com/the_jsf", "published": "2017-09-10T14:47:00", "source_title": "Twitter", "share_count": 6, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @aganaplocha: Variable fonts - sooo cool! #webtypography #webfonts talk by @zachleat @csswizardry #variablefonts #cssminskjs https://t.c‚Ä¶", "author_name": "Zach Leatherman", "source_type": "twitter", "link": "https://twitter.com/zachleat/status/906890965759283200", "author_link": "https://twitter.com/zachleat", "published": "2017-09-10T14:43:00", "source_title": "Twitter", "share_count": 5, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @SelenIT2: –ì—É—Ä—É –≤–µ–±-—à—Ä–∏—Ñ—Ç–æ–≤ @zachleat –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ–± –∏—Ö —Å–ª–æ–∂–Ω–æ—Å—Ç—è—Ö –Ω–∞ #CSSMinskJS", "author_name": "Zach Leatherman", "source_type": "twitter", "link": "https://twitter.com/zachleat/status/906890873463562240", "author_link": "https://twitter.com/zachleat", "published": "2017-09-10T14:43:00", "source_title": "Twitter", "share_count": 1, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @w3chtmler: @zachleat is performing using two screens at the same time on #cssminskjs. https://t.co/CkqiOsLXFW", "author_name": "Zach Leatherman", "source_type": "twitter", "link": "https://twitter.com/zachleat/status/906890763887419394", "author_link": "https://twitter.com/zachleat", "published": "2017-09-10T14:43:00", "source_title": "Twitter", "share_count": 2, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @HugoGiraudel: Takeaway from @zachleat on font loading strategy and performance. https://t.co/LTSreJNKJQ", "author_name": "Zach Leatherman", "source_type": "twitter", "link": "https://twitter.com/zachleat/status/906890698733113344", "author_link": "https://twitter.com/zachleat", "published": "2017-09-10T14:42:00", "source_title": "Twitter", "share_count": 2, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Fascinating. https://t.co/QlHboBx859", "author_name": "Bridget Kromhout", "source_type": "twitter", "link": "https://twitter.com/bridgetkromhout/status/906887082534109184", "author_link": "https://twitter.com/bridgetkromhout", "published": "2017-09-10T14:28:00", "source_title": "Twitter", "share_count": 2, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "India satellite TV provider @videocond2h sends usernames, passwords, names, addresses, insecurely https://t.co/5AOu2VS96X", "author_name": "HTTP Shaming", "source_type": "twitter", "link": "https://twitter.com/HTTPshaming/status/906886221074493440", "author_link": "https://twitter.com/HTTPshaming", "published": "2017-09-10T14:24:00", "source_title": "Twitter", "share_count": 1, "favorite_count": 1}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Web developers and designers: the comments in this thread should give us an idea of what customers want in a websit‚Ä¶ https://t.co/9Nf3eZCjpQ", "author_name": "Matt Shull", "source_type": "twitter", "link": "https://twitter.com/TheMattShull/status/906885855922606080", "author_link": "https://twitter.com/TheMattShull", "published": "2017-09-10T14:23:00", "source_title": "Twitter", "share_count": 1, "favorite_count": 2}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @pourmecoffee: @cnnbrk If there are no autoplay videos this is now my main link to your site.", "author_name": "Matt Shull", "source_type": "twitter", "link": "https://twitter.com/TheMattShull/status/906884612374265856", "author_link": "https://twitter.com/TheMattShull", "published": "2017-09-10T14:18:00", "source_title": "Twitter", "share_count": 66, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "@bram_stein Snap! From @zachleat. #CSSMinskJS https://t.co/lv5n3pwjay", "author_name": "Harry Roberts", "source_type": "twitter", "link": "https://twitter.com/csswizardry/status/906880625419980800", "author_link": "https://twitter.com/csswizardry", "published": "2017-09-10T14:02:00", "source_title": "Twitter", "share_count": 1, "favorite_count": 13}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "@jaffathecake OMG.", "author_name": "Paul Kinlan", "source_type": "twitter", "link": "https://twitter.com/Paul_Kinlan/status/906880192538390528", "author_link": "https://twitter.com/Paul_Kinlan", "published": "2017-09-10T14:01:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 1}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "@AmericanAir Too add context: my itinerary doesn't go through weather affected areas, same flight will fly day befo‚Ä¶ https://t.co/uMNs0mnWzI", "author_name": "Maximiliano Firtman", "source_type": "twitter", "link": "https://twitter.com/firt/status/906876624754311168", "author_link": "https://twitter.com/firt", "published": "2017-09-10T13:46:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 1}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "I'll miss #msedgesummit\n@AmericanAir cancels flight &amp; no seats for me are available within 5 days. ExecPl used to have a value, not anymoreüòê", "author_name": "Maximiliano Firtman", "source_type": "twitter", "link": "https://twitter.com/firt/status/906875869737766914", "author_link": "https://twitter.com/firt", "published": "2017-09-10T13:43:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @internetofshit: whoever said html never killed anyone was wrong https://t.co/jaNACygAfe", "author_name": "Matt Shull", "source_type": "twitter", "link": "https://twitter.com/TheMattShull/status/906873211144597504", "author_link": "https://twitter.com/TheMattShull", "published": "2017-09-10T13:33:00", "source_title": "Twitter", "share_count": 5503, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @ziyatong: When internet users evacuate. https://t.co/mfykdTGlzv", "author_name": "Matt Shull", "source_type": "twitter", "link": "https://twitter.com/TheMattShull/status/906873006135357440", "author_link": "https://twitter.com/TheMattShull", "published": "2017-09-10T13:32:00", "source_title": "Twitter", "share_count": 36993, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @bcrypt: i right-click where i want https://t.co/aODroaccN4", "author_name": "David Walsh", "source_type": "twitter", "link": "https://twitter.com/davidwalshblog/status/906861587335667712", "author_link": "https://twitter.com/davidwalshblog", "published": "2017-09-10T12:47:00", "source_title": "Twitter", "share_count": 207, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "@Paul_Kinlan How are your teats?", "author_name": "Jake Archibald", "source_type": "twitter", "link": "https://twitter.com/jaffathecake/status/906854623847297024", "author_link": "https://twitter.com/jaffathecake", "published": "2017-09-10T12:19:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 4}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "@jaffathecake Just got data.", "author_name": "Paul Kinlan", "source_type": "twitter", "link": "https://twitter.com/Paul_Kinlan/status/906854434604535808", "author_link": "https://twitter.com/Paul_Kinlan", "published": "2017-09-10T12:18:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "Learn to build a web site from scratch! Django Girls Cartagena, Columbia Oct 14-15: https://t.co/ZHnDTO4XqW  @argenpython", "author_name": "Python Software", "source_type": "twitter", "link": "https://twitter.com/ThePSF/status/906834662676418560", "author_link": "https://twitter.com/ThePSF", "published": "2017-09-10T11:00:00", "source_title": "Twitter", "share_count": 23, "favorite_count": 43}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "TIL about the `shape-outside` CSS property for more interesting shapes for text containers. Thanks @aganaplocha! https://t.co/ah5Ixn5iyO", "author_name": "Zach Leatherman", "source_type": "twitter", "link": "https://twitter.com/zachleat/status/906826455409197056", "author_link": "https://twitter.com/zachleat", "published": "2017-09-10T10:27:00", "source_title": "Twitter", "share_count": 1, "favorite_count": 8}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "@Paul_Kinlan ‚Ä¶Are you?", "author_name": "Jake Archibald", "source_type": "twitter", "link": "https://twitter.com/jaffathecake/status/906826142895702017", "author_link": "https://twitter.com/jaffathecake", "published": "2017-09-10T10:26:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "@jaffathecake Looks like it is working here now.", "author_name": "Paul Kinlan", "source_type": "twitter", "link": "https://twitter.com/Paul_Kinlan/status/906826001363210240", "author_link": "https://twitter.com/Paul_Kinlan", "published": "2017-09-10T10:25:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "@jaffathecake Teating.", "author_name": "Paul Kinlan", "source_type": "twitter", "link": "https://twitter.com/Paul_Kinlan/status/906825948594671616", "author_link": "https://twitter.com/Paul_Kinlan", "published": "2017-09-10T10:25:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 1}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "@Paul_Kinlan Not here.", "author_name": "Jake Archibald", "source_type": "twitter", "link": "https://twitter.com/jaffathecake/status/906825631454855168", "author_link": "https://twitter.com/jaffathecake", "published": "2017-09-10T10:24:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "I think Three's data network is down again.", "author_name": "Paul Kinlan", "source_type": "twitter", "link": "https://twitter.com/Paul_Kinlan/status/906823560622112769", "author_link": "https://twitter.com/Paul_Kinlan", "published": "2017-09-10T10:15:00", "source_title": "Twitter", "share_count": 1, "favorite_count": 1}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @girlie_mac: Okay next, \"git meowge\" - I'm explaining the `git merge` and `git rebase` with cats. üê± #sketchnotes #git #caturday https://‚Ä¶", "author_name": "Una Kravets in üá™üá™", "source_type": "twitter", "link": "https://twitter.com/Una/status/906815477657239552", "author_link": "https://twitter.com/Una", "published": "2017-09-10T09:43:00", "source_title": "Twitter", "share_count": 283, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": ".@tajymany, 13 year old developer, TEDx speaker &amp; author sat down to talk about his experiences in tech thus far: https://t.co/X090XcJP73", "author_name": "DigitalOcean", "source_type": "twitter", "link": "https://twitter.com/digitalocean/status/906815342055485440", "author_link": "https://twitter.com/digitalocean", "published": "2017-09-10T09:43:00", "source_title": "Twitter", "share_count": 5, "favorite_count": 16}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "^ &amp;&amp; Much love to @coldfrontconf &amp; @REFRESHRocks for having me! ‚ù§Ô∏è both are great events in beautiful cities!", "author_name": "Una Kravets in üá™üá™", "source_type": "twitter", "link": "https://twitter.com/Una/status/906815245292756993", "author_link": "https://twitter.com/Una", "published": "2017-09-10T09:42:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 3}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Here is @HugoGiraudel with an amazing talk on designing to handle name inputs internationally on the web.‚Ä¶ https://t.co/XoCGkdeDMZ", "author_name": "Zach Leatherman", "source_type": "twitter", "link": "https://twitter.com/zachleat/status/906814819520729088", "author_link": "https://twitter.com/zachleat", "published": "2017-09-10T09:41:00", "source_title": "Twitter", "share_count": 1, "favorite_count": 5}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "BA -&gt; SJC is apparently overbooked today.... not sure there is a fruit based reason for it.", "author_name": "Paul Kinlan", "source_type": "twitter", "link": "https://twitter.com/Paul_Kinlan/status/906809097173049345", "author_link": "https://twitter.com/Paul_Kinlan", "published": "2017-09-10T09:18:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 6}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Here is @mmatuzo demoing his very first website at @CSS_Minsk_JS in his great talk about CSS accessibility. https://t.co/eRdvdr9QFe", "author_name": "Zach Leatherman", "source_type": "twitter", "link": "https://twitter.com/zachleat/status/906805668648275968", "author_link": "https://twitter.com/zachleat", "published": "2017-09-10T09:04:00", "source_title": "Twitter", "share_count": 1, "favorite_count": 3}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Some gold in these slides! ‚ÄòDesigned for Inclusion‚Äô, by @mmatuzo: https://t.co/0awmOkRBdx https://t.co/R9V0EDrq4P", "author_name": "Harry Roberts", "source_type": "twitter", "link": "https://twitter.com/csswizardry/status/906803458673651712", "author_link": "https://twitter.com/csswizardry", "published": "2017-09-10T08:56:00", "source_title": "Twitter", "share_count": 7, "favorite_count": 33}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "^ And finally, shoutout to my surprise travel partner this week, @Rumyra, who does badass web-based A/V art w/@LiveJS_network üëØüíï Home soon!", "author_name": "Una Kravets in üá™üá™", "source_type": "twitter", "link": "https://twitter.com/Una/status/906795171681067008", "author_link": "https://twitter.com/Una", "published": "2017-09-10T08:23:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 8}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "^ Idk whats in the water, but every local has been above and beyond nice ü§ó. Thank you for the hospitality! Can't wa‚Ä¶ https://t.co/i2RrxdJaw1", "author_name": "Una Kravets in üá™üá™", "source_type": "twitter", "link": "https://twitter.com/Una/status/906794231020314624", "author_link": "https://twitter.com/Una", "published": "2017-09-10T08:19:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 14}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Just had an epic adventure to the airport bc of marathon road closings üòÇ\n\nDriver was another wonderful Estonian. I'‚Ä¶ https://t.co/1XzTT6Quyt", "author_name": "Una Kravets in üá™üá™", "source_type": "twitter", "link": "https://twitter.com/Una/status/906791443368435713", "author_link": "https://twitter.com/Una", "published": "2017-09-10T08:08:00", "source_title": "Twitter", "share_count": 1, "favorite_count": 29}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "@Una @MylesBorins that game is not great. (still remembering sprinting through FRA)", "author_name": "fantastic ms. üá∏üá™", "source_type": "twitter", "link": "https://twitter.com/fox/status/906769998835789824", "author_link": "https://twitter.com/fox", "published": "2017-09-10T06:43:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @emorwee: New study out today asserts 50% of temperature increase &amp; 32% of sea level rise was caused by just 90 companies https://t.co/C‚Ä¶", "author_name": "Una Kravets in üá™üá™", "source_type": "twitter", "link": "https://twitter.com/Una/status/906769819856498688", "author_link": "https://twitter.com/Una", "published": "2017-09-10T06:42:00", "source_title": "Twitter", "share_count": 12747, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "@Una thank you! üëØ", "author_name": "fantastic ms. üá∏üá™", "source_type": "twitter", "link": "https://twitter.com/fox/status/906768738770354176", "author_link": "https://twitter.com/fox", "published": "2017-09-10T06:38:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 1}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "@fox üòÇ Congrats on the visa grant btw!", "author_name": "Una Kravets in üá™üá™", "source_type": "twitter", "link": "https://twitter.com/Una/status/906768453754814464", "author_link": "https://twitter.com/Una", "published": "2017-09-10T06:37:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 1}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "@Una I haven‚Äôt had breakfast or coffee yet üòÇ\n\nIt‚Äôs a crisis", "author_name": "fantastic ms. üá∏üá™", "source_type": "twitter", "link": "https://twitter.com/fox/status/906768167309074432", "author_link": "https://twitter.com/fox", "published": "2017-09-10T06:35:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 2}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "@fox Good morning üòõ", "author_name": "Una Kravets in üá™üá™", "source_type": "twitter", "link": "https://twitter.com/Una/status/906767871287623680", "author_link": "https://twitter.com/Una", "published": "2017-09-10T06:34:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "This was my Sunday before breakfast rant, thank you. ‚úåÔ∏è", "author_name": "fantastic ms. üá∏üá™", "source_type": "twitter", "link": "https://twitter.com/fox/status/906767688462163969", "author_link": "https://twitter.com/fox", "published": "2017-09-10T06:33:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 3}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Don‚Äôt want to participate? Just don‚Äôt reply and move on. \n\nBashing organizers because of your own privilege is unacceptable.", "author_name": "fantastic ms. üá∏üá™", "source_type": "twitter", "link": "https://twitter.com/fox/status/906767513958187008", "author_link": "https://twitter.com/fox", "published": "2017-09-10T06:33:00", "source_title": "Twitter", "share_count": 1, "favorite_count": 10}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Getting angry at organizers for inviting to partake in an anonymous process versus directly getting a speaking gig is arrogance.", "author_name": "fantastic ms. üá∏üá™", "source_type": "twitter", "link": "https://twitter.com/fox/status/906767246218981376", "author_link": "https://twitter.com/fox", "published": "2017-09-10T06:32:00", "source_title": "Twitter", "share_count": 1, "favorite_count": 13}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Seemingly this still has to be said‚Ä¶\n\nAs a speaker, expecting to always be invited to speak and bypassing call for proposals is PRIVILEGE.", "author_name": "fantastic ms. üá∏üá™", "source_type": "twitter", "link": "https://twitter.com/fox/status/906766658261446656", "author_link": "https://twitter.com/fox", "published": "2017-09-10T06:29:00", "source_title": "Twitter", "share_count": 3, "favorite_count": 35}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Good morning, Minsk!\n#CSSMinskJS https://t.co/vVOTVHzojb", "author_name": "Harry Roberts", "source_type": "twitter", "link": "https://twitter.com/csswizardry/status/906763474759548929", "author_link": "https://twitter.com/csswizardry", "published": "2017-09-10T06:17:00", "source_title": "Twitter", "share_count": 5, "favorite_count": 43}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @lizardbill: Technically, it's not a breach of trust if nobody ever trusted you in the first place. https://t.co/B4EtIC5kzw", "author_name": "Jeff Atwood", "source_type": "twitter", "link": "https://twitter.com/codinghorror/status/906746743739445249", "author_link": "https://twitter.com/codinghorror", "published": "2017-09-10T05:10:00", "source_title": "Twitter", "share_count": 18, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @romiosini: \"The earth is not dying, it is being killed; and those who are killing it have names and addresses.\" https://t.co/puP7UIu4uo", "author_name": "fantastic ms. üá∏üá™", "source_type": "twitter", "link": "https://twitter.com/fox/status/906745809001172993", "author_link": "https://twitter.com/fox", "published": "2017-09-10T05:07:00", "source_title": "Twitter", "share_count": 1294, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "@addyosmani @LeaVerou @GoogleDevExpert @stubbornella @Una @anatudor @rachelandrew @rachelnabors @AysSomething‚Ä¶ https://t.co/EiIjGrq3Sm", "author_name": "Paul Kinlan", "source_type": "twitter", "link": "https://twitter.com/Paul_Kinlan/status/906744233981341697", "author_link": "https://twitter.com/Paul_Kinlan", "published": "2017-09-10T05:00:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 4}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "There's been a number of things that stopped recruiting in last 6 months, but they are unblocked now", "author_name": "Paul Kinlan", "source_type": "twitter", "link": "https://twitter.com/Paul_Kinlan/status/906743069881577474", "author_link": "https://twitter.com/Paul_Kinlan", "published": "2017-09-10T04:56:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 6}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Just to be clear. Our team manages hiring for Web gde, we fund a huge portion of the project and we run the web program...", "author_name": "Paul Kinlan", "source_type": "twitter", "link": "https://twitter.com/Paul_Kinlan/status/906742832781774848", "author_link": "https://twitter.com/Paul_Kinlan", "published": "2017-09-10T04:55:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 3}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "I've asked the team numerous times to be a lot more involved in all aspects. Recs, interviewing and running. It's all of our responsibility.", "author_name": "Paul Kinlan", "source_type": "twitter", "link": "https://twitter.com/Paul_Kinlan/status/906742015152533504", "author_link": "https://twitter.com/Paul_Kinlan", "published": "2017-09-10T04:51:00", "source_title": "Twitter", "share_count": 1, "favorite_count": 6}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @JamesSurowiecki: This is a strong candidate for the most ridiculous hot take of the year. https://t.co/LhrPyDb8Lj", "author_name": "Jason Grigsby, ‚òÅ4", "source_type": "twitter", "link": "https://twitter.com/grigs/status/906725343033147392", "author_link": "https://twitter.com/grigs", "published": "2017-09-10T03:45:00", "source_title": "Twitter", "share_count": 302, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @dkhan: Training tomorrows talents @ArsElectronica @Dynatrace @CoderDojoLinz https://t.co/d2qoSLhrHd", "author_name": "Andreas Grabner", "source_type": "twitter", "link": "https://twitter.com/grabnerandi/status/906724769583845376", "author_link": "https://twitter.com/grabnerandi", "published": "2017-09-10T03:43:00", "source_title": "Twitter", "share_count": 4, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "RT @pocketsupport: We are back up. Thank you for your patience. This was standard maintenance, but please let us know if you notice anythin‚Ä¶", "author_name": "Pocket", "source_type": "twitter", "link": "https://twitter.com/Pocket/status/906723346556919811", "author_link": "https://twitter.com/Pocket", "published": "2017-09-10T03:37:00", "source_title": "Twitter", "share_count": 2, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "üè¶ Made a simple thing to buy cryptocurrencies from your command line through the Bitstamp API\nüìà DCA via cron jobs!\nhttps://t.co/xXqEMzaB3x", "author_name": "Nicol√°s Bevacqua", "source_type": "twitter", "link": "https://twitter.com/nzgb/status/906722670112333824", "author_link": "https://twitter.com/nzgb", "published": "2017-09-10T03:35:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 11}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "RT @pocketsupport: FYI: We will be taking Pocket offline at 8:30 PM PT/3:30 AM UTC for maintenance, lasting about 15 minutes. Thanks for yo‚Ä¶", "author_name": "Pocket", "source_type": "twitter", "link": "https://twitter.com/Pocket/status/906718507420680193", "author_link": "https://twitter.com/Pocket", "published": "2017-09-10T03:18:00", "source_title": "Twitter", "share_count": 4, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "RT @jon_neal: Badges? We don't need no stinkin' badges!\n\nBut these badges help users know the status of your CSS polyfill https://t.co/M9uC‚Ä¶", "author_name": "PostCSS", "source_type": "twitter", "link": "https://twitter.com/PostCSS/status/906717053150691328", "author_link": "https://twitter.com/PostCSS", "published": "2017-09-10T03:12:00", "source_title": "Twitter", "share_count": 10, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @TanelPoder: A nice Oracle 12c DB Architecture poster (PDF): https://t.co/oo3lBOXLZh https://t.co/alszrH8h2Q", "author_name": "Alexander Podelko", "source_type": "twitter", "link": "https://twitter.com/apodelko/status/906715958923886592", "author_link": "https://twitter.com/apodelko", "published": "2017-09-10T03:08:00", "source_title": "Twitter", "share_count": 11, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "since when did unidirectional fork pushes become the universal symbol of peanut butter cookies dontatme", "author_name": "Chris Coyier", "source_type": "twitter", "link": "https://twitter.com/chriscoyier/status/906715206457344000", "author_link": "https://twitter.com/chriscoyier", "published": "2017-09-10T03:05:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 10}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "Get started with container orchestration in this video by @vpavlin https://t.co/hLjbrPt3ba", "author_name": "DigitalOcean", "source_type": "twitter", "link": "https://twitter.com/digitalocean/status/906711935353270272", "author_link": "https://twitter.com/digitalocean", "published": "2017-09-10T02:52:00", "source_title": "Twitter", "share_count": 2, "favorite_count": 23}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @MuslimIQ: As your kids start school again tell them about Ruby Bridges‚Äî1st black child at all-white public elementary school in South.‚Ä¶", "author_name": "Jeff Atwood", "source_type": "twitter", "link": "https://twitter.com/codinghorror/status/906700859706269696", "author_link": "https://twitter.com/codinghorror", "published": "2017-09-10T02:08:00", "source_title": "Twitter", "share_count": 2116, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "The average web page is 3MB. How much should we care?\nhttps://t.co/QFybODT1Gv \nGood insights and link collection.", "author_name": "Chris Heilmann", "source_type": "twitter", "link": "https://twitter.com/codepo8/status/906700321795084289", "author_link": "https://twitter.com/codepo8", "published": "2017-09-10T02:06:00", "source_title": "Twitter", "share_count": 2, "favorite_count": 8}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "So sad to be missing @smashingconf Freiburg. But happy to meet interesting folk in Seattle at the same time. Too many concurrent conferences", "author_name": "Chris Heilmann", "source_type": "twitter", "link": "https://twitter.com/codepo8/status/906699667919867905", "author_link": "https://twitter.com/codepo8", "published": "2017-09-10T02:03:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "my last five burgers: lamb, elk, bison, cow, garden", "author_name": "Chris Coyier", "source_type": "twitter", "link": "https://twitter.com/chriscoyier/status/906698437881503744", "author_link": "https://twitter.com/chriscoyier", "published": "2017-09-10T01:58:00", "source_title": "Twitter", "share_count": 1, "favorite_count": 33}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "‚ÄúEvery JavaScript framework tutorial written more than 5 minutes ago‚Äù by @RogerAFCollier https://t.co/D5ERSgCYwU", "author_name": "Chris Heilmann", "source_type": "twitter", "link": "https://twitter.com/codepo8/status/906695651949346816", "author_link": "https://twitter.com/codepo8", "published": "2017-09-10T01:47:00", "source_title": "Twitter", "share_count": 10, "favorite_count": 27}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Non-trivial pursuits: Learning machines and forgetful humans #ai #machinelearning https://t.co/qSzGbeLMo7 \nMy @pnwphp keynote.", "author_name": "Chris Heilmann", "source_type": "twitter", "link": "https://twitter.com/codepo8/status/906693377264992256", "author_link": "https://twitter.com/codepo8", "published": "2017-09-10T01:38:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 3}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @KingsleyTagbo: 7 Things You Didn‚Äôt Know You Could Do with CSS https://t.co/VMRjWtAE1q RT @davidwalshblog  #c", "author_name": "David Walsh", "source_type": "twitter", "link": "https://twitter.com/davidwalshblog/status/906689394018590721", "author_link": "https://twitter.com/davidwalshblog", "published": "2017-09-10T01:22:00", "source_title": "Twitter", "share_count": 3, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "The https://t.co/JPRrNxBZjx project is super fun, recommended! https://t.co/62O4G4zxI2", "author_name": "Jeff Atwood", "source_type": "twitter", "link": "https://twitter.com/codinghorror/status/906685430375915520", "author_link": "https://twitter.com/codinghorror", "published": "2017-09-10T01:07:00", "source_title": "Twitter", "share_count": 23, "favorite_count": 108}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "120 Geometric Shapes Vector Files from VectorBox Studio - only $7! https://t.co/6DRFYsRTDp", "author_name": "Chris Love", "source_type": "twitter", "link": "https://twitter.com/ChrisLove/status/906680788250497024", "author_link": "https://twitter.com/ChrisLove", "published": "2017-09-10T00:48:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "How to use the #JMeter Regular Expression Extractor https://t.co/0TWv7dazhi #loadtesting #performance via @octoperf", "author_name": "Alexander Podelko", "source_type": "twitter", "link": "https://twitter.com/apodelko/status/906680480749309952", "author_link": "https://twitter.com/apodelko", "published": "2017-09-10T00:47:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 1}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @ClimateSignals: New study: #HurricaneHarvey delivered widespread \"25,000-year\" rains &amp; isolated \"500,000-year\" rains. (not a typo!!) ht‚Ä¶", "author_name": "Jason Grigsby, ‚òÅ4", "source_type": "twitter", "link": "https://twitter.com/grigs/status/906675512352768000", "author_link": "https://twitter.com/grigs", "published": "2017-09-10T00:27:00", "source_title": "Twitter", "share_count": 729, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "^ this is fine. https://t.co/pBKCddySi3 https://t.co/FUEi5TBsXS", "author_name": "Una Kravets in üá™üá™", "source_type": "twitter", "link": "https://twitter.com/Una/status/906674445972131840", "author_link": "https://twitter.com/Una", "published": "2017-09-10T00:23:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 10}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "^ *if* they ever end https://t.co/I4phSrOhKo", "author_name": "Una Kravets in üá™üá™", "source_type": "twitter", "link": "https://twitter.com/Una/status/906673687339913216", "author_link": "https://twitter.com/Una", "published": "2017-09-10T00:20:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 3}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "I have no time to argue about tech when THIS is happening in the world right now. Jfc üò± we need to help each other‚Ä¶ https://t.co/xXtgoN27As", "author_name": "Una Kravets in üá™üá™", "source_type": "twitter", "link": "https://twitter.com/Una/status/906672573710323712", "author_link": "https://twitter.com/Una", "published": "2017-09-10T00:16:00", "source_title": "Twitter", "share_count": 1, "favorite_count": 15}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Worried about friends who haven't posted yet :( https://t.co/YW5to8em0U", "author_name": "Nicole Sullivan", "source_type": "twitter", "link": "https://twitter.com/stubbornella/status/906671166567231489", "author_link": "https://twitter.com/stubbornella", "published": "2017-09-10T00:10:00", "source_title": "Twitter", "share_count": 1, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "My 2 year old keeps saying \"Alexa turn off\" to the washing machine and dishwasher. We don't have Alexa.", "author_name": "Nicole Sullivan", "source_type": "twitter", "link": "https://twitter.com/stubbornella/status/906661428718837760", "author_link": "https://twitter.com/stubbornella", "published": "2017-09-09T23:31:00", "source_title": "Twitter", "share_count": 5, "favorite_count": 58}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "üçé  ‚ÄúMy kids have access to awesome things that, as a district, we could never afford\" https://t.co/yIA9J0Satg (@nytimes)", "author_name": "Pocket", "source_type": "twitter", "link": "https://twitter.com/Pocket/status/906659736363388933", "author_link": "https://twitter.com/Pocket", "published": "2017-09-09T23:25:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 5}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @alecperkins: All websites should have a lite version. Then make it their main version. https://t.co/ScV4r3Gcru", "author_name": "Una Kravets in üá™üá™", "source_type": "twitter", "link": "https://twitter.com/Una/status/906658461500547072", "author_link": "https://twitter.com/Una", "published": "2017-09-09T23:19:00", "source_title": "Twitter", "share_count": 17, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @brianklaas: This should be replicated nationwide. Paper ballots are far superior for election security. Machines with no paper trail ar‚Ä¶", "author_name": "Nicole Sullivan", "source_type": "twitter", "link": "https://twitter.com/stubbornella/status/906657336290185216", "author_link": "https://twitter.com/stubbornella", "published": "2017-09-09T23:15:00", "source_title": "Twitter", "share_count": 7791, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @LeaVerou: Curious that none of the prominent dev women I know are a @GoogleDevExpert. E.g. @stubbornella @Una @anatudor. Classic Google‚Ä¶", "author_name": "Nicole Sullivan", "source_type": "twitter", "link": "https://twitter.com/stubbornella/status/906646935854968832", "author_link": "https://twitter.com/stubbornella", "published": "2017-09-09T22:34:00", "source_title": "Twitter", "share_count": 4, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "If thee seeketh to buildeth the most wondrous programeth, seeketh nay further, thy answer beest Fortran‚Ä¶ https://t.co/OxXiFqzLZf", "author_name": "DigitalOcean", "source_type": "twitter", "link": "https://twitter.com/digitalocean/status/906638057922809856", "author_link": "https://twitter.com/digitalocean", "published": "2017-09-09T21:58:00", "source_title": "Twitter", "share_count": 16, "favorite_count": 44}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Elephpants at #pnwphp17 https://t.co/PUsUzrk1lP", "author_name": "Chris Heilmann", "source_type": "twitter", "link": "https://twitter.com/codepo8/status/906634621164462080", "author_link": "https://twitter.com/codepo8", "published": "2017-09-09T21:45:00", "source_title": "Twitter", "share_count": 1, "favorite_count": 4}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "There is a dog here. A happy one. Who wants cuddles. https://t.co/lXApAlWuI7", "author_name": "Chris Heilmann", "source_type": "twitter", "link": "https://twitter.com/codepo8/status/906634299373264897", "author_link": "https://twitter.com/codepo8", "published": "2017-09-09T21:43:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 4}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @HenrikJoreteg: In this post, I basically lay out my entire argument for the Web and building PWAs:\n\nhttps://t.co/2aLy0fkb0g", "author_name": "Addy Osmani", "source_type": "twitter", "link": "https://twitter.com/addyosmani/status/906634022142361600", "author_link": "https://twitter.com/addyosmani", "published": "2017-09-09T21:42:00", "source_title": "Twitter", "share_count": 102, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Not the best placement. https://t.co/Q4K5BtBOSk", "author_name": "Chris Heilmann", "source_type": "twitter", "link": "https://twitter.com/codepo8/status/906633654524198913", "author_link": "https://twitter.com/codepo8", "published": "2017-09-09T21:41:00", "source_title": "Twitter", "share_count": 4, "favorite_count": 16}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "TIL: Github has RSS feeds for releases - this is WebPageTest‚Äôs https://t.co/xtOVSPEBoB \\o/", "author_name": "Andy Davies", "source_type": "twitter", "link": "https://twitter.com/AndyDavies/status/906630894294851590", "author_link": "https://twitter.com/AndyDavies", "published": "2017-09-09T21:30:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 6}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @artcodeclub: And remember: Creative Coders of ‚ú® all skill levels ‚ú® are welcome to join the club! No commitments, just fun! üíªüñåüé® https://‚Ä¶", "author_name": "Chris Coyier", "source_type": "twitter", "link": "https://twitter.com/chriscoyier/status/906626446034169856", "author_link": "https://twitter.com/chriscoyier", "published": "2017-09-09T21:12:00", "source_title": "Twitter", "share_count": 8, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "Adding a new built-in function called breakpoint() which enters a Python debugger at the point of the call: https://t.co/ilDXc784mm", "author_name": "Python Software", "source_type": "twitter", "link": "https://twitter.com/ThePSF/status/906623261240434688", "author_link": "https://twitter.com/ThePSF", "published": "2017-09-09T21:00:00", "source_title": "Twitter", "share_count": 96, "favorite_count": 207}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Do you have 5 minutes? Participate in the short 2018 #DevOps Survey to learn more about your industry: https://t.co/8ROjQFQMt4", "author_name": "O'Reilly Velocity", "source_type": "twitter", "link": "https://twitter.com/velocityconf/status/906613202968080385", "author_link": "https://twitter.com/velocityconf", "published": "2017-09-09T20:20:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "I‚Äôm grateful we could be with our family for this birthday, and devastated not to have been with G when he died. (3/3)", "author_name": "Zeldman", "source_type": "twitter", "link": "https://twitter.com/zeldman/status/906610783475421186", "author_link": "https://twitter.com/zeldman", "published": "2017-09-09T20:10:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 11}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "who was watching him for us. We were in Pittsburgh, celebrating my dear father‚Äôs 90th birthday. (2/3)", "author_name": "Zeldman", "source_type": "twitter", "link": "https://twitter.com/zeldman/status/906610782481330176", "author_link": "https://twitter.com/zeldman", "published": "2017-09-09T20:10:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 8}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "This morning, after a month-long battle with cancer, our dear cat Giovanni passed away in New York, in the arms of our friend Skylar, (1/3)", "author_name": "Zeldman", "source_type": "twitter", "link": "https://twitter.com/zeldman/status/906610781223047169", "author_link": "https://twitter.com/zeldman", "published": "2017-09-09T20:10:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 22}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "Get started with a @Djangoproject environment quickly by using our preconfigured Django 1-click Image. Learn more:‚Ä¶ https://t.co/WxiUxCH9e7", "author_name": "DigitalOcean", "source_type": "twitter", "link": "https://twitter.com/digitalocean/status/906597838599139330", "author_link": "https://twitter.com/digitalocean", "published": "2017-09-09T19:19:00", "source_title": "Twitter", "share_count": 5, "favorite_count": 11}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": ".@bryanl  discusses #OpenTracing and the skills needed for successful tracing. https://t.co/Xd5OpiJe5u #5Q #VelocityConf", "author_name": "O'Reilly Velocity", "source_type": "twitter", "link": "https://twitter.com/velocityconf/status/906596837620142081", "author_link": "https://twitter.com/velocityconf", "published": "2017-09-09T19:15:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 2}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "üîå  ICYMI: \"There are hundreds of communities across the US that are essentially internet deserts\" https://t.co/aumUqk4jfA (@Motherboard)", "author_name": "Pocket", "source_type": "twitter", "link": "https://twitter.com/Pocket/status/906596317396439041", "author_link": "https://twitter.com/Pocket", "published": "2017-09-09T19:13:00", "source_title": "Twitter", "share_count": 1, "favorite_count": 4}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "PyTexas CFP closes Oct 4: https://t.co/Vn1nGSgnPL. Conference is Nov 18-19. @pytexas", "author_name": "Python Software", "source_type": "twitter", "link": "https://twitter.com/ThePSF/status/906593072179531776", "author_link": "https://twitter.com/ThePSF", "published": "2017-09-09T19:00:00", "source_title": "Twitter", "share_count": 7, "favorite_count": 15}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @Kris__Nova: My favorite thing ever is when @listonb is like \"nah I just look for people with sweet tech chops.. they just all happen to‚Ä¶", "author_name": "Bridget Kromhout", "source_type": "twitter", "link": "https://twitter.com/bridgetkromhout/status/906591966636453888", "author_link": "https://twitter.com/bridgetkromhout", "published": "2017-09-09T18:55:00", "source_title": "Twitter", "share_count": 4, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "@theRoostStand @Logitech @Apple ^ This is also my desk setup at home except I keep a heavier/better mouse in Brooklyn", "author_name": "Una Kravets in üá™üá™", "source_type": "twitter", "link": "https://twitter.com/Una/status/906591591074353153", "author_link": "https://twitter.com/Una", "published": "2017-09-09T18:54:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 4}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Travel desk setup:\n\n- Stand - @theRoostStand - $75\n- Mouse - @Logitech M510 - $20\n- Keyboard: @Apple Magic Keyboard‚Ä¶ https://t.co/TI2IeeUltM", "author_name": "Una Kravets in üá™üá™", "source_type": "twitter", "link": "https://twitter.com/Una/status/906591177255899136", "author_link": "https://twitter.com/Una", "published": "2017-09-09T18:52:00", "source_title": "Twitter", "share_count": 3, "favorite_count": 32}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "RT @left_pad: Ask the @babeljs team about maintaining one of the largest JavaScript projects without a full time team, TC39, etc https://t.‚Ä¶", "author_name": "Babel", "source_type": "twitter", "link": "https://twitter.com/babeljs/status/906590301426524160", "author_link": "https://twitter.com/babeljs", "published": "2017-09-09T18:49:00", "source_title": "Twitter", "share_count": 34, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "For anyone out there curious about how Lighthouse is integrated into DevTools... https://t.co/1ghgD4r0Ch", "author_name": "Chrome DevTools", "source_type": "twitter", "link": "https://twitter.com/ChromeDevTools/status/906589150005960704", "author_link": "https://twitter.com/ChromeDevTools", "published": "2017-09-09T18:44:00", "source_title": "Twitter", "share_count": 5, "favorite_count": 28}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @taravancil: I made a peer-to-peer gist alternative with Dat! (@dat_project)\n\nTry it out in @BeakerBrowser\n\nhttps://t.co/HSAqTsnOZx http‚Ä¶", "author_name": "Chris Coyier", "source_type": "twitter", "link": "https://twitter.com/chriscoyier/status/906587825780383744", "author_link": "https://twitter.com/chriscoyier", "published": "2017-09-09T18:39:00", "source_title": "Twitter", "share_count": 103, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @archilllect: https://t.co/1aTFyJH1CU", "author_name": "Matt Shull", "source_type": "twitter", "link": "https://twitter.com/TheMattShull/status/906585355364831232", "author_link": "https://twitter.com/TheMattShull", "published": "2017-09-09T18:29:00", "source_title": "Twitter", "share_count": 147, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @ljoywilliams: Seriously hackers, y'all gotta do better. I don't need leaks from HBO, I need my student loan balance reduced to $12", "author_name": "Matt Shull", "source_type": "twitter", "link": "https://twitter.com/TheMattShull/status/906584823111864321", "author_link": "https://twitter.com/TheMattShull", "published": "2017-09-09T18:27:00", "source_title": "Twitter", "share_count": 17417, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "Meet our New England team at our 1st-ever tech social event in the Cambridge office on 9/19! All local devs welcome‚Ä¶ https://t.co/dLXCSmle4U", "author_name": "DigitalOcean", "source_type": "twitter", "link": "https://twitter.com/digitalocean/status/906567337993818112", "author_link": "https://twitter.com/digitalocean", "published": "2017-09-09T17:17:00", "source_title": "Twitter", "share_count": 5, "favorite_count": 7}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "RT @jitendravyas: If you want something @SassCSS can do then I would suggest using Sass. Use @PostCSS for things which Sass can't do #css #‚Ä¶", "author_name": "PostCSS", "source_type": "twitter", "link": "https://twitter.com/PostCSS/status/906566832856948738", "author_link": "https://twitter.com/PostCSS", "published": "2017-09-09T17:15:00", "source_title": "Twitter", "share_count": 1, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "\"Goby is an object-oriented interpreter language deeply inspired by Ruby\": https://t.co/y8cXUz2yrm -- neat-o! there goes the weekend..", "author_name": "Ilya Grigorik", "source_type": "twitter", "link": "https://twitter.com/igrigorik/status/906563350745669632", "author_link": "https://twitter.com/igrigorik", "published": "2017-09-09T17:02:00", "source_title": "Twitter", "share_count": 29, "favorite_count": 70}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Understand what #Terraform does &amp; how it compares to other infrastructure as code tools w/ @brikis98 https://t.co/6W0EHiBFPW", "author_name": "O'Reilly Velocity", "source_type": "twitter", "link": "https://twitter.com/velocityconf/status/906563030955069440", "author_link": "https://twitter.com/velocityconf", "published": "2017-09-09T17:00:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 1}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "Documentation for the code behind https://t.co/nt5elSviyW: https://t.co/aHgsJ7jriN", "author_name": "Python Software", "source_type": "twitter", "link": "https://twitter.com/ThePSF/status/906562885228417025", "author_link": "https://twitter.com/ThePSF", "published": "2017-09-09T17:00:00", "source_title": "Twitter", "share_count": 13, "favorite_count": 35}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "‚ÄúOk Google, find the nearest gas station.‚Äù With #AndroidAuto, use voice actions to keep your eyes on the road and h‚Ä¶ https://t.co/padUYQLkOH", "author_name": "Android", "source_type": "twitter", "link": "https://twitter.com/Android/status/906555326127902720", "author_link": "https://twitter.com/Android", "published": "2017-09-09T16:30:00", "source_title": "Twitter", "share_count": 117, "favorite_count": 624}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "üèÜ  Popular this week: \"Real success happens when we focus on one thing at a time\" https://t.co/QqTmoNDIGA (@DariusForoux)", "author_name": "Pocket", "source_type": "twitter", "link": "https://twitter.com/Pocket/status/906554037767720961", "author_link": "https://twitter.com/Pocket", "published": "2017-09-09T16:25:00", "source_title": "Twitter", "share_count": 127, "favorite_count": 188}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Not sure if #VelocityConf in NY is right for you? Here are some video highlights from last year: https://t.co/Edm488tlfq", "author_name": "O'Reilly Velocity", "source_type": "twitter", "link": "https://twitter.com/velocityconf/status/906517801736790016", "author_link": "https://twitter.com/velocityconf", "published": "2017-09-09T14:01:00", "source_title": "Twitter", "share_count": 1, "favorite_count": 1}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "Sammy stickers, Sammy stress balls &amp; more...\nAlways available on our online store (and always at cost) https://t.co/YHstbyB3xJ", "author_name": "DigitalOcean", "source_type": "twitter", "link": "https://twitter.com/digitalocean/status/906505624380477440", "author_link": "https://twitter.com/digitalocean", "published": "2017-09-09T13:12:00", "source_title": "Twitter", "share_count": 19, "favorite_count": 119}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "What type of content do you want to see from @ThePSF? We value your opinion and feedback.", "author_name": "Python Software", "source_type": "twitter", "link": "https://twitter.com/ThePSF/status/906472266472542209", "author_link": "https://twitter.com/ThePSF", "published": "2017-09-09T11:00:00", "source_title": "Twitter", "share_count": 8, "favorite_count": 23}, {"source_name": "Twitter", "description": "", "tags": "computer science,tech,twitter", "source_link": "https://twitter.com", "title": "RT @paulg: Rereading Hardy's _Mathematician's Apology_, slowly to make it last. Among the most inspiring books I know. https://t.co/9IgoYTO‚Ä¶", "author_name": "Kent Beck", "source_type": "twitter", "link": "https://twitter.com/KentBeck/status/906471312964677637", "author_link": "https://twitter.com/KentBeck", "published": "2017-09-09T10:56:00", "source_title": "Twitter", "share_count": 28, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "Newer, faster and smarter!‚ö°Ô∏è The new Opera Mini for iPhone update is here &amp; it comes with a revamped UI.üì±‚Ä¶ https://t.co/XjMIVgmZj3", "author_name": "Opera", "source_type": "twitter", "link": "https://twitter.com/opera/status/906464732667940865", "author_link": "https://twitter.com/opera", "published": "2017-09-09T10:30:00", "source_title": "Twitter", "share_count": 12, "favorite_count": 38}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "Have you seen @boltiot's $9 all-in-one IoT platform on Kickstarter? You can check it out here:‚Ä¶ https://t.co/eg5XSZJTz2", "author_name": "DigitalOcean", "source_type": "twitter", "link": "https://twitter.com/digitalocean/status/906459424855920640", "author_link": "https://twitter.com/digitalocean", "published": "2017-09-09T10:09:00", "source_title": "Twitter", "share_count": 18, "favorite_count": 38}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "RT @nkoc001: Learning @polymer and @materialdesign by google. Pretty cool stuff!", "author_name": "Polymer", "source_type": "twitter", "link": "https://twitter.com/polymer/status/906453758611255296", "author_link": "https://twitter.com/polymer", "published": "2017-09-09T09:46:00", "source_title": "Twitter", "share_count": 2, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Need to catch up on the latest in #WebOps &amp; #DevOps? Check out these resources from @OReillyMedia https://t.co/k180rAhOiG", "author_name": "O'Reilly Velocity", "source_type": "twitter", "link": "https://twitter.com/velocityconf/status/906442190053941248", "author_link": "https://twitter.com/velocityconf", "published": "2017-09-09T09:00:00", "source_title": "Twitter", "share_count": 1, "favorite_count": 4}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "Team Red Capers is building their project on our platform üëå They share their experience at 14:13 in this clip: https://t.co/dzL91rqgtS", "author_name": "DigitalOcean", "source_type": "twitter", "link": "https://twitter.com/digitalocean/status/906414139526000640", "author_link": "https://twitter.com/digitalocean", "published": "2017-09-09T07:09:00", "source_title": "Twitter", "share_count": 2, "favorite_count": 5}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @nikkimc: Join me at #VelocityConf Oct 1-4 in NYC. Register now and save 25% with the code: FRIEND thru 9/15. https://t.co/96dRpcYfRW", "author_name": "O'Reilly Velocity", "source_type": "twitter", "link": "https://twitter.com/velocityconf/status/906351401470586885", "author_link": "https://twitter.com/velocityconf", "published": "2017-09-09T02:59:00", "source_title": "Twitter", "share_count": 1, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "projects,tech,twitter", "source_link": "https://twitter.com", "title": "How to work with strings in ‚ô¶Ô∏è Ruby ‚ô¶Ô∏è by @bphogan https://t.co/FwpiJ8lIrk https://t.co/cJHAkd6tGT", "author_name": "DigitalOcean", "source_type": "twitter", "link": "https://twitter.com/digitalocean/status/906346433091178497", "author_link": "https://twitter.com/digitalocean", "published": "2017-09-09T02:40:00", "source_title": "Twitter", "share_count": 6, "favorite_count": 8}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @FluentConf: ‚ÄúThe women of @VelocityConf and @FluentConf‚Äù - @dparzych #FluentConf + #VelocityConf recap on @Medium https://t.co/Fhe8BwuN‚Ä¶", "author_name": "O'Reilly Velocity", "source_type": "twitter", "link": "https://twitter.com/velocityconf/status/906313658954694656", "author_link": "https://twitter.com/velocityconf", "published": "2017-09-09T00:29:00", "source_title": "Twitter", "share_count": 2, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @sashaperigo: Excited to announce my intern project is launching in @GoogleChrome M63! New error pages to help users struggling with MIT‚Ä¶", "author_name": "Ilya Grigorik", "source_type": "twitter", "link": "https://twitter.com/igrigorik/status/906272043087171584", "author_link": "https://twitter.com/igrigorik", "published": "2017-09-08T21:44:00", "source_title": "Twitter", "share_count": 240, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Learn exactly what a 12-factor app is, and discover how to evaluate your existing applications in this book‚Ä¶ https://t.co/w0IHqn3WHn", "author_name": "O'Reilly Velocity", "source_type": "twitter", "link": "https://twitter.com/velocityconf/status/906249581511532545", "author_link": "https://twitter.com/velocityconf", "published": "2017-09-08T20:15:00", "source_title": "Twitter", "share_count": 1, "favorite_count": 2}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @robfromboulder: Come hear me speak at #VelocityConf Oct 1-4 in NYC. Register now &amp; save 25% w/ my code: Dickinson20 thru 9/15. https://‚Ä¶", "author_name": "O'Reilly Velocity", "source_type": "twitter", "link": "https://twitter.com/velocityconf/status/906237735014465536", "author_link": "https://twitter.com/velocityconf", "published": "2017-09-08T19:28:00", "source_title": "Twitter", "share_count": 1, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @ZhenzhongXu: Building a distributed system is hard. However, the tradeoff decisions we make can be very philosophical, and very fun. ht‚Ä¶", "author_name": "O'Reilly Velocity", "source_type": "twitter", "link": "https://twitter.com/velocityconf/status/906214377996468224", "author_link": "https://twitter.com/velocityconf", "published": "2017-09-08T17:55:00", "source_title": "Twitter", "share_count": 2, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "security.txt to allow websites to define security policies: https://t.co/lpADp0MgJV - neat idea! https://t.co/Ynx12CDvjN", "author_name": "Ilya Grigorik", "source_type": "twitter", "link": "https://twitter.com/igrigorik/status/906206753389289472", "author_link": "https://twitter.com/igrigorik", "published": "2017-09-08T17:25:00", "source_title": "Twitter", "share_count": 60, "favorite_count": 146}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Discover challenges &amp; lessons learned in leading teams in complex technical environments at #VelocityConf NY https://t.co/8HmZjnNApD", "author_name": "O'Reilly Velocity", "source_type": "twitter", "link": "https://twitter.com/velocityconf/status/906204267144413184", "author_link": "https://twitter.com/velocityconf", "published": "2017-09-08T17:15:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 1}, {"source_name": "SearchEngines", "description": "–ò–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø–∞–¥–Ω—ã–π SEO-—ç–∫—Å–ø–µ—Ä—Ç –ì–ª–µ–Ω–Ω –ì–µ–π–±¬†–ø–æ–¥–µ–ª–∏–ª—Å—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏ –Ω–æ–≤—ã—Ö –æ—Ç—á—ë—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –±–µ—Ç–∞-–≤–µ—Ä—Å–∏–∏ Search Console. –û–¥–Ω–∏–º –∏–∑ —Å–∞–º—ã—Ö –≤–æ–ª–Ω—É—é—â–∏—Ö –¥–ª—è –≤–µ–±–º–∞—Å—Ç–µ—Ä–æ–≤ —Å—Ç–∞–ª–æ –ø–æ—è–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ ¬´Indexed, low interest¬ª –≤ –æ—Ç—á—ë—Ç–µ Index Coverage Status. –í –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Twitter –∏–Ω–∂–µ–Ω–µ—Ä Google –ü—å–µ—Ä –§–∞—Ä –Ω–∞–ø–∏—Å–∞–ª, —á—Ç–æ –ø–µ—Ä–µ–∂–∏–≤–∞—Ç—å –ø–æ –ø–æ–≤–æ–¥—É —ç—Ç–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–µ —Å—Ç–æ–∏—Ç, –∞ —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ –æ–Ω [&#8230;]", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –Ω–æ–≤—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ –≤ Search Console", "author_name": "–ê–Ω–Ω–∞ –ë–æ–Ω–¥–∞—Ä—å", "source_type": "rss", "link": "https://www.searchengines.ru/screens-console.html", "published": "2017-09-08T16:43:00", "source_title": "Searchengines.ru"}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": ".@bryanl discusses #OpenTracing and the skills needed for successful tracing.  https://t.co/Xd5OpiJe5u #5Q #VelocityConf", "author_name": "O'Reilly Velocity", "source_type": "twitter", "link": "https://twitter.com/velocityconf/status/906185775812931584", "author_link": "https://twitter.com/velocityconf", "published": "2017-09-08T16:01:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "RT @stilkov: Guess what @skamille and I just did https://t.co/uysUcLwJkD", "author_name": "O'Reilly Velocity", "source_type": "twitter", "link": "https://twitter.com/velocityconf/status/906183728119943169", "author_link": "https://twitter.com/velocityconf", "published": "2017-09-08T15:53:00", "source_title": "Twitter", "share_count": 4, "favorite_count": 0}, {"source_name": "SearchEngines", "description": "–Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∞ —É–º–µ–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü: AMP-–≤–µ—Ä—Å–∏–∏ –∏ –¢—É—Ä–±–æ—Å—Ç—Ä–∞–Ω–∏—Ü—ã. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–∏—Å–æ–º –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Facebook Instant Articl–µs, —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º—ã—Ö ¬´–º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π¬ª. –û–± —ç—Ç–æ–º —Å–µ–≥–æ–¥–Ω—è, –≤–æ –≤—Ä–µ–º—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ ¬´–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ 2017¬ª, —Å–æ–æ–±—â–∏–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ö—É–ª–∞—á–∏–∫–æ–≤–∞. –ü–æ–¥–µ—Ä–∂–∫–∞ Instant Articl–µs –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ú–µ—Ç—Ä–∏–∫—É –Ω–∞ —ç—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∞ –∑–∞—Ç–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å –∏ [&#8230;]", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "–Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É Facebook Instant Articl–µs", "author_name": "–û–∫—Å–∞–Ω–∞ –ú–∞–º—á—É–µ–≤–∞", "source_type": "rss", "link": "https://www.searchengines.ru/yandeks-metrika-instant-articles.html", "published": "2017-09-08T15:47:00", "source_title": "Searchengines.ru"}, {"source_name": "MozillaHacks", "description": "One of the biggest challenges in developing immersive WebVR experiences today is that immersion takes you away from your developer tools. With Meta's new augmented reality headset, you can work on and experience WebVR content today without ever taking a headset on or off, or connecting developer tools to a remote device.", "tags": "mozilla,services,tech", "text": "<p>One of the biggest challenges in developing immersive WebVR experiences today is that immersion takes you away from your developer tools. With Meta&#8217;s new augmented reality headset, you can work on and experience WebVR content today without ever taking a headset on or off, or connecting developer tools to a remote device. Our friends at Meta have just released their <a href=\"https://buy.metavision.com/?utm_source=mozilla&amp;utm_medium=blog&amp;utm_content=ffwebvr\">Meta 2 developer kit</a> and it works right out of the box with the latest 64-bit <a href=\"https://www.mozilla.org/en-US/firefox/all/\">Firefox for Windows</a>.</p>\n<p>The Meta 2 is a tethered augmented reality headset with <a href=\"https://en.wikipedia.org/wiki/Six_degrees_of_freedom\">six degrees of freedom</a> (6DOF). Unlike existing 3D mobile experiences like Google Cardboard, the Meta 2 can track both your orientation (three degrees of freedom) and your position (another three degrees). This means that not only can you look at 3D content, you can also move towards and around it. (3+3 = 6DOF).</p>\n<p></p>\n<p>In the video above, talented Mozilla engineer <a href=\"https://twitter.com/kearwoodgilbert\">Kip Gilbert</a> is editing the <a href=\"https://aframe.io/examples/showcase/snowglobe/\">NYC Snowglobe demo</a> with the A-Frame inspector on his desktop. After he edits the project, he just lifts his head up to see the rendered 3D scene in the air in front of him. ¬†Haven&#8217;t tried <a href=\"https://aframe.io/\">A-Frame</a> yet? It&#8217;s the easiest way for web developers to build interactive 3D apps on the web. Best of all, Kip didn‚Äôt have to rewrite the snowglobe demo to support AR. It just works! Meta‚Äôs transparent visor combined with Firefox enables this kind of seamless 3D development.</p>\n<p>The Meta 2 is stereoscopic and also has a 90-degree field of view, creating a more immersive experience on par with a traditional VR headset. However, because of the see-through visor, you are not isolated from the real world. The Meta 2 attaches to your existing desktop or laptop computer, letting you work at your desk without obstructing your view, then just look up to see virtual windows and objects floating around you.</p>\n<p>In this next video, Kip is browsing a <a href=\"https://sketchfab.com/\">Sketchfab</a> gallery. When he sees a model he likes he can simply look up to see the model live in his office. Thanks to the translucent visor optics, anything colored black in the original 3D scene automatically becomes transparent in the Meta 2 headset.</p>\n<p></p>\n<p>Meta 2 is designed for engineers and other professionals who need to both work at a computer and interact with high performance visualizations like building schematics or a detailed 3D model of a new airplane. Because the Meta 2 is tethered it can use the powerful GPU in your desktop or laptop computer to render high definition 3D content.</p>\n<p>Currently, the Meta team has released <a href=\"https://blog.metavision.com/the-meta-2-now-supports-rendering-of-steam-vr-applications\">Steam VR support</a> and is working to add support for hands as controllers. We will be working with the Meta engineers to transform their native hand gestures into Javascript events that you can interact with in code. This will let you build fully interactive high performance 3D apps right from the comfort of your desktop browser.  We are also using this platform to help us <a href=\"https://github.com/mozilla/webxr-api\">develop and test proposed extensions for AR devices</a> to the existing WebVR specification.</p>\n<p>You can get your own Meta 2 developer kit and headset on <a href=\"https://buy.metavision.com/?utm_source=mozilla&amp;utm_medium=blog&amp;utm_content=ffwebvr\">the Meta  website</a>. WebVR is supported in the <a href=\"https://hacks.mozilla.org/2017/08/webvr-for-all-windows-users/\">latest release version</a> of FireFox for Windows, with other platforms coming soon.</p>", "title": "Meta 2 AR Headset with Firefox", "author_name": "Josh Marinacci", "source_type": "rss", "link": "https://hacks.mozilla.org/2017/09/meta-2-ar-headset-with-firefox/", "source_link": "https://hacks.mozilla.org", "source_title": "Mozilla Hacks ‚Äì the Web developer blog", "published": "2017-09-08T15:00:00"}, {"source_name": "SearchEngines", "description": "–°–µ–≥–æ–¥–Ω—è, –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ ¬´–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ 2017¬ª, ADFOX –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª –µ—â–µ –æ–¥–∏–Ω –Ω–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ‚Äî¬†–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞. –°–µ—Ä–≤–∏—Å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–∫—Ä—É—Ç–∫—É —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏, —É—á–∏—Ç—ã–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–ª–æ—â–∞–¥–∫–µ. –ê –∑–∞—Ç–µ–º –≤—ã–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç:¬† –ö–∞–∫ —Å–æ–æ–±—â–∏–ª –ù–∏–∫–∏—Ç–∞ –ü–∞—Å—ã–Ω–∫–æ–≤, —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –º–µ–¥–∏–π–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ø–Ω–¥–µ–∫—Å–∞, –ø—Ä–æ–≥–Ω–æ–∑–∞—Ç–æ—Ä –ø–æ–º–æ–∂–µ—Ç —É—Å–∫–æ—Ä–∏—Ç—å –∏ —É–ø—Ä–æ—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –ø—Ä—è–º—ã–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏: –æ—Ü–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏, [&#8230;]", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "ADFOX –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞—Ç–æ—Ä —Ç—Ä–∞—Ñ–∏–∫–∞", "author_name": "–û–∫—Å–∞–Ω–∞ –ú–∞–º—á—É–µ–≤–∞", "source_type": "rss", "link": "https://www.searchengines.ru/adfox-prognozator-trafika.html", "published": "2017-09-08T14:53:00", "source_title": "Searchengines.ru"}, {"source_name": "SearchEngines", "description": "–†–µ–π—Ç–∏–Ω–≥ –†—É–Ω–µ—Ç–∞ –æ–±—ä—è–≤–∏–ª –æ —Å—Ç–∞—Ä—Ç–µ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å—Ç—É–¥–∏–π. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–ª–∏—Ç—Å—è –¥–æ 21 —Å–µ–Ω—Ç—è–±—Ä—è. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã 27 —Å–µ–Ω—Ç—è–±—Ä—è. –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã –ø—Ä–∏–≥–ª–∞—à–∞—é—Ç –∫ —É—á–∞—Å—Ç–∏—é –≤—Å–µ —Å—Ç—É–¥–∏–∏, –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∏ –≥–æ–¥–∞ –ø–æ–ª—É—á–∏–≤—à–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –Ω–∞–≥—Ä–∞–¥—É –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–Ω–∫—É—Ä—Å–∞—Ö —Å–∞–π—Ç–æ–≤: ¬´–†–µ–π—Ç–∏–Ω–≥ –†—É–Ω–µ—Ç–∞¬ª, ¬´–ó–æ–ª–æ—Ç–æ–π —Å–∞–π—Ç¬ª, FWA, Awwwards, CSS Design Awards –∏ Webby Awards. –¢–∞–∫–∂–µ –±—É–¥—É—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è: Honorable [&#8230;]", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "–†–µ–π—Ç–∏–Ω–≥ –†—É–Ω–µ—Ç–∞ –≤–Ω–æ–≤—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Å–∞–º—ã–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –≤–µ–±-—Å—Ç—É–¥–∏–∏", "author_name": "–û–∫—Å–∞–Ω–∞ –ú–∞–º—á—É–µ–≤–∞", "source_type": "rss", "link": "https://www.searchengines.ru/rejting-runeta-opredelit-kreativ.html", "published": "2017-09-08T14:15:00", "source_title": "Searchengines.ru"}, {"source_name": "SearchEngines", "description": "–í–ö–æ–Ω—Ç–∞–∫—Ç–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–µ–¥–∏–∑–∞–π–Ω —Å–≤–æ–∏—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –û–± —ç—Ç–æ–º —Å–æ–æ–±—â–∞–µ—Ç—Å—è –≤ –±–ª–æ–≥–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ ¬´–•–∞–±—Ä–∞—Ö–∞–±—Ä–µ¬ª, –≥–¥–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –∫–æ–Ω—Ü–µ–ø—Ç—ã –±—É–¥—É—â–µ–≥–æ —Ä–µ–¥–∏–∑–∞–π–Ω–∞. –í–º–µ—Å—Ç–æ –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä—É—é—Ç —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ —Å–æ—Ü—Å–µ—Ç–∏ –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ç–∞–±–±–∞—Ä–∞. –°–∞–º –ø–æ —Å–µ–±–µ —Ç–∞–±–±–∞—Ä ‚Äî –Ω–∏ —Ä–∞–∑—É –Ω–µ –Ω–æ–≤–∏–Ω–∫–∞. –°–µ–π—á–∞—Å —ç—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ Android –∏ iOS. [&#8230;]", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "–í–ö–æ–Ω—Ç–∞–∫—Ç–µ –≥–æ—Ç–æ–≤–∏—Ç —Ä–µ–¥–∏–∑–∞–π–Ω –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π", "author_name": "–û–∫—Å–∞–Ω–∞ –ú–∞–º—á—É–µ–≤–∞", "source_type": "rss", "link": "https://www.searchengines.ru/vkontakte-gotovit-redizajn-prilozhenij.html", "published": "2017-09-08T13:26:00", "source_title": "Searchengines.ru"}, {"source_name": "Twitter", "description": "", "tags": "computer science,tech,twitter", "source_link": "https://twitter.com", "title": "\"Perfection teaches you nothing\" https://t.co/L4eiQYmAXh", "author_name": "Kent Beck", "source_type": "twitter", "link": "https://twitter.com/KentBeck/status/906146236125908992", "author_link": "https://twitter.com/KentBeck", "published": "2017-09-08T13:24:00", "source_title": "Twitter", "share_count": 41, "favorite_count": 106}, {"source_name": "Twitter", "description": "", "tags": "computer science,tech,twitter", "source_link": "https://twitter.com", "title": "RT @jgoldfein: No product roadmap survives contact with the customer!", "author_name": "Kent Beck", "source_type": "twitter", "link": "https://twitter.com/KentBeck/status/906145791315759105", "author_link": "https://twitter.com/KentBeck", "published": "2017-09-08T13:22:00", "source_title": "Twitter", "share_count": 99, "favorite_count": 0}, {"source_name": "SearchEngines", "description": "–£ –†–°–Ø –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç ‚Äì –º–µ–¥–∏–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–∞ –±–∞–∑–µ ADFOX, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å —Ç—Ä–∞—Ñ–∏–∫ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ Android –∏ iOS, –ø–æ–¥–∫–ª—é—á–∞—è –ø—Ä—è–º—ã—Ö —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π, –ø–æ–¥–∫–ª—é—á–∞—è –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—é –†–°–Ø –∏ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã. –ö–∞–∫ —Å–µ–≥–æ–¥–Ω—è, –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ ¬´–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ 2017¬ª, —Å–æ–æ–±—â–∏–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –†–µ–∫–ª–∞–º–Ω–æ–π —Å–µ—Ç–∏ –Ø–Ω–¥–µ–∫—Å–∞ –ú–∞—Ä–∏–Ω–∞ –ú–µ—á–∫–æ–≤–∞, –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–ª–æ—â–∞–¥–∫–∞–º –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Ç—Ä–∞—Ñ–∏–∫ –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–π —Ü–µ–Ω–µ. –ù–µ [&#8230;]", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "–†–µ–∫–ª–∞–º–Ω–∞—è —Å–µ—Ç—å –Ø–Ω–¥–µ–∫—Å–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–µ–¥–∏–∞—Ü–∏–æ–Ω–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –Ω–∞ –±–∞–∑–µ ADFOX", "author_name": "–û–∫—Å–∞–Ω–∞ –ú–∞–º—á—É–µ–≤–∞", "source_type": "rss", "link": "https://www.searchengines.ru/rsa-zapuskaet-mediatsionnuyu-platformu.html", "published": "2017-09-08T12:12:00", "source_title": "Searchengines.ru"}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "[Watch] 2016 highlights from #VelocityConf EU. Hope to see you this year, Oct 17-20 in London! https://t.co/9rO0K2NK2a", "author_name": "O'Reilly Velocity", "source_type": "twitter", "link": "https://twitter.com/velocityconf/status/906125208486121472", "author_link": "https://twitter.com/velocityconf", "published": "2017-09-08T12:00:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 0}, {"source_name": "SearchEngines", "description": "–°–µ—Ä–≤–∏—Å —Ñ–æ—Ç–æ—à–µ—Ä–∏–Ω–≥–∞ Instagram –Ω–∞—á–∞–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ Stories –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ Canvas, –≤–ø–µ—Ä–≤—ã–µ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –≤ Facebook –≤ 2016 –≥–æ–¥—É. ¬´–ú—ã –Ω–∞—á–∞–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Canvas —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –≤ Instagram Stories. –° –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∫–ª–∞–º—ã –≤ Stories, –º—ã –±—ã–ª–∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω—ã –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è–º. Canvas –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–ø–µ—á–∞—Ç–ª—è—é—â–∏–π –æ–ø—ã—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è, –ø–æ–º–æ–≥–∞—è –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞–º —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –≤–æ–≤–ª–µ–∫–∞—é—â–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏—Ö –±—Ä–µ–Ω–¥–æ–≤ –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤¬ª, [&#8230;]", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "Instagram —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ Canvas", "author_name": "–ê–Ω–Ω–∞ –ë–æ–Ω–¥–∞—Ä—å", "source_type": "rss", "link": "https://www.searchengines.ru/insta-canvas.html", "published": "2017-09-08T11:11:00", "source_title": "Searchengines.ru"}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "What constitutes great technical leadership and how you/your organization foster it? @skamille shares her insights: https://t.co/8AEEwL7Sgb", "author_name": "O'Reilly Velocity", "source_type": "twitter", "link": "https://twitter.com/velocityconf/status/906098558847340546", "author_link": "https://twitter.com/velocityconf", "published": "2017-09-08T10:15:00", "source_title": "Twitter", "share_count": 0, "favorite_count": 0}, {"source_name": "SearchEngines", "description": "–î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∞—è –Ø–Ω–¥–µ–∫—Å—É —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ ADFOX, –Ω–∞—á–∏–Ω–∞–µ—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ –æ–±—Ö–æ–¥—É Adblock. –û–± —ç—Ç–æ–º —Å–µ–≥–æ–¥–Ω—è, –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ ¬´–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ 2017¬ª, —Å–æ–æ–±—â–∏–ª –ù–∏–∫–∏—Ç–∞ –ü–∞—Å—ã–Ω–∫–æ–≤, —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –º–µ–¥–∏–π–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ø–Ω–¥–µ–∫—Å–∞. –í —Ä–∞–º–∫–∞—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ —Ä–µ–∫–ª–∞–º—ã. –≠—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –±–∞–Ω–Ω–µ—Ä–æ–≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤, –≥–¥–µ –Ω–µ—Ç –≤–∏–¥–µ–æ, –∑–≤—É–∫–∞ –∏ —Ä–∞—Å—Ö–ª–æ–ø—ã–≤–∞—é—â–∏—Ö—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤, [&#8230;]", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "ADFOX –Ω–∞—á–∏–Ω–∞–µ—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ –æ–±—Ö–æ–¥—É Adblock", "author_name": "–û–∫—Å–∞–Ω–∞ –ú–∞–º—á—É–µ–≤–∞", "source_type": "rss", "link": "https://www.searchengines.ru/adfox-nachinaet-obhod-adblock.html", "published": "2017-09-08T09:55:00", "source_title": "Searchengines.ru"}, {"source_name": "SearchEngines", "description": "–í —Å–∞–º–æ–º –±–ª–∏–∂–∞–π—à–µ–º –±—É–¥—É—â–µ–º –Ø–Ω–¥–µ–∫—Å –∑–∞–ø—É—Å—Ç–∏—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –±–ª–æ–∫–æ–≤. –û–± —ç—Ç–æ–º —Ä–∞—Å—Å–∫–∞–∑–∞–ª –†–æ–º–∞–Ω –ö–æ—Ö–∞–Ω–æ–≤—Å–∫–∏–π, —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ø–Ω–¥–µ–∫—Å–∞, –≤–æ –≤—Ä–µ–º—è –¥–æ–∫–ª–∞–¥–∞ –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ ¬´–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ 2017¬ª. –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–µ–∑ –æ—Å–æ–±–æ–≥–æ –∑–Ω–∞–Ω–∏—è html –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ –Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –±–ª–æ–∫–∏: –ü–æ —Å–ª–æ–≤–∞–º –†–æ–º–∞–Ω–∞, –Ω–æ–≤—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±—É–¥–µ—Ç –∞–¥—Ä–µ—Å–æ–≤–∞–Ω –ª–∏—à—å —Ç–æ–ø–æ–≤—ã–º –ø–∞–±–ª–∏—à–µ—Ä–∞–º: ¬´–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è [&#8230;]", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "–Ø–Ω–¥–µ–∫—Å –≥–æ—Ç–æ–≤–∏—Ç –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –±–ª–æ–∫–æ–≤", "author_name": "–û–∫—Å–∞–Ω–∞ –ú–∞–º—á—É–µ–≤–∞", "source_type": "rss", "link": "https://www.searchengines.ru/yandeks-gotovit-konstruktor-nativa.html", "published": "2017-09-08T09:05:00", "source_title": "Searchengines.ru"}, {"source_name": "SearchEngines", "description": "–ö–∞–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã Google –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–æ –≤–Ω–∏–º–∞–Ω–∏–µ, –æ—Ü–µ–Ω–∏–≤–∞—è –∫–∞—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü, –∏ –∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∏–∑–∫–æ–≥–æ –∏ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ? –≠—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã —Å—Ç–∞–ª–∏ —Ç–µ–º–æ–π –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –≤—ã–ø—É—Å–∫–∞ Whiteboard Friday –æ—Ç Moz.", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "–ö–∞–∫ Google –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∏–∑–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞", "author_name": "–ê–Ω–Ω–∞ –ë–æ–Ω–¥–∞—Ä—å", "source_type": "rss", "link": "https://www.searchengines.ru/google-low-quality.html", "published": "2017-09-08T08:35:00", "source_title": "Searchengines.ru"}, {"source_name": "SearchEngines", "description": "–° 28 –ø–æ 31 –∞–≤–≥—É—Å—Ç–∞ –¥–æ–ª—è –ø–æ–∏—Å–∫–∞ –Ø–Ω–¥–µ–∫—Å–∞ –Ω–∞ Android —Å–æ—Å—Ç–∞–≤–∏–ª–∞ 42,7%, Google ‚Äî 56%. –û–± —ç—Ç–æ–º —Å–æ–æ–±—â–∞–µ—Ç ¬´–ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç¬ª, —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å–∞ –Ø–Ω–¥–µ–∫—Å.–†–∞–¥–∞—Ä. –ì–æ–¥ –Ω–∞–∑–∞–¥ –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –ª–µ—Ç–∞ –¥–æ–ª—è –Ø–Ω–¥–µ–∫—Å–∞ –Ω–∞ Android —Å–æ—Å—Ç–∞–≤–ª—è–ª–∞ 38,2%, Google ‚Äî 60,1%. –†–æ—Å—Ç –¥–æ–ª–∏ –Ø–Ω–¥–µ–∫—Å–∞ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –∏ LiveInternet: –ø–æ –µ–≥–æ –¥–∞–Ω–Ω—ã–º, –¥–æ–ª—è Google –Ω–∞ Android-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –≤ –∞–≤–≥—É—Å—Ç–µ [&#8230;]", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "–Ø–Ω–¥–µ–∫—Å –Ω–∞—Ä–∞—â–∏–≤–∞–µ—Ç –¥–æ–ª—é –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø–æ–∏—Å–∫–µ", "author_name": "–û–∫—Å–∞–Ω–∞ –ú–∞–º—á—É–µ–≤–∞", "source_type": "rss", "link": "https://www.searchengines.ru/yandeks-narashhivaet-dolyu.html", "published": "2017-09-08T08:33:00", "source_title": "Searchengines.ru"}, {"source_name": "SearchEngines", "description": "Facebook –Ω–∞—á–∞–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Messenger —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—Å—Ç—Ä–µ—á, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É Tinder. –û–± —ç—Ç–æ–º —Å–æ–æ–±—â–∞–µ—Ç Motherboard. –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ –æ–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã—Ä–∞–∑—è—Ç —Ç–∞–∫—É—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å. –ù–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏–µ –≤–æ –º–Ω–æ–≥–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤—Å—Ç—Ä–µ—á Tinder. –û–¥–Ω–∞–∫–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ª—é–¥–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤. –¢–∞–∫, –∂—É—Ä–Ω–∞–ª–∏—Å—Ç—É Motherboard –ø—Ä–∏—à–ª–æ —Å–ª–µ–¥—É—é—â–µ–µ [&#8230;]", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "Facebook —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—Å—Ç—Ä–µ—á –ø–æ —Ç–∏–ø—É Tinder", "author_name": "–ê–Ω–Ω–∞ –ë–æ–Ω–¥–∞—Ä—å", "source_type": "rss", "link": "https://www.searchengines.ru/fb-tinder.html", "published": "2017-09-08T08:25:00", "source_title": "Searchengines.ru"}, {"source_name": "SearchEngines", "description": "Google —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π AdWords –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Google –ú–æ–π –±–∏–∑–Ω–µ—Å. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ –Ω–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏–µ –æ–±–ª–µ–≥—á–∏—Ç –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è–º –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –≤ –ø–æ–∏—Å–∫–µ. –ú–Ω–æ–≥–∏–µ –°–ú–ë –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ –∑–Ω–∞–∫–æ–º—ã —Å —Ä–∞–±–æ—Ç–æ–π —Å AdWords. –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –∑–∞–º–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ì–µ—Ä–º–∞–Ω–∏–∏. –í –ú–æ–π –±–∏–∑–Ω–µ—Å –ø–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ ¬´ADWORDS-KONTEN¬ª (¬´–ê–∫–∫–∞—É–Ω—Ç—ã AdWords¬ª): –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª, —Å–µ—Ä–≤–∏—Å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ [&#8230;]", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "Google —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π AdWords –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ú–æ–π –±–∏–∑–Ω–µ—Å", "author_name": "–ê–Ω–Ω–∞ –ë–æ–Ω–¥–∞—Ä—å", "source_type": "rss", "link": "https://www.searchengines.ru/adwords-gmb.html", "published": "2017-09-08T08:01:00", "source_title": "Searchengines.ru"}, {"source_name": "SearchEngines", "description": "–ú–Ω–æ–≥–∏–µ –≤–µ–±–º–∞—Å—Ç–µ—Ä–∞ —Å—á–∏—Ç–∞—é—Ç, —á—Ç–æ –∫—Ä—É–ø–Ω—ã–µ —Å–∞–π—Ç—ã —Ä–∞–Ω–∂–∏—Ä—É—é—Ç—Å—è –≤ Google –ª—É—á—à–µ, —á–µ–º –º–µ–ª–∫–∏–µ. –ù–∞ –¥–Ω—è—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –ø–æ–∏—Å–∫–∞ –î–∂–æ–Ω –ú—é–ª–ª–µ—Ä –æ–±—ä—è—Å–Ω–∏–ª, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–∞–∫. –ü–æ –µ–≥–æ —Å–ª–æ–≤–∞–º, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞. –¢–æ, —á—Ç–æ –∫—Ä—É–ø–Ω—ã–µ —Å–∞–π—Ç—ã –ø–æ–ª—É—á–∞—é—Ç –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏, –Ω–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —ç—Ç–æ—Ç —Ñ–∞–∫—Ç–æ—Ä –≤—Å—Ç—Ä–æ–µ–Ω –≤ –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è Google. Correlation&#8230; I don't have [&#8230;]", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "Google: –∫—Ä—É–ø–Ω—ã–µ —Å–∞–π—Ç—ã –Ω–µ –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –≤ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–∏", "author_name": "–ê–Ω–Ω–∞ –ë–æ–Ω–¥–∞—Ä—å", "source_type": "rss", "link": "https://www.searchengines.ru/google-big-sites.html", "published": "2017-09-08T07:18:00", "source_title": "Searchengines.ru"}, {"source_name": "SearchEngines", "description": "Google –æ–±—ä—è–≤–∏–ª –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ü–µ–ª–µ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ AMP –≤ –∫–∞–º–ø–∞–Ω–∏–∏ AdWords. –ù–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏–µ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ –¥–≤–µ –Ω–µ–¥–µ–ª–∏. –ü–æ–∫–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–∏—Å–∫–æ–≤–æ–π —Ä–µ–∫–ª–∞–º—ã. –í Google –æ—Ç–º–µ—á–∞—é—Ç, —á—Ç–æ —Ü–µ–ª–µ–≤—ã–µ AMP-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ, –∞ –æ–±—ã—á–Ω—ã–µ ‚Äì —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π. –ü–æ—Å–∞–¥–æ—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ AMP –±—É–¥—É—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Å–µ—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö [&#8230;]", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "AdWords –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ü–µ–ª–µ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ AMP", "author_name": "–ê–Ω–Ω–∞ –ë–æ–Ω–¥–∞—Ä—å", "source_type": "rss", "link": "https://www.searchengines.ru/adwords-amp-pages.html", "published": "2017-09-08T06:25:00", "source_title": "Searchengines.ru"}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "yay, Typekit (finally) allows you to serve web fonts without JavaScript:  https://t.co/1redeK9PG8", "author_name": "Ilya Grigorik", "source_type": "twitter", "link": "https://twitter.com/igrigorik/status/905920866768142336", "author_link": "https://twitter.com/igrigorik", "published": "2017-09-07T22:29:00", "source_title": "Twitter", "share_count": 31, "favorite_count": 75}, {"source_name": "Twitter", "description": "", "tags": "perf,tech,twitter", "source_link": "https://twitter.com", "title": "Using the kubectl command line to interact w/ the #Kubernets API w/ @kelseyhightower, @jbeda &amp; @brendandburns https://t.co/opkqopmVH2", "author_name": "O'Reilly Velocity", "source_type": "twitter", "link": "https://twitter.com/velocityconf/status/905909830694707203", "author_link": "https://twitter.com/velocityconf", "published": "2017-09-07T21:45:00", "source_title": "Twitter", "share_count": 6, "favorite_count": 12}, {"source_name": "SearchEngines", "description": "–ö–æ–º–∞–Ω–¥–∞ –Ø–Ω–¥–µ–∫—Å.–í–µ–±–º–∞—Å—Ç–µ—Ä–∞ —Å–æ–æ–±—â–∏–ª–∞ –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–µ–º —Å—á–µ—Ç—á–∏–∫–µ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∞–π—Ç–∞¬ª. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–µ–±–º–∞—Å—Ç–µ—Ä–∞–º —É–±–µ–¥–∏—Ç—å—Å—è –≤ —Ç–æ–º, —á—Ç–æ —Å—á–µ—Ç—á–∏–∫ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞ —Å–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–æ–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–∏—Å–∫—É –Ø–Ω–¥–µ–∫—Å–∞ –ª–µ–≥—á–µ –ø–æ–Ω—è—Ç—å, —á—Ç–æ —Å–∞–π—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, –∏ —É—á–µ—Å—Ç—å —ç—Ç–æ –≤ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–∏. –ò–Ω–∂–µ–Ω–µ—Ä—ã –ø–æ–∏—Å–∫–∞ –Ø–Ω–¥–µ–∫—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞—é—Ç, —á—Ç–æ –ú–µ—Ç—Ä–∏–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ [&#8230;]", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "–Ø–Ω–¥–µ–∫—Å.–í–µ–±–º–∞—Å—Ç–µ—Ä –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç –æ–± –æ—à–∏–±–∫–∞—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å—á–µ—Ç—á–∏–∫–∞ –ú–µ—Ç—Ä–∏–∫–∏", "author_name": "–û–∫—Å–∞–Ω–∞ –ú–∞–º—á—É–µ–≤–∞", "source_type": "rss", "link": "https://www.searchengines.ru/yandeks-vebmaster-predupredit.html", "published": "2017-09-07T19:25:00", "source_title": "Searchengines.ru"}, {"source_name": "Habrahabr", "description": "–î–ª—è –∑–∞–≤–æ–µ–≤–∞–Ω–∏—è –∑–∞—Ä—É–±–µ–∂–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞ –±–∏–∑–Ω–µ—Å—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –Ω–∞ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏, –Ω–æ –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç –ø–æ–¥ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ä–µ–≥–∏–æ–Ω–∞ —É—á–∏—Ç—ã–≤–∞—è –≤—Å–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –¥–µ–Ω–µ–∂–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã, —Å–∏—Å—Ç–µ–º—É –∏–∑–º–µ—Ä–µ–Ω–∏–π, –¥–∞—Ç—ã, –¥–∞–∂–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –∏ —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ –Ω—é–∞–Ω—Å—ã. –ö—Ç–æ-—Ç–æ –≤—Å–µ –¥–µ–ª–∞–µ—Ç —Å–≤–æ–∏–º–∏ —Å–∏–ª–∞–º–∏, –∫—Ç–æ-—Ç–æ –Ω–∞–Ω–∏–º–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–≤ (–∞ –ª—É—á—à–µ –Ω–æ—Å–∏—Ç–µ–ª–µ–π —è–∑—ã–∫–∞), –∞ –∫—Ç–æ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏. –û–¥–Ω–∏–º –∏–∑ —Ç–∞–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ —è–≤–ª—è–µ—Ç—Å—è <a href=\"https://lokalise.co/\">Lokalise</a>. –û–ø—ã—Ç–æ–º –µ–≥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ- –∏ –≤–∏–¥–µ–æ–±–∞–Ω–∫–∞ Depositphotos ‚Äî –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –¢–∞—Ç—å—è–Ω–∞ –ì—Ä–µ–±–µ–Ω—é–∫ –∏ web-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –†–æ–º–∞–Ω –î—Ä–æ–≥–æ–ª–æ–≤. –ò—Ç–æ–≥–∏ –±–µ—Å–µ–¥ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —É—Å–ª–æ–≤–Ω–æ –≤ –¥–≤—É—Ö —á–∞—Å—Ç—è—Ö, –ø–µ—Ä–≤–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ—Å–≤—è—â–µ–Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∞—Å–ø–µ–∫—Ç–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Lokalise –≤ –ø—Ä–æ–µ–∫—Ç–Ω—É—é —Å—Ä–µ–¥—É, –∞ –≤—Ç–æ—Ä–∞—è ‚Äì –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞–º–∏.<br />\n<br />\n<img src=\"https://habrastorage.org/web/a05/370/eb4/a05370eb44284944887fbd1024a5ced4.jpg\" /><br />\n<br />\n<a href=\"https://ru.depositphotos.com/\">Depositphotos</a> ‚Äì —ç—Ç–æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ç–æ- –∏ –≤–∏–¥–µ–æ–±–∞–Ω–∫, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π —É–∫—Ä–∞–∏–Ω—Å–∫–∏–º –±–∏–∑–Ω–µ—Å–º–µ–Ω–æ–º –î–º–∏—Ç—Ä–∏–µ–º –°–µ—Ä–≥–µ–µ–≤—ã–º –≤ 2009 –≥–æ–¥—É. –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∞–ª–∞ –∫—Ä—É–ø–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –æ—Ç TMT Investments –∏ –ï–≤—Ä–æ–ø–µ–π—Å–∫–æ–≥–æ –ë–∞–Ω–∫–∞ –†–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –†–∞–∑–≤–∏—Ç–∏—è. –°–µ–π—á–∞—Å –∫–æ–ª–ª–µ–∫—Ü–∏—è —Ñ–∞–π–ª–æ–≤ Depositphotos –Ω–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–æ–ª–µ–µ 67 –º–ª–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≤–∏–¥–µ–æ, –∞ —Å–∞–º–∞ –∫–æ–º–ø–∞–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ –¥–≤—É—Ö –¥–µ—Å—è—Ç–∫–∞—Ö —Ä—ã–Ω–∫–æ–≤ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É.<br /> <a href=\"https://habrahabr.ru/post/337156/#habracut\">–ß–∏—Ç–∞—Ç—å –¥–∞–ª—å—à–µ ‚Üí</a>", "tags": "habr,perf,tech,web", "source_link": "https://habrahabr.ru/hub/client_side_optimization/posts/all/", "title": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ Lokalise –≤ –∫—Ä—É–ø–Ω–µ–π—à–∏–π —Ñ–æ—Ç–æ–±–∞–Ω–∫ –º–∏—Ä–∞: –æ–ø—ã—Ç Depositphotos", "author_name": "Lokalise", "source_type": "rss", "link": "https://habrahabr.ru/post/337156/", "published": "2017-09-07T17:16:00", "source_title": "–•–∞–±—Ä–∞—Ö–∞–±—Ä / –í—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–¥—Ä—è–¥ / –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"}, {"source_name": "FacebookCode", "description": "The Yarn JavaScript package manager is now used by 175,000 projects on GitHub and responsible for nearly 3 billion package downloads per month.", "tags": "facebook,services,tech", "source_link": "https://code.facebook.com/", "title": "Announcing Yarn 1.0", "author_name": "Burak Yiƒüit Kaya", "source_type": "rss", "link": "https://code.facebook.com/posts/274518539716230/announcing-yarn-1-0/?utm_source=codedot_rss_feed&utm_medium=rss&utm_campaign=RSS+Feed", "published": "2017-09-07T15:00:00", "source_title": "Facebook Code"}, {"source_name": "Twitter", "description": "", "tags": "computer science,tech,twitter", "source_link": "https://twitter.com", "title": "When demand is overwhelming it's hard to balance investment between growth and conditions for growth", "author_name": "Kent Beck", "source_type": "twitter", "link": "https://twitter.com/KentBeck/status/905807260663910400", "author_link": "https://twitter.com/KentBeck", "published": "2017-09-07T14:57:00", "source_title": "Twitter", "share_count": 44, "favorite_count": 93}, {"source_name": "SearchEngines", "description": "–°–µ—Ä–≤–∏—Å ¬´Google –ê–≤–∏–∞–±–∏–ª–µ—Ç—ã¬ª (Google Flights), –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –Ω–∞—Ö–æ–¥–∏—Ç—å, —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –∏ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —É–∫—Ä–∞–∏–Ω—Å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –ö–∞–∫ —Å–æ–æ–±—â–∞–µ—Ç—Å—è –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –±–ª–æ–≥–µ Google –£–∫—Ä–∞–∏–Ω–∞, —Å–µ—Ä–≤–∏—Å —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–π—Å, –∏ —Å–æ–æ–±—â–∞–µ—Ç –æ–±–æ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ü–µ–Ω—ã –≤ Google –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–µ –∏ –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ. –°–µ—Ä–≤–∏—Å –º–æ–∂–µ—Ç –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã –∏–ª–∏ [&#8230;]", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "–°–µ—Ä–≤–∏—Å –ø–æ –ø–æ–∏—Å–∫—É –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤ Google Flights –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ –£–∫—Ä–∞–∏–Ω–µ", "author_name": "–û–∫—Å–∞–Ω–∞ –ú–∞–º—á—É–µ–≤–∞", "source_type": "rss", "link": "https://www.searchengines.ru/google-flights-zapustilsya-v-ukraine.html", "published": "2017-09-07T13:54:00", "source_title": "Searchengines.ru"}, {"source_name": "SearchEngines", "description": "–í—á–µ—Ä–∞ Google —Ä–∞–∑–æ—Å–ª–∞–ª –Ω–æ–≤—É—é –ø–æ—Ä—Ü–∏—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–µ—Ç–∞-–≤–µ—Ä—Å–∏–∏ Search Console.¬†–û–¥–Ω–∏–º –∏–∑ —Ç–µ—Ö, –∫—Ç–æ –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å—Ç–∞–ª –ë–∞—Ä—Ä–∏ –®–≤–∞—Ä—Ü –∏–∑ Search Engine Roundtable. –í —Ç–µ–∫—Å—Ç–µ –ø–∏—Å—å–º–∞ –≤–µ–±–º–∞—Å—Ç–µ—Ä–∞–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–º –æ—Ç—á—ë—Ç–æ–º¬†¬´–°—Ç–∞—Ç—É—Å –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è¬ª: –ü–æ —Å–ª–æ–≤–∞–º –î–∂–æ–Ω–∞ –ú—é–ª–ª–µ—Ä–∞, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ–≤–æ—Ä–∏—Ç –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –≥—Ä—É–ø–ø—É —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: Sounds like you're in the group of [&#8230;]", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "Google —Ä–∞—Å—à–∏—Ä–∏–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ—Ç–∞-–≤–µ—Ä—Å–∏–∏ Search Console", "author_name": "–ê–Ω–Ω–∞ –ë–æ–Ω–¥–∞—Ä—å", "source_type": "rss", "link": "https://www.searchengines.ru/google-search-beta.html", "published": "2017-09-07T13:31:00", "source_title": "Searchengines.ru"}, {"source_name": "SearchEngines", "description": "–ê–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ Google —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞ ¬´People also search for¬ª (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–∞–∫–∂–µ –∏—â—É—Ç). –í —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–Ω —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω —Å–ø—Ä–∞–≤–∞ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞. –í—ã–≥–ª—è–¥–∏—Ç —ç—Ç–æ —Ç–∞–∫: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º –º–∞—Å—à—Ç–∞–±–µ. –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–æ–≤—ã–π UI –≤–∏–¥—è—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –°–®–ê. –ö–∞–∫–∏–µ –µ—â—ë —Å—Ç—Ä–∞–Ω—ã —É—á–∞—Å—Ç–≤—É—é—Ç –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ. [&#8230;]", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "Google —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞ ¬´–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–∞–∫–∂–µ –∏—â—É—Ç¬ª", "author_name": "–ê–Ω–Ω–∞ –ë–æ–Ω–¥–∞—Ä—å", "source_type": "rss", "link": "https://www.searchengines.ru/google-right-panel.html", "published": "2017-09-07T12:43:00", "source_title": "Searchengines.ru"}, {"source_name": "SearchEngines", "description": "Google –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é ¬´—É–º–Ω—É—é¬ª –ª–µ–Ω—Ç—É –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –û–Ω–∞ –ø–æ–º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–∞–º—É—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –¥–∞–∂–µ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø–æ–∏—Å–∫–æ–≤–∏–∫–µ. –° —ç—Ç–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –¥–ª—è —Å–µ–±—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–µ–∫: –≥–ª–∞–≤–Ω—ã–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–Ω—è, –∑–∞–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ, –Ω–æ–≤—ã–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏, –∏—Å—Ç–æ—Ä–∏–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ. –ß–µ–º [&#8230;]", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "Google –Ω–∞—á–∞–ª –∑–∞–ø—É—Å–∫ ¬´—É–º–Ω–æ–π¬ª –ª–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "author_name": "–û–∫—Å–∞–Ω–∞ –ú–∞–º—á—É–µ–≤–∞", "source_type": "rss", "link": "https://www.searchengines.ru/google-zapusk-umnoj-lenty-novostej.html", "published": "2017-09-07T11:33:00", "source_title": "Searchengines.ru"}, {"source_name": "SearchEngines", "description": "–Ø–Ω–¥–µ–∫—Å –∏ –ü–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º—É–∑–µ–π –∑–∞–ø—É—Å–∫–∞—é—Ç —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç ¬´–ë–æ–ª—å—à–æ–π –º—É–∑–µ–π¬ª. –≠—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è —Å–∞–º—ã–º —Ä–∞–∑–Ω—ã–º –º—É–∑–µ—è–º —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–∞–π—Ç—ã –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –Ω–∏—Ö &#8212; –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–µ —Ç—É—Ä—ã, –≥–∞–ª–µ—Ä–µ–∏, —Å—Ç–∞—Ç—å–∏ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ. ¬´–ë–æ–ª—å—à–æ–π –º—É–∑–µ–π¬ª –±—É–¥–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –Ø–Ω–¥–µ–∫—Å–∞. –° –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ —Å–æ–±—Ä–∞–Ω–∏—è –º—É–∑–µ—è –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É [&#8230;]", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "–Ø–Ω–¥–µ–∫—Å –∏ –ü–æ–ª–∏—Ç–µ—Ö –∑–∞–ø—É—Å–∫–∞—é—Ç –ø—Ä–æ–µ–∫—Ç ¬´–ë–æ–ª—å—à–æ–π –º—É–∑–µ–π¬ª", "author_name": "–û–∫—Å–∞–Ω–∞ –ú–∞–º—á—É–µ–≤–∞", "source_type": "rss", "link": "https://www.searchengines.ru/yandeks-i-politeh-zapuskayut-bolshoj-muzej.html", "published": "2017-09-07T10:11:00", "source_title": "Searchengines.ru"}, {"source_name": "SearchEngines", "description": "Twitter –æ–±—ä—è–≤–∏–ª –æ –∑–∞–ø—É—Å–∫–µ –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (Night Mode) –≤ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å–µ—Ä–≤–∏—Å–∞. –†–∞–Ω–µ–µ –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö –¥–ª—è iOS –∏ Android. https://twitter.com/TwitterSupport/status/905477696360112129 –ü–æ —Å–ª–æ–≤–∞–º –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –∫–æ–º–ø–∞–Ω–∏–∏, –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞—á–∞–ª–∏ –≤–∏–¥–µ—Ç—å –Ω–æ–≤—É—é –æ–ø—Ü–∏—é 6 —Å–µ–Ω—Ç—è–±—Ä—è, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–π –≤ –±–ª–∏–∂–∞–π—à–∏–µ –Ω–µ–¥–µ–ª–∏. –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º, –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É –ø—Ä–æ—Ñ–∏–ª—è –≤ –ø—Ä–∞–≤–æ–º [&#8230;]", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "Twitter –¥–æ–±–∞–≤–∏–ª –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –≤ –¥–µ—Å–∫—Ç–æ–ø–Ω—É—é –≤–µ—Ä—Å–∏—é —Å–µ—Ä–≤–∏—Å–∞", "author_name": "–ê–Ω–Ω–∞ –ë–æ–Ω–¥–∞—Ä—å", "source_type": "rss", "link": "https://www.searchengines.ru/twitter-night-desctop.html", "published": "2017-09-07T09:10:00", "source_title": "Searchengines.ru"}, {"source_name": "SearchEngines", "description": "–°—É—â–µ—Å—Ç–≤—É—é—Ç —Ç–∞–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, –æ –∫–æ—Ç–æ—Ä—ã—Ö –∑–Ω–∞—é—Ç —Ç–æ–ª–∫–æ–≤—ã–µ —Å–µ–æ—à–Ω–∏–∫–∏, –Ω–æ –Ω–µ –ø–æ–¥–æ–∑—Ä–µ–≤–∞—é—Ç –∏—Ö –∫–ª–∏–µ–Ω—Ç—ã. –≠—Ç–∞ —Å—Ç–∞—Ç—å—è —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ —Ç–æ–º, –Ω–∞ —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—Å—É–¥–∏—Ç—å —Å –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–º –ø–æ SEO.", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "–û —á–µ–º –≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –ø–æ SEO. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤", "author_name": "–û–∫—Å–∞–Ω–∞ –ú–∞–º—á—É–µ–≤–∞", "source_type": "rss", "link": "https://www.searchengines.ru/o-chem-govorit-s-seoshnikom.html", "published": "2017-09-07T08:20:00", "source_title": "Searchengines.ru"}, {"source_name": "SearchEngines", "description": "LinkedIn –æ–±—ä—è–≤–∏–ª–∞ –æ –∑–∞–ø—É—Å–∫–µ Audience Network ‚Äì¬†—Ä–µ–∫–ª–∞–º–Ω–æ–π —Å–µ—Ç–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ—Ü—Å–µ—Ç–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–∞–π—Ç–∞—Ö –∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö. –†–∞–Ω–µ–µ LinkedIn —É–∂–µ –∑–∞–ø—É—Å–∫–∞–ª–∞ –≤–µ—Ä—Å–∏–∏ Audience Network –≤ 2008 –∏ –≤ 2015 –≥–æ–¥–∞—Ö. –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Ä–µ–∫–ª–∞–º–Ω–æ–π —Å–µ—Ç–∏ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –º–æ–±–∏–ª—å–Ω—É—é –∏ –Ω–∞—Ç–∏–≤–Ω—É—é —Ä–µ–∫–ª–∞–º—É. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, —Ç–µ–ø–µ—Ä—å LinkedIn Audience Network [&#8230;]", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "LinkedIn –æ–±—ä—è–≤–∏–ª–∞ –æ –∑–∞–ø—É—Å–∫–µ —Ä–µ–∫–ª–∞–º–Ω–æ–π —Å–µ—Ç–∏ Audience Network", "author_name": "–ê–Ω–Ω–∞ –ë–æ–Ω–¥–∞—Ä—å", "source_type": "rss", "link": "https://www.searchengines.ru/linkedin-an.html", "published": "2017-09-07T08:01:00", "source_title": "Searchengines.ru"}, {"source_name": "SearchEngines", "description": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã ¬´–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –ö–∞—Å–ø–µ—Ä—Å–∫–æ–≥–æ¬ª –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∏–±–µ—Ä–ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–∞–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –ü–û, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –±–µ–∑ –≤–µ–¥–æ–º–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤. –ö–∞–∫ —Å–æ–æ–±—â–∞–µ—Ç RNS, —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏, —Ç–æ–ª—å–∫–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –±—ã–ª–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—Ä—É–ø–Ω—ã—Ö –±–æ—Ç-—Å–µ—Ç–µ–π, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –æ—Ç —Å–∫—Ä—ã—Ç–æ–≥–æ –º–∞–π–Ω–∏–Ω–≥–∞. ¬´–ú—ã —Ç–∞–∫–∂–µ –æ—Ç–º–µ—á–∞–µ–º —Ä–æ—Å—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ [&#8230;]", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "¬´–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –ö–∞—Å–ø–µ—Ä—Å–∫–æ–≥–æ¬ª: –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ü–û –¥–ª—è —Å–∫—Ä—ã—Ç–æ–≥–æ –º–∞–π–Ω–∏–Ω–≥–∞ –Ω–∞–±–∏—Ä–∞–µ—Ç –æ–±–æ—Ä–æ—Ç—ã", "author_name": "–û–∫—Å–∞–Ω–∞ –ú–∞–º—á—É–µ–≤–∞", "source_type": "rss", "link": "https://www.searchengines.ru/laboratoriya-kasperskogo-rasprostranenie-po.html", "published": "2017-09-07T07:33:00", "source_title": "Searchengines.ru"}, {"source_name": "SearchEngines", "description": "Google —Å–æ–æ–±—â–∏–ª, —á—Ç–æ —Å–µ—Ä–≤–∏—Å—ã Google Trips, Google Flights –∏ Destinations on Google –Ω–∞—á–∞–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤ –æ–±—â–µ–π —Å—É–º–º–µ 20 –Ω–æ–≤—ã—Ö —è–∑—ã–∫–æ–≤. –ú–æ–±–∏–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π Google Destinations, –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –≤ –º–∞—Ä—Ç–µ 2016 –≥–æ–¥–∞, —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ 14 –Ω–æ–≤—ã—Ö –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö –∏ –∞–∑–∏–∞—Ç—Å–∫–∏—Ö —è–∑—ã–∫–∞—Ö. –í –∏—Ö —á–∏—Å–ª–µ ‚Äì —Ä—É—Å—Å–∫–∏–π, –±–æ–ª–≥–∞—Ä—Å–∫–∏–π, –∫—Ä–∏—Ç—Å–∫–∏–π, —á–µ—à—Å–∫–∏–π, —Ñ–∏–ª–∏–ø–ø–∏–Ω—Å–∫–∏–π, –≤–µ–Ω–≥–µ—Ä—Å–∫–∏–π, –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π, —è–ø–æ–Ω—Å–∫–∏–π, –ª–∏—Ç–æ–≤—Å–∫–∏–π, –º–∞–ª–∞–∑–∏–π—Å–∫–∏–π, [&#8230;]", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "Google Trips, Flights –∏ Destinations –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É 20 –Ω–æ–≤—ã—Ö —è–∑—ã–∫–æ–≤", "author_name": "–ê–Ω–Ω–∞ –ë–æ–Ω–¥–∞—Ä—å", "source_type": "rss", "link": "https://www.searchengines.ru/google-travel-tools.html", "published": "2017-09-07T07:25:00", "source_title": "Searchengines.ru"}, {"source_name": "SearchEngines", "description": "–ê–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ Facebook —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ñ–æ–Ω–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏. –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–∞–∫–∂–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —Ñ–æ–Ω–æ–º.", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "Facebook —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å —Ü–≤–µ—Ç–Ω—ã–º —Ñ–æ–Ω–æ–º", "author_name": "–ê–Ω–Ω–∞ –ë–æ–Ω–¥–∞—Ä—å", "source_type": "rss", "link": "https://www.searchengines.ru/fb-coloured.html", "published": "2017-09-07T06:44:00", "source_title": "Searchengines.ru"}, {"source_name": "GoogleDevelopersWeb", "description": "<img src=\"https://ga-beacon.appspot.com/UA-52746336-1/web/updates/2016/10/navigator-share?feed_type=atom&amp;pixel\" />\n        \n        <h1 id=\"introducing-the-web-share-api\">Introducing the Web Share API</h1>\n<p>Good news, everybody! In Chrome 61 for Android, we've launched the <code>navigator.share()</code> method,\nwhich allows websites to invoke the native sharing capabilities of the host platform.</p>\n<p>This method, part of the simple <a href=\"https://wicg.github.io/web-share/\">Web Share API</a>‚Äîwritten by\n<a href=\"https://twitter.com/mgiuca\">Matt Giuca</a> on the Chrome team‚Äîallows you easily trigger the native\nAndroid share dialog, passing either a URL or text to share. This is an important API as it gives\nyour end-users user control of how and where the data is shared.</p>\n<h2 id=\"usage\">Usage</h2>\n<p>The Web Share API is a\n<a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/promises\">Promise</a>-based, single method API.\nIt accepts an object which must have at least one of the properties named <code>text</code> or <code>url</code>.</p>\n<pre><code class=\"lang-js\">if (navigator.share) {\n  navigator.share({\n      title: 'Web Fundamentals',\n      text: 'Check out Web Fundamentals‚Äîit rocks!,\n      url: 'https://developers.google.com/web',\n  })\n    .then(() =&gt; console.log('Successful share'))\n    .catch((error) =&gt; console.log('Error sharing', error));\n}\n</code></pre>\n<div class=\"video-wrapper\">\n  \n  \n</div>\n\n<p>Once invoked it will bring up the native picker (see video) and allow you to\nshare the data with the app chosen by the user.</p>\n<div class=\"clearfix\"></div>\n\n<p>To use the Web Share API:</p>\n<ul>\n<li><p>you must be served over <a href=\"https://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features\">HTTPS</a></p>\n</li>\n<li><p>you can only invoke the API in response to a user action, such as a click\n(e.g., you can't call <code>navigator.share</code> as part of the page load)</p>\n</li>\n<li><p>you can also share any URL, not just URLs under your website's current scope: and you\nmay also share <code>text</code> without a URL</p>\n</li>\n<li><p>you should feature-detect it in case it's not available on your users' platform\n(e.g., via <code>navigator.share !== undefined</code>)</p>\n</li>\n</ul>\n<h3 id=\"the-url\">The URL</h3>\n<p>For the initial launch on Android, users using the Web Share API will be on a mobile device.\nSome sites might have a &quot;m.&quot; URL, or a custom URL for the user's context. You can share any URL\nvia the Web Share API, but you could reuse a canonical URL on your page to provide a better\nexperience to the user. For example, you might do:</p>\n<pre><code class=\"lang-js\">let url = document.location.href;\nconst canonicalElement = document.querySelector('link[rel=canonical]');\nif (canonicalElement !== undefined) {\n    url = canonicalElement.href;\n}\nnavigator.share({url: url});\n</code></pre>\n<h2 id=\"case-study\">Case Study</h2>\n<p><a href=\"https://santatracker.google.com\">Santa Tracker</a> is a holiday tradition here at\nGoogle. Every December, you can celebrate the season with games and educational\nexperiences: and in the new year, Santa Tracker <a href=\"https://developers.googleblog.com/2017/04/santa-tracker-open-sourced-and-delivered.html\">is open-sourced and delivered</a>.</p>\n<p>In 2016, we used the Web Share API on Android via an\n<a href=\"https://github.com/jpchase/OriginTrials/blob/gh-pages/developer-guide.md\">Origin Trial</a>\n(note: this is <strong>not</strong> required to use the Web Share API now, as part of Chrome 61). This\nAPI was a perfect fit for mobile‚Äîin previous years, we had disabled share buttons on mobile,\nas space is at a premimum and we couldn't justify having several share targets.</p>\n<p><img alt=\"Santa Tracker share button\" src=\"https://developers.google.com/web/updates/images/2016/10/santa-phone.png\" style=\"margin: 12px auto;\" /></p>\n<p>With the Web Share API, we were able to present just one button, saving precious\npixels. We also found that users shared with Web Share around 20% more than users\nwithout the API enabled.</p>\n<p>(If you're on Chrome 61 on Android, head to\n<a href=\"https://santatracker.google.com\">Santa Tracker</a> and see Web Share in action.)</p>\n<h2 id=\"history\">History</h2>\n<p>The Web Share API was originally launched as an\n<a href=\"https://github.com/jpchase/OriginTrials/blob/gh-pages/developer-guide.md\">Origin Trial</a>\nas part of Chrome 55.</p>\n<p>Prior to the Web Share API, there have been a number of ways to invoke native sharing\ncapabilities on the platform, but they all have significant drawbacks. There was:</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Paul_Kinlan\">Web Intents</a> (dead)</li>\n<li>Protocol handling via <code>registerProtocolHandler</code>, but this has zero support on mobile</li>\n<li>Direct sharing to a well-known service URL such as Twitter</li>\n<li><a href=\"https://paul.kinlan.me/sharing-natively-on-android-from-the-web/\">Android intent: URL syntax</a>\n(which was, unfortunately, Android-only, and required apps to opt-in)</li>\n</ul>\n<h2 id=\"more-information\">More Information</h2>\n<p>Read more about the launch at\n<a href=\"https://www.chromestatus.com/features/5668769141620736\">Chrome Platform Status</a>. Here\nare some important links:</p>\n<ul>\n<li><a href=\"https://github.com/mgiuca/web-share/blob/master/demos/share.html\">Sample</a></li>\n<li><a href=\"https://github.com/WICG/web-share/blob/master/docs/explainer.md\">Share explainer</a></li>\n<li><a href=\"https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/1BOhy5av8MQ/8LqNvS5TAQAJ\">Intent to implement</a></li>\n<li><a href=\"https://discourse.wicg.io/t/web-share-api-for-sharing-content-to-arbitrary-destination/1561/3\">Discussion on Discourse</a></li>\n</ul>\n<p>In the future, websites themselves will be allowed to register themselves as a\n&quot;<a href=\"https://www.chromestatus.com/features/5662315307335680\">share receiver</a>&quot;, enabling\nsharing <em>to</em> the web‚Äîfrom both the web and native apps. We are on the Chrome team are incredibly\nexcited by this.</p>\n<p></p>", "tags": "android,chrome55,chrome61,origintrials,sharing,tech,web", "source_link": "https://developers.google.com/web/updates/?utm_source=feed&utm_medium=feed&utm_campaign=updates_feed", "title": "Introducing the Web Share API", "author_name": "Paul Kinlan", "source_type": "rss", "link": "https://developers.google.com/web/updates/2016/10/navigator-share?utm_source=feed&utm_medium=feed&utm_campaign=updates_feed", "published": "2017-09-07T00:00:00", "source_title": "Updates"}, {"source_name": "FacebookCode", "description": "Inter-procedural analysis can be deployed to large and rapidly changing codebases that consist of millions of lines of code and undergo thousands of modifications per day.", "tags": "facebook,services,tech", "source_link": "https://code.facebook.com/", "title": "Finding inter-procedural bugs at scale with Infer static analyzer", "author_name": "Sam Blackshear", "source_type": "rss", "link": "https://code.facebook.com/posts/1537144479682247/finding-inter-procedural-bugs-at-scale-with-infer-static-analyzer/?utm_source=codedot_rss_feed&utm_medium=rss&utm_campaign=RSS+Feed", "published": "2017-09-06T17:41:00", "source_title": "Facebook Code"}, {"source_name": "WebkitBlog", "description": "Safari Technology Preview Release 39 is now available for download for macOS Sierra and betas of macOS High Sierra.", "tags": "safari technology preview,browsers,safari,tech,web,webkit", "text": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 39 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Sierra and betas of macOS High Sierra. If you already have Safari Technology Preview installed, you can update from the Mac App Store‚Äôs Updates tab. This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=220795&amp;rev=221334&amp;limit=999\">220795-221334</a>.</p>\n<h3>Beacon API</h3>\n<ul>\n<li>Added support for quota limitation (<a href=\"https://trac.webkit.org/changeset/220922/webkit/\">r220922</a>)</li>\n<li>Enabled content extensions to be able to intercept Beacon and Ping redirects (<a href=\"https://trac.webkit.org/changeset/220996/webkit/\">r220996</a>)</li>\n<li>Improved error reporting (<a href=\"https://trac.webkit.org/changeset/220946/webkit/\">r220946</a>)</li>\n<li>Prevented cross origin Beacon requests with an <code>ArrayBuffer</code> or <code>ArrayBufferView</code> payload from doing a CORS preflight (<a href=\"https://trac.webkit.org/changeset/220817/webkit/\">r220817</a>)</li>\n</ul>\n<h3>Directory Upload</h3>\n<ul>\n<li>Added basic support for <code>input.webkitdirectory</code> behind an experimental feature flag (<a href=\"https://trac.webkit.org/changeset/221177/webkit/\">r221177</a>)</li>\n<li>Added stub File and Directory Entries API interfaces (<a href=\"https://trac.webkit.org/changeset/221209/webkit/\">r221209</a>)</li>\n</ul>\n<h3>Fetch API</h3>\n<ul>\n<li>Added support for <code>FetchRequest.body</code> (<a href=\"https://trac.webkit.org/changeset/221329/webkit/\">r221329</a>)</li>\n<li>Added support for a callback-based fetch (<a href=\"https://trac.webkit.org/changeset/220927/webkit/\">r220927</a>)</li>\n</ul>\n<h3>Input Events</h3>\n<ul>\n<li>Renamed inputType &#8220;formatForeColor&#8221; to &#8220;formatFontColor&#8221; (<a href=\"https://trac.webkit.org/changeset/220901/webkit/\">r220901</a>)</li>\n<li>Fixed an issue where picking an emoji via the emoji dialog using Control-Command-Space (‚åÉ‚åòSpace) fires inconsistent <code>beforeinput</code> events. (<a href=\"https://trac.webkit.org/changeset/221234/webkit/\">r221234</a>)</li>\n<li>Fixed an issue where using align left or align justify on the Touchbar both send a <code>beforeinput</code> event with the &#8220;formatJustifyLeft&#8221; <code>inputType</code>. (<a href=\"https://trac.webkit.org/changeset/221199/webkit/\">r221199</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Implemented async generator runtime for async iteration (<a href=\"https://trac.webkit.org/changeset/221080/webkit/\">r221080</a>)</li>\n<li>Optimized map iteration for faster performance (<a href=\"https://trac.webkit.org/changeset/221110/webkit/\">r221110</a>)</li>\n<li>Added support for the &#8220;dotAll&#8221; flag for regular expressions (<a href=\"https://trac.webkit.org/changeset/221160/webkit/\">r221160</a>)</li>\n</ul>\n<h3>WebAssembly</h3>\n<ul>\n<li>Fixed <code>const</code> in unreachable code getting decoded incorrectly, erroneously rejecting the binary as invalid (<a href=\"https://trac.webkit.org/changeset/220894/webkit/\">r220894</a>)</li>\n</ul>\n<h3>WebRTC</h3>\n<ul>\n<li>Fixed a MediaStream created without tracks to correctly update the active state after tracks are added (<a href=\"https://trac.webkit.org/changeset/221277/webkit/\">r221277</a>)</li>\n</ul>\n<h3>Web Inspector</h3>\n<ul>\n<li>Fixed copying text from the &#8220;View variable value&#8221; popover in the Styles sidebar (<a href=\"https://trac.webkit.org/changeset/220973/webkit/\">r220973</a>)</li>\n<li>Added async stack trace capture when workers or the main context posts a message (<a href=\"https://trac.webkit.org/changeset/220815/webkit/\">r220815</a>)</li>\n<li>Replaced &#8220;Enter Class Name&#8221; input label with &#8220;Add New Class&#8221; for clarity (<a href=\"https://trac.webkit.org/changeset/220875/webkit/\">r220875</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Implemented HTMLMediaElement dispatch of the <code>onencrypted</code> event (<a href=\"https://trac.webkit.org/changeset/221131/webkit/\">r221131</a>)</li>\n<li>Fixed autoplay muted videos not playing when outside the viewport (<a href=\"https://trac.webkit.org/changeset/221016/webkit/\">r221016</a>)</li>\n<li>Fixed HTMLTrackElement behavior to match standards (<a href=\"https://trac.webkit.org/changeset/221155/webkit/\">r221155</a>)</li>\n</ul>", "title": "Release Notes for Safari Technology Preview¬†39", "author_name": "Jon Davis", "source_type": "rss", "link": "https://webkit.org/blog/7913/release-notes-for-safari-technology-preview-39/", "source_link": "https://webkit.org", "source_title": "WebKit", "published": "2017-09-06T17:00:00"}, {"source_name": "SearchEngines", "description": "–° –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞ AMP –≤–µ–±–º–∞—Å—Ç–µ—Ä–∞ –Ω–µ–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ¬†–∂–∞–ª–æ–≤–∞–ª–∏—Å—å –Ω–∞ —Ç–æ, —á—Ç–æ Google Analytics –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —ç—Ç–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º. –û–¥–Ω–∞–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π. –í—á–µ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∞¬† –Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ AMP Client ID API, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ª—É—á—à–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤ —Å AMP-—Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏. –ù–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç ¬´–Ω–µ–±–æ–ª—å—à–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞¬ª –Ω–∞ AMP –∏ –æ–±—ã—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö. –í Google –æ—Ç–º–µ—á–∞—é—Ç, —á—Ç–æ [&#8230;]", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "Google Analytics –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è AMP-—Å—Ç—Ä–∞–Ω–∏—Ü", "author_name": "–ê–Ω–Ω–∞ –ë–æ–Ω–¥–∞—Ä—å", "source_type": "rss", "link": "https://www.searchengines.ru/analytics-amp-solution.html", "published": "2017-09-06T16:43:00", "source_title": "Searchengines.ru"}, {"source_name": "MozillaHacks", "description": "A few months ago, I had the opportunity to try out several WebVR experiences for the first time, and I was blown away by the possibilities. Using just a headset and my Firefox browser, I was able to play games, explore worlds, paint, create music and so much more. All through the open web. I [&#8230;]", "tags": "mozilla,services,tech", "text": "<p><a href=\"https://hacks.mozilla.org/files/2017/09/Sep-05-2017-13-10-42.gif\"><img alt=\"\" class=\"alignnone size-full wp-image-31234\" height=\"255\" src=\"https://hacks.mozilla.org/files/2017/09/Sep-05-2017-13-10-42.gif\" width=\"480\" /></a></p>\n<p>A few months ago, I had the opportunity to try out several WebVR experiences for the first time, and I was blown away by the possibilities. Using just a headset and my Firefox browser, I was able to play games, explore worlds, paint, create music and so much <a href=\"https://airtable.com/embed/shr2Lc7pmlJis02R4/tblZbV2S0W0T5DDth?viewControls=on\" rel=\"noopener\" target=\"_blank\">more</a>. All through the open web. I was hooked.</p>\n<p>A short while later, I was introduced to <a href=\"https://aframe.io\" rel=\"noopener\" target=\"_blank\">A-Frame</a>, a web framework for building virtual reality experiences. The <a href=\"https://codepen.io/mozvr/pen/BjygdO\" rel=\"noopener\" target=\"_blank\">‚ÄúHello World‚Äù demo</a> is a mere 15 lines of code. This blew my mind. Building an experience in Virtual Reality seems like a task reserved for super developers, or that guy from Mr. Robot. After glancing through the A-Frame documentation, I realized that anyone with a little front-end experience can create something for Virtual Reality&#8230;even me &#8211; a marketing guy who likes to build websites in his spare time.</p>\n<p>My team had an upcoming presentation to give. Normally we would create yet another slide deck. This time, however, I decided to give A-Frame a shot, and use Virtual Reality to tell our story and demo our work.</p>\n<p>Within two days I was able to teach myself how to build <a href=\"https://slightlyoffbeat.github.io/marketing-vr/\" rel=\"noopener\" target=\"_blank\">this</a> (slightly modified for sharing purposes). You can view the GitHub repo <a href=\"https://github.com/slightlyoffbeat/marketing-vr\" rel=\"noopener\" target=\"_blank\">here</a>.</p>\n<p>The result was a presentation that was fun and unique. People were far more engaged in Virtual Reality than they would have been watching us flip through slides on a screen.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/09/image1.jpg\"><img alt=\"\" class=\"alignnone wp-image-31233 size-large\" height=\"333\" src=\"https://hacks.mozilla.org/files/2017/09/image1-500x333.jpg\" width=\"500\" /></a></p>\n<p>This isn‚Äôt a ‚Äúhow-to get started with A-Frame‚Äù post (there are <a href=\"https://aframe.io/docs/0.6.0/introduction/\" rel=\"noopener\" target=\"_blank\">plenty of great resources</a> for that). I did, however, find solutions for a few ‚Äúgotchas‚Äù that I‚Äôll share below.</p>\n<h3>Walking through walls</h3>\n<p>One of the first snags I ran into was that the camera would pass through objects and walls. After some research, I came across <a href=\"https://github.com/donmccurdy/aframe-extras\" rel=\"noopener\" target=\"_blank\">a-frame-extras</a>. It includes an add-on called ‚Äúkinematic-body‚Äù that helped solve this issue for me.</p>\n<h3>Controls</h3>\n<p>A-frame extras also has <a href=\"https://github.com/donmccurdy/aframe-extras/tree/master/src/controls\" rel=\"noopener\" target=\"_blank\">helpers for controls</a>. It gave me an easy way to implement controls for keyboard, mouse, touchscreen, etc.</p>\n<h3>Generating rooms</h3>\n<p>It didn‚Äôt take me long to figure out how to create and position walls to create a room. I didn‚Äôt just want a room though. I wanted multiple rooms and hallways. Manually creating them would take forever. During my research I came across <a href=\"https://24ways.org/2016/first-steps-in-vr/\" rel=\"noopener\" target=\"_blank\">this post</a>, where the author created a maze using an array of numbers. This inspired me to create generate my own map using a similar method:</p>\n<pre><code>\nconst map = {\n  \"data\": [\n    0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0,\n    0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,\n    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n    0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,\n    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n    0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,\n    0, 4, 4, 4, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0,\n    4, 0, 0, 0, 4, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,\n    4, 0, 0, 0, 4, 4, 4, 1, 0, 8, 0, 0, 0, 0, 0, 1, 0, 0, 0,\n    4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,\n    0, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0\n  ],\n  \"height\":19,\n  \"width\":19\n}\n</code></pre>\n<p>0 = no walls<br />\n1 &#8211; 4 = walls with various textures<br />\n8 = user start position<br />\n9 = log position to console</p>\n<p>This would allow me to try different layouts, start at different spots around the map, and quickly get coordinates for positioning items and rooms (you‚Äôll see why this is useful below). You can view the rest of the code <a href=\"https://github.com/slightlyoffbeat/marketing-vr/blob/master/js/map.js\" rel=\"noopener\" target=\"_blank\">here</a>.</p>\n<h3>Duplicating rooms</h3>\n<p>Once I created a room, I wanted to recreate a variation of this room at different locations around the map. This is where I learned to embrace the &#8220; object. When you use &#8220; as a container, it allows entities inside the container to be positioned relative to that parent entity object. I found <a href=\"https://medium.com/immersion-for-the-win/relative-positioning-in-a-frame-d839fc0e3249\" rel=\"noopener\" target=\"_blank\">this post about relative positioning</a> to be helpful in understanding the concept. This allowed me to duplicate the code for a room, and simply provide new position coordinates for the parent entity.</p>\n<h3>Conclusion</h3>\n<p>I have no doubt that there are better and more efficient ways to create something like this, but the fact that a novice like myself was able to build something in just a couple of days speaks volumes to the power of A-Frame and WebVR. The A-Frame community also deserves a lot of credit. I found libraries, code examples, and blog posts for almost every issue and question I had.</p>\n<p>Now is the perfect time to get started with WebVR and A-Frame, especially now that it‚Äôs supported for anyone using the latest version of Firefox on Windows. Check out <a href=\"https://aframe.io/\" rel=\"noopener\" target=\"_blank\">the website</a>, <a href=\"https://aframe.io/community/\" rel=\"noopener\" target=\"_blank\">join the community</a>, and start building.</p>", "title": "I built something with A-Frame in 2 days (and you can too)", "author_name": "Dan Brown", "source_type": "rss", "link": "https://hacks.mozilla.org/2017/09/i-built-something-with-a-frame-in-2-days-and-you-can-too/", "source_link": "https://hacks.mozilla.org", "source_title": "Mozilla Hacks ‚Äì the Web developer blog", "published": "2017-09-06T15:03:00"}, {"source_name": "SearchEngines", "description": "–ü–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Google –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ —à–∏—Ä–æ–∫–æ–º—É –∑–∞–ø—É—Å–∫—É –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ú–æ–π –±–∏–∑–Ω–µ—Å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞. –û–± —ç—Ç–æ–º —Å–æ–æ–±—â–∞–µ—Ç—Å—è –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –±–ª–æ–≥–µ —Å–µ—Ä–≤–∏—Å–∞. –ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏–µ–º, –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏ –≤ Google. –ù–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –±—É–¥–µ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –Ω–∞–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞. –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å: –î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏, —É–∫–∞–∑–∞—Ç—å —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã [&#8230;]", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "Google –æ–±—ä—è–≤–∏–ª –æ –∑–∞–ø—É—Å–∫–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ú–æ–π –±–∏–∑–Ω–µ—Å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞", "author_name": "–ê–Ω–Ω–∞ –ë–æ–Ω–¥–∞—Ä—å", "source_type": "rss", "link": "https://www.searchengines.ru/google-panel.html", "published": "2017-09-06T13:48:00", "source_title": "Searchengines.ru"}, {"source_name": "SearchEngines", "description": "¬´–°–∫–æ–ª–∫–æ–≤–æ –≤–µ–Ω—á—É—Ä–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏¬ª –∏ ¬´–ù–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ —Ä–∞–∑–≤–∏—Ç–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞ –†–¢–°¬ª –≤–æ –≤—Ä–µ–º—è –í–æ—Å—Ç–æ—á–Ω–æ–≥–æ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Ñ–æ—Ä—É–º–∞ (–í–≠–§) 2017 –ø–æ–¥–ø–∏—Å–∞–ª–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∏. –û–± —ç—Ç–æ–º —Å–æ–æ–±—â–∞—é—Ç –†–ò–ê –ù–æ–≤–æ—Å—Ç–∏, —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ ¬´–°–∫–æ–ª–∫–æ–≤–æ –≤–µ–Ω—á—É—Ä–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏¬ª –í–∞—Å–∏–ª–∏—è –ë–µ–ª–æ–≤–∞. ¬´–ü–æ—Å–∫–æ–ª—å–∫—É —Ä–µ—á—å –∏–¥–µ—Ç –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö, —Ç–æ —ç—Ç–æ –Ω–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –±–∏—Ä–∂–∞ —Å–æ –∑–¥–∞–Ω–∏–µ–º, —Ä–∞—Å—á–µ—Ç–Ω—ã–º–∏ —Å—á–µ—Ç–∞–º–∏ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ. –§–∞–∫—Ç–∏—á–µ—Å–∫–∏, [&#8230;]", "tags": "search,services,tech", "source_link": "https://www.searchengines.ru", "title": "–°—Ç–∞—Ä—Ç–∞–ø—ã –∏–∑ –°–∫–æ–ª–∫–æ–≤–æ –ø—Ä–æ–≤–µ–¥—É—Ç ICO –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–µ", "author_name": "–û–∫—Å–∞–Ω–∞ –ú–∞–º—á—É–µ–≤–∞", "source_type": "rss", "link": "https://www.searchengines.ru/startapy-iz-skolkovo-provedut-ico-na-sobstvennoj-kriptobirzhe.html", "published": "2017-09-06T12:47:00", "source_title": "Searchengines.ru"}, {"source_name": "GoogleDevelopersWeb", "description": "<img src=\"https://ga-beacon.appspot.com/UA-52746336-1/web/updates/2017/09/nic61?feed_type=atom&amp;pixel\" />\n        \n        <h1 id=\"new-in-chrome-61\">New in Chrome 61</h1>\n<div class=\"clearfix\"></div>\n\n<div class=\"video-wrapper\">\n  \n  \n</div>\n\n<ul>\n<li>Chrome 61 now supports JavaScript <a href=\"https://developers.google.com/web/updates/atom.xml#modules\">modules</a> natively, unifying the\nway modular JavaScript can be written.</li>\n<li>You can now use <a href=\"https://developers.google.com/web/updates/atom.xml#share\"><code>navigator.share</code></a> to trigger the native Android\nshare dialog.</li>\n<li>The <a href=\"https://developers.google.com/web/updates/atom.xml#webusb\">WebUSB API</a> has landed, allowing web apps to access user\npermitted USB devices.</li>\n<li>And there‚Äôs <a href=\"https://developers.google.com/web/updates/atom.xml#more\">plenty more</a>!</li>\n</ul>\n<div class=\"clearfix\"></div>\n\n<p>Note: Want the full list of changes? Check out the\n<a href=\"https://chromium.googlesource.com/chromium/src/+log/60.0.3112.78..61.0.3163.79?pretty=fuller&amp;n=10000\">Chromium source repository change list</a>.</p>\n<div class=\"clearfix\"></div>\n\n<p>I‚Äôm Pete LePage. Let‚Äôs dive in and see what‚Äôs new for developers in Chrome 61! </p>\n<div class=\"clearfix\"></div>\n\n<h2 id=\"javascript-modules\">JavaScript Modules</h2>\n<p>Chrome 61 adds native support for JavaScript modules via the \n<code>&lt;script type=&quot;module&quot;&gt;</code> element. That makes it possible for Chrome to fetch\ngranular dependencies in parallel, taking advantage of caching, avoiding\nduplications across the page and ensuring that script executes in the\ncorrect order.</p>\n<pre><code>&lt;script type=&quot;module&quot;&gt;\n  import {addText} from './utils.js';\n  addText('Modules are pretty cool.');\n&lt;/script&gt;\n</code></pre><p>This standardized module system unifies the way modular JavaScript can be\nwritten and shipped to web browsers. In the future, the same system will be\navailable in Node, making it easier for you to write and deploy isomorphic\nJavaScript.</p>\n<p>You can learn more about modules and the aspects of JavaScript that are\naffected by modules from the links below.</p>\n<ul>\n<li><a href=\"https://www.chromestatus.com/feature/5365692190687232\">Chrome Status</a> </li>\n<li><a href=\"https://jakearchibald.com/2017/es-modules-in-browsers/\">ES Modules in Browsers</a></li>\n<li><a href=\"https://ponyfoo.com/articles/es6-modules-in-depth\">ES6 Modules in Depth</a></li>\n</ul>\n<div class=\"clearfix\"></div>\n\n<h2 id=\"web-share-api\">Web Share API</h2>\n<p><img class=\"attempt-right\" src=\"https://developers.google.com/web/updates/images/2017/09/web-share_framed.png\" /></p>\n<p>If you want users to be easily able to share your content on their favorite\nsocial network, you need to integrate sharing buttons into your site for\neach social network. It adds bloat to your page, doesn‚Äôt always fit your\nUI nicely, and means you need to include code from a third party site.</p>\n<p>The Web Share API, available today on Chrome for Android allows you to invoke\nthe native sharing capabilities of the users device, allowing the user to\neasily share text or links with any of their installed native apps!</p>\n<p>In a future release, this API will also be able to share to installed web apps.\nTo use it, simply call <code>navigator.share</code> with the details of the page you want\nto share the system will handle the rest. </p>\n<pre><code>navigator.share({\n  title: document.title, text: 'Hello',\n  url: window.location.href\n}).then(() =&gt; {\n  console.log('Successful share');\n});\n</code></pre><p>Check out Paul‚Äôs <a href=\"https://developers.google.com/web/updates/2016/10/navigator-share\">WebShare API Update</a>\nfor full details and some best practices that you should be following.</p>\n<div class=\"clearfix\"></div>\n\n<h2 id=\"webusb\">WebUSB</h2>\n<p><img alt=\"USB Device Chooser screenshot\" class=\"attempt-right\" src=\"https://developers.google.com/web/updates/images/2016-03-02-access-usb-devices-on-the-web/usb-device-chooser.png\" /></p>\n<p>Most hardware peripherals such as keyboards, mice, printers, and gamepads are\nsupported by high-level web platform APIs. But, using specialized educational,\nscientific, industrial or other USB devices in the browser has been hard,\noften requiring specialized drivers.</p>\n<p>Chrome now supports the WebUSB API, allowing web apps to communicate with\nUSB devices, after the user has provided their consent. To learn more about\nthe security and privacy considerations and how they‚Äôre addressed, have a\npeek at the <a href=\"https://wicg.github.io/webusb/\">WebUSB spec</a>.</p>\n<p>Then, when you‚Äôre ready to dive in, take a look at Francois‚Äô\n<a href=\"https://developers.google.com/updates/2016/03/access-usb-devices-on-the-web\">WebUSB post</a> on updates.</p>\n<div class=\"clearfix\"></div>\n\n<h2 id=\"and-more-\">And more!</h2>\n<ul>\n<li>You can now specify scrolling smoothness with the\n<a href=\"https://drafts.csswg.org/cssom-view/#smooth-scrolling\"><code>scroll-behavior</code></a>\nCSS property.</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgba\">CSS hex color values</a>\ncan now specify alpha transparency by adding digits to the end of the string.</li>\n<li>You can access the relative positions of the screen content with the\n<a href=\"https://github.com/WICG/ViewportAPI\">Visual Viewport API</a>, exposing complex\nfunctionality like pinch-and-zoom in a more direct way.</li>\n</ul>\n<p>These are just a few of the changes in Chrome 61 for developers.  </p>\n<p>Then <a href=\"https://goo.gl/6FP1a5\">subscribe</a> to our\n<a href=\"https://www.youtube.com/user/ChromeDevelopers/\">YouTube channel</a>, and\nyou‚Äôll get an email notification whenever we launch a new video, or add our\n<a href=\"https://developers.google.com/web/shows/rss.xml\">RSS feed</a> to your feed reader.</p>\n<p>I‚Äôm Pete LePage, and as soon as Chrome 62 is released, I‚Äôll be right\nhere to tell you -- what‚Äôs new in Chrome!</p>", "tags": "chrome61,es6,modules,new-in-chrome,sharing,tech,web,webusb", "source_link": "https://developers.google.com/web/updates/?utm_source=feed&utm_medium=feed&utm_campaign=updates_feed", "title": "New in Chrome 61", "author_name": "Pete LePage", "source_type": "rss", "link": "https://developers.google.com/web/updates/2017/09/nic61?utm_source=feed&utm_medium=feed&utm_campaign=updates_feed", "published": "2017-09-05T00:00:00", "source_title": "Updates"}, {"source_name": "GoogleDevelopersWeb", "description": "<img src=\"https://ga-beacon.appspot.com/UA-52746336-1/web/updates/2017/09/visual-viewport-api?feed_type=atom&amp;pixel\" />\n        \n        <h1 id=\"introducing-visualviewport\">Introducing visualViewport</h1>\n<p>What if I told you, there's more than one viewport.</p>\n<p><em>BRRRRAAAAAAAMMMMMMMMMM</em></p>\n<p>And the viewport you're using right now, is actually a viewport within a\nviewport.</p>\n<p><em>BRRRRAAAAAAAMMMMMMMMMM</em></p>\n<p>And sometimes, the data the DOM gives you, refers to one of those viewport and\nnot the other.</p>\n<p><em>BRRRRAAAAM‚Ä¶</em> wait what?</p>\n<p>It's true, take a look:</p>\n<h2 id=\"layout-viewport-vs-visual-viewport\">Layout viewport vs visual viewport</h2>\n\n\n<div class=\"video-wrapper-full-width phone-video\">\n  \n  \n</div>\n\n<p>The video above shows a web page being scrolled and pinch-zoomed, along with a\nmini-map on the right showing the position of viewports within the page.</p>\n<p>Things are pretty straight forward during regular scrolling. The green area\nrepresents the <em>layout viewport</em>, which <code>position: fixed</code> items stick to.</p>\n<p>Things get weird when pinch-zooming is introduced. The red box represents the\n<em>visual viewport</em>, which is the part of the page we can actually see. This\nviewport can move around while <code>position: fixed</code> elements remain where they\nwere, attached to the layout viewport. If we pan at a boundary of the layout\nviewport, it drags the layout viewport along with it.</p>\n<h2 id=\"improving-compatibility\">Improving compatibility</h2>\n<p>Unfortunately web APIs are inconsistent in terms of which viewport they refer\nto, and they're also inconsistent across browsers.</p>\n<p>For instance, <code>element.getBoundingClientRect().y</code> returns the offset within the\n<em>layout viewport</em>. That's cool, but we often want the position within the page,\nso we write:</p>\n<pre><code>element.getBoundingClientRect().y + window.scrollY\n</code></pre><p>However, many browsers use the <em>visual viewport</em> for <code>window.scrollY</code>, meaning\nthe above code breaks when the user pinch-zooms.</p>\n<p>Chrome 61 changes <code>window.scrollY</code> to refer to the layout viewport instead,\nmeaning the above code works even when pinch-zoomed. In fact, browsers are\nslowly changing all positional properties to refer to the layout viewport.</p>\n<p>With the exception of one new property‚Ä¶</p>\n<h2 id=\"exposing-the-visual-viewport-to-script\">Exposing the visual viewport to script</h2>\n<p>A new API exposes the visual viewport as <code>window.visualViewport</code>. It's a <a href=\"https://wicg.github.io/ViewportAPI/spec.html\">draft\nspec</a>, with <a href=\"https://www.chromestatus.com/features/5737866978131968\">cross-browser\napproval</a>, and it's\nlanding in Chrome 61.</p>\n<pre><code>console.log(window.visualViewport.width);\n</code></pre><p>Here's what <code>window.visualViewport</code> gives us:</p>\n<table class=\"responsive\">\n  <tbody>\n    <tr>\n      <th colspan=\"2\"><code>visualViewport</code> properties</th>\n    </tr>\n    <tr>\n      <td>\n        <code>offsetLeft</code>\n      </td>\n      <td>\n        Distance between the left edge of the visual viewport, and the layout\n        viewport, in CSS pixels.\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>offsetTop</code>\n      </td>\n      <td>\n        Distance between the top edge of the visual viewport, and the layout\n        viewport, in CSS pixels.\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>pageLeft</code>\n      </td>\n      <td>\n        Distance between the left edge of the visual viewport, and the left\n        boundary of the document, in CSS pixels.\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>pageTop</code>\n      </td>\n      <td>\n        Distance between the top edge of the visual viewport, and the top\n        boundary of the document, in CSS pixels.\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>width</code>\n      </td>\n      <td>\n        Width of the visual viewport in CSS pixels.\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>height</code>\n      </td>\n      <td>\n        Height of the visual viewport in CSS pixels.\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>scale</code>\n      </td>\n      <td>\n        The scale applied by pinch-zooming. If content is twice the size due to\n        zooming, this would return <code>2</code>. This is not affected by\n        <code>devicePixelRatio</code>.\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n<p>There are also a couple of events:</p>\n<pre><code>window.visualViewport.addEventListener('resize', listener);\n</code></pre><table class=\"responsive\">\n  <tbody>\n    <tr>\n      <th colspan=\"2\"><code>visualViewport</code> events</th>\n    </tr>\n    <tr>\n      <td>\n        <code>resize</code>\n      </td>\n      <td>\n        Fired when <code>width</code>, <code>height</code>, or\n        <code>scale</code> changes.\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>scroll</code>\n      </td>\n      <td>\n        Fired when <code>offsetLeft</code> or <code>offsetTop</code> changes.\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 id=\"demo\">Demo</h2>\n<p>The video at the start of this article was created using <code>visualViewport</code>,\n<a href=\"https://visual-viewport.glitch.me/\">check it out in Chrome 61+</a>. It uses\n<code>visualViewport</code> to make the mini-map stick to the top-right of the visual\nviewport, and applies an inverse scale so it always appears the same size,\ndespite pinch-zooming.</p>\n<h2 id=\"gotchas\">Gotchas</h2>\n<h3 id=\"events-only-fire-when-the-visual-viewport-changes\">Events only fire when the visual viewport changes</h3>\n<p>It feels like an obvious thing to state, but it caught me out when I first\nplayed with <code>visualViewport</code>.</p>\n<p>If the layout viewport resizes but the visual viewport doesn't, you don't get a\n<code>resize</code> event. However, it's unusual for the layout viewport to resize without\nthe visual viewport also changing width/height.</p>\n<p>The real gotcha is scrolling. If scrolling occurs, but the visual viewport\nremains static <em>relative to the layout viewport</em>, you don't get a <code>scroll</code> event\non <code>visualViewport</code>, and this is really common. During regular document\nscrolling, the visual viewport stays locked to the top-left of the layout\nviewport, so <code>scroll</code> <em>does not fire</em> on <code>visualViewport</code>.</p>\n<p>If you're wanting to hear about all changes to the visual viewport, including\n<code>pageTop</code> and <code>pageLeft</code>, you'll have to listen to the window's scroll event\ntoo:</p>\n<pre><code>visualViewport.addEventListener('scroll', update);\nvisualViewport.addEventListener('resize', update);\nwindow.addEventListener('scroll', update);\n</code></pre><h3 id=\"avoid-duplicating-work-with-multiple-listeners\">Avoid duplicating work with multiple listeners</h3>\n<p>Similar to listening to <code>scroll</code> &amp; <code>resize</code> on the window, you're likely to call\nsome kind of &quot;update&quot; function as a result. However, it's common for many of\nthese events to happen at the same time. If the user resizes the window, it'll\ntrigger <code>resize</code>, but quite often <code>scroll</code> too. To improve performance, avoid\nhandling the change multiple times:</p>\n<pre><code>// Add listeners\nvisualViewport.addEventListener('scroll', update);\nvisualViewport.addEventListener('resize', update);\naddEventListener('scroll', update);\n\nlet pendingUpdate = false;\n\nfunction update() {\n  // If we're already going to handle an update, return\n  if (pendingUpdate) return;\n\n  pendingUpdate = true;\n\n  requestAnimationFrame(() =&gt; {\n    pendingUpdate = false;\n\n    // Handle update here\n  });\n}\n</code></pre><p><a href=\"https://github.com/WICG/ViewportAPI/issues/44\">I've filed a spec issue for\nthis</a>, as I think there may be a\nbetter way, such as a single <code>update</code> event.</p>\n<h3 id=\"event-handlers-don-t-work\">Event handlers don't work</h3>\n<p><a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=760916\">Due to a Chrome\nbug</a>, this <em>does\nnot work</em>:</p>\n<p><span class=\"compare-worse\">Buggy</span> ‚Äì uses an event handler</p>\n\n<pre><code>visualViewport.onscroll = () =&gt; console.log('scroll!');\n</code></pre><p>Instead:</p>\n<p><span class=\"compare-better\">Works</span> ‚Äì uses an event listener</p>\n\n<pre><code>visualViewport.addEventListener('scroll', () =&gt; console.log('scroll'));\n</code></pre><h3 id=\"offset-values-are-rounded\">Offset values are rounded</h3>\n<p>I think (well, I hope) this is <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=760936\">another Chrome\nbug</a>.</p>\n<p><code>offsetLeft</code> and <code>offsetTop</code> are rounded, which is pretty inaccurate once the\nuser has zommed in. You can see the issues with this during <a href=\"https://visual-viewport.glitch.me/\">the\ndemo</a> ‚Äì if the user zooms in and pans\nslowly, the <a href=\"https://www.youtube.com/watch?v=z9TXSciTxkc\">mini-map snaps between unzoomed\npixels</a>.</p>\n<h3 id=\"the-event-rate-is-slow\">The event rate is slow</h3>\n<p>Like other <code>resize</code> and <code>scroll</code> events, these no not fire every frame,\nespecially on mobile. You can see this during <a href=\"https://visual-viewport.glitch.me/\">the\ndemo</a> ‚Äì once you pinch zoom, the mini-map\nhas trouble staying locked to the viewport.</p>\n<h2 id=\"accessibility\">Accessibility</h2>\n<p>In <a href=\"https://visual-viewport.glitch.me/\">the demo</a> I used <code>visualViewport</code> to\ncounteract the user's pinch-zoom. It makes sense for this particular demo, but\nyou should think carefully before doing anything that overrides the user's\ndesire to zoom in.</p>\n<p><code>visualViewport</code> can be used to improve accessibility. For instance, if the user\nis zooming in, you may choose to hide decorative <code>position: fixed</code> items, to get\nthem out of the user's way. But again, be careful you're not hiding something\nthe user is trying to get a closer look at.</p>\n<p>You could consider posting to an analytics service when the user zooms in. This\ncould help you identify pages that users are having difficulty with at the\ndefault zoom level.</p>\n<pre><code>visualViewport.addEventListener('resize', () =&gt; {\n  if (visualViewport.scale &gt; 1) {\n    // Post data to analytics service\n  }\n});\n</code></pre><p>And that's it! <code>visualViewport</code> is a nice little API which solves compatibility\nissues along the way.</p>", "tags": "chrome61,tech,web", "source_link": "https://developers.google.com/web/updates/?utm_source=feed&utm_medium=feed&utm_campaign=updates_feed", "title": "Introducing visualViewport", "author_name": "Jake Archibald", "source_type": "rss", "link": "https://developers.google.com/web/updates/2017/09/visual-viewport-api?utm_source=feed&utm_medium=feed&utm_campaign=updates_feed", "published": "2017-09-04T00:00:00", "source_title": "Updates"}, {"source_name": "Twitter", "description": "", "tags": "computer science,tech,twitter", "source_link": "https://twitter.com", "title": "silence as a way of opting out of someone else's game is different than silence as a losing move in their game", "author_name": "Kent Beck", "source_type": "twitter", "link": "https://twitter.com/KentBeck/status/904017104759750656", "author_link": "https://twitter.com/KentBeck", "published": "2017-09-02T16:24:00", "source_title": "Twitter", "share_count": 29, "favorite_count": 72}, {"source_name": "Habrahabr", "description": "–í–∏—Ç–∞–ª–∏–π <a class=\"user_link\" href=\"https://habrahabr.ru/users/vithar/\">vithar</a> –•–∞—Ä–∏—Å–æ–≤ ‚Äî –æ–¥–∏–Ω –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –Ø–Ω–¥–µ–∫—Å–∞. –ù–∞ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –Ø.–°—É–±–±–æ—Ç–Ω–∏–∫–µ –ø–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É –í–∏—Ç–∞–ª–∏–π —Ä–∞—Å—Å–∫–∞–∑–∞–ª –ø—Ä–æ –ª—ë–≥–∫—É—é –≤–µ—Ä—Å–∏—é –ø–æ–∏—Å–∫–∞ –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ —Å–ø–æ—Å–æ–±—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∏–µ —É–ª–æ–∂–∏—Ç—å—Å—è –≤ 10 –∫–∏–ª–æ–±–∞–π—Ç.<br />\n<br />\n<div class=\"oembed\"><div><div style=\"width: 100%; height: 0;\"></div></div></div><br /> <a href=\"https://habrahabr.ru/post/336952/#habracut\">–ß–∏—Ç–∞—Ç—å –¥–∞–ª—å—à–µ ‚Üí</a>", "tags": "habr,perf,tech,web", "source_link": "https://habrahabr.ru/hub/client_side_optimization/posts/all/", "title": "–õ–µ–∫—Ü–∏—è –í–∏—Ç–∞–ª–∏—è –•–∞—Ä–∏—Å–æ–≤–∞ ¬´10k¬ª", "author_name": "Leono", "source_type": "rss", "link": "https://habrahabr.ru/post/336952/", "published": "2017-09-02T09:00:00", "source_title": "–•–∞–±—Ä–∞—Ö–∞–±—Ä / –í—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–¥—Ä—è–¥ / –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"}, {"source_name": "Twitter", "description": "", "tags": "computer science,tech,twitter", "source_link": "https://twitter.com", "title": "key lesson from poker: decisions that generate the most debate are equally profitable either way. just do something &amp; save your energy.", "author_name": "Kent Beck", "source_type": "twitter", "link": "https://twitter.com/KentBeck/status/903683915168178177", "author_link": "https://twitter.com/KentBeck", "published": "2017-09-01T18:20:00", "source_title": "Twitter", "share_count": 80, "favorite_count": 141}, {"source_name": "Twitter", "description": "", "tags": "computer science,tech,twitter", "source_link": "https://twitter.com", "title": "simplistic metaphor: changing culture is like deploying to servers that can tell you to piss off they quite like the current version", "author_name": "Kent Beck", "source_type": "twitter", "link": "https://twitter.com/KentBeck/status/903683603434881024", "author_link": "https://twitter.com/KentBeck", "published": "2017-09-01T18:18:00", "source_title": "Twitter", "share_count": 61, "favorite_count": 105}, {"source_name": "Twitter", "description": "", "tags": "computer science,tech,twitter", "source_link": "https://twitter.com", "title": "RT @kevingchristy: Hey people that like chocolate croissants! JUST HAVE A HERSHEY BAR FOR BREAKFAST AND LIVE YOUR TRUTH!", "author_name": "Kent Beck", "source_type": "twitter", "link": "https://twitter.com/KentBeck/status/903614276300021760", "author_link": "https://twitter.com/KentBeck", "published": "2017-09-01T13:43:00", "source_title": "Twitter", "share_count": 29, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "computer science,tech,twitter", "source_link": "https://twitter.com", "title": "Clearly showing the restorative effects of heartful conversation https://t.co/9gCS0wFTGA", "author_name": "Kent Beck", "source_type": "twitter", "link": "https://twitter.com/KentBeck/status/903472798164647936", "author_link": "https://twitter.com/KentBeck", "published": "2017-09-01T04:21:00", "source_title": "Twitter", "share_count": 2, "favorite_count": 16}, {"source_name": "FacebookCode", "description": "This year Facebook moved to a quasi-continuous push system, delivering tens to hundreds of code changes to the website every few hours.", "tags": "facebook,services,tech", "source_link": "https://code.facebook.com/", "title": "Rapid release at massive scale", "author_name": "Chuck Rossi", "source_type": "rss", "link": "https://code.facebook.com/posts/270314900139291/rapid-release-at-massive-scale/?utm_source=codedot_rss_feed&utm_medium=rss&utm_campaign=RSS+Feed", "published": "2017-08-31T17:00:00", "source_title": "Facebook Code"}, {"source_name": "FacebookCode", "description": "Trained deep neural nets can automatically reorient tilted 360 photos, which could help bring more realistic immersive experiences directly to people's phones.", "tags": "facebook,services,tech", "source_link": "https://code.facebook.com/", "title": "Optimizing 360 photos at scale", "author_name": "Matt Uyttendaele", "source_type": "rss", "link": "https://code.facebook.com/posts/129055711052260/optimizing-360-photos-at-scale/?utm_source=codedot_rss_feed&utm_medium=rss&utm_campaign=RSS+Feed", "published": "2017-08-31T17:00:00", "source_title": "Facebook Code"}, {"source_name": "FacebookCode", "description": "LogDevice helps ensure we can replicate data between distributed data stores, while maintaining high-write availability, durability, and consistency.", "tags": "facebook,services,tech", "source_link": "https://code.facebook.com/", "title": "LogDevice: a distributed data store for logs", "author_name": "Mark Marchukov", "source_type": "rss", "link": "https://code.facebook.com/posts/357056558062811/logdevice-a-distributed-data-store-for-logs/?utm_source=codedot_rss_feed&utm_medium=rss&utm_campaign=RSS+Feed", "published": "2017-08-31T17:00:00", "source_title": "Facebook Code"}, {"source_name": "Twitter", "description": "", "tags": "computer science,tech,twitter", "source_link": "https://twitter.com", "title": "Off to meet @Andela partners in SF (they employ the Fellows). Looking forward to hearing the story from the other side.", "author_name": "Kent Beck", "source_type": "twitter", "link": "https://twitter.com/KentBeck/status/903051052907323393", "author_link": "https://twitter.com/KentBeck", "published": "2017-08-31T00:25:00", "source_title": "Twitter", "share_count": 3, "favorite_count": 7}, {"source_name": "Twitter", "description": "", "tags": "computer science,tech,twitter", "source_link": "https://twitter.com", "title": "complexity = high bugs/change. bugs/change * many changes, cancel the terms = bugs. reduce complexity to enable change. @_ryannystrom", "author_name": "Kent Beck", "source_type": "twitter", "link": "https://twitter.com/KentBeck/status/902951189469306881", "author_link": "https://twitter.com/KentBeck", "published": "2017-08-30T17:48:00", "source_title": "Twitter", "share_count": 64, "favorite_count": 150}, {"source_name": "WebkitBlog", "description": "With the recent addition of SharedArrayBuffer, concurrency is finding its way into the JavaScript language.", "tags": "javascript,browsers,safari,tech,web,webkit", "text": "<p>With the recent addition of <a href=\"https://github.com/tc39/ecmascript_sharedmem\"><code>SharedArrayBuffer</code></a>, concurrency is finding its way into the JavaScript language. This addition allows JavaScript programs to perform concurrent access to <code>SharedArrayBuffer</code> objects. <a href=\"https://trac.webkit.org/changeset/208209/webkit\">WebKit supports <code>SharedArrayBuffer</code></a> <a href=\"https://trac.webkit.org/changeset/215565/webkit\">and it has full optimization support</a> <a href=\"https://trac.webkit.org/changeset/213714/webkit\">in our compiler pipeline</a>. Unfortunately, JavaScript does not allow any objects other than <code>SharedArrayBuffer</code> to be shared.</p>\n<p>This post considers a wild thought experiment: what would it take to extend concurrency to the entire JavaScript heap? In this world, any object can be shared with other threads. This would be no small change. Existing JavaScript VM optimizations exploit the fact that there is only one thread of execution, so concurrency is sure to introduce some performance problems. This post is concerned with whether this is even technically feasible, and if it is, what the cost might be.</p>\n<p>We offer a basic strawman API to illustrate what we mean by concurrency. Most of the post is concerned with how WebKit&#8217;s JavaScript VM (called JavaScriptCore, or JSC for short) can implement the strawman. Implementing this strawman will be a big effort. We think that our proposed implementation ought to be able to meet the following goals:</p>\n<ul>\n<li>No performance regressions for code that does not use concurrency.</li>\n<li>Linear scalability when a program is run in parallel with itself without deliberately sharing any objects. We don&#8217;t expect two threads to be fully twice as fast as one, since we expect some concurrency overhead &#8212; but if you have two CPUs then two threads should be faster than one, and hopefully close to twice as fast as one.</li>\n<li>Linear scalability &#8212; including speed-ups versus the best serial baselines &#8212; on some corpus of parallel code that does share objects.</li>\n<li>Sensible semantics, including a memory model that isn&#8217;t any weaker than what modern hardware provides.</li>\n<li>Compatibility. For example, concurrent JavaScript programs should have a story for how to use the DOM without requiring the DOM implementation to be rewritten.</li>\n</ul>\n<p>Our proposed implementation scheme relies on 64-bit systems, but that is largely because our engine is already 64-bit-centric.</p>\n<p>It&#8217;s not yet possible to evaluate the performance of this scheme empirically, but our implementation sketch does make it possible to intuit what performance might look like. Specifically, our scheme ensures that most property accesses will experience at most one arithmetic instruction worth of overhead (which is almost free), with a few particularly tricky (and rare) ones experiencing up to about 7x overhead. This post ends with a section that compares our scheme to other techniques for implementing concurrency.</p>\n<h2>Strawman Concurrent JS</h2>\n<p>Our strawman proposal for concurrent JS is to simply add threads. Threads gets separate stacks but share everything else. Threads are great for our experiment because they are so general. We can imagine implementing many other kinds of concurrent programming models on top of threads. Thus, if we can get our VM to support threads, then we can probably get it to support lots of other concurrent and parallel programming models. This post is about removing technical feasibility as a gating factor for adding any concurrent programming model to JavaScript.</p>\n<p>This section makes the strawman somewhat concrete, mostly to provide context on the aspects of it that are easy or hard to implement. It&#8217;s useful to know what the API looks like in order to understand what constraints it creates.</p>\n<p>Each program will start out with one thread. Threads can start other threads. Threads live in the same heap and can share objects with each other. This section shows the API, describes the memory model, and shows how concurrency interacts with the DOM.</p>\n<h3>Possible API</h3>\n<p>We propose:</p>\n<ul>\n<li>a simple API for creating threads,</li>\n<li>a change to the <code>Atomics</code> object to support building lock objects,</li>\n<li>a lock and condition variable API that can be built on top of Atomics,</li>\n<li>a way to create thread-local variables, and</li>\n<li>some helpers to allow for incremental adoption.</li>\n</ul>\n<p>This post will use this strawman to understand exactly what it would take to implement threads in JavaScriptCore.</p>\n<p>We want it to be easy to create threads:</p>\n<pre><code class=\"javascript\"><span class=\"keyword operator\">new</span> <span class=\"identifier\">Thread</span>(<span class=\"keyword type\">function</span>() { <span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"string\">\"Hello, threads!\"</span>); });\n</code></pre>\n<p>This will start a new thread, which will eventually print &#8220;Hello, threads!&#8221;. Note that even this simple example shares lots of stuff with the thread. For example, the function object captures the lexical scope in the thread in which it was created, so that when the thread accesses the <code>console</code> variable, this is an access to a shared object.</p>\n<p>Threads can be <em>joined</em> to wait for them to finish and to get their result:</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">let</span> <span class=\"identifier\">result</span> <span class=\"operator\">=</span> <span class=\"keyword operator\">new</span> <span class=\"identifier\">Thread</span>(() <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"number\">42</span>).<span class=\"identifier\">join</span>(); <span class=\"comment\">// returns 42\n</span></code></pre>\n<p>In web browsers, the main thread cannot block, so <code>join()</code> will throw an exception if the above code was on the main thread. We can support asynchronous versions of blocking operations:</p>\n<pre><code class=\"javascript\"><span class=\"keyword operator\">new</span> <span class=\"identifier\">Thread</span>(() <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"number\">42</span>).<span class=\"identifier\">asyncJoin</span>().<span class=\"identifier\">then</span>((<span class=\"identifier\">result</span>) <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"comment\">/* result is 42 */</span>)\n</code></pre>\n<p>You can always get the Thread object for the current thread:</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">let</span> <span class=\"identifier\">myThread</span> <span class=\"operator\">=</span> <span class=\"identifier\">Thread</span>.<span class=\"identifier\">current</span>;\n</code></pre>\n<p>Threads may need to wait on each other to prevent races. This can be accomplished using locks. Rather than simply introduce a locking API, we propose to extend the Atomics API to allow users to build any locks they like. We provide a good lock implementation in our proposed API, but we want to encourage the creation of other kinds of synchronization primitives. The existing <code>SharedArrayBuffer</code> specification allows developers to create custom locks using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics\"><code>Atomics</code></a> API. This API allows you to say things like:</p>\n<pre><code class=\"javascript\"><span class=\"identifier\">Atomics</span>.<span class=\"identifier\">wait</span>(<span class=\"identifier\">array</span>, <span class=\"identifier\">index</span>, <span class=\"identifier\">expectedValue</span>);\n</code></pre>\n<p>and:</p>\n<pre><code class=\"javascript\"><span class=\"identifier\">Atomics</span>.<span class=\"identifier\">wake</span>(<span class=\"identifier\">array</span>, <span class=\"identifier\">index</span>, <span class=\"identifier\">numThreadsToWake</span>);\n</code></pre>\n<p>Currently, the array must be an integer typed array backed by a <code>SharedArrayBuffer</code>. We propose extending all <code>Atomics</code> methods that take an array/index to take an object and a property name instead. Since an index is a property name, this does not change behavior of code that already uses this API for <code>SharedArrayBuffer</code>. This also implies that <code>Atomics</code> methods that currently take integer values (for storing or comparing to elements in typed arrays) will now be able to take any JavaScript value when used with normal JavaScript properties. <a href=\"https://trac.webkit.org/browser/webkit/trunk/LayoutTests/workers/sab/worker-resources.js?rev=221337#L54\"><code>Atomics.wake</code>, <code>Atomics.wait</code>, and <code>Atomics.compareExchange</code> are sufficient for implementing any a lock using just one JavaScript property.</a></p>\n<p>Additionally, we propose adding a Lock API:</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">let</span> <span class=\"identifier\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword operator\">new</span> <span class=\"identifier\">Lock</span>();\n<span class=\"identifier\">lock</span>.<span class=\"identifier\">hold</span>(<span class=\"keyword type\">function</span>() { <span class=\"comment\">/* ...perform work with lock held... */</span> });\n</code></pre>\n<p>Locking on the main thread is possible with promises:</p>\n<pre><code class=\"javascript\"><span class=\"identifier\">lock</span>.<span class=\"identifier\">asyncHold</span>().<span class=\"identifier\">then</span>(<span class=\"keyword type\">function</span>() { <span class=\"comment\">/* ...perform work with lock held... */</span> });\n</code></pre>\n<p>This works because each thread gets its own runloop. We can also add a Condition API:</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">let</span> <span class=\"identifier\">cond</span> <span class=\"operator\">=</span> <span class=\"keyword operator\">new</span> <span class=\"identifier\">Condition</span>();\n<span class=\"identifier\">cond</span>.<span class=\"identifier\">wait</span>(<span class=\"identifier\">lock</span>); <span class=\"comment\">// Wait for a notification while the lock is temporarily released.\n</span><span class=\"comment\">// ...\n</span><span class=\"identifier\">cond</span>.<span class=\"identifier\">asyncWait</span>(<span class=\"identifier\">lock</span>).<span class=\"identifier\">then</span>(<span class=\"keyword type\">function</span>() { <span class=\"comment\">/* ...perform work with lock reacquired... */</span> });\n<span class=\"comment\">// ...\n</span><span class=\"identifier\">cond</span>.<span class=\"identifier\">notify</span>(); <span class=\"comment\">// Notify one thread or promise.\n</span><span class=\"comment\">// ...\n</span><span class=\"identifier\">cond</span>.<span class=\"identifier\">notifyAll</span>(); <span class=\"comment\">// Notify all threads and promises.\n</span></code></pre>\n<p><code>Condition.prototype.wait</code> will release the lock you pass it before waiting, and reacquire it before returning. The async variant associates the resulting promise with the condition variable such that if the condition is notified, the promise will be fulfilled on the current thread.</p>\n<p>Using <code>Thread.current</code> and <code>WeakMap</code>, anyone can implement thread-local variables. Nonetheless, it&#8217;s sometimes possible for the underlying runtime to do something more clever. We don&#8217;t want to require all JavaScript programmers to know how to implement thread-local variables with <code>WeakMap</code>. Hence, we propose a simple API:</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">let</span> <span class=\"identifier\">threadLocal</span> <span class=\"operator\">=</span> <span class=\"keyword operator\">new</span> <span class=\"identifier\">ThreadLocal</span>();\n<span class=\"keyword type\">function</span> <span class=\"identifier\">foo</span>()\n{\n    <span class=\"keyword control\">return</span> <span class=\"identifier\">threadLocal</span>.<span class=\"identifier\">value</span>;\n}\n<span class=\"keyword operator\">new</span> <span class=\"identifier\">Thread</span>(<span class=\"keyword type\">function</span>() {\n    <span class=\"identifier\">threadLocal</span>.<span class=\"identifier\">value</span> <span class=\"operator\">=</span> <span class=\"number\">43</span>;\n    <span class=\"identifier\">print</span>(<span class=\"string\">\"Thread sees \"</span> <span class=\"operator\">+</span> <span class=\"identifier\">foo</span>()); <span class=\"comment\">// Will always print 43.\n</span>});\n<span class=\"identifier\">threadLocal</span>.<span class=\"identifier\">value</span> <span class=\"operator\">=</span> <span class=\"number\">42</span>;\n<span class=\"identifier\">print</span>(<span class=\"string\">\"Main thread sees \"</span> <span class=\"operator\">+</span> <span class=\"identifier\">foo</span>()); <span class=\"comment\">// Will always print 42.\n</span></code></pre>\n<p>Finally, we want to make it easy for users to assert that objects stay on one thread:</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">var</span> <span class=\"identifier\">o</span> <span class=\"operator\">=</span> {<span class=\"identifier\">f</span><span class=\"operator\">:</span> <span class=\"string\">\"hello\"</span>}; <span class=\"comment\">// Could be any object.\n</span><span class=\"identifier\">Thread</span>.<span class=\"identifier\">restrict</span>(<span class=\"identifier\">o</span>);\n<span class=\"keyword operator\">new</span> <span class=\"identifier\">Thread</span>(<span class=\"keyword type\">function</span>() {\n    <span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"identifier\">o</span>.<span class=\"identifier\">f</span>); <span class=\"comment\">// Throws ConcurrentAccessError\n</span>});\n</code></pre>\n<p>Any object that is <code>Thread.restrict</code>ed should throw <code>ConcurrencyAccessError</code> in response to any <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">proxyable</a> operation performed by a thread other than the one that called <code>Thread.restrict</code>.</p>\n<h3>Memory Model</h3>\n<p>Processors and compilers like to reorder memory accesses. Both processors and compilers love to <em>hoist</em> loads from memory. This happens because the following code:</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">let</span> <span class=\"identifier\">x</span> <span class=\"operator\">=</span> <span class=\"identifier\">o</span>.<span class=\"identifier\">f</span>\n<span class=\"identifier\">o</span>.<span class=\"identifier\">g</span> <span class=\"operator\">=</span> <span class=\"number\">42</span>\n<span class=\"keyword type\">let</span> <span class=\"identifier\">y</span> <span class=\"operator\">=</span> <span class=\"identifier\">o</span>.<span class=\"identifier\">f</span>\n</code></pre>\n<p>May get transformed by the compiler or processor to:</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">let</span> <span class=\"identifier\">x</span> <span class=\"operator\">=</span> <span class=\"identifier\">o</span>.<span class=\"identifier\">f</span>\n<span class=\"identifier\">o</span>.<span class=\"identifier\">g</span> <span class=\"operator\">=</span> <span class=\"number\">42</span>\n<span class=\"keyword type\">let</span> <span class=\"identifier\">y</span> <span class=\"operator\">=</span> <span class=\"identifier\">x</span>\n</code></pre>\n<p>Effectively, this means that the &#8220;load&#8221; into <code>y</code> got moved above the store to <code>o.g</code>. Processors will do the same optimization dynamically, by caching the load of <code>o.f</code> and reusing the cached result for the second load.</p>\n<p>Processors and compilers like to <em>sink</em> stores to memory. This happens because the following code:</p>\n<pre><code class=\"javascript\"><span class=\"identifier\">o</span>.<span class=\"identifier\">f</span> <span class=\"operator\">=</span> <span class=\"number\">42</span>\n<span class=\"keyword type\">let</span> <span class=\"identifier\">tmp</span> <span class=\"operator\">=</span> <span class=\"identifier\">o</span>.<span class=\"identifier\">g</span>\n<span class=\"identifier\">o</span>.<span class=\"identifier\">f</span> <span class=\"operator\">=</span> <span class=\"number\">43</span>\n</code></pre>\n<p>May get transformed by the compiler or processor to:</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">let</span> <span class=\"identifier\">tmp</span> <span class=\"operator\">=</span> <span class=\"identifier\">o</span>.<span class=\"identifier\">g</span>\n<span class=\"identifier\">o</span>.<span class=\"identifier\">f</span> <span class=\"operator\">=</span> <span class=\"number\">43</span>\n</code></pre>\n<p>This is &#8220;as if&#8221; the <code>o.f = 42</code> statement got moved to just before <code>o.f = 43</code>. Even if the compiler does not perform this transformation, the processor may buffer stores and execute them when it is convenient. This can also mean that <code>o.f = 42</code> may execute after <code>let tmp = o.g</code>.</p>\n<p>It makes most sense for our strawman to follow the existing <code>SharedArrayBuffer</code> memory model. It&#8217;s already possible to write multithreaded code that has boundedly nondeterministic behavior using <code>SharedArrayBuffer</code>, and we aren&#8217;t going to protect completely from such code. But JavaScript&#8217;s objects are much more complicated than a buffer, so guaranteeing that basic invariants of the JS object model hold in the face of races is nontrivial. We propose that operations that modify JavaScript object storage execute atomically. Atomicity means that if many threads execute these operations concurrently, then each one will behave as if they had all executed in some sequence with no concurrency. Each of the underlying operations that JS can do to objects should be atomic:</p>\n<ul>\n<li>Add a property.</li>\n<li>Delete a property.</li>\n<li>Get a property&#8217;s value.</li>\n<li>Set a property&#8217;s value.</li>\n<li>Change a property&#8217;s configuration.</li>\n<li>Snapshot the set of property names.</li>\n</ul>\n<p>This doesn&#8217;t always mean that the expression <code>o.f</code> is atomic, since this expression may do much more than loading a property&#8217;s value. In particular:</p>\n<ul>\n<li>If <code>o.f</code> is a plain property directly on <code>o</code>, then it is atomic.</li>\n<li>If <code>o.f</code> is a prototype access, then loading the prototype is separate from loading <code>f</code> from the prototype.</li>\n<li>If <code>o.f</code> is a getter, then loading the getter is one step (which would be atomic if the getter is directly on <code>o</code>) but calling the getter is not atomic, since the getter may execute arbitrary code.</li>\n</ul>\n<p>We propose that the low-level object operations are atomic. Some operations, like getting and setting a property&#8217;s value, may be implemented using hardware primitives that allow reordering. We propose to allow reorderings of get/set accesses around each other subject to the same memory model for get/set accesses to SharedArrayBuffer. While our strawman does allow for races and some memory model strangeness, it does not allow for JavaScript&#8217;s object model invariants to be invalidated. For any heap created by a concurrent JS program, it should be possible to write a sequential JS program that creates an indistinguishable heap.</p>\n<p>Finally, we propose that memory management of the concurrent JS heap happens just as it does in other garbage-collected multi-threaded languages. Quite simply, garbage collection must appear to happen atomically and only at well defined safepoints, like loop back edges, allocation sites, and during calls to native code that doesn&#8217;t touch the heap. This requirement is satisfied by popular garbage collection algorithms like those in <a href=\"http://www.oracle.com/technetwork/articles/java/index-jsp-140228.html\">HotSpot</a> or <a href=\"http://www.jikesrvm.org/UserGuide/MMTk/index.html\">MMTk</a>. It&#8217;s also satisfied by classic algorithms like mark-sweep and semi-space, <a href=\"http://dl.acm.org/citation.cfm?id=158611\">and even in</a> <a href=\"http://dl.acm.org/citation.cfm?id=174673\">garbage collectors with</a> <a href=\"http://www.filpizlo.com/papers/pizlo-ismm2007-stopless.pdf\">no global</a> <a href=\"http://www.filpizlo.com/papers/pizlo-pldi2010-schism.pdf\">stop-the-world phase</a>, <a href=\"http://www.cs.technion.ac.il/~erez/Papers/sctack-scan-vee09.pdf\">including ones that are so lock-free that they don&#8217;t even stop threads to scan their stacks</a>. WebKit&#8217;s <a href=\"https://webkit.org/blog/7122/introducing-riptide-webkits-retreating-wavefront-concurrent-garbage-collector/\">Riptide GC</a> already mostly supports multiple threads because our JIT threads can access the heap.</p>\n<h3>Interaction With The DOM</h3>\n<p>Extending concurrency to all of JavaScript will be hard; extending it to all of the DOM will be even harder. We extend enough reasoning about threads to the DOM to make this strawman useful.</p>\n<p>We propose that by default, DOM objects throw <code>ConcurrentAccessError</code> in response to any proxyable operation from threads other than the main one, just as if <code>Thread.restrict</code> had been called on them from the main thread.</p>\n<p>However, a few objects will have to allow for concurrent accesses just to make the language behave sanely. Something obvious like:</p>\n<pre><code class=\"javascript\"><span class=\"keyword operator\">new</span> <span class=\"identifier\">Thread</span>(<span class=\"keyword type\">function</span>() { <span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"string\">\"Hello, threads!\"</span>); });\n</code></pre>\n<p>requires a concurrent access to a DOM object. In WebKit, <em>DOM global objects</em> are in charge of storing the variable state of a <code>window</code>. Ordinary JS properties of the global object (including <code>console</code>, <code>Object</code>, etc) have to be accessible to concurrent threads, because those properties are the scripts&#8217;s global variables. Accesses from other threads to exotic properties of the global object, or properties of the global object&#8217;s prototype, can throw. Attempts to add new properties to the global object or delete properties from it from non-main threads can throw as well. These restrictions mean that in WebKit, handling the DOM global object&#8217;s limited kind of concurrent property accesses is not much harder than handling those same accesses for ordinary JS objects.</p>\n<p>Additionally, <a href=\"https://heycam.github.io/webidl/#dfn-namespace-object\">namespace objects</a> like <a href=\"https://console.spec.whatwg.org\"><code>console</code></a> can be accessed by concurrent threads because they can just use the JS object model. There is no reason to restrict them to the main thread, and it&#8217;s important that <code>console</code> is accessible due to its utility for debugging.</p>\n<h3>Strawman Summary</h3>\n<p>This section has proposed a strawman API for threading in JavaScript. This API is powerful enough to implement custom synchronization primitives. It&#8217;s also powerful enough to allow for the execution of racy programs, but it does not allow races to break the language. Threads are general enough to allow for many other kinds of programming models to be implemented on top of them.</p>\n<h2>Implementing Concurrent JS in WebKit</h2>\n<p>This section shows that we can implement our threads-based strawman without having to disable any of JavaScriptCore&#8217;s fundamental performance optimizations. Our scheme aims to achieve close to zero overhead even in the case of programs that read and write to the same objects from multiple threads.</p>\n<p>JavaScript shares a lot in common with languages like Java and .NET, which already support threads. Here are some of the things these languages have in common with JavaScript:</p>\n<ul>\n<li>Like JavaScript, those languages use tracing-based garbage collectors. Our GC mostly supports multiple threads, since JIT threads are already allowed to read the heap. The biggest missing piece is <a href=\"https://shipilev.net/jvm-anatomy-park/4-tlab-allocation/\">thread local allocation</a>, which enables concurrent allocation. For our GC this just means a separate <a href=\"https://trac.webkit.org/browser/webkit/trunk/Source/JavaScriptCore/heap/FreeList.h?rev=221337\"><code>FreeList</code></a> per thread for each allocator. Our GC has a fixed number of allocators and we already have fast thread-local storage, so this will be a mechanical change.</li>\n<li>Like JavaScript, those languages are implemented using multiple tiers of JITs and possibly an interpreter. Our <a href=\"https://webkit.org/blog/7691/webassembly/\">WebAssembly VM</a> already supports multi-threaded tier-up from BBQ (build bytecode quickly) to OMG (optimized machinecode generation). We&#8217;re not worried about getting this right for JavaScript.</li>\n<li>Like implementations of JavaScript, implementations of those languages use inline caching to accelerate dynamic operations. We will have to make some changes to our inline caches to support concurrency, and we describe those changes in a later section in this post. It&#8217;s not the hardest part about adding concurrency, since it&#8217;s not new territory &#8212; <a href=\"https://wiki.openjdk.java.net/display/HotSpot/PerformanceTechniques\">it&#8217;s been done before</a>.</li>\n</ul>\n<p>These similarities suggest that many of the techniques that are already used to make Java virtual machines support concurrency can be reused to make JavaScript concurrent.</p>\n<p>Where things get hard is JavaScript&#8217;s ability to dynamically reconfigure objects. While Java and .NET have fixed-size objects (once allocated, an object does not change size), JavaScript objects tend to be variable-size. Concurrency in those statically-typed languages relies on the fact that concurrent accesses to fixed-size objects are <em>atomic by default</em> up to the machine&#8217;s pointer width (so, 64-bit systems do 64-bit property accesses atomically by default). Pointer values in Java and .NET are addresses to the contiguous slab of memory holding the object&#8217;s data, and it only takes some address arithmetic (like adding an offset) and a single memory access instruction to read/write any field. Even if the memory model allows surprising reorderings, it&#8217;s never the case that a racing access instruction to the same field (or different fields of the same object) corrupts the entire object or causes a crash. JavaScript&#8217;s variable-size objects, on the other hand, mean that object accesses require multiple memory access instructions in some cases. A sequence of operations involving multiple accesses to memory is not atomic by default. In the worst case, the VM might crash because the internal object state gets corrupted. Even if this doesn&#8217;t happen, races might cause writes to be lost or for time-travel to occur (writing A and then B to a field may lead to reads of that field to first see A, then B, and then A again).</p>\n<p>In our strawman proposal, concurrent JavaScript implies that fundamental operations such as adding a new property to an object, changing the value of a property, reading a property, and removing a property all proceed atomically. No race should ever lead to a VM crash, lost writes, or the value of a property experiencing time travel.</p>\n<p>We propose an algorithm that allows most JavaScript object accesses to be <em>wait-free</em> and require minimal overhead compared to our existing serial JS implementation. Wait-free operations execute without ever blocking and complete in a bounded number of steps regardless of contention. This algorithm borrows ideas from real-time garbage collection, locking algorithms, and type inference. We plan to use a tiered defense against the overheads of concurrency:</p>\n<ol>\n<li>We propose using our existing polymorphic-inline-cache-based type inference system to infer relaxed notions of thread-locality of objects (and their types) that we call <em>transition-thread-locality</em> (TTL). TTL objects will use the same object model as they do today and accesses to those objects will enjoy close to zero overhead. TTL does not imply true thread-locality; for example even objects that are read and written by many threads may be inferred TTL.</li>\n<li>We propose using a <em>segmented</em> object model for objects that fail TTL inference. This will introduce an extra load instruction, and some arithmetic, to the property access fast path. We fear that by itself, this technique would not be fast enough to meet our performance goals &#8212; but since the segmented object model will only be used surgically for those objects (or types of objects) that fail TTL inference, we suspect that the <em>net</em> cost will be small enough to be practical.</li>\n<li>Operations on non-TTL objects that don&#8217;t benefit from the segmented object model will use locks. During our development of the Riptide concurrent GC, we added an internal lock to each object. This lock occupies just 2 bits and allows the lock/unlock fast path to require just an atomic compare-and-swap (CAS) and a branch.</li>\n</ol>\n<p>Before diving into the details, we first set up some expectations for the hardware that this proposed system would run on. Then we describe this proposal in reverse. We consider the cost of just using per-object locking. Then we review the existing JSC object model and describe what kinds of operations happen to already be atomic within this model. Next we introduce <em>segmented butterflies</em>, which are the key to allow dynamically reconfiguring objects. Then we show how our TTL inference will allow us to use our existing object model for hopefully most of the JavaScript heap. This section then considers some loose ends, like how to do inline caching concurrently, how resizable arrays fit into TTL and segmented butterflies, how to handle large thread counts using the <em>local optimizer lock</em> (LOL), and finally how to handle native state that isn&#8217;t thread-safe.</p>\n<h3>Hardware Expectations</h3>\n<p>This post describes how to convert JavaScriptCore to support concurrent JavaScript. JSC is currently optimized for 64-bit systems, and most of our existing concurrency support (concurrent JIT, concurrent GC) only works on 64-bit systems. This section briefly summarizes what we expect from a 64-bit system to be able to use our scheme.</p>\n<p>JSC is optimized for x86-64 and ARM64. This scheme assumes the weaker of the two memory models (ARM64) and assumes that the following atomic instructions are inexpensive enough that it&#8217;s practical to use them as an optimization over locking:</p>\n<ul>\n<li>64-bit loads and stores are atomic by default. We expect that these accesses may be reordered around other accesses. But we also expect that if memory access instruction B has a dataflow dependency on memory access instruction A, then A will always come before B. For example, in a dependent load chain like <code>a-&gt;f-&gt;g</code>, <code>a-&gt;f</code> will always execute before <code>_-&gt;g</code>.</li>\n<li>64-bit CAS (compare-and-swap). JSC uses 64-bit words for JavaScript properties and two important meta-data fields in the object header: the <em>type header</em> and the <em>butterfly pointer</em>. We want to be able to atomically CAS any JS property and either of the meta-data properties in the object header.</li>\n<li>128-bit DCAS (double-word compare-and-swap). Sometimes, we will want to CAS all of the meta-data inside JS objects, which means CASing both the 64-bit type header and the adjacent 64-bit butterfly pointer.</li>\n</ul>\n<h3>Per-Object Locking</h3>\n<p>Each object in JSC already has a lock, which we use to synchronize certain fundamental JavaScript operations with the <a href=\"https://webkit.org/blog/7122/introducing-riptide-webkits-retreating-wavefront-concurrent-garbage-collector/\">garbage collector</a>. We can use this lock to protect any operations that need to be synchronized between JavaScript threads. The rest of this post deals with optimizations that allow us to avoid this lock. But let&#8217;s consider exactly what the cost of the lock is. Our internal object lock algorithm <a href=\"https://webkit.org/blog/6161/locking-in-webkit/\">requires an atomic compare-and-swap (CAS) and a branch for locking, and another CAS and branch for unlocking</a>. In the best case, CAS is like executing at least 10 cycles. This is the amortized cost assuming the CAS succeeds. On some hardware, the cost is much higher. Assuming a branch is one cycle, this means at least 22 extra cycles for each object operation that requires the lock. Some rare operations are already expensive enough that 22 cycles is not bad, but many fast path operations would not be able to handle such overhead. Below we consider some operations and how much they would be affected if they had to use locking.</p>\n<ul>\n<li>Adding a new property currently requires only one load, a branch, and two stores on the optimized fast path. Each of those operations is a single cycle, leading to about 4 cycles total in the fastest case. Adding locking bloats this to 26 cycles &#8211; a ~7x slow-down. In some cases, adding a new property can be optimized down to just a single store. In those cases, adding locking creates a 23x regression.</li>\n<li>Changing the value of an existing property requires a load, a branch, and a store. That&#8217;s 3 cycles in the fastest case. Adding two CASes and two branches bloats this to 25 cycles &#8211; a 8x slow-down. In some cases, we can optimize a property store to just one store instruction. Putting locking around it is a 23x regression.</li>\n<li>Loading an existing property&#8217;s value requires a load, a branch, and another load. Adding locking is a 8x slow-down, or 23x in the case where we optimized the load to just a single load instruction.</li>\n<li>Deleting a property is already slow. We are fine with putting locks around it. Deleting properties is relatively rare, but we have to support it.</li>\n<li>Dictionary lookups &#8212; JSC-speak for property accesses that we execute dynamically without any inline cache or compiler smarts &#8212; will see a small overhead from locking. Those code paths are already expensive enough that adding locking to them is unlikely to be a problem.</li>\n<li>Snapshotting the set of properties does not change. It&#8217;s already possible for concurrent threads to snapshot the set of properties of any object in JSC because of locking that we implemented for concurrent garbage collection.</li>\n</ul>\n<p>While some operations like deletion are already expensive enough that locking is not a problem, we don&#8217;t believe it&#8217;s practical to add such extreme costs to the fast cases of JavaScript object access. The resulting programming language would be too slow.</p>\n<p>Designing a fast concurrent JS implementation requires introducing new algorithms for property accesses that can run concurrently to each other without requiring any locking except in rare cases. In the sections that follow, we describe such an algorithm. First we review JavaScriptCore&#8217;s object model. Then we show cases where JavaScriptCore&#8217;s object model already behaves as if it had fixed-size objects; those cases never require locking. Next we show a technique called <em>segmented</em> butterflies, which allows for mostly wait-free concurrent object access. By itself, this technique is still too expensive for our tastes. So, we show how to infer which object types are <em>transition-thread-local</em> (TTL) to avoid synchronization when transitioning objects. This allows us to use flat butterflies (our existing object model) for the majority of objects. Then we describe how to handle deletion, dictionary lookups, inline caches, arrays, and thread-unsafe objects.</p>\n<h3>JavaScriptCore Object Model</h3>\n<figure class=\"widescreen mattewhite\">\n<img src=\"https://webkit.org/wp-content/uploads/object-model-1x.png.png\" /><figcaption><b>The JavaScriptCore Object Model.</b> JavaScript values and object pointers are implemented as pointers to the cell. The cell never moves and never changes size, but contains a pointer to the butterfly, which can grow either left (for named properties) or right (for array elements).</figcaption></figure>\n<p>JavaScriptCore&#8217;s object model allows for four kinds of state, each of which is optional:</p>\n<ul>\n<li>Native state represented using ordinary C++ objects.</li>\n<li>Data for named object properties (like <code>o.f</code>) that we statically guessed the object would have.</li>\n<li>Data for named object properties that were added dynamically, forcing us to change the size of the object.</li>\n<li>Data for indexed object properties. These can change the size of the object in many ways.</li>\n</ul>\n<p>The first two kinds of state does not involve resizing the object. The last two kinds of state require resizing. In JSC, fixed-sized state is stored directly in the object&#8217;s <em>cell</em>. The cell is what a pointer to an object points to. Within the cell, there is a <em>butterfly pointer</em> that can be used to store dynamically-allocated and resizable state in a <em>butterfly</em>. Butterflies store named properties to the left of where the butterfly pointer points inside <em>out-of-line slots</em>, and indexed properties to the right as <em>array elements</em>. Each of those locations may store a tagged JavaScript value, which may be a number, pointer to another cell (representing a string, symbol, or object), or a special value (<code>true</code>, <code>false</code>, <code>null</code>, or <code>undefined</code>).</p>\n<p>Every object has a <em>structure</em>, which contains the hashtable used for mapping property names to slots in the object. Objects typically share a structure with other objects that look like it (that have the same properties in the same order, among other requirements). The structure is referenced using a 32-bit index into a structure table. We do this to save space. The <em>indexing</em> and <em>cell state</em> bytes have some spare bits. We used two spare bits in the <em>indexing</em> byte to support per-object locking. We also have spare bits in the <em>butterfly pointer</em>, since pointers don&#8217;t need all 64 bits on a 64-bit system.</p>\n<p>Butterflies are optional. Many objects don&#8217;t have a butterfly. When a butterfly is allocated, each of the two sides are optional. The left side of the butterfly holds the out-of-line slots. It&#8217;s possible just to allocate that; in this case the butterfly pointer will point 8 bytes to the right of the end of the butterfly&#8217;s memory. The right side of the butterfly holds the array elements and the array header. The <em>public length</em> is the length as it is reported by <code>array.length</code>, while the <em>vector length</em> is the number of array element slots that were allocated.</p>\n<h3>Freebies</h3>\n<p>Within this object model, accesses to anything in the cell itself are atomic by default, just like accesses to objects in Java are atomic by default. This is a big deal, since our optimizer is generally successful at putting the most important object fields inline in the cell. Concurrent JS programs that mostly rely on data that ends up inside the cell will experience almost no overhead versus their serial equivalents.</p>\n<p>Additionally, if we know that the butterfly won&#8217;t be reallocated ever again (i.e. the butterfly pointer is immutable), then we can access it directly without any problems. Those accesses will be atomic by default.</p>\n<p>Alternatively, if we know that only the current thread will ever resize the butterfly and all other threads will only read it, then accesses to the butterfly will be atomic by default.</p>\n<p>Problems happen when one thread attempts to <em>transition</em> the object (i.e. add a property and/or reconfigure the butterfly) while some other thread is writing to it (or also transitioning it). If we used our current implementation of object accesses in a concurrent setting, a transition on one thread could cause races that lead to behavior that does not conform to our proposed specification.</p>\n<ul>\n<li>Writes made by another thread could disappear or experience time travel. This race happens because the transitioning thread might first complete a copy of the butterfly and then transition the object, while another thread does some more writes to the object in between those two steps. If a third thread is observing what is going on by repeatedly reading the state of the fields being written, then it will first see the state before any writes, then it will see the writes, and then once the transition completes it will see the original state again.</li>\n<li>Two transitions performed concurrently could cause the butterfly pointer and the object&#8217;s type to be mismatched. The butterfly&#8217;s format is determined by fields in the object&#8217;s header that are not inside the same 64-bit word as the butterfly pointer. We cannot allow the butterfly and the header to get out of sync, as this would lead to memory corruption.</li>\n<li>Two transitions performed concurrently can cause some minor heap corruption even if the butterfly is not involved. If a transitions involving an inline property proceeds as two steps &#8212; first, change the object&#8217;s type, and then, store the new property &#8212; then two racing transitions adding two different properties may result in one property being added, where its value ends up being the intended value of the other property. For example, a race between <code>o.f = 1</code> and <code>o.g = 2</code> could result in <code>o.f == 2</code> and <code>\"g\" in o == false</code>.</li>\n</ul>\n<p>In the next section we show how to create an object model that has no such races, but comes with some cost. After that, we show how to use TTL inference to use our existing object model most of the time even in programs that share objects between threads.</p>\n<h3>Segmented Butterflies</h3>\n<p>Transitioning an object means allocating a new butterfly, and copying the contents of the old butterfly into the new one while other threads may be reading or writing the old butterfly. We want the copy to seem as if it had happened in one atomic step. Lots of research has gone into supporting concurrent copying of objects in the context of real-time garbage collectors. The approach that we propose to use is based on the <a href=\"http://www.filpizlo.com/papers/pizlo-pldi2010-schism.pdf\">Schism real-time garbage collector</a>&#8216;s arraylet object model. This section reviews the Schism arraylet object model and then shows how it can be used for butterfly transitions.</p>\n<p>Schism was trying to solve the problem of implementing a copying garbage collector whose copying phase was completely concurrent to the application. It was based on the observation that copying an object concurrently to other threads accessing the object is easy if the object is immutable. It&#8217;s only hard if the object can be written to by the other threads. Schism solves the problem of copying <em>mutable</em> objects concurrently by boxing the mutable state in small fixed-size <em>fragments</em> (32 bytes in the paper). The object that gets copied is the <em>spine</em> that serves as an index for finding fragments. All object accesses use an extra indirection to find the fragment that contains the data being accessed. Spines are immutable objects because the fragments they point to never move.</p>\n<p>WebKit already uses something like arraylets as well, in the <code>WTF::SegmentedVector</code> class template. We use it to prevent having to move C++ objects when the vector resizes. We also use it for implementing the <code>JSGlobalObject</code>&#8216;s variable storage (for <code>var</code> statements in global scope). The term <em>arraylets</em> is due to <a href=\"http://dl.acm.org/citation.cfm?id=604155\">Bacon, Cheng, and Rajan</a>, who used them to control fragmentation in the Metronome garbage collector. Lots of arraylet research shows that the extra indirection has a high cost (<a href=\"http://users.cecs.anu.edu.au/~steveb/downloads/pdf/arraylet-pldi-2010.pdf\">often 10% or more</a>). That is, if you double the cost of each array access by adding an extra indirection, then you will increase the total run time of the program by 10%.</p>\n<figure class=\"widescreen mattewhite\">\n<img src=\"https://webkit.org/wp-content/uploads/segmented-object-model-1x.png\" /><figcaption><b>Segmented Butterflies.</b> A segmented butterfly comprises a spine (which resizes but contains only immutable state) and zero or more fragments (which don&#8217;t resize but are mutable). Splitting resizable state from mutable state to enable concurrent layout changes is a <a href=\"http://www.filpizlo.com/papers/pizlo-pldi2010-schism.pdf\">proven technique in concurrent garbage collection</a>. The shape of the fragments matches the shape of an unsegmented butterfly, which we will use for some additional optimizations.</figcaption></figure>\n<p>We can use this trick for butterflies. A <em>segmented butterfly</em> has a spine that contains pointers to fragments that contain mutable data. If we need to add new properties and those properties won&#8217;t fit in an existing fragment, we can grow the spine and allocate more fragments. Growing the spine implies reallocating it. We can safely allocate a new spine and <code>memcpy</code> the contents of the old one into it, since the spine&#8217;s contents never changes. In this world, no writes ever get lost or experience time travel when a butterfly is being transitioned. An access that races with the transition either gets to a fragment using the old spine, or the new spine; since both spines will contain the same fragment addresses for properties that existed before the transition, every possible interleaving results in threads reading and writing the same fragments.</p>\n<p>The most natural way to implement segmented butterflies is probably to have 32-byte fragments like in Schism, since this is also a sweet-spot for our GC. The <em>vector length</em> is be inside the butterfly spine, since this is an immutable property of that spine. The vector length allows the spine to self-identify how big its right side is. The <em>public length</em> is mutable, so we want to put it into one of the fragments. Note that the first fragment also contains the <em>old vector length</em>. This property is unused when we are using segmented butterflies. It allows us to convert a flat butterfly into a segmented butterfly by having the spine point at slices of the flat butterfly; we discuss this optimization more in a later section.</p>\n<p>This still leaves the problem of concurrent transitions. Transitions have to reallocate the spine, change some data in the type header, and store a property&#8217;s value. Reallocating the spine is optional since usually some fragment will already have a spare slot. Changing the type is optional, for example in case of array resizing. The type header and butterfly can be set atomically using a DCAS (double-world compare-and-swap; 64-bit systems typically support 128-bit CAS). But this isn&#8217;t enough, since no matter if we set the property&#8217;s value before or after the DCAS, we will have a race. The property&#8217;s slot can be anywhere in memory, so there&#8217;s no way to use CAS to simultaneously do the whole transition.</p>\n<p>If we set the newly-added value slot before changing everything else, we risk a race in which one thread tries to use some object slot for adding field <code>f</code> while another thread tries to use the same slot for field <code>g</code>. If we&#8217;re not careful, the second thread might win the race for the type (so everyone thinks we added property <code>g</code>) while the first thread wins the race for the property (so we get thread 1&#8217;s intended value for property <code>f</code> appearing as if it was stored by thread 2 into <code>g</code>).</p>\n<p>If we set the newly-added value slot after changing everything else, then all loads have to contend with the possibility that slots can have &#8220;holes&#8221;. In other words, at any time, an object may claim a type that includes a property <code>f</code> even though the object does not have a value for <code>f</code> yet. We could change the language to allow this: putting a new property into an object would first involve defining it to <code>undefined</code> and then storing the real value.</p>\n<p>We choose to put a lock around transitions. This lock isn&#8217;t for guarding races between transitions and other accesses, since those are atomic by default thanks to segmented butterflies &#8212; it&#8217;s for protecting transitions from each other. To ensure that objects don&#8217;t have holes, transitions store the new property&#8217;s value before changing the type. Transitions can use this algorithm:</p>\n<ol>\n<li>Allocate whatever memory needs to be allocated.</li>\n<li>Acquire the lock.</li>\n<li>Determine if we allocated the right amount of memory; if not, release the lock and go back to step 1.</li>\n<li>Store the new property&#8217;s value.</li>\n<li>Change the type and butterfly.</li>\n<li>Release the lock.</li>\n</ol>\n<p>This results in the following cost model:</p>\n<ul>\n<li>Transitions are about 7x costlier, since they now require locking.</li>\n<li>Reading or writing existing property slots requires an extra load.</li>\n<li>Deleting and dictionary lookups still work (we show details in a later section).</li>\n</ul>\n<p>Recall that the arraylet research shows 10% or higher costs if <em>arrays</em> use a segmented object model. We&#8217;re proposing to use it for ordinary properties as well, if those properties were added in a sufficiently subtle way that we weren&#8217;t able to inline them into the cell. It&#8217;s probably safe to assume that if we implemented literally this, we incur at least a 10% slow-down. We would like to have close to zero overhead. The next section shows how we think we can get there.</p>\n<h3>Transition Thread Locality and Flat Butterflies</h3>\n<p>Segmented butterflies are only necessary when:</p>\n<ul>\n<li>Some thread other than the thread that allocated an object tries to transition the object.</li>\n<li>The thread that allocated the object tries to transition it, and other threads may be writing to it.</li>\n</ul>\n<p>We can use flat butterflies &#8212; our existing object model &#8212; when we know that these things haven&#8217;t happened yet. This section describes a hybrid object model that uses either flat or segmented butterflies, depending on whether or not we have detected a possible write-transition race. This object model also allows us to avoid locking while doing many transitions.</p>\n<p>On a 64-bit system, butterfly pointers have 48 bits of pointer information and have zeroes in their high 16 bits. 16 bits is enough to store:</p>\n<ul>\n<li>The ID of the thread that allocated the object. We call this the butterfly <em>TID</em>.</li>\n<li>A bit to indicate if any thread other than the allocating thread has attempted to write to the butterfly. We call this the butterfly <em>shared-write</em> (SW) bit.</li>\n</ul>\n<p><a href=\"https://software.intel.com/sites/default/files/managed/2b/80/5-level_paging_white_paper.pdf\">Some systems have more than 48 pointer bits</a>. In a later section, we show how to make this scheme useful even if we had to use fewer bits. Also, we could restrict butterfly allocations to the lower 2<sup>48</sup> addresses if we really wanted 16 spare bits.</p>\n<p>Let&#8217;s say that these bits are encoded as follows:</p>\n<pre><code class=\"cpp\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"identifier\">uint16_t</span> <span class=\"identifier\">mainThreadTID</span> = <span class=\"number\">0</span>; <span class=\"comment\">// Occassionally, we can optimize a bit more for the main thread.\n</span><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"identifier\">uint16_t</span> <span class=\"identifier\">notTTLTID</span> = <span class=\"number\">0x7fff</span>; <span class=\"comment\">// For when the thread is no longer transition-thread-local.\n</span>\n<span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"identifier\">uint64_t</span> <span class=\"identifier\">encodeButterflyHeader</span>(<span class=\"identifier\">uint16_t</span> <span class=\"identifier\">tid</span>, <span class=\"keyword type\">bool</span> <span class=\"identifier\">sharedWrite</span>)\n{\n    <span class=\"identifier\">ASSERT</span>(<span class=\"identifier\">tid</span> &lt;= <span class=\"identifier\">notTTLTID</span>); <span class=\"comment\">// Only support 2^15 tids.\n</span>    <span class=\"keyword\">return</span> (<span class=\"keyword\">static_cast</span>&lt;<span class=\"identifier\">uint64_t</span>&gt;(<span class=\"identifier\">tid</span>) &lt;&lt; <span class=\"number\">48</span>)\n         | (<span class=\"keyword\">static_cast</span>&lt;<span class=\"identifier\">uint64_t</span>&gt;(<span class=\"identifier\">sharedWrite</span>) &lt;&lt; <span class=\"number\">63</span>);\n}\n\n<span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"identifier\">uint64_t</span> <span class=\"identifier\">encodeButterfly</span>(<span class=\"identifier\">Butterfly</span>* <span class=\"identifier\">butterfly</span>, <span class=\"identifier\">uint16_t</span> <span class=\"identifier\">tid</span>, <span class=\"keyword type\">bool</span> <span class=\"identifier\">sharedWrite</span>)\n{\n    <span class=\"keyword\">return</span> <span class=\"keyword\">static_cast</span>&lt;<span class=\"identifier\">uint64_t</span>&gt;(<span class=\"identifier\">bitwise_cast</span>&lt;<span class=\"identifier\">uintptr_t</span>&gt;(<span class=\"identifier\">butterfly</span>))\n         | <span class=\"identifier\">encodeButterflyHeader</span>(<span class=\"identifier\">tid</span>, <span class=\"identifier\">sharedWrite</span>);\n}\n</code></pre>\n<p>We can use flat butterflies &#8212; our existing object model &#8212; whenever the TID matches the current thread. We set the SW bit and use a magic TID value (all bits set) to indicate that the butterfly is segmented. This section shows how to use these bits to allow the use of flat butterflies anytime we know that no transition race can occur. We call this <em>transition thread locality inference</em>.</p>\n<p>Anytime a thread attempts to write to a butterfly and the TID matches the current thread, it can simply write to the butterfly without doing anything special.</p>\n<p>Anytime a thread attempts to write to a butterfly, the TID does not match, but the SW bit is set, it can simply write to the butterfly as well.</p>\n<p>Anytime a thread attempts to read a butterfly, it just needs to check that the TID to determine if the read should be segmented (extra indirection) or not.</p>\n<p>Anytime a read or write encounters TID = notTTLTID and SW = true, it knows to use the segmented object model.</p>\n<p>The following cases need special handling:</p>\n<ul>\n<li>A thread other than the one identified by the TID attempts to write to the butterfly and the SW bit is not yet set. In this case, it needs to set the SW bit. This does not mean that the butterfly needs to become segmented. It only means that the SW bit must be set, so that any future attempts to transition the butterfly from the owning thread triggers a transition to the segmented butterfly object model.</li>\n<li>A thread other than the one identified by the TID attempts to transition the butterfly. In this case, it needs to set the SW bit and all TID bits and perform a segmented butterfly transition. We describe this process in detail below.</li>\n<li>A thread attempts to transition a butterfly that has the SW bit set. This also necessitates a segmented butterfly transition.</li>\n<li>Even transitions with TID = current and SW = false need locking, to make sure that those assumptions aren&#8217;t violated during the transition.</li>\n</ul>\n<p>The sections that follow show further refinements that reduce overhead even more. First we consider how to avoid checking TID and SW bits on every operation. Next we show how to use structure watchpointing to avoid locking on the most common transitions. Then we show how to handle array resizing. Finally we explain in more detail how flat butterflies can be transitioned to segmented ones.</p>\n<h4>Quickly Checking TID And SW Bits</h4>\n<p>This section will show how to make concurrent JS as fast as serial JS in many of the most important cases by simply extending optimizations that JavaScriptCore already uses.</p>\n<p><a href=\"https://webkit.org/blog/6756/es6-feature-complete/\">JSC optimizes the code for heap accesses using <em>inline caching</em>.</a> We use inline caches for accesses to named properties (like <code>o.f</code>) and for array accesses (like <code>a[i]</code>).</p>\n<p>Objects that have the same properties at the same offsets will usually share the same <em>structure</em>, which is identified by 32 bits in the object&#8217;s type header. If a property access tends to see the same structure, then we will generate new machine code for this property access, which checks that the object has the expected structure and then accesses the property directly. Failed speculation causes recompilation of the inline cache. If the inline cache remains stable (doesn&#8217;t recompile much) for a long time and the function that contains it becomes eligible for optimized JIT compilation, then the optimizing JIT compiler might express the inline cache&#8217;s code directly in its IR, which has two outcomes: the structure check branches to <a href=\"https://webkit.org/blog/3362/introducing-the-webkit-ftl-jit/\">OSR exit</a> if it fails (causing abrupt termination of the optimized code&#8217;s execution), and all of the code for the inline cache (the structure check, the memory access, and any other steps) become eligible for low-level optimization by our DFG and B3 JIT compiler pipelines. Our compilers are good at making type-stable JavaScript property accesses perform great.</p>\n<p>Array accesses use similar techniques to detect if an object has array elements, and if so, how they are formatted. We support multiple kinds of storage for array elements depending on how they are being used. Inline caches detect what kind of array each array access is accessing, and we then emit code that speculates for that kind of array access.</p>\n<p>Another technique we already use is virtual memory. For example, <a href=\"https://webkit.org/blog/7691/webassembly/\">our WebAssembly implementation</a> uses virtual memory tricks to check the bounds of linear memory accesses for free. We can catch page faults using POSIX signal handlers or Mach exceptions. The handler will know the exact machine state at the point of the fault, and has the power to transfer execution to any state it likes. WebAssembly uses this to throw an exception, but we can use it to transfer control flow to slow paths that handle the generic case of a memory access. Essentially, this means that we can save cycles on safety checks if we can express the condition being checked as something that causes the virtual memory system to issue a page fault. Concurrent JS will require a combination of inline caching and virtual memory tricks to make TID and SW checking cheap.</p>\n<p>Inline caching means emitting different code for each property access, and then recompiling each property access potentially many times as we learn new information about what this property access may do. Inline caches are able to get incredibly precise information about the behavior of each property access because we always emit a fast path access that can only handle exactly those cases that we have seen so far. We learn new information by recording everything we know about those accesses that failed the fast path. The complete log of failed accesses is then LUBed (least-upper-bounded) together to create a minimal set of <a href=\"https://trac.webkit.org/browser/webkit/trunk/Source/JavaScriptCore/bytecode/AccessCase.h?rev=221337\"><code>AccessCase</code></a>s. We can implement optimizations for new kinds of property accesses &#8212; such as the ones that have to check TID and SW bits &#8212; by considering in what ways a particular access site might be special and so specially optimizable. Below is a list of conditions we may encounter along with the strategy for how inline caches can test this condition and handle it.</p>\n<ul>\n<li>Probably many object accesses will always see TID = current and SW = false. These accesses can simply subtract <code>encodeButterflyHeader(currentTID, 0)</code> from the butterfly before accessing it. If the speculation was wrong, the virtual memory subsystem will issue a page fault because of non-zero high bits. We can catch this as a Mach exception or POSIX signal, and divert execution to the slow path. The subtraction of this constant can often be encoded directly into the subsequent butterfly access instruction. As a result, these kinds of accesses will not experience any overhead in concurrent JS versus what they have currently. Note that this optimization does not apply to transitions, which must install a new butterfly while atomically asserting that nothing bad has happened &#8212; we consider those further below. Note that this optimization slightly favors the main thread (and so all single-threaded programs) because if currentTID = 0 then we don&#8217;t have to add anything.</li>\n<li>Probably many object accesses will always see TID = current and SW = true. These can be optimized identically to the previous case. This state is for objects that we already know can be written to from many threads, but that only happened after the last time that the current thread transitioned the object.</li>\n<li>Probably many object reads will see TID != notTTLTID and SW = anything. These just need to check that the butterfly&#8217;s high bits are not notTTLTID. This can be done with a single compare/branch. Other than this, they can proceed exactly how they do in our current engine.</li>\n<li>Probably many object writes will see TID != notTTLTID and SW = true. This means that the object is being written to by many threads. We are also writing to it, but we don&#8217;t need to set the SW bit because it is already set. This check can also be performed in a single compare/branch. Together with the read optimization above, this means that concurrent JS programs that share objects will typically only experience one extra cycle (for fused compare/branch) for butterfly accesses.</li>\n<li>Sometimes, an object write will see TID != notTTLTID and SW = false. This means having to set the SW bit using a DCAS, which sets the SW bit while asserting that the type header did not change. These accesses will be more expensive than their friends, but this only has to happen the first time that any thread writes to a shared object. Our inline caching infrastructure will probably make it so that writes that sometimes see SW = false and sometimes see SW = true (and don&#8217;t necessarily see TID = current but never notTTLTID) will be branchy: they will have a fast path for SW = true and a slightly slower but still inline path for SW = false. In the next section, we will describe optimizations that require invoking functions on the structure when the SW bit of any objects of that structure gets set for the first time. Since this inline cache knows about the structure at the time of generation, it can ensure that the structure is already informed that objects of its type may have the SW bit set.</li>\n<li>Probably some object accesses will see TID = notTTLTID and SW = true. By convention, we&#8217;ll say that it&#8217;s not possible to have TID = notTTLTID and SW = false (internally in our VM, it&#8217;s technically possible to transition an object without &#8220;writing&#8221; to it, but we&#8217;ll pretend that those are writes anyway). These accesses can subtract <code>encodeButterflyHeader(notTTLTID, true)</code> from the butterfly before accessing it, and then they must perform an additional load when reading from the butterfly. The extra load is necessary because of the segmented object model: the butterfly pointer points at a spine that we can use to find the fragment that contains the value we&#8217;re interested in. This is somewhat more than one extra cycle of overhead, since it introduces a load-load dependency.</li>\n</ul>\n<p>These optimizations leave an unresolved issue: transitions. Transitions now require acquiring and releasing a lock. We have to do this anytime we add any property. In the next section, we show how to solve this problem using <em>watchpoints</em>. Then we describe how to implement transitions that need to create a segmented butterfly out of a flat one.</p>\n<h4>Watchpoint Optimizations</h4>\n<p>Transitions are difficult to optimize. Every transition, including those that see TID = current, need to acquire the object&#8217;s internal lock to ensure that they set the butterfly, adjust the object&#8217;s type header, and store the new value of the property all in one atomic step. Luckily, we can dramatically improve the performance of transitions by using our engine&#8217;s <em>structure watchpointing</em> infrastructure.</p>\n<p>Each object has a <em>structure</em>. Many objects will share the same structure. Most inline cache optimizations begin with a check to see if the object&#8217;s structure matches the inline cache&#8217;s expectations. This means that when an inline cache is compiled, it has a pointer to the <code>Structure</code> object in hand. Each structure can have any number of <em>watchpoint sets</em> in it. A watchpoint set is simply a boolean field (starts <em>valid</em>, becomes <em>invalid</em>) and a set of <em>watchpoints</em>. When the set is fired (the field goes from <em>valid</em> to <em>invalid</em>), all watchpoints are invoked. We can add two watchpoint sets to <code>Structure</code>:</p>\n<ul>\n<li><code>transitionThreadLocal</code>. This remains valid so long as all objects that have this structure have TID != notTTLTID.</li>\n<li><code>writeThreadLocal</code>. This remains valid so long as all objects that have this structure have SW = false.</li>\n</ul>\n<p>This enables the following optimizations on top of the inline cache optimizations described above:</p>\n<ul>\n<li>Transitions with TID = current and SW = false can proceed as they do in our existing engine so long as the structure&#8217;s <code>transitionThreadLocal</code> and <code>writeThreadLocal</code> watchpoint sets are both still valid. This means not doing any extra locking or even CAS when transitioning the object. This works even if other threads are concurrently reading from the object. This works even when building up an object that eventually gets read and written to from other threads, since in that case the <code>writeThreadLocal</code> watchpoint set only fires on the structure that is the target of the final transition used to build the object. The last transition can proceed without locking because the watchpoint sets of the source of the transition are still valid.</li>\n<li>Any checks for TID != notTTLTID can be elided if the structure&#8217;s <code>transitionThreadLocal</code> watchpoint set is still valid and a watchpoint is installed.</li>\n<li>Any checks for SW == false can be elided if the structure&#8217;s <code>writeThreadLocal</code> watchpoint set is still valid and a watchpoint is installed.</li>\n</ul>\n<p>The fact that we can elide TID != notTTLTID and SW == false checks means that reads and writes to those objects don&#8217;t actually have to check anything; they just need to mask off the high bits of the butterfly.</p>\n<p>Most importantly, this means that transitions that happen on the same thread that allocated the object don&#8217;t need any locking so long as the structures involved have valid <code>transitionThreadLocal</code> and <code>writeThreadLocal</code> watchpoint sets. Structures are dynamically inferred by our engine so as to have a close relationship to the code that creates those objects. Hence, if you write a constructor that adds a bunch of fields to <code>this</code> but does not escape <code>this</code>, then the structures corresponding to the chain of transitions that occurred in the constructor will all have a valid <code>transitionThreadLocal</code> and <code>writeThreadLocal</code> watchpoint sets. To make sure that the object continues to have a flat butterfly, you need to either never dyamically add properties to the object, or never write to the object on any thread other than the one that constructed it. Objects that play by these rules will experience almost no concurrency overhead, since property accesses will have at most one extra instruction (a mask) on the fast path.</p>\n<p>Watchpoints, and the operations that cause them to fire, will execute under safepoint: if we ever perform some operation that finds that it has to invalidate a watchpoint, it will do the operation while all other threads are stopped as if for a garbage collection. This means that if some optimized code is performing non-atomic transitions involving some structures, and some other thread attempts to write or transition an object that uses any of those structures, then it will not actually perform the write until that optimized code reaches a safepoint and gets invalidated. Most of the time, the watchpoint sets will tell us that they have been invalidated even before the optimizing JIT compilers try to install any watchpoints. We expect few watchpoint invalidations in steady state.</p>\n<p>To summarize, if our optimizer is able to guess which object properties you will add to an object at the time of allocation, then the cost model of your object accesses does not change at all, since inline properties get concurrency for free. If you do have out-of-line properties, then they will perform almost exactly as they do now (occasionally, an extra arithmetic instruction will be involved in computing the butterfly access) so long as either the object is only written to by the thread that created it (and read by anyone), or no new properties are added to the object after creation (in which case it can be read and written by anyone). If you break this pattern, then transitions will become about 7x more expensive and all other object accesses will become 2x more expensive. This slow-down will be extremely surgical: only those property accesses that touch segmented butterflies will experience the slow-down. This system is designed to let you dynamically and concurrently add stuff to your objects, and the hope is that if you do so in moderation, you won&#8217;t see much of a change in performance.</p>\n<h4>Arrays</h4>\n<p>Array element accesses will benefit from TTL similarly to the way that named property accesses do:</p>\n<ul>\n<li>Accesses to TTL arrays will be about as fast as they are now.</li>\n<li>Accesses to non-TTL arrays will require one extra indirection.</li>\n</ul>\n<p>We handle array transitions a bit specially. Many array transitions in JavaScriptCore already use locking because of their need to avoid races with the garbage collector. Adding locking to the remaining array transitions may cause performance issues, so this section considers an alternative.</p>\n<p>Resizing an array in response to an out-of-bounds store or something like <code>array.push</code> is the most common kind of array transition. Fortunately, this transition does not change anything in the type header of the object &#8212; it only changes the butterfly pointer. Whether or not the butterfly has array elements is reflected in the structure. Therefore, we can just use CAS on the butterfly pointer, and then have a rule that any changes to butterfly pointers of objects that have array elements requires CAS even if the object lock is already held. Because array structures&#8217; <code>transitionThreadLocal</code> and <code>writeThreadLocal</code> watchpoints are unlikely to be intact (any shared array use will invalidate them, since arrays share structures), we expect that even transitions on TTL arrays will have to use CAS in the common case. This butterfly pointer CAS is sufficient to ensure that a simultaneous attempt to make the array not TTL won&#8217;t get confused by our resize operation.</p>\n<p>One CAS for array resizing is probably cheap enough to be practical. The CAS is likely cheap relative to the current costs of resizing, which involves allocation, copying data, and initializing the newly allocated memory.</p>\n<p>Objects that have both named properties and array elements will now have to use both locking and CAS on some of the transitions involving named properties. Fortunately, objects that have both array elements and named properties are sufficiently uncommon that we can probably get away with increasing their named property transition cost a bit.</p>\n<h4>Quickly Transitioning From Flat To Segmented</h4>\n<p>Turning flat butterflies into segmented ones requires a special kind of transition. Fortunartely, this transition is cheap. Butterfly fragments contain only data. They look just like fragments (fixed-size slices) of the payload of a flat butterfly. Therefore, we can transition a flat butterfly to a segmented one by allocating a spine and pointing its fragment pointers at the original flat butterfly.</p>\n<p>Any read or write to the flat butterfly while the butterfly is being transitioned to segmented will seem to users of the segmented butterfly to have happened to the fragments. In other words, although some threads may mistakenly think that the butterfly is still flat, their accesses to that butterfly will still be sound even after the butterfly is already segmented.</p>\n<p>Making this work right requires making sure that the segmented butterfly&#8217;s fragments share the same memory layout as the flat butterfly that they were converted from. For this reason, the first array fragment contains the public length and the <em>old</em> vector length; it will remember the vector length that the flat butterfly used forever, and the real vector length will be in the segmented butterfly&#8217;s spine. This ensures that if there is a race between a flat butterfly array access and a flat-to-segmented transition, then the flat butterfly access will correctly know the flat butterfly&#8217;s size because its vector length will not change. To line up the object models, we also store out-of-line properties in reverse order in the out-of-line fragments, to match what flat butterflies do.</p>\n<p>This works so long as the flat butterfly accesses loaded their butterfly pointer before the transition occured. If they load it later, then their TID check will fail, probably in the form of a page fault on an access to the butterfly.</p>\n<h3>Deletion and Dictionary Lookups</h3>\n<p>JavaScriptCore tries to make objects share structures whenever possible. This relies on two properties of structures:</p>\n<ul>\n<li>Structures are immutable.</li>\n<li>When a new structure is needed, we generally <a href=\"https://en.wikipedia.org/wiki/Hash_consing\">hash cons</a> it.</li>\n</ul>\n<p>This is a great optimization if it indeed causes objects to reuse structures. But some objects will have a unique structure no matter what the VM tries to do about it. JavaScriptCore tries to detect when this happens, and puts the object in <em>dictionary</em> mode. In dictionary mode, the structure has a 1:1 mapping to the object. Also, the structure becomes mutable. Adding and removing properties means editing the structure and the object in tandem.</p>\n<p>Deletion is closely related to dictionary mode, since deletion will immediately put the object in dictionary mode.</p>\n<p>It&#8217;s already the case that mutations to a dictionary require holding the structure&#8217;s lock. This is necessary to support concurrent JIT and concurrent GC.</p>\n<p>To support concurrent JS, we only need to make these changes:</p>\n<ol>\n<li>Reading from a dictionary requires holding the structure&#8217;s lock, in case some other thread is changing the dictionary.</li>\n<li>Properties added before the object entered dictionary mode must be treated specially by deletion.</li>\n</ol>\n<p>We are not worried about the performance hit of grabbing a lock for all reads of a dictionary. It&#8217;s already relatively expensive to read a dictionary.</p>\n<p>The existing facilities for safely transitioning objects will naturally support transitioning to dictionary mode. Usually, dictionary transitions don&#8217;t involve deleting properties. They happen when we detect that the program is adding so many properties to the object that it&#8217;s probably going to perform better as a dictionary. In that case, the fact that some other thread may be in the middle of accessing this object without holding any locks does not matter. For non-dictionary objects we require that only transitions take the lock. Reads and writes involve separate steps for checking the object&#8217;s type, loading the butterfly, and then accessing the butterfly. But if none of the properties that were added before the dictionary transition get deleted, then it&#8217;s fine for some other thread to race when accessing those old properties. We will call this the phenomenon of tardy accesses. Even though those <em>tardy</em> accesses don&#8217;t do any locking, they are correct for the same reasons that they are correct before the object becomes a dictionary. That problem is up to the butterfly object model, which will be either flat or segmented depending on whether the object is still TTL. Dictionary mode operates orthogonally to TTL inference and butterflies.</p>\n<p>But if any of the properties added before the dictionary transition get deleted, then we have to handle this deletion specially. Normally, deletions cause the deleted slots to become reusable. We cannot do this here, because then a tardy read to some deleted property <code>f</code> might end up reading the value of some newly added property <code>g</code>. Or, a tardy write to some deleted property <code>f</code> might end up overwriting the value of some newly added property <code>g</code>. We can prevent either of these bad outcomes by simply not reusing the space freed up by deleted properties, if those properties had been added before the dictionary transition.</p>\n<p>This does not lead to unbounded memory usage. When the GC does its safepoint, it already knows that all memory accesses have completed. Therefore, the simplest implementation is to have GC change the state of those deleted properties when it visits the object. Once the GC flags those property slots during a safepoint, future property additions can reuse those slots.</p>\n<h3>Inline Caches</h3>\n<p>Once we enable concurrency, recompiling an inline cache becomes harder because you need to be careful when changing code that may be currently executing on another CPU. We plan to have a tiered defense against this problem: we will infer the thread-locality of code to use the same inline caches as we do now as much as possible, we will buffer inline cache changes whenever it&#8217;s safe to do so, and finally we will rely on safepoints if an inline cache needs to be reset eagerly.</p>\n<p>We expect that in many programs, inline caches will reach steady state before the code ever executes on more than one thread. Hence, we plan to have each block of code track its thread-locality. So long as it has only ever executed on one thread, it will remember this and check for it on entry. So long as this is true, any inline caches within that code can be modified without any extra synchronization. We can track thread-locality on as fine-grain a level as we like; for example it can even be per-basic-block. It&#8217;s probably most natural if we use JavaScriptCore&#8217;s notion of <code>CodeBlock</code> as the granularity; this roughly corresponds to functions in the source code.</p>\n<p>Once the thread-locality of code is broken, we can switch to buffering inline cache changes. Our <code>PolymorphicAccess</code> inline cache infrastructure already buffers changes because that&#8217;s most efficient even if we don&#8217;t have to do expensive synchronization. For inline caches that may be executing globally, we can globally buffer all changes. For example, the VM can perform once-per-millisecond safepoints to flush changes to all global inline caches.</p>\n<p>Sometimes, we need to make an immediate change to an inline cache. When this happens, we will rely on our ability to safepoint the system &#8212; i.e. to stop all threads at a point where we can account for each thread&#8217;s state. This is not a fast operation when there are many threads. Java virtual machines already have to do something like this for class hierarchy invalidation and biased locking. By design, these eager invalidations are unlikely. We only perform optimizations that can lead to eager invalidations if we have profiling data that suggests that it would be unlikely.</p>\n<h3>Local Optimizer Lock</h3>\n<p>So far, this algorithm relies on being able to sneak 16 bits of information into the high bits of the butterfly pointer. Some hardware will not allow us to do this. For example, fewer than 16 high pointer bits may be used for the all-zero check in virtual memory. If the system only allows for 8 checked high bits, then we will only be able to support 127 threads. Concurrent JavaScript would probably still be useful even if it had a hard 127 thread limit, but this would be an unusually low limit to impose at the language level. This section shows how to overcome this limit.</p>\n<p>If the object model can only handle thread-locality inference for 127 threads, then we can either choose to have the 127th thread get no thread-locality inference or we can try to map more than one logical thread onto the same thread identifier. Threads mapped to the same TID won&#8217;t be able to execute concurrently to each other. To do this, we can borrow the idea of the <a href=\"https://en.wikipedia.org/wiki/Global_interpreter_lock\">GIL (global interpreter lock)</a> from Python. The CPython implementation only allows 1 native thread to interpreting Python code at a time. It achieves this by having a lock (the so-called GIL) that protects the interpreter. The lock is released and reacquired periodically, which gives the appearance of concurrency. Since we can also release the lock around any potentially-blocking operations, we can even avoid deadlocks that arise from insufficient concurrency. We can apply this technique here: if we are limited to 127 threads, then we can have 127 locks protecting JS execution. So long as there are 127 or fewer threads, this lock will not do anything; anytime we try to release it, we will do nothing because the lock will tell us that nobody is waiting to acquire it. &#8220;Releasing and reacquiring&#8221; the lock will really be a cheap load and branch to verify that there is no need to release it.</p>\n<p>This lock will be local to a thread pool rather than global to the whole engine, and it will protect all of our optimized paths rather than just protecting the interpreter. Hence the name: local optimizer lock, or LOL for short.</p>\n<h3>Thread-Unsafe Objects</h3>\n<p>DOM objects behave like JavaScript objects, but are actually a proxy for complicated logic implemented in C++. That logic is usually not thread-safe. The native code that supports the DOM transitively uses many native APIs that are meant to only be used from the main thread. It would take a lot of work to make the DOM completely thread-safe. Our strawman proposal only requires making the DOM global object capable of handling lookups to self properties, which we need to allow threads to access global JavaScript properties like <code>Object</code> and <code>Thread</code>.</p>\n<p>In WebKit, variable resolution and self property resolution on the <code>JSDOMWindow</code> largely follows a pattern of relying on existing JS property lookup mechanisms. It uses exotic behavior when the window has a null <code>frame</code>. We already support installing a watchpoint on the non-nullness of <code>frame</code>. Hence, we can support fast concurrent accesses to properties of <code>JSDOMWindow</code> while honoring the <code>frame</code> special case by having threads use the existing watchpoint set.  This implies that some of the <code>JSDOMWindow</code> slow paths will need locking, but that&#8217;s probably acceptable since the majority of global object accesses are inline cached.</p>\n<p>Native apps that want to dip their toes into concurrent JS may also want to restrict sharing for some of their classes. The thread-affinity check on accesses to objects will need to be implemented in the VM itself to give our compilers the ability to optimize it away. This means that it&#8217;s possible to expose the functionality to C/Objective-C API clients.</p>\n<h3>Summary</h3>\n<p>We think that we can make it possible to execute JavaScript concurrently in WebKit while providing good enough performance that developers would enjoy using this feature. At the heart of this technique is the combination of segmented butterflies, transition thread locality inference, and lots of cheap per-object locks. So long as programs obey certain behaviors, they should experience minuscule overheads: property accesses will cost about as much as they do today and objects will not require any extra memory. If some objects decide that they don&#8217;t want to play by our rules, they will get slightly higher overheads.</p>\n<h2>Related Work</h2>\n<p>Segmented butterflies are a straightforward combination of the array object model in the Schism garbage collector and the butterfly object model that we have used for a long time in JavaScriptCore.</p>\n<p>Transition-thread-locality inference is inspired by work on biased locking. As in the <a href=\"http://dl.acm.org/citation.cfm?doid=1167515.1167496\">HotSpot biased locking scheme</a>, we use types to reason about whether we have a guarantee of thread locality. Unlike that scheme, we don&#8217;t rely on deoptimization to break a thread-object relationship. Our primary mechanism of informing other threads that an object is no longer transition-thread-local is to have different tag bits in the butterfly pointer.</p>\n<p>The combination of segmented butterflies, transition-thread-locality inference, and the ability of both schemes to fall back on per-object locking when things get weird is not something that we have seen before. Most object-oriented systems that allow concurrency do it either by having an object model that naturally avoids expensive-to-resolve races, like in Java, or using some mechanisms to restrict the amount of concurrency in the language.</p>\n<p>For example, CPython uses a global interpreter lock (GIL) to ensure that the interpreter never races with itself. This is a powerful technique that captures some of what concurrency is about: once I/O or other kinds of blocking happen, you want your other threads to be able to do some useful work in the meantime. The GIL allows this, so it makes threads useful to a large class of applications. Unfortunately, it doesn&#8217;t allow programs to exploit parallelism. The best feature of the GIL is that it is easy to implement. For example, it could be used to implement our proposed thread semantics in any JS engine. The scheme in this post is all about full concurrency optimized for 64-bit platforms.</p>\n<p>An effort called the <a href=\"https://www.youtube.com/watch?v=pLqv11ScGsQ\"><em>Gilectomy</em></a> is underway to remove CPython&#8217;s GIL and replace it with fine-grained locking and clever atomic algorithms. The Gilectomy is not yet as fast as stock CPython; both single-thread and multi-thread programs run significantly slower in the Gilectomy. The performance problems appear to be related to locking in the allocator (we plan to use thread-local allocation buffers) and in the reference counter (we don&#8217;t have reference counting). The Gilectomy does not remove locking from accesses to objects. Like JavaScript&#8217;s objects, Python&#8217;s objects are dictionaries that can resize dynamically. Most of our scheme is about how to make accesses to those objects fast even when multiple threads are reading and writing to the same object.</p>\n<p><a href=\"https://morepypy.blogspot.com/2017/08/lets-remove-global-interpreter-lock.html\">PyPy also has a GIL removal effort underway</a>, but they haven&#8217;t said much about how they plan to handle synchronizing object accesses aside from using locks.  We will also have locks, but we also came up with optimizations to avoid locking in most cases.</p>\n<p>Another approach was the <em>title locking</em> scheme in SpiderMonkey. It has since been removed. That scheme also involved per-object locks, but did not have our optimizations for avoiding locking in most cases.</p>\n<p>Daloze, Marr, Bonetta, and Mossenbock propose <a href=\"http://stefan-marr.de/downloads/oopsla16-daloze-et-al-efficient-and-thread-safe-objects-for-dynamically-typed-languages.pdf\">a scheme for concurrency in Truffle</a>, a runtime that supports many dynamic languages including JavaScript. That scheme requires objects that are shared to use synchronization for all writes. Sharing is detected by a write barrier. When a thread-local object is stored into a shared object, the runtime will traverse objects transitively reachable from the escaping object. All of those objects are marked shared so that future writes to those objects use synchronization. Our scheme does not require synchronization on shared writes, except when those writes are transitions. Our scheme does not require traversing object graphs; transition thread locality inference is on a per-object basis. A TTL object may point to a non-TTL object or vice-versa.</p>\n<p>Cohen, Tal, and Petrank recently introduced the <a href=\"http://dl.acm.org/citation.cfm?id=3018753\"><em>layout lock</em></a>, which allows fast reads and writes to objects that may have their layout changed.  Readers need an extra load (which has to be fenced or dependent), writers have to acquire a read lock (which can be as cheap as a pair of fenced loads and a branch), and transitions have to acquire a write lock and do some extra book-keeping. We suspect that this has a similar cost model to segmented butterflies, except for writes. Segmented butterflies only require an extra dependent load for writes, which is a bit cheaper than acquiring a read lock, which requires two loads fenced around a store. Fencing loads around a store is inconvenient; for example forcing a store to happen before a load on x86 requires an <code>xchg</code> instruction for the store, which is more expensive than just doing a <code>mov</code>. On ARM it requires using acq/rel variants for the loads and stores. On the other hand, the extra dependent load for writing to a segmented butterfly requires no extra fencing on either x86 or ARM. Transitions and reads are probably equally fast with segmented butterflies and layout locks, but writes matter a lot to us. Writes happen often enough that segmented butterflies are likely to be noticeably faster than layout locks for the JavaScript object model. On the other hand, the method of segmentation is not easy to reproduce in many different kinds of data structures. Since it is more general, the layout lock could be useful for more complex data JSC data structures like <a href=\"https://trac.webkit.org/browser/webkit/trunk/Source/JavaScriptCore/runtime/SparseArrayValueMap.h?rev=221337\"><code>SparseArrayValueMap</code></a> and <code>Map</code>/<code>WeakMap</code>/<code>Set</code>. Those data structures may be too complicated for segmentation, but not too complicated for the layout lock. Like segmented butterflies, layout lock can be combined with transition thread locality inference to avoid doing any of the locking until it&#8217;s needed to protect racy transitions.</p>\n<h2>Conclusion</h2>\n<p>This post shows how WebKit&#8217;s JavaScript implementation can be modified to support threads. Our scheme allows for all JavaScript objects to be shared. Our scheme avoids locking on fast paths, like the fast paths for property accesses. We expect it to be possible to implement this scheme with low overheads. Serial code will experience no overhead, and concurrent code will only experience big overheads if it adds properties to an object that is being written to by multiple threads.</p>\n<p>The next step for this wild thought experiment is to attempt to implement it and see if it works. We will be tracking progress under <a href=\"https://bugs.webkit.org/show_bug.cgi?id=174276\">bug 174276</a>.</p>\n<div class=\"note\">Update: The original version of this post did not cite <a href=\"http://stefan-marr.de/downloads/oopsla16-daloze-et-al-efficient-and-thread-safe-objects-for-dynamically-typed-languages.pdf\">Daloze et al‚Äôs OOPSLA ‚Äô16 paper</a> on concurrency support in Truffle.  We have updated the post to include a comparison between our scheme and theirs.</div>", "title": "Concurrent JavaScript: It can work!", "author_name": "Filip Pizlo", "source_type": "rss", "link": "https://webkit.org/blog/7846/concurrent-javascript-it-can-work/", "source_link": "https://webkit.org", "source_title": "WebKit", "published": "2017-08-30T17:00:00"}, {"picture": "//lh3.googleusercontent.com/-di-UybBsz7k/AAAAAAAAAAI/AAAAAAAAAC8/l5ReptOnR-o/s512-c/photo.jpg", "source_name": "V8Blog", "description": "In this blog post we would like to explain how V8 handles JavaScript properties internally. From a JavaScript point of view there are only a few distinctions necessary for properties. JavaScript objects mostly behave like dictionaries, with string keys and arbitrary objects as values. The specification does however treat integer-indexed properties and other properties differently <a href=\"https://tc39.github.io/ecma262/#sec-ordinaryownpropertykeys\">during iteration</a>. Other than that, the different properties behave mostly the same, independent of whether they are integer indexed or not.<br /><br />However, under the hood V8 does rely on several different representations of properties for performance and memory reasons. In this blog post we are going to explain how V8 can provide fast property access while handling dynamically-added properties. Understanding how properties work is essential for explaining how optimizations such as <a href=\"http://mrale.ph/blog/2012/06/03/explaining-js-vms-in-js-inline-caches.html\">inline caches</a> work in V8.<br /><br />This post explains the difference in handling integer-indexed and named properties. After that we show how V8 maintains HiddenClasses when adding named properties in order to provide a fast way to identify the shape of an object. We'll then continue giving insights into how named properties are optimized for fast accesses or fast modification depending on the usage. In the final section we provide details on how V8 handles integer-indexed properties or array indices.<br /><br /><h3>Named Properties vs. Elements</h3>Let's start by analysing a very simple object such as <span>{a: \"foo\", b: \"bar\"}</span>. This object has two named properties, \"a\" and \"b\". It does not have any integer indices for property names. array-indexed properties, more commonly known as elements, are most prominent on arrays. For instance the array <span>[\"foo\", \"bar\"] </span>has two array-indexed properties: <span>0</span>, with the value <span>\"foo\"</span>, and <span>1</span>, with the value <span>\"bar\"</span>. This is the first major distinction on how V8 handles properties in general. <br /><br />The following diagram shows what a basic JavaScript object looks like in memory.<br /><br /><a href=\"https://2.bp.blogspot.com/-85h60IlpPP0/WaZyqIVb4BI/AAAAAAAABVo/07d2HYCaz8ojd3e6w2mmtls3jYPlzc7SwCEwYBhgL/s1600/V8%2BBlog%2BPost%2BProperties%2B%25281%2529V8%2BBlog%2BPost%2BProperties%2B%25281%2529-opt.png\"><img border=\"0\" src=\"https://2.bp.blogspot.com/-85h60IlpPP0/WaZyqIVb4BI/AAAAAAAABVo/07d2HYCaz8ojd3e6w2mmtls3jYPlzc7SwCEwYBhgL/s640/V8%2BBlog%2BPost%2BProperties%2B%25281%2529V8%2BBlog%2BPost%2BProperties%2B%25281%2529-opt.png\" /></a><br /><br />Elements and properties are stored in two separate data structures which makes adding and accessing properties or elements more efficient for different usage patterns.<br /><br />Elements are mainly used for the various <a href=\"https://tc39.github.io/ecma262/#sec-properties-of-the-array-prototype-object\">Array.prototype methods</a> such as pop or slice. Given that these functions access properties in consecutive ranges, V8 also represents them as simple arrays internally ‚Äî most of the time. Later in this post we will explain how we sometimes switch to a sparse dictionary-based representation to save memory.<br /><br />Named properties are stored in a similar way in a separate array. However, unlike elements, we cannot simply use the key to deduce their position within the properties array; we need some additional metadata. In V8 every JavaScript object has a HiddenClass associated. The HiddenClass stores information about the shape of an object, and among other things, a mapping from property names to indices into the properties. To complicate things we sometimes use a dictionary for the properties instead of a simple array. We will explain this in more detail in a dedicated section.<br /><br /><b>Takeaway from this section:</b><br /><ul><li>Array-indexed properties are stored in a separate elements store.</li><li>Named properties are stored in the properties store.</li><li>Elements and properties can either be arrays or dictionaries.</li><li>Each JavaScript object has a HiddenClass associated that keeps information about the object shape.</li></ul><br /><h3>HiddenClasses and DescriptorArrays</h3>After explaining the general distinction of elements and named properties we need to have a look at how HiddenClasses work in V8. This HiddenClass stores meta information about an object, including the number of properties on the object and a reference to the object‚Äôs prototype. HiddenClasses are conceptually similar to classes in typical object-oriented programming languages. However, in a prototype-based language such as JavaScript it is generally not possible to know classes upfront. Hence, in this case V8, HiddenClasses are created on the fly and updated dynamically as objects change. HiddenClasses serve as an identifier for the shape of an object and as such a very important ingredient  for V8's optimizing compiler and inline caches. The optimizing compiler for instance can directly inline property accesses if it can ensure a compatible objects structure through the HiddenClass.<br /><br />Let's have a look at the important parts of a HiddenClass.<br /><div><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://3.bp.blogspot.com/-DOwcud2emlM/WaZyqD5ijnI/AAAAAAAABVo/qM1VSAAvGb8UdkSDR7voqnsl7PPyP83nwCEwYBhgL/s1600/V8%2BBlog%2BPost%2BProperties%2B%25283%2529V8%2BBlog%2BPost%2BProperties%2B%25283%2529-opt.png\"><img border=\"0\" height=\"192\" src=\"https://3.bp.blogspot.com/-DOwcud2emlM/WaZyqD5ijnI/AAAAAAAABVo/qM1VSAAvGb8UdkSDR7voqnsl7PPyP83nwCEwYBhgL/s640/V8%2BBlog%2BPost%2BProperties%2B%25283%2529V8%2BBlog%2BPost%2BProperties%2B%25283%2529-opt.png\" width=\"640\" /></a></div><div><br /></div></div><div><div>In V8 the first field of a JavaScript object points to a HiddenClass. (In fact, this is the case for any object that is on the V8 heap and managed by the garbage collector.) In terms of properties, the most important information is the third bit field, which stores the number of properties, and a pointer to the descriptor array. The descriptor array contains information about named properties like the name itself and the position where the value is stored. Note that we do not keep track of integer indexed properties here, hence there is no entry in the descriptor array.</div><div><br /></div><div>The basic assumption about HiddenClasses is that objects with the same structure ‚Äî e.g. the same named properties in the same order ‚Äî share the same HiddenClass. To achieve that we use a different HiddenClass when a property gets added to an object. In the following example we start from an empty object and add three named properties.</div></div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://2.bp.blogspot.com/-QryvU5yH54E/WaZypyDcL5I/AAAAAAAABVo/7A7nQTGpHnYh3nj2Z1ycEzKJMzMaASQ0ACEwYBhgL/s1600/V8%2BBlog%2BPost%2BProperties%2B%25282%2529V8%2BBlog%2BPost%2BProperties%2B%25282%2529-opt.png\"><img border=\"0\" height=\"281\" src=\"https://2.bp.blogspot.com/-QryvU5yH54E/WaZypyDcL5I/AAAAAAAABVo/7A7nQTGpHnYh3nj2Z1ycEzKJMzMaASQ0ACEwYBhgL/s640/V8%2BBlog%2BPost%2BProperties%2B%25282%2529V8%2BBlog%2BPost%2BProperties%2B%25282%2529-opt.png\" width=\"640\" /></a></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><br /></div><div><div>Every time a new property is added, the object's HiddenClass is changed. In the background V8 creates a transition tree that links the HiddenClasses together. V8 knows which HiddenClass to take when you add, for instance, the property \"a\" to an empty object. This transition tree makes sure you end up with the same final HiddenClass if you add the same properties in the same order. The following example shows that we would follow the same transition tree even if we add simple indexed properties in between.</div></div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-Y8RSMfyp4Ns/WaZyqnXfXHI/AAAAAAAABVo/vM3sHRfKYpkPI1X9De_DH0GHuOt4m04rQCEwYBhgL/s1600/V8%2BBlog%2BPost%2BProperties%2B%25284%2529V8%2BBlog%2BPost%2BProperties%2B%25284%2529-opt.png\"><img border=\"0\" height=\"46\" src=\"https://1.bp.blogspot.com/-Y8RSMfyp4Ns/WaZyqnXfXHI/AAAAAAAABVo/vM3sHRfKYpkPI1X9De_DH0GHuOt4m04rQCEwYBhgL/s640/V8%2BBlog%2BPost%2BProperties%2B%25284%2529V8%2BBlog%2BPost%2BProperties%2B%25284%2529-opt.png\" width=\"640\" /></a></div><div><div><br /></div><div>However, if we create a new object that gets a different property added, in this case property \"d,\" V8 creates a separate branch for the new HiddenClasses.</div></div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-T2N4cAFYhH4/WaZz-dXh50I/AAAAAAAABV0/7TuUAyt5zUoTnLK-ESMHpY4YS44_lwAPwCEwYBhgL/s1600/8.opt.png\"><img border=\"0\" height=\"115\" src=\"https://1.bp.blogspot.com/-T2N4cAFYhH4/WaZz-dXh50I/AAAAAAAABV0/7TuUAyt5zUoTnLK-ESMHpY4YS44_lwAPwCEwYBhgL/s640/8.opt.png\" width=\"640\" /></a></div><div><br /></div><div><div><b>Takeway from this section:</b><br /><ul><li>Objects with the same structure (same properties in the same order) have the same HiddenClass</li><li>By default every new named property added causes a new HiddenClass to be created.</li><li>Adding array-indexed properties does not create new HiddenClasses.</li></ul><br /><h3>The Three Different Kinds of Named Properties</h3><div style=\"text-align: justify;\">After giving an overview on how V8 uses HiddenClasses to track the shape of objects let‚Äôs dive into how these properties are actually stored. As explained in the introduction above, there are two fundamental kind of properties: named and indexed. The following section covers named properties.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">A simple object such as <span>{a: 1, b: 2} </span>can have various internal representations in V8. While JavaScript objects behave more or less like simple dictionaries from the outside, V8 tries to avoid dictionaries because they hamper certain optimizations such as <a href=\"https://en.wikipedia.org/wiki/Inline_caching\">inline caches</a> which we will explain in a separate post.&nbsp;</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\"><b>In-object vs. Normal Properties: </b>V8 supports so-called in-object properties which are stored directly on the object themselves. These are the fastest properties available in V8 as they are accessible without any indirection. The number of in-object properties is predetermined by the initial size of the object. If more properties get added than there is space in the object, they are stored in the properties store. The properties store adds one level of indirection but can be grown independently.</div><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://4.bp.blogspot.com/-d2tpi7Ag4Xc/WaZyrJLvHoI/AAAAAAAABVo/ckwdEeuj0asJWRwVcNfLNX8b_9V5uOdvACEwYBhgL/s1600/V8%2BBlog%2BPost%2BProperties%2B%25285%2529V8%2BBlog%2BPost%2BProperties%2B%25285%2529-opt.png\"><img border=\"0\" height=\"190\" src=\"https://4.bp.blogspot.com/-d2tpi7Ag4Xc/WaZyrJLvHoI/AAAAAAAABVo/ckwdEeuj0asJWRwVcNfLNX8b_9V5uOdvACEwYBhgL/s640/V8%2BBlog%2BPost%2BProperties%2B%25285%2529V8%2BBlog%2BPost%2BProperties%2B%25285%2529-opt.png\" width=\"640\" /></a></div><br /><br /><div style=\"text-align: justify;\"><b>Fast vs. Slow Properties: </b>The next important distinction is between fast and slow properties. Typically we define the properties stored in the linear properties store as \"fast\".&nbsp; Fast properties are simply accessed by index in the properties store. To get from the name of the property to the actual position in the properties store, we have to consult the descriptor array on the HiddenClass, as we've outlined before.</div><div style=\"text-align: justify;\"><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-5koeeNOIEAA/WaZ1GIxOgcI/AAAAAAAABWE/pVHJMYKV2oAdLVnOH7mJS4CcOnsGr5GngCEwYBhgL/s1600/10-opt.png\"><img border=\"0\" height=\"254\" src=\"https://1.bp.blogspot.com/-5koeeNOIEAA/WaZ1GIxOgcI/AAAAAAAABWE/pVHJMYKV2oAdLVnOH7mJS4CcOnsGr5GngCEwYBhgL/s640/10-opt.png\" width=\"640\" /></a></div><br />However, if many properties get added and deleted from an object, it can generate a lot of time and memory overhead to maintain the descriptor array and HiddenClasses. Hence, V8 also supports so-called slow properties. An object with slow properties has a self-contained dictionary as a properties store. All the properties meta information is no longer stored in the descriptor array on the HiddenClass but directly in the properties dictionary. Hence, properties can be added and removed without updating the HiddenClass. Since inline caches don‚Äôt work with dictionary properties, the latter, are typically slower than fast properties.<br /><br /><b>Takeaway from this section:</b><br /><ul><li>There are three different named property types: in-object, fast and slow/dictionary.</li><ol><li>In-object properties are stored directly on the object itself and provide the fastest access.</li><li>Fast properties live in the properties store, all the meta information is stored in the descriptor array on the HiddenClass.</li><li>Slow properties live in a self-contained properties dictionary, meta information is no longer shared through the HiddenClass.</li></ol><li>Slow properties allow for efficient property removal and addition but are slower to access than the other two types.</li></ul><br /><h3>Elements or array-indexed Properties</h3>So far we have looked at named properties and ignored integer indexed properties commonly used with arrays. Handling of integer indexed properties is no less complex than named properties. Even though all indexed properties are always kept separately in the elements store, there are <a href=\"https://cs.chromium.org/chromium/src/v8/src/elements-kind.h?q=elements-kind.h&amp;sq=package:chromium&amp;dr&amp;l=14\">20</a> different types of elements!<br /><br /><b>Packed or Holey Elements:</b> The first major distinction V8 makes is whether the elements backing store is packed or has holes in it. You get holes in a backing store if you delete an indexed element, or for instance, you don't define it. A simple example is <span>[1,,3]</span> where the second entry is a hole. The following example illustrates this issue:<br /><pre><code class=\"javascript\">const o = [\"a\", \"b\", \"c\"];<br />console.log(o[1]);          // Prints \"b\".<br /><br />delete o[1];                // Introduces a hole in the elements store.<br />console.log(o[1]);          // Prints \"undefined\"; property 1 does not exist.<br />o.__proto__ = {1: \"B\"};     // Define property 1 on the prototype.<br /><br />console.log(o[0]);          // Prints \"a\".<br />console.log(o[1]);          // Prints \"B\".<br />console.log(o[2]);          // Prints \"c\".<br />console.log(o[3]);          // Prints undefined<br /></code></pre><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://4.bp.blogspot.com/-IYamXWTAJWc/WaZ0hiBb5VI/AAAAAAAABV8/9BRrrSGMsxkJkjtH2bEqw2qg_UszfNBBACEwYBhgL/s1600/9-opt.png\"><img border=\"0\" height=\"198\" src=\"https://4.bp.blogspot.com/-IYamXWTAJWc/WaZ0hiBb5VI/AAAAAAAABV8/9BRrrSGMsxkJkjtH2bEqw2qg_UszfNBBACEwYBhgL/s400/9-opt.png\" width=\"400\" /></a></div><br />In short, if a property is not present on the receiver we have to keep on looking on the prototype chain. Given that elements are self-contained, e.g. we don't store information about present indexed properties on the HiddenClass, we need a special value, called the_hole, to mark properties that are not present. This is crucial for the performance of Array functions. If we know that there are no holes, i.e. the elements store is packed, we can perform local operations without expensive lookups on the prototype chain.<br /><br /><b>Fast or Dictionary Elements:</b> The second major distinction made on elements is whether they are fast or dictionary-mode. Fast elements are simple VM-internal arrays where the property index maps to the index in the elements store. However, this simple representation is rather wasteful for very large sparse/holey arrays where only few entries are occupied. In this case we used a dictionary-based representation to save memory at the cost of slightly slower access:<br /><pre><code class=\"javascript\">const sparseArray = [];<br />sparseArray[9999] = \"foo\"; // Creates an array with dictionary elements.<br /></code></pre>In this example, allocating a full array with 10k entries would be rather wasteful. What happens instead is that V8 creates a dictionary where we store a key-value-descriptor triplets. The key in this case would be 9999 and the value <span>\"foo\"</span> and the default descriptor is used. Given that we don't have a way to store descriptor details on the HiddenClass, V8 resorts to slow elements whenever you define an indexed properties with a custom descriptor:<br /><pre><code class=\"javascript\">const array = [];<br />Object.defineProperty(array, 0, {value: \"fixed\", configurable: false});<br />console.log(array[0]);      // Prints \"fixed\".<br />array[0] = \"other value\";   // Cannot override index 0.<br />console.log(array[0]);      // Still prints \"fixed\".<br /></code></pre>In this example we added a non-configurable property on the array. This information is stored in  the descriptor part of a slow elements dictionary triplet. It is important to note that Array functions perform considerably slower on objects with slow elements.<br /><br /><b>Smi and Double Elements:</b> For fast elements there is another important distinction made in V8. For instance if you only store integers in an Array, a common use-case, the GC does not have to look at the array, as integers are directly encoded as so called small integers (Smis) in place. Another special case are Arrays that only contain doubles. Unlike Smis, floating point numbers are usually represented as full objects occupying several words. However, V8 stores raw doubles for pure double arrays to avoid memory and performance overhead. The following example lists 4 examples of Smi and double elements:<br /><pre><code class=\"javascript\">const a1 = [1,   2, 3];  // Smi Packed<br />const a2 = [1,    , 3];  // Smi Holey, a2[1] reads from the prototype<br />const b1 = [1.1, 2, 3];  // Double Packed<br />const b2 = [1.1,  , 3];  // Double Holey, b2[1] reads from the prototype<br /></code></pre><b><br /></b><b>Special Elements: </b>With the information so far we covered 7 out of the 20 different element kinds. For simplicity we excluded 9 element kinds for TypedArrays, two more for String wrappers and last but not least, two more special element kinds for arguments objects.<br /><br /><b>The ElementsAccessor:</b> As you can imagine we are not exactly keen on writing Array functions 20 times in C++, once for every elements kind. That's where some C++ magic comes into play. Instead of implementing Array functions over and over again, we built the ElementsAccessor where we mostly have to implement only simple functions that access elements from the backing store. The ElementsAccessor relies on <a href=\"https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern\">CRTP</a> to create specialized versions of each Array function. So if you call something like slice on a array, V8 internally calls a builtin written in C++ and dispatches through the ElementsAccessor to the specialized version of the function:<br /><div><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://3.bp.blogspot.com/-VZ1f0pKwu9g/WaZyrpJ-2qI/AAAAAAAABVo/UZp0rgWPM_QorIHTDBHJCvYUVhnND8DlQCEwYBhgL/s1600/V8%2BBlog%2BPost%2BProperties%2B%25287%2529V8%2BBlog%2BPost%2BProperties%2B%25287%2529-opt.png\"><img border=\"0\" height=\"224\" src=\"https://3.bp.blogspot.com/-VZ1f0pKwu9g/WaZyrpJ-2qI/AAAAAAAABVo/UZp0rgWPM_QorIHTDBHJCvYUVhnND8DlQCEwYBhgL/s640/V8%2BBlog%2BPost%2BProperties%2B%25287%2529V8%2BBlog%2BPost%2BProperties%2B%25287%2529-opt.png\" width=\"640\" /></a></div><br /><b>Takeaway from this section:</b><br /><ul><li>There are fast and dictionary-mode indexed properties and elements.</li><li>Fast properties can be packed or they can can contain holes which indicate that an indexed property has been deleted.</li><li>Elements are specialized on their content to speed up Array functions and reduce GC overhead.</li></ul><br /><br />Understanding how properties work is key to many optimizations in V8. For JavaScript developers many of these internal decisions are not visible directly, but they explain why certain code patterns are faster than others. Changing the property or element type typically causes V8 to create a different HiddenClass which can lead to type pollution which <a href=\"http://mrale.ph/blog/2015/01/11/whats-up-with-monomorphism.html\">prevents V8 from generating optimal code</a>. Stay tuned for further posts on how the VM-internals of V8 work.<br /><br />Posted by Camillo Bruni (<a href=\"https://twitter.com/camillobruni\" rel=\"nofollow\">@camillobruni</a>), also author of <a href=\"https://v8project.blogspot.com/2017/03/fast-for-in-in-v8.html\">‚ÄúFast <code>for-in</code>‚Äù</a></div></div></div>", "title": "Fast Properties in V8", "source_link": "http://v8project.blogspot.com/", "author_link": "https://plus.google.com/115597567207091386344", "author_name": "Camillo Bruni", "source_type": "rss", "link": "http://v8project.blogspot.com/2017/08/fast-properties.html", "published": "2017-08-30T12:29:00", "source_title": "V8 JavaScript Engine", "tags": "browsers,chromium,js,tech,web"}, {"source_name": "Habrahabr", "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ <a href=\"https://lokalise.co/\">Lokalise</a> –º–æ–≥—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å, –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–º —Å–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç —Å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ–º –Ω–∞—ë–º–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–≤ –ø–ª–æ—â–∞–¥–∫–∏, —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Å–≤–æ–∏–º–∏ —Å–∏–ª–∞–º–∏. –ò–º–µ–Ω–Ω–æ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, –≥–¥–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏ –Ω–µ –Ω—É–∂–Ω—ã –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π —è–∑—ã–∫–∞, –º—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≤ Lokalise –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç Google, Yandex, Microsoft –∏ SDL. –û —Ç–æ–º, –∫–∞–∫ –ø–µ—Ä–µ–≤–æ–¥—è—Ç —ç—Ç–∏ —Å–∏—Å—Ç–µ–º—ã, –º—ã —Å–µ–≥–æ–¥–Ω—è –∏ –ø–æ–≥–æ–≤–æ—Ä–∏–º –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö.<br />\n<br />\n<img src=\"https://habrastorage.org/web/92d/a84/d1f/92da84d1f54f48b5bc0dc39564b5e462.jpg\" /><br />\n<br />\n<h3>Google Machine Translate/Google Neural Translate</h3><br />\n–û–∫–æ–ª–æ –ø–æ–ª—É–≥–æ–¥–∞ –Ω–∞–∑–∞–¥ –∫–æ–º–ø–∞–Ω–∏—è Google <a href=\"https://geektimes.ru/post/286668/\">–∑–∞—è–≤–∏–ª–∞</a> –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —è–∑—ã–∫–æ–≤ –∫ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ —Å–≤–æ–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ Google Translate, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∏ —Ä—É—Å—Å–∫–æ–≥–æ. –°–æ–±—ã—Ç–∏–µ —ç—Ç–æ —Å—Ç–∞–ª–æ –∑–Ω–∞–∫–æ–≤—ã–º –¥–ª—è –≤—Å–µ–≥–æ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Ç—ã—Å—è—á–∏ —á–µ–ª–æ–≤–µ–∫ –ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –≤ Chrome –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–º Google –∏–ª–∏ –∏–¥—É—Ç –Ω–∞ —Å–∞–π—Ç Google Translate –∑–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫. <br /> <a href=\"https://habrahabr.ru/post/336566/#habracut\">–ß–∏—Ç–∞—Ç—å –¥–∞–ª—å—à–µ ‚Üí</a>", "tags": "habr,perf,tech,web", "source_link": "https://habrahabr.ru/hub/client_side_optimization/posts/all/", "title": "¬´–ß–µ–º–æ–¥–∞–Ω –∏–∑ –∫—Ä–æ–∫–æ–¥–∏–ª–æ–≤–æ–π –∫–æ–∂–∏¬ª –∏–ª–∏ ¬´–º–µ—à–æ–∫ —Å –∞–ª–ª–∏–≥–∞—Ç–æ—Ä–æ–º¬ª: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫ Lokalise –æ–Ω–ª–∞–π–Ω-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–≤", "author_name": "Lokalise", "source_type": "rss", "link": "https://habrahabr.ru/post/336566/", "published": "2017-08-30T09:43:00", "source_title": "–•–∞–±—Ä–∞—Ö–∞–±—Ä / –í—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–¥—Ä—è–¥ / –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"}, {"source_name": "MozillaHacks", "description": "Part II: Flash delivered video, animation, interactive sites and, yes, ads to billions of users for more than a decade, but now it‚Äôs going away. Here's a compilation of resources that looks ahead at the open web technologies that have emerged to make web video, animation, and game development more performant and engaging than ever!", "tags": "mozilla,services,tech", "text": "<p>Flash delivered video, animation, interactive sites and, yes, ads to billions of users for more than a decade, but <a href=\"https://hacks.mozilla.org/2017/08/flash-in-memoriam/ ‚Äé\">now it‚Äôs going away</a>. Adobe will <a href=\"https://www.theverge.com/2017/7/25/16026236/adobe-flash-end-of-support-2020\">drop support for Flash by 2020</a>. Firefox <a href=\"https://blog.mozilla.org/futurereleases/2017/07/25/firefox-roadmap-flash-end-life/\">no longer supports Flash out of the box</a>, and <a href=\"https://www.theverge.com/2016/12/9/13903878/google-chrome-block-flash-html5\">neither does Chrome</a>. So what‚Äôs next? There are tons of open standards that can do what Flash does, and more.</p>\n<h2><b>Truly Open Multimedia</b></h2>\n<p>Flash promised to deliver one unifying platform for building and delivering interactive multimedia websites. And, for the most part, it delivered. But the technology was never truly open and accessible, and Flash Player was too resource-hungry for mobile devices. Now open-source alternatives can do everything Flash does‚Äîand more. These are the technologies you should learn if you‚Äôre serious about building tomorrow‚Äôs interactive web, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Animation\">whether you‚Äôre doing web animation</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Games\">games</a>, or <a href=\"https://developer.mozilla.org/en-US/docs/Plugins/Flash_to_HTML5/Video\">video</a>.</p>\n<h2><b>Web Animation</b></h2>\n<p>&nbsp;</p>\n<p><strong>CSS</strong><br />\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations\">CSS animation</a> is relatively new, but it‚Äôs the easiest way to get started with web animation. CSS is made to style websites with basic rules that dictate layout, typography, colors, and more. With the release of CSS3, animations are now baked into the standard, and as a developer, it‚Äôs up to you to tell the browser how to animate. CSS is human readable, which means it basically does what it says on the tin. For example, the property ‚Äúanimation-direction,‚Äù does exactly that: specifies the direction of your animation.</p>\n<p>Right now you can create smooth, seamless animations with CSS. It‚Äôs simple to create <a href=\"https://en.wikipedia.org/wiki/Key_frame\">keyframes</a>, adjust timing, animate opacity, and more. ¬†And all the animations work with anything you‚Äôd style normally with CSS: text, images, containers, and so on.</p>\n<p>You can do animation with CSS, even if you‚Äôre unfamiliar with programming languages. Like many open-source projects, the <a href=\"https://daneden.github.io/animate.css/\">code is out there on the web for you to play around with</a>. Mozilla has also created (and maintains) <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations\">exhaustive CSS animation documentation</a>. Most developers recommend using CSS animation for simple projects and JavaScript for more complex sites.</p>\n<p><strong>JavaScript</strong><br />\nDevelopers have been animating with JavaScript since the early days. Basic mouseover scripts have been around for more than two decades and today JavaScript, along with HTML5 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_usage\">&lt;canvas&gt;</a> elements, can do some pretty amazing things. Even simple scripts can <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_animations\">yield great results</a>. With JavaScript, you can draw shapes, change colors, move and change images, and animate transparency. JavaScript animation uses the <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Mozilla_SVG_Project\">SVG</a> (scalable vector graphics) format for animations, meaning artwork is actually drawn live based on math rather than being loaded and rendered. That means they remain crisp at any scale (thus the name) and can be completely controlled. SVG offers anti-aliased rendering, pattern and gradient fills, sophisticated filter-effects, clipping to arbitrary paths, text and animations. And, of course, it‚Äôs an open standard W3C recommendation rather than a closed binary. Using SVG, JavaScript, and CSS3, developers can create <a href=\"http://slides.com/sdrasner/svg-can-do-that#/\">impressive interactive animations</a> that don‚Äôt require any specialized formats or players.</p>\n<p>JavaScript animation can be very refined, including bouncing, stop, pause, rewind, or slow down. It‚Äôs also interactive and can be programmed to respond to mouse clicks and rollovers. The new <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API\">Web Animations API</a>, built with JavaScript, lets you fine-tune animations with more control over keyframes and elements, but it‚Äôs still in the early, experimental phases of development and some features may not be supported by all browsers.</p>\n<p>Additionally, JavaScript animations can be programmed to respond to input fields, form submissions, and keystrokes. And that makes it perfect for building web games.</p>\n<h2>Web Games</h2>\n<p>At one time, Flash ruled web games. It was easy to learn, use, and distribute. It was also robust, able to deliver massively multiplayer online games to millions. But today it‚Äôs possible to deliver the same‚Äîif not better‚Äîexperience using JavaScript, HTML5, WebGL and WebAssembly. With modern browsers and open-source frameworks, it‚Äôs possible to <a href=\"https://developer.mozilla.org/en-US/docs/Games/Introduction\">build 3D action shooters, RPGs, adventure games, and more</a>. In fact, you can now even create fully immersive virtual reality experiences for the web with technologies like <a href=\"http://vr.mozilla.org\">WebVR</a> and <a href=\"https://aframe.io/\">A-Frame</a>.</p>\n<p>Web games rely on an ecosystem of open-source frameworks and platforms to work. Each one plays an important role, from visuals to controls to audio to networking. The Mozilla Developer Network has a <a href=\"https://developer.mozilla.org/en-US/docs/Games/Introduction\">thorough list of</a> technologies that are currently in use. Here are just a few of them and what they‚Äôre used for:</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/WebGL\"><strong>WebGL</strong><br />\n</a>Lets you create high-performance, hardware-accelerated 3D (and 2D) graphics from Web content. This is a Web-supported implementation of<a href=\"http://www.khronos.org/opengles/\"> OpenGL ES</a> 2.0. WebGL 2 goes even further, enabling OpenGL ES 3.0 level of support in browsers.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/JavaScript\"><strong>JavaScript</strong><br />\n</a>JavaScript, the programming language used on the Web, works well in browsers and is getting faster all the time. It‚Äôs already used to build thousands of games and new game frameworks are being developed constantly.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/HTML/Element/audio\"><strong>HTML audio</strong><br />\n</a>The<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio\"> &lt;audio&gt;</a> element lets you easily play simple sound effects and music. If your needs are more involved, check out the<a href=\"https://developer.mozilla.org/en-US/docs/Web_Audio_API\"> Web Audio API</a> for real audio processing power!</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web_Audio_API\"><strong>Web Audio API</strong><br />\n</a>This API for controlling the playback, synthesis, and manipulation of audio from JavaScript code lets you create awesome sound effects as well as play and manipulate music in real time.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/WebSockets\"><strong>WebSockets</strong><br />\n</a>The WebSocket API lets you connect your app or site to a server to transmit data back and forth in real-time. Perfect for multiplayer turn-based or even-based gaming, chat services, and more.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/WebRTC\"><strong>WebRTC</strong><br />\n</a>WebRTC is an ultra-fast API that can be used by video-chat, voice-calling, and P2P-file-sharing Web apps. It can be used for real-time multiplayer games that require low latency.</p>\n<p><a href=\"https://research.mozilla.org/webassembly/\"><strong>WebAssembly</strong><br />\n</a>HTML5/JavaScript game engines are better than ever, but they still can‚Äôt quite match the performance of native apps. <a href=\"https://research.mozilla.org/webassembly/\">WebAssembly</a> promises to bring near-native performance to web apps. The technology <a href=\"https://hacks.mozilla.org/2017/07/webassembly-for-native-games-on-the-web/\">lets browsers run compiled C/C++ code</a>, including games made with engines like <a href=\"https://unity3d.com/\">Unity</a> and <a href=\"https://www.unrealengine.com/en-US/what-is-unreal-engine-4\">Unreal</a>. </p>\n<p>With WebAssembly, web games will be able to <a href=\"https://hacks.mozilla.org/2017/07/webassembly-for-native-games-on-the-web/\">take advantage of multithreading</a>. Developers will be able to produce staggering 3D games for the web that run close to the same speed as native code, but without compromising on security. It‚Äôs a tremendous breakthrough for gaming &#8212; and the open web. It means that developers will be able to build games for any computer or system that can access the web. And because they‚Äôll be running in browsers, it‚Äôll be easy to integrate online multiplayer modes.</p>\n<p>Additionally, there are many <a href=\"https://github.com/bebraw/jswiki/wiki/Game-Engines\">HTML5/JavaScript game engines</a> out there. These engines take care of the basics like physics and controls, giving developers a framework/world to build on. They range from lightweight and fast, like <a href=\"https://github.com/nornagon/atom\">atom</a> and <a href=\"https://github.com/diogoschneider/quick\">Quick</a> 2D engines, to full-featured 3D engines like <a href=\"https://github.com/WhitestormJS/whs.js\">WhitestormJS</a> and <a href=\"https://github.com/gladiusjs/gladius-core\">Gladius</a>. There are dozens to choose from, each with their own unique advantages and disadvantages for developers. But in the end, they all produce games that can be played on modern web browsers without plug-ins. And most of those games can run on less-powerful hardware, meaning you can reach even more users. In fact, games written for the web can run on tablets, smartphones, and even smart TVs.</p>\n<p>MDN has <a href=\"https://developer.mozilla.org/en-US/docs/Games/Introduction\">extensive documentation on building web games</a> and several tutorials on building games using <a href=\"https://developer.mozilla.org/en-US/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript\">pure JavaScript</a> and the <a href=\"https://developer.mozilla.org/en-US/docs/Games/Tutorials/2D_breakout_game_Phaser\">Phaser game framework</a>. It‚Äôs a great place to start for web game development.</p>\n<h2>Video</h2>\n<p>Most video services have already switched to HTML5-based streaming using web technologies and open codecs; others are ¬†sticking with the <a href=\"https://en.wikipedia.org/wiki/Flash_Video\">Flash-based FLV or FV4 codecs</a>. As stated earlier, Flash video formats rely on software rendering that can tax web browsers and mobile platforms. Modern video codecs can use hardware rendering for video playback, greatly increasing responsiveness and efficiency. Unfortunately, there‚Äôs only one way to switch from Flash to HTML5: Re-encoding your video. That means converting your source material into HTML5-friendly formats via a free converter like <a href=\"http://ffmpeg.org/\">FFmpeg</a> and<a href=\"https://handbrake.fr/\"> Handbrake</a>.</p>\n<p>Mozilla is actively helping to build and improve the HTML5-friendly and <a href=\"https://www.webmproject.org/\">open-source video format WebM</a>. It‚Äôs based on the <a href=\"https://www.matroska.org/technical/whatis/index.html\">Matroska</a> container and uses <a href=\"https://en.wikipedia.org/wiki/VP8\">VP8</a> and <a href=\"https://www.webmproject.org/vp9/\">VP9</a> video codecs and <a href=\"http://www.vorbis.com/\">Vorbis</a> or <a href=\"http://www.opus-codec.org/\">Opus</a> codecs.</p>\n<p>Once your media has been converted to an HTML5-friendly format, you can repost your videos on your site. HTML5 has built-in media controls, so there‚Äôs no need to install any players. It‚Äôs as easy as pie. Just use a single line of HTML:<br />\n<code><br />\n&lt;video src=\"videofile.webm\" controls&gt;&lt;/video&gt;</code></p>\n<p>Keep in mind that native controls are inconsistent between browsers. Because they‚Äôre made with HTML5, however, you can <a href=\"https://developer.mozilla.org/en-US/Apps/Fundamentals/Audio_and_video_delivery\">customize them with CSS</a> and link them to your video with JavaScript. That means you can build for accessibility, add your own branding, and keep the look and feel consistent between browsers.</p>\n<p>HTML5 can also handle adaptive streaming with <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Media_Source_Extensions_API\">Media Source Extensions (MSEs)</a>. Although they may be difficult to set up on their own, you can use <a href=\"https://en.wikipedia.org/wiki/Media_Source_Extensions#Players\">pre-packaged players</a> like <a href=\"https://github.com/google/shaka-player\">Shaka Player</a> and <a href=\"https://www.jwplayer.com/\">JW Player</a> that can handle the details.</p>\n<p>The developers at MDN have created an in-depth <a href=\"https://developer.mozilla.org/en-US/docs/Plugins/Flash_to_HTML5/Video\">guide for converting Flash video to HTML5 video</a> with many more details on the process. Fortunately, it‚Äôs not as difficult as it seems.</p>\n<h2><b>Flash Forward </b></h2>\n<p>The future of the web is open (<a href=\"https://advocacy.mozilla.org/en-US/net-neutrality/\">hopefully</a>) and Flash, despite being a great tool for creatives, wasn‚Äôt open enough. Thankfully, many open source tools ¬†can do what Flash does, and more. But we‚Äôre still in the early stages and creating animations, interactive websites, and web games takes <a href=\"https://developer.mozilla.org/en-US/\">some coding knowledge</a>. Everything you need to know is out there, just waiting for you to learn it.</p>\n<p>Open web technologies promise to be better than Flash ever was, and will be accessible to anyone with an Internet connection.</p>", "title": "Life After Flash: Multimedia for the Open Web", "author_name": "Dustin Driver", "source_type": "rss", "link": "https://hacks.mozilla.org/2017/08/life-after-flash-multimedia-for-the-open-web/", "source_link": "https://hacks.mozilla.org", "source_title": "Mozilla Hacks ‚Äì the Web developer blog", "published": "2017-08-29T14:53:00"}, {"source_name": "MozillaHacks", "description": "Part I of a two-part reflection on digital multimedia, yesterday and today: Macromedia launched Flash 1.0 in 1996 with the grand vision of a single multimedia platform that would work flawlessly in any browser or any computer. In its day, Flash triggered a wave of creativity and inspired millions of people around the world to create digital media for the web. At one time, 75% of all video content on the web was delivered via the Flash player.", "tags": "mozilla,services,tech", "text": "<p>Adobe will <a href=\"https://www.theverge.com/2017/7/25/16026236/adobe-flash-end-of-support-2020\">drop Flash by 2020</a>. Firefox <a href=\"https://blog.mozilla.org/futurereleases/2017/07/25/firefox-roadmap-flash-end-life/\">no longer supports Flash out of the box</a>, and <a href=\"https://www.theverge.com/2016/12/9/13903878/google-chrome-block-flash-html5\">neither does Chrome</a>. The multimedia platform is being replaced with open internet technologies like HTML5, CSS3, and JavaScript. But at one time, Flash was cutting edge. It inspired a generation of animators and developers and gave us some fantastic websites, games, TV shows, and even movies.</p>\n<p>Macromedia launched Flash 1.0 (originally <a href=\"https://en.wikipedia.org/wiki/FutureWave_Software\">FutureWave</a> SmartSketch) in 1996 with a grand vision: A single multimedia platform that would work flawlessly in any browser or any computer. No pesky browser interoperability issues, no laborious cross-browser testing. Just experiences that looked and acted the same in every browser.</p>\n<p>A slick GUI, novel drawing and animation tools, and <a href=\"https://en.wikipedia.org/wiki/ActionScript\">a simple scripting language</a> made Flash a smash hit. Many artists, developers, filmmakers, and storytellers (myself included) were smitten. The platform sparked a revolution of multimedia websites rife with elaborate mouseover effects, thumping electronic music, and motion-sickness-inducing transitions. Corporations and businesses of all shapes and sizes created Flash websites. Millions of Flash-based games hit the web via sites like <a href=\"http://www.newgrounds.com/\">Newgrounds</a> and many popular games were developed with Flash, including <a href=\"https://en.wikipedia.org/wiki/Angry_Birds\">Angry Birds</a>,<a href=\"https://en.wikipedia.org/wiki/Clash_of_Clans\">Clash of Clans</a>,<a href=\"https://en.wikipedia.org/wiki/FarmVille\">FarmVille</a>,<a href=\"https://en.wikipedia.org/wiki/AdventureQuest\">AdventureQuest</a> and<a href=\"https://en.wikipedia.org/wiki/Machinarium\">Machinarium</a>.</p>\n<p>Flash also became a popular animation tool. Hit kids&#8217; shows like <a href=\"https://en.wikipedia.org/wiki/Pound_Puppies_%282010_TV_series%29\">Pound Puppies</a> and <a href=\"https://en.wikipedia.org/wiki/My_Little_Pony:_Friendship_is_Magic\">My Little Pony: Friendship is Magic</a> and comedy series like <a href=\"https://en.wikipedia.org/wiki/Total_Drama\">Total Drama</a> and <a href=\"https://en.wikipedia.org/wiki/Squidbillies\">Squidbillies</a> were made exclusively in Flash. The 2009 Academy Award nominated animated movie <a href=\"https://en.wikipedia.org/wiki/The_Secret_of_Kells\">The Secret of Kells</a> was also made in Flash. Then, of course, there was the Internet phenomenon <a href=\"https://en.wikipedia.org/wiki/Homestar_Runner\">Homestar Runner</a>‚Äîanimated web series, interactive website, and games hub.</p>\n<p>In 2005, Macromedia was purchased by Adobe. That same year, YouTube launched. The streaming video service used the Flash player to deliver video to millions. At one time, 75% of all video content on the web was delivered via the Flash player.</p>\n<p>Over the years, Flash grew, but didn‚Äôt necessarily improve. Its codebase became bloated and processor-power hungry. Then Apple released the iPhone, <a href=\"https://www.apple.com/hotnews/thoughts-on-flash/\">famously without Flash support</a>. Flash used software rendering for video, which hurt battery life and performance on mobile devices. Instead, Apple recommended the HTML5 &lt;video&gt; tag ¬†for video delivery on the web, using formats which can be rendered in hardware much more efficiently. YouTube added support for HTML5-friendly video and in 2015 announced that it would <a href=\"https://www.theverge.com/2015/1/27/7926001/youtube-drops-flash-for-html5-video-default\">drop all support for Flash</a>.</p>\n<p>Flash is also, at its core, a closed and proprietary platform. Its code is controlled exclusively by Adobe with little or no community support.</p>\n<p>Finally, Adobe itself announced the end of Flash. The company will <a href=\"https://www.theverge.com/2017/7/25/16026236/adobe-flash-end-of-support-2020\">no longer support Flash after 2020</a>. It will continue to support <a href=\"https://en.wikipedia.org/wiki/Adobe_AIR\">Adobe AIR</a>, however, which packages Flash material and scripts into a runtime for desktop and mobile devices.</p>\n<p>Flash undoubtedly made a huge contribution to the web, despite it&#8217;s drawbacks. It triggered a wave of creativity and inspired millions of people around the world to create digital media for the web.</p>\n<p>In my next post, <a href=\"https://hacks.mozilla.org/2017/08/life-after-flash-multimedia-for-the-open-web\">Life After Flash</a>, I&#8217;ll walk you through some of new open standards, tools, and technologies that make online multimedia more performant and interactive than ever. </p>", "title": "Flash, In Memoriam", "author_name": "Dustin Driver", "source_type": "rss", "link": "https://hacks.mozilla.org/2017/08/flash-in-memoriam/", "source_link": "https://hacks.mozilla.org", "source_title": "Mozilla Hacks ‚Äì the Web developer blog", "published": "2017-08-29T14:52:00"}, {"source_name": "Twitter", "description": "", "tags": "computer science,tech,twitter", "source_link": "https://twitter.com", "title": "RT @TopMdw: Oh, I just love this. Carol giving Gene Simmons of KISS a bass lesson. She is 80 years old now.\n\nhttps://t.co/pjCGWQ87OC", "author_name": "Kent Beck", "source_type": "twitter", "link": "https://twitter.com/KentBeck/status/902495671248228353", "author_link": "https://twitter.com/KentBeck", "published": "2017-08-29T11:38:00", "source_title": "Twitter", "share_count": 13, "favorite_count": 0}, {"source_name": "GoogleDevelopersWeb", "description": "<img src=\"https://ga-beacon.appspot.com/UA-52746336-1/web/updates/2017/08/devtools-release-notes?feed_type=atom&amp;pixel\" />\n        \n        <h1 id=\"what-s-new-in-devtools-chrome-62-\">What's New In DevTools (Chrome 62)</h1>\n<p>New features coming to DevTools in Chrome 62:</p>\n<ul>\n<li><a href=\"https://developers.google.com/web/updates/atom.xml#await\">Support for top-level <code>await</code> operators in the <strong>Console</strong></a>.</li>\n<li><a href=\"https://developers.google.com/web/updates/atom.xml#screenshot-areas\">Screenshots of a portion of the viewport</a>, and\n<a href=\"https://developers.google.com/web/updates/atom.xml#node-screenshots\">screenshots of specific HTML nodes</a>.</li>\n<li><a href=\"https://developers.google.com/web/updates/atom.xml#css-grid-highlighting\">CSS Grid highlighting</a>.</li>\n<li><a href=\"https://developers.google.com/web/updates/atom.xml#query-objects\">A new <strong>Console</strong> API for querying objects</a>.</li>\n<li><a href=\"https://developers.google.com/web/updates/atom.xml#negative-filters\">Negative filters</a> and <a href=\"https://developers.google.com/web/updates/atom.xml#url-filters\">URL filters</a> in\nthe <strong>Console</strong>.</li>\n<li><a href=\"https://developers.google.com/web/updates/atom.xml#har-imports\">HAR imports in the <strong>Network</strong> panel</a>.</li>\n<li><a href=\"https://developers.google.com/web/updates/atom.xml#cache-previews\">Previewable cache resources</a>.</li>\n</ul>\n<p>Note: You can check what version of Chrome you're running at\n<code>chrome://version</code>. Chrome auto-updates to a new major version about every 6\nweeks.</p>\n<h2 id=\"top-level-await-operators-in-the-console\">Top-level await operators in the Console</h2>\n<p>The <strong>Console</strong> now supports top-level <code>await</code> operators.</p>\n<figure>\n  <img alt=\"Using top-level await operators in the Console\" src=\"https://developers.google.com/web/updates/images/2017/08/await.png\" />\n  <figcaption>\n    <b>Figure 1</b>. Using top-level <code>await</code> operators in the\n    <b>Console</b>\n  </figcaption>\n</figure>\n\n<h2 id=\"new-screenshot-workflows\">New screenshot workflows</h2>\n<p>You can now take a screenshot of a portion of the viewport, or of a specific\nHTML node.</p>\n<h3 id=\"screenshots-of-a-portion-of-the-viewport\">Screenshots of a portion of the viewport</h3>\n<p>To take a screenshot of a portion of your viewport:</p>\n<ol>\n<li>Click <strong>Inspect</strong> <img alt=\"Inspect\" src=\"https://developers.google.com/web/updates/images/2017/08/inspect-icon.png\" /> or press\n<kbd>Command</kbd>+<kbd>Shift</kbd>+<kbd>C</kbd> (Mac) or\n<kbd>Control</kbd>+<kbd>Shift</kbd>+<kbd>C</kbd> (Windows, Linux)\nto enter Inspect Element Mode.</li>\n<li>Hold <kbd>Control</kbd> and select the portion of the viewport that\nyou want to take a screenshot of.</li>\n<li>Release your mouse. DevTools downloads a screenshot of the portion that\nyou selected.</li>\n</ol>\n<figure>\n  <img alt=\"Taking a screenshot of a portion of the viewport\" src=\"https://developers.google.com/web/updates/images/2017/08/screenshot.png\" />\n  <figcaption>\n    <b>Figure 2</b>. Taking a screenshot of a portion of the viewport\n  </figcaption>\n</figure>\n\n<h3 id=\"screenshots-of-specific-html-nodes\">Screenshots of specific HTML nodes</h3>\n<p>To take a screenshot of a specific HTML node:</p>\n<ol>\n<li><p><a href=\"https://developers.google.com/web/tools/chrome-devtools/css/reference#select\">Select an element</a> in the <strong>Elements</strong> panel.</p>\n  <figure>\n    <img alt=\"An example of a node \" src=\"https://developers.google.com/web/updates/images/2017/08/target-node.png\" />\n    <figcaption>\n      <b>Figure 3</b>. In this example, the goal is to take a screenshot\n      of the blue header that contains the text <code>Tools</code>. Note\n      that this node is already selected in the <b>DOM Tree</b> of the\n      <b>Elements</b> panel\n    </figcaption>\n  </figure>\n\n</li>\n</ol>\n<ol>\n<li>Open the <a href=\"https://developers.google.com/web/tools/chrome-devtools/ui#command-menu\">Command Menu</a>.</li>\n</ol>\n<ol>\n<li><p>Start typing <code>node</code> and select <code>Capture node screenshot</code>. DevTools\ndownloads a screenshot of the selected node.</p>\n  <figure>\n    <img alt=\"The result of the 'Capture node screenshot' command\" src=\"https://developers.google.com/web/updates/images/2017/08/node-screenshot.png\" />\n    <figcaption>\n      <b>Figure 4</b>. The result of the <code>Capture node\n      screenshot</code> command\n    </figcaption>\n  </figure>\n\n\n</li>\n</ol>\n<h2 id=\"css-grid-highlighting\">CSS Grid highlighting</h2>\n<p>To view the CSS Grid that's affecting an element, hover over an element\nin the <strong>DOM Tree</strong> of the <strong>Elements</strong> panel. A dashed border appears around\neach of the grid items. This only works when the selected item, or the\nparent of the selected item, has <code>display:grid</code> applied to it.</p>\n<figure>\n  <img alt=\"Highlighting a CSS Grid\" src=\"https://developers.google.com/web/updates/images/2017/08/css-grid-highlighting.png\" />\n  <figcaption>\n    <b>Figure 5</b>. Highlighting a CSS Grid\n  </figcaption>\n</figure>\n\n<h2 id=\"a-new-api-for-querying-objects\">A new API for querying objects</h2>\n<p>Call <code>queryObjects(Constructor)</code> from the <strong>Console</strong> to return an array\nof objects that were created with the specified constructor. For example:</p>\n<ul>\n<li><code>queryObjects(Promise)</code>. Returns all Promises.</li>\n<li><code>queryObjects(HTMLElement)</code>. Returns all HTML elements.</li>\n<li><code>queryObjects(foo)</code>, where <code>foo</code> is a function name. Returns all objects\nthat were instantiated via <code>new foo()</code>.</li>\n</ul>\n<h2 id=\"new-console-filters\">New Console filters</h2>\n<p>The <strong>Console</strong> now supports negative and URL filters.</p>\n<h3 id=\"negative-filters\">Negative filters</h3>\n<p>Type <code>-&lt;text&gt;</code> in the <strong>Filter</strong> box to filter out any <strong>Console</strong> message\nthat includes that <code>&lt;text&gt;</code>.</p>\n<p>In general, if <code>&lt;text&gt;</code> is found <em>anywhere</em> in the UI that DevTools presents\nfor the message, then the <strong>Console</strong> hides the message. This includes the\nmessage text, the filename from which the message originated, and the stack\ntrace text (when applicable).</p>\n<figure>\n  <img alt=\"An example of 3 messages that will be filtered out\" src=\"https://developers.google.com/web/updates/images/2017/08/before-negative-filter.png\" />\n  <figcaption>\n    <b>Figure 6</b>. An example of 3 messages that will be filtered out\n  </figcaption>\n</figure>\n\n<figure>\n  <img alt=\"The result after applying the negative filter\" src=\"https://developers.google.com/web/updates/images/2017/08/after-negative-filter.png\" />\n  <figcaption>\n    <b>Figure 7</b>. The result after applying the <code>-foo</code>\n    Console filter\n  </figcaption>\n</figure>\n\n<h3 id=\"url-filters\">URL filters</h3>\n<p>Type <code>url:&lt;text&gt;</code> in the <strong>Filter</strong> box to only show messages that originated\nfrom a script whose URL includes <code>&lt;text&gt;</code>.</p>\n<p>The filter uses fuzzy matching. If <code>&lt;text&gt;</code> appears anywhere in the URL,\nthen DevTools shows the message.</p>\n<figure>\n  <img alt=\"An example of URL filtering\" src=\"https://developers.google.com/web/updates/images/2017/08/url-filter.png\" />\n  <figcaption>\n    <b>Figure 8</b>. Using URL filtering to only display messages that\n    originate from scripts whose URL includes <code>hymn</code>. By hovering\n    over the script name, you can see that the host name includes this text\n  </figcaption>\n</figure>\n\n<h2 id=\"har-imports-in-the-network-panel\">HAR imports in the Network panel</h2>\n<p>Drag and drop a HAR file into the <strong>Network</strong> panel to import it.</p>\n<figure>\n  <img alt=\"Importing a HAR file\" src=\"https://developers.google.com/web/updates/images/2017/08/har-import.png\" />\n  <figcaption>\n    <b>Figure 9</b>. Importing a HAR file\n  </figcaption>\n</figure>\n\n<!-- using HTML below because the markdown syntax isn't working for some\n     reason... -->\n<aside class=\"note\">\n  <b>Note</b>: To export a HAR file, right-click a request and select <b>Save\n  As HAR With Content</b>. All requests that DevTools has recorded are saved\n  to the file. If you've got any filters enabled, those are ignored.\n</aside>\n\n<h2 id=\"previewable-cache-resources-in-the-application-panel\">Previewable cache resources in the Application panel</h2>\n<p>Click a row in a <strong>Cache Storage</strong> table to see a preview of that resource\nbelow the table.</p>\n<figure>\n  <img alt=\"Previewing a cache resource\" src=\"https://developers.google.com/web/updates/images/2017/08/cache-preview.png\" />\n  <figcaption>\n    <b>Figure 10</b>. Previewing a cache resource\n  </figcaption>\n</figure>\n\n<h2 id=\"feedback\">Feedback</h2>\n<p>The best place to discuss any of the features or changes you see here is\nthe <a href=\"https://groups.google.com/forum/#!forum/google-chrome-developer-tools\">google-chrome-developer-tools@googlegroups.com mailing list</a>. You\ncan also tweet us at <a href=\"https://twitter.com/chromedevtools\">@ChromeDevTools</a> if\nyou're short on time.</p>\n<h2 id=\"previous-release-notes\">Previous release notes</h2>\n<ul>\n<li><a href=\"https://developers.google.com/web/updates/2017/07/devtools-release-notes\">What's New In DevTools (Chrome 61)</a></li>\n<li><a href=\"https://developers.google.com/web/updates/2017/05/devtools-release-notes\">What's New In DevTools (Chrome 60)</a></li>\n<li><a href=\"https://developers.google.com/web/updates/2017/04/devtools-release-notes\">What's New In DevTools (Chrome 59)</a></li>\n<li><a href=\"https://developers.google.com/web/updates/2017/03/devtools-release-notes\">What's New In DevTools (Chrome 58)</a></li>\n</ul>", "tags": "chrome62,devtools,tech,web", "source_link": "https://developers.google.com/web/updates/?utm_source=feed&utm_medium=feed&utm_campaign=updates_feed", "title": "What's New In DevTools (Chrome 62)", "author_name": "Kayce Basques", "source_type": "rss", "link": "https://developers.google.com/web/updates/2017/08/devtools-release-notes?utm_source=feed&utm_medium=feed&utm_campaign=updates_feed", "published": "2017-08-29T00:00:00", "source_title": "Updates"}, {"source_name": "Twitter", "description": "", "tags": "computer science,tech,twitter", "source_link": "https://twitter.com", "title": "My first step in planning the rest of my career: accepting my own anger. My Forehead Malfunction https://t.co/THAV6hvZrS", "author_name": "Kent Beck", "source_type": "twitter", "link": "https://twitter.com/KentBeck/status/902244193510187008", "author_link": "https://twitter.com/KentBeck", "published": "2017-08-28T18:59:00", "source_title": "Twitter", "share_count": 31, "favorite_count": 126}, {"source_name": "FacebookCode", "description": "FCR allows applications to connect and run commands on thousands of network devices.", "tags": "facebook,services,tech", "source_link": "https://code.facebook.com/", "title": "FCR: Open source command runner for network devices", "author_name": "Surinder Singh", "source_type": "rss", "link": "https://code.facebook.com/posts/117615485632126/fcr-open-source-command-runner-for-network-devices-/?utm_source=codedot_rss_feed&utm_medium=rss&utm_campaign=RSS+Feed", "published": "2017-08-28T17:00:00", "source_title": "Facebook Code"}, {"source_name": "Twitter", "description": "", "tags": "computer science,tech,twitter", "source_link": "https://twitter.com", "title": "What strikes me about Uberto's piece is how long he's been practicing. \"...In 7 Days\" won't get you there. https://t.co/k7wgDiwbLd", "author_name": "Kent Beck", "source_type": "twitter", "link": "https://twitter.com/KentBeck/status/902211304735129602", "author_link": "https://twitter.com/KentBeck", "published": "2017-08-28T16:48:00", "source_title": "Twitter", "share_count": 19, "favorite_count": 53}, {"source_name": "Twitter", "description": "", "tags": "computer science,tech,twitter", "source_link": "https://twitter.com", "title": "I enjoyed my conversation with Kim, representing the privileged white guy perspective :) https://t.co/yrfe4Poc6i", "author_name": "Kent Beck", "source_type": "twitter", "link": "https://twitter.com/KentBeck/status/902209967951814656", "author_link": "https://twitter.com/KentBeck", "published": "2017-08-28T16:43:00", "source_title": "Twitter", "share_count": 1, "favorite_count": 12}, {"source_name": "2ality", "description": "<p>In principle, JavaScript is a very dynamic and interactive programming language. However, that has changed significantly in recent years. Now, modern web development requires extensive build and compilation steps. That is unfortunate for two reasons. First, it makes development less pleasant. Second, it makes web development harder to learn. This blog post covers ideas and tools for easing some of the pain of building.</p>\n\n<div><a href=\"http://2ality.com/2017/08/less-building-in-web-dev.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/kbj2VcPTyOQ\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "Easing the pain of building in JavaScript", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/08/less-building-in-web-dev.html", "author_link": "http://2ality.com/", "published": "2017-08-26T12:54:00", "source_title": "2ality feed"}, {"source_name": "Habrahabr", "description": "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–µ–±–µ, —á—Ç–æ, –ø—Ä–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≤—ã –∏–º–µ–ª–∏ –±—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—ã—Å—Ç—Ä–æ –ø—Ä–∏–∫–∏–Ω—É—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–∞–º–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –∞ –Ω–µ ¬´–ø—Ä–∏–∫–ª–∞–¥—ã–≤–∞—è –∫ –º–∞–∫–µ—Ç—É¬ª. –ó–≤—É—á–∏—Ç –∫—Ä—É—Ç–æ? –í–æ—Ç –∏ –º—ã —Ç–∞–∫ –ø–æ–¥—É–º–∞–ª–∏. –ü–æ—ç—Ç–æ–º—É –º—ã –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å–µ–≥–æ–¥–Ω—è –Ω–∞—à –Ω–æ–≤—ã–π Lokalise SDK Live Edit Module –¥–ª—è iOS-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ –≤–Ω–æ—Å–∏–º—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –ø—Ä–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –ª—é–±–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–¥ iOS. <br />\n<br />\n<img alt=\"image\" src=\"https://habrastorage.org/getpro/habr/post_images/779/81c/879/77981c879f5865aaf7cb30a1888f9095.jpg\" /><br />\n<br />\n–ù–∞—Å–∫–æ–ª—å–∫–æ —ç—Ç–æ —É–¥–æ–±–Ω–æ –∏ –∫–∞–∫ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–∂–µ—Ç —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –∫–æ–º–∞–Ω–¥–µ, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ —Ä–∞—Å—Ç—è–≥–∏–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü—ã, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –¥–µ—Ä–≥–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞, —Ä–∞—Å—Å–∫–∞–∂–µ–º –Ω–∏–∂–µ.<br /> <a href=\"https://habrahabr.ru/post/336106/#habracut\">–ß–∏—Ç–∞—Ç—å –¥–∞–ª—å—à–µ ‚Üí</a>", "tags": "habr,perf,tech,web", "source_link": "https://habrahabr.ru/hub/client_side_optimization/posts/all/", "title": "–ù–µ –∫–æ–º–ø–∏–ª–∏—Ä—É–π —ç—Ç–æ: –∂–∏–≤–æ–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è Lokalise SDK, —á—Ç–æ–±—ã ¬´–Ω–∞ –ª–µ—Ç—É¬ª –ø—Ä–æ–≤–µ—Ä—è—Ç—å, –≤–ª–µ–∑–µ—Ç –ª–∏ –Ω–∞–¥–ø–∏—Å—å –Ω–∞ –∫–Ω–æ–ø–∫—É", "author_name": "Lokalise", "source_type": "rss", "link": "https://habrahabr.ru/post/336106/", "published": "2017-08-24T16:59:00", "source_title": "–•–∞–±—Ä–∞—Ö–∞–±—Ä / –í—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–¥—Ä—è–¥ / –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"}, {"source_name": "MozillaHacks", "description": "With Firefox‚Äôs move to a modern web-style browser extension API, it‚Äôs now possible to maintain one codebase and ship an extension in multiple browsers. However, since different browsers can have different capabilities, some extensions may require modification to be truly portable. With this in mind, we‚Äôve built the Extension Compatibility Tester.", "tags": "mozilla,services,tech", "text": "<p>With Firefox‚Äôs move to a <a href=\"https://developer.mozilla.org/en-US/Add-ons/WebExtensions\">modern web-style browser extension API</a>, it‚Äôs now possible to maintain one codebase and ship an extension in multiple browsers. However, since different browsers can have different capabilities, some extensions may require modification to be truly portable. With this in mind, we‚Äôve built the <a href=\"https://www.extensiontest.com/\">Extension Compatibility Tester</a> to give developers a better sense of whether their existing extensions will work in Firefox.</p>\n<p>The tool currently supports Chrome extension bundle (.crx) files, but we‚Äôre working on expanding the types of extensions you can check. The tool generates a report showing any potential uses of APIs or permissions incompatible with Firefox, along with next steps on how to distribute a compatible extension to Firefox users.</p>\n<p>We will continue to participate in the <a href=\"https://www.w3.org/community/browserext/\">Browser Extensions Community Group</a> and support its goal of finding a common subset of extensible points in browsers and APIs that developers can use. We hope you give the tool a spin and let us know what you think!</p>\n<h3><a href=\"https://www.extensiontest.com/\">Try it out! >></a></h3>\n<h3>‚ÄúThe tool says my extension may not be compatible‚Äú</h3>\n<p>Not to worry! Our analysis only shows API and permission usage, and doesn‚Äôt have the full context. If the incompatible functionality is non-essential to your extension you can use capability testing to only use the API when available:</p>\n<pre><code class=\"code-multiline\"><span class=\"sf_code_syntax_comment\">// Causes an Error\n</span>browser.unavailableAPI(...);\n<span class=\"sf_code_syntax_comment\">\n// Capability Testing FTW!\n</span><span class=\"sf_code_syntax_keyword\">if</span><span class=\"sf_code_syntax_comment\"> (</span><span class=\"sf_code_syntax_string\">'unavailableAPI'</span><span class=\"sf_code_syntax_comment\"> </span><span class=\"sf_code_syntax_keyword\">in</span><span class=\"sf_code_syntax_comment\"> browser) {</span>\n\tbrowser.unavailableAPI(...);<span class=\"sf_code_syntax_comment\">\n</span>}</code></pre>\n<p></p>\n<p>Additionally, we‚Äôre constantly expanding the <a href=\"https://developer.mozilla.org/en-US/Add-ons/WebExtensions\">available extension APIs</a>, so your missing functionality may be only a few weeks away!</p>\n<h3>‚ÄúThe tool says my extension is compatible!‚Äù</h3>\n<p>Hooray! That said, definitely <a href=\"https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Temporary_Installation_in_Firefox\">try your extension out in Firefox</a> before submitting to make sure things work as you expect. Common APIs may still have different effects in different browsers.</p>\n<h3>‚ÄúI don‚Äôt want to upload my code to a 3rd party website.‚Äù</h3>\n<p>Understood! The compatibility testing is available as part of our <a href=\"https://www.npmjs.com/package/web-ext\">extension development command-line tool</a> or as a <a href=\"https://github.com/mozilla/addons-linter\">standalone module</a>.</p>\n<p>If you have any issues using the tool, please <a href=\"https://github.com/mozilla/webext-compat-tool/issues\">file an issue</a> or leave a comment here. The hope is that this tool is a useful first step in helping developers port their extensions, and we get a healthier, more interoperable extension ecosystem.</p>\n<p><b>Happy porting!</b></p>", "title": "Introducing the Extension Compatibility Tester", "author_name": "Potch", "source_type": "rss", "link": "https://hacks.mozilla.org/2017/08/introducing-the-extension-compatibility-tester/", "source_link": "https://hacks.mozilla.org", "source_title": "Mozilla Hacks ‚Äì the Web developer blog", "published": "2017-08-24T14:29:00"}, {"source_name": "Twitter", "description": "", "tags": "computer science,tech,twitter", "source_link": "https://twitter.com", "title": "I love how you shift into useless dad mode. \"Son! Son!\" Not \"Hey professional race car driver!\" https://t.co/igVbBbYEvD", "author_name": "Kent Beck", "source_type": "twitter", "link": "https://twitter.com/KentBeck/status/900606700532764673", "author_link": "https://twitter.com/KentBeck", "published": "2017-08-24T06:32:00", "source_title": "Twitter", "share_count": 2, "favorite_count": 6}, {"source_name": "WebkitBlog", "description": "Safari Technology Preview Release 38 is now available for download for macOS Sierra and betas of macOS High Sierra.", "tags": "safari technology preview,browsers,safari,tech,web,webkit", "text": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 38 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Sierra and betas of macOS High Sierra. If you already have Safari Technology Preview installed, you can update from the Mac App Store‚Äôs Updates tab. This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=220128&amp;rev=220795&amp;limit=999\">220128-220795</a>.</p>\n<h3>Beacon API</h3>\n<ul>\n<li>Enabled the Beacon API by default as an experimental feature (<a href=\"https://trac.webkit.org/changeset/220553/webkit/\">r220553</a>)</li>\n<li>Added support for CORS-preflighting (<a href=\"https://trac.webkit.org/changeset/220442/webkit/\">r220442</a>)</li>\n<li>Added support for CORS-preflighting on redirects (<a href=\"https://trac.webkit.org/changeset/220497/webkit/\">r220497</a>)</li>\n<li>Added support for <code>connect-src</code> CSP checks on redirects (<a href=\"https://trac.webkit.org/changeset/220549/webkit/\">r220549</a>)</li>\n<li>Updated <code>sendBeacon()</code> to rely on FetchBody instead of the whole FetchRequest (<a href=\"https://trac.webkit.org/changeset/220366/webkit/\">r220366</a>)</li>\n<li>Changed to use &#8220;application/octet-stream&#8221; <code>content-type</code> for payloads of <code>ArrayBuffer</code> and <code>ArrayBufferView</code> types (<a href=\"https://trac.webkit.org/changeset/220779/webkit/\">r220779</a>)</li>\n</ul>\n<h3>Fetch API</h3>\n<ul>\n<li>Added support for Request <code>keepalive</code> getter (<a href=\"https://trac.webkit.org/changeset/220244/webkit/\">r220244</a>)</li>\n<li>Changed Response to keep all ResourceResponse information (<a href=\"https://trac.webkit.org/changeset/220320/webkit/\">r220320</a>)</li>\n<li>Implemented quota limitation for <code>keepalive</code> Fetch requests (<a href=\"https://trac.webkit.org/changeset/220751/webkit/\">r220751</a>)</li>\n</ul>\n<h3>Web Payments</h3>\n<ul>\n<li>Enabled Payment Requests as an experimental feature (<a href=\"https://trac.webkit.org/changeset/220787/webkit/\">r220787</a>)</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Added support for parsing of the <code>font-display</code> property (<a href=\"https://trac.webkit.org/changeset/220725/webkit/\">r220725</a>)</li>\n<li>Implement <code>caret-color</code> support (<a href=\"https://trac.webkit.org/changeset/220706/webkit/\">r220706</a>, <a href=\"https://trac.webkit.org/changeset/220714/webkit/\">r220714</a>)</li>\n<li>Added a fast path for <code>rotate()</code> and <code>rotateZ()</code> transform parsing (<a href=\"https://trac.webkit.org/changeset/220382/webkit/\">r220382</a>)</li>\n<li>Fixed parsing of <code>&lt;meta http-equiv=refresh&gt;</code> to allow time starting with a &#8216;.&#8217; without a leading 0 (<a href=\"https://trac.webkit.org/changeset/220252/webkit/\">r220252</a>)</li>\n<li>Fixed a hit testing issue occurring when an SVG <code>rect</code> element with a non-default stroke style applied (<a href=\"https://trac.webkit.org/changeset/220717/webkit/\">r220717</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Added support for considering file extensions in the <code>accept</code> attribute of HTML file input elements (<a href=\"https://trac.webkit.org/changeset/220135/webkit/\">r220135</a>)</li>\n<li>Improved support for referrer policies (<a href=\"https://trac.webkit.org/changeset/220208/webkit/\">r220208</a>)</li>\n<li>Fixed the Promise resolve and reject function to have a length of 1 (<a href=\"https://trac.webkit.org/changeset/220324/webkit/\">r220324</a>)</li>\n<li>Fixed an early error on an <code>ANY</code> operator before <code>new.target</code> (<a href=\"https://trac.webkit.org/changeset/220481/webkit/\">r220481</a>)</li>\n<li>Fixed removing an empty <code>&lt;li&gt;</code> element when inside a table cell (<a href=\"https://trac.webkit.org/changeset/220398/webkit/\">r220398</a>)</li>\n<li>Fixed XHR to only fire an abort event if the cancellation was requested by the client (<a href=\"https://trac.webkit.org/changeset/220731/webkit/\">r220731</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Fixed deleting the old subtitle track on <code>src</code> attribute change event (<a href=\"https://trac.webkit.org/changeset/220472/webkit/\">r220472</a>)</li>\n</ul>\n<h3>Apple Pay</h3>\n<ul>\n<li>Added support for phonetic contact names (<a href=\"https://trac.webkit.org/changeset/220718/webkit/\">r220718</a>)</li>\n</ul>\n<h3>Web Inspector</h3>\n<ul>\n<li>Added Canvas path preview when viewing a recording (<a href=\"https://trac.webkit.org/changeset/220370/webkit/\">r220370</a>)</li>\n<li>Changed clicking on an autocomplete suggestion to apply it, not dismiss it (<a href=\"https://trac.webkit.org/changeset/220614/webkit/\">r220614</a>)</li>\n<li>Removed <code>text-shadow</code> and <code>gradient</code> backgrounds (<a href=\"https://trac.webkit.org/changeset/220710/webkit/\">r220710</a>)</li>\n<li>Updated the filter icon in the styles sidebar (<a href=\"https://trac.webkit.org/changeset/220609/webkit/\">r220609</a>)</li>\n</ul>\n<h3>WebDriver</h3>\n<ul>\n<li>Added support for interacting with <code>&lt;option&gt;</code> and <code>&lt;select&gt;</code> elements using the element click command (<a href=\"https://trac.webkit.org/changeset/220740/webkit/\">r220740</a>)</li>\n<li>Added support for uploading files via <code>&lt;input type=file&gt;</code> (<a href=\"https://trac.webkit.org/changeset/219874/webkit/\">r219874</a>, <a href=\"https://trac.webkit.org/changeset/220115/webkit/\">r220115</a>, <a href=\"https://trac.webkit.org/changeset/220135/webkit/\">r220135</a>, <a href=\"https://trac.webkit.org/changeset/220147/webkit/\">r220147</a>, <a href=\"https://trac.webkit.org/changeset/220222/webkit/\">r220222</a>)</li>\n<li>Fixed a timeout when a JavaScript alert is shown in <code>onload</code> handler (<a href=\"https://trac.webkit.org/changeset/220741/webkit/\">r220741</a>)</li>\n<li>Implemented ‚Äúnormal‚Äù and ‚Äúeager‚Äù page load strategies from the W3C specification (<a href=\"https://trac.webkit.org/changeset/220317/webkit/\">r220317</a>)</li>\n<li>Updated code to use in-view center points for clicks and other automation logic (<a href=\"https://trac.webkit.org/browser/webkit/?rev=220314\">r220314</a>)</li>\n</ul>", "title": "Release Notes for Safari Technology Preview 38", "author_name": "Jon Davis", "source_type": "rss", "link": "https://webkit.org/blog/7877/release-notes-for-safari-technology-preview-38/", "source_link": "https://webkit.org", "source_title": "WebKit", "published": "2017-08-23T18:00:00"}, {"source_name": "Twitter", "description": "", "tags": "computer science,tech,twitter", "source_link": "https://twitter.com", "title": "if authority and responsibility don't align at the top, aligning them at the bottom will result in a trainwreck somewhere in the middle", "author_name": "Kent Beck", "source_type": "twitter", "link": "https://twitter.com/KentBeck/status/900239695581466625", "author_link": "https://twitter.com/KentBeck", "published": "2017-08-23T06:14:00", "source_title": "Twitter", "share_count": 217, "favorite_count": 323}, {"source_name": "2ality", "description": "<p>This blog post gives tips for typing import statements more quickly, including a helpful text snippet for Visual Studio Code.</p>\n\n<div><a href=\"http://2ality.com/2017/08/typing-import-statements.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/e5hU2R5z-mw\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "Typing import statements more quickly", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/08/typing-import-statements.html", "author_link": "http://2ality.com/", "published": "2017-08-23T02:22:00", "source_title": "2ality feed"}, {"source_name": "MozillaHacks", "description": "Project Quantum is a major rewrite of Firefox‚Äôs internals to make Firefox fast. We‚Äôre swapping in parts from our experimental browser, Servo, and making massive improvements to other parts of the engine.\n\nThe first major component from Servo‚Äîa new CSS engine called Quantum CSS (previously known as Stylo)‚Äîis now available for testing in our Nightly version. It brings together state-of-the-art innovations from four different browsers to create a new super CSS engine.", "tags": "mozilla,services,tech", "text": "<p>You may have heard of Project Quantum‚Ä¶ it‚Äôs a major rewrite of Firefox‚Äôs internals to make Firefox fast. We‚Äôre swapping in parts from our experimental browser, Servo, and making massive improvements to other parts of the engine.</p>\n<p>The project has been compared to replacing a jet engine while the jet is still in flight. We‚Äôre making the changes in place, component by component, so that you can see the effects in Firefox as soon as each component is ready.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/08/01.png\"><img alt=\"\" class=\"alignnone size-large wp-image-31180\" height=\"317\" src=\"https://hacks.mozilla.org/files/2017/08/01-500x317.png\" width=\"500\" /></a></p>\n<p>And the first major component from Servo‚Äîa new CSS engine called Quantum CSS (previously known as Stylo)‚Äîis now available for testing in our Nightly version. You can make sure that it‚Äôs turned on for you by going to <code class=\"markup--code markup--p-code\">about:config</code> and setting <code class=\"markup--code markup--p-code\">layout.css.servo.enabled</code> to true.</p>\n<p>This new engine brings together state-of-the-art innovations from four different browsers to create a new super CSS engine.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/08/02.png\"><img alt=\"4 browser engines feeding in to Quantum CSS\" class=\"alignnone size-large wp-image-31181\" height=\"380\" src=\"https://hacks.mozilla.org/files/2017/08/02-500x380.png\" width=\"500\" /></a></p>\n<p>It takes advantage of modern hardware, parallelizing the work across all of the cores in your machine. This means it can run up to 2 or 4 or even 18 times faster.</p>\n<p>On top of that, it combines existing state-of-the-art optimizations from other browsers. So even if it weren‚Äôt running in parallel, it would still be one fast CSS engine.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/08/03.png\"><img alt=\"Racing jets\" class=\"alignnone size-large wp-image-31182\" height=\"179\" src=\"https://hacks.mozilla.org/files/2017/08/03-500x179.png\" width=\"500\" /></a></p>\n<p>But what does the CSS engine do? First let‚Äôs look at the CSS engine and how it fits into the rest of the browser. Then we can look at how Quantum CSS makes it all faster.</p>\n<h3>What does the CSS engine do?</h3>\n<p>The CSS engine is part of the browser‚Äôs rendering engine. The rendering engine takes the website‚Äôs HTML and CSS files and turns them into pixels on the screen.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/08/04.png\"><img alt=\"Files to pixels\" class=\"alignnone size-large wp-image-31183\" height=\"133\" src=\"https://hacks.mozilla.org/files/2017/08/04-500x133.png\" width=\"500\" /></a></p>\n<p>Each browser has a rendering engine. In Chrome, it‚Äôs called Blink. In Edge, it‚Äôs called EdgeHTML. In Safari, it‚Äôs called WebKit. And in Firefox, it‚Äôs called Gecko.</p>\n<p>To get from files to pixels, all of these rendering engines basically do the same things:</p>\n<ol>\n<li>Parse the files into objects the browser can understand, including the DOM. At this point, the DOM knows about the structure of the page. It knows about parent/child relationships between elements. It doesn‚Äôt know what those elements should look like, though.<a href=\"https://hacks.mozilla.org/files/2017/08/05-01.png\"><img alt=\"Parsing the HTML into a DOM tree\" class=\"alignnone size-large wp-image-31206\" height=\"349\" src=\"https://hacks.mozilla.org/files/2017/08/05-01-500x349.png\" width=\"500\" /></a></li>\n<li>Figure out what the elements should look like. For each DOM node, the CSS engine figures out which CSS rules apply. Then it figures out values for each CSS property for that DOM node.<a href=\"https://hacks.mozilla.org/files/2017/08/05-02.png\"><img alt=\"Styling each DOM node in the tree by attaching computed styles\" class=\"alignnone size-large wp-image-31207\" height=\"340\" src=\"https://hacks.mozilla.org/files/2017/08/05-02-500x340.png\" width=\"500\" /></a></li>\n<li>Figure out dimensions for each node and where it goes on the screen. Boxes are created for each thing that will show up on the screen. The boxes don‚Äôt just represent DOM nodes‚Ä¶ you will also have boxes for things inside the DOM nodes, like lines of text.<a href=\"https://hacks.mozilla.org/files/2017/08/05-3.png\"><img alt=\"Measuring all of the boxes to create a frame tree\" class=\"alignnone size-large wp-image-31208\" height=\"371\" src=\"https://hacks.mozilla.org/files/2017/08/05-3-500x371.png\" width=\"500\" /></a></li>\n<li>Paint the different boxes. This can happen on multiple layers. I think of this like old-time hand drawn animation, with onionskin layers of paper. That makes it possible to just change one layer without having to repaint things on other layers.<a href=\"https://hacks.mozilla.org/files/2017/08/05-04.png\"><img alt=\"Painting layers\" class=\"alignnone size-large wp-image-31209\" height=\"356\" src=\"https://hacks.mozilla.org/files/2017/08/05-04-500x356.png\" width=\"500\" /></a></li>\n<li>Take those different painted layers, apply any compositor-only properties like transforms, and turn them into one image. This is basically like taking a picture of the layers stacked together. This image will then be rendered on the screen.<a href=\"https://hacks.mozilla.org/files/2017/08/05-05.png\"><img alt=\"Assembling the layers together and taking a picture\" class=\"alignnone size-large wp-image-31210\" height=\"334\" src=\"https://hacks.mozilla.org/files/2017/08/05-05-500x334.png\" width=\"500\" /></a></li>\n</ol>\n<p>This means when it starts calculating the styles, the CSS engine has two things:</p>\n<ul>\n<li>a DOM tree</li>\n<li>a list of style rules</li>\n</ul>\n<p>It goes through each DOM node, one by one, and figures out the styles for that DOM node. As part of this, it gives the DOM node a value for each and every CSS property, even if the stylesheets don‚Äôt declare a value for that property.</p>\n<p>I think of it kind of like somebody going through and filling out a form. They need to fill out one of these forms for each DOM node. And for each form field, they need to have an answer.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/08/06.png\"><img alt=\"Blank form with CSS properties\" class=\"alignnone size-large wp-image-31185\" height=\"296\" src=\"https://hacks.mozilla.org/files/2017/08/06-500x296.png\" width=\"500\" /></a></p>\n<p>To do this, the CSS engine needs to do two things:</p>\n<ul>\n<li>figure out which rules apply to the node‚Ää‚Äî‚Ääaka <strong class=\"markup--strong markup--li-strong\">selector matching</strong></li>\n<li>fill in any missing values with values from the parent or a default value‚Äîaka <strong class=\"markup--strong markup--li-strong\">the cascade</strong></li>\n</ul>\n<h4>Selector matching</h4>\n<p>For this step, we‚Äôll add any rule that matches the DOM node to a list. Because multiple rules can match, there may be multiple declarations for the same property.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/08/07.png\"><img alt=\"Person putting check marks next to matching CSS rules\" class=\"alignnone size-large wp-image-31186\" height=\"407\" src=\"https://hacks.mozilla.org/files/2017/08/07-500x407.png\" width=\"500\" /></a></p>\n<p>Plus, the browser itself adds some default CSS (called user agent style sheets). How does the CSS engine know which value to pick?</p>\n<p>This is where specificity rules come in. The CSS engine basically creates a spreadsheet. Then it sorts the declarations based on different columns.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/08/08.png\"><img alt=\"Declarations in a spreadsheet\" class=\"alignnone size-large wp-image-31187\" height=\"210\" src=\"https://hacks.mozilla.org/files/2017/08/08-500x210.png\" width=\"500\" /></a></p>\n<p>The rule that has the highest specificity wins. So based on this spreadsheet, the CSS engine fills out the values that it can.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/08/09.png\"><img alt=\"Form with some CSS properties filled in\" class=\"alignnone size-large wp-image-31188\" height=\"297\" src=\"https://hacks.mozilla.org/files/2017/08/09-500x297.png\" width=\"500\" /></a></p>\n<p>For the rest, we‚Äôll use the cascade.</p>\n<h4>The cascade</h4>\n<p>The cascade makes CSS easier to write and maintain. Because of the cascade, you can set the <code class=\"markup--code markup--p-code\">color</code> property on the body and know that text in <code class=\"markup--code markup--p-code\">p</code>, and <code class=\"markup--code markup--p-code\">span</code>, and <code class=\"markup--code markup--p-code\">li</code> elements will all use that color (unless you have a more specific override).</p>\n<p>To do this, the CSS engine looks at the blank boxes on its form. If the property inherits by default, then the CSS engine walks up the tree to see if one of the ancestors has a value. If none of the ancestors have a value, or if the property does not inherit, it will get a default value.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/08/10.png\"><img alt=\"Form will all CSS properties filled in\" class=\"alignnone size-large wp-image-31189\" height=\"295\" src=\"https://hacks.mozilla.org/files/2017/08/10-500x295.png\" width=\"500\" /></a></p>\n<p>So now all of the styles have been computed for this DOM node.</p>\n<h4>A sidenote: style struct sharing</h4>\n<p>The form that I‚Äôve been showing you is a little misrepresentative. CSS has hundreds of properties. If the CSS engine held on to a value for each property for each DOM node, it would soon run out of memory.</p>\n<p>Instead, engines usually do something called style struct sharing. They store data that usually goes together (like font properties) in a different object called a style struct. Then, instead of having all of the properties in the same object, the computed styles object just has pointers. For each category, there‚Äôs a pointer to the style struct that has the right values for this DOM node.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/08/11.png\"><img alt=\"Chunks of the form pulled out to separate objects\" class=\"alignnone size-large wp-image-31190\" height=\"184\" src=\"https://hacks.mozilla.org/files/2017/08/11-500x184.png\" width=\"500\" /></a></p>\n<p>This ends up saving both memory and time. Nodes that have similar properties (like siblings) can just point to the same structs for the properties they share. And because many properties are inherited, an ancestor can share a struct with any descendants that don‚Äôt specify their own overrides.</p>\n<h3>Now, how do we make that fast?</h3>\n<p>So that is what style computation looks like when you haven‚Äôt optimized it.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/08/12.png\"><img alt=\"Steps in CSS style computation: selector matching, sorting by specificity, and computing property values\" class=\"alignnone size-large wp-image-31191\" height=\"219\" src=\"https://hacks.mozilla.org/files/2017/08/12-500x219.png\" width=\"500\" /></a></p>\n<p>There‚Äôs a lot of work happening here. And it doesn‚Äôt just need to happen on the first page load. It happens over and over again as users interact with the page, hovering over elements or making changes to the DOM, triggering a restyle.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/08/13.png\"><img alt=\"Initial styling plus restyling for hover, DOM nodes added, etc\" class=\"alignnone size-large wp-image-31192\" height=\"116\" src=\"https://hacks.mozilla.org/files/2017/08/13-500x116.png\" width=\"500\" /></a></p>\n<p>This means that CSS style computation is a great candidate for optimization‚Ä¶ and browsers have been testing out different strategies to optimize it for the past 20 years. What Quantum CSS does is take the best of these strategies from different engines and combine them to create a superfast new engine.</p>\n<p>So let‚Äôs look at the details of how these all work together.</p>\n<h4>Run it all in parallel</h4>\n<p>The Servo project (which Quantum CSS comes from) is an experimental browser that‚Äôs trying to parallelize all of the different parts of rendering a web page. What does that mean?</p>\n<p>A computer is like a brain. There‚Äôs a part that does the thinking (the ALU). Near that, there‚Äôs some short term memory (the registers). These are grouped together on the CPU. Then there‚Äôs longer term memory, which is RAM.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/08/14.png\"><img alt=\"CPU with ALU (the part that does the thinking) and registers (short term memory)\" class=\"alignnone size-large wp-image-31193\" height=\"332\" src=\"https://hacks.mozilla.org/files/2017/08/14-500x332.png\" width=\"500\" /></a></p>\n<p>Early computers could only think one thing at a time using this CPU. But over the last decade, CPUs have shifted to having multiple ALUs and registers, grouped together in cores. This means that the CPU can think multiple things at once‚Ää‚Äî‚Ääin parallel.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/08/15.png\"><img alt=\"CPU chip with multiple cores containing ALUs and registers\" class=\"alignnone size-large wp-image-31194\" height=\"243\" src=\"https://hacks.mozilla.org/files/2017/08/15-500x243.png\" width=\"500\" /></a></p>\n<p>Quantum CSS makes use of this recent feature of computers by splitting up style computation for the different DOM nodes across the different cores.</p>\n<p>This might seem like an easy thing to do‚Ä¶ just split up the branches of the tree and do them on different cores. It‚Äôs actually much harder than that for a few reasons. One reason is that DOM trees are often uneven. That means that one core will have a lot more work to do than others.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/08/16.png\"><img alt=\"Imbalanced DOM tree being split between multiple cores so one does all the work\" class=\"alignnone size-large wp-image-31195\" height=\"530\" src=\"https://hacks.mozilla.org/files/2017/08/16-500x530.png\" width=\"500\" /></a></p>\n<p>To balance the work more evenly, Quantum CSS uses a technique called work stealing. When a DOM node is being processed, the code takes its direct children and splits them up into 1 or more ‚Äúwork units‚Äù. These work units get put into a queue.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/08/17.png\"><img alt=\"Cores segmenting their work into work units\" class=\"alignnone size-large wp-image-31196\" height=\"362\" src=\"https://hacks.mozilla.org/files/2017/08/17-500x362.png\" width=\"500\" /></a></p>\n<p>When one core is done with the work in its queue, it can look in the other queues to find more work to do.¬†This means we can evenly divide the work without taking time up front to walk the tree and figure out how to balance it ahead of time.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/08/18.png\"><img alt=\"Cores that have finished their work stealing from the core with more work\" class=\"alignnone size-large wp-image-31197\" height=\"356\" src=\"https://hacks.mozilla.org/files/2017/08/18-500x356.png\" width=\"500\" /></a></p>\n<p>In most browsers, it would be hard to get this right. Parallelism is a known hard problem, and the CSS engine is very complex. It‚Äôs also sitting between the two other most complex parts of the rendering engine‚Ää‚Äî‚Ääthe DOM and layout. So it would be easy to introduce a bug, and parallelism can result in bugs that are very hard to track down, called data races. I explain more about these kinds of bugs in <a href=\"https://hacks.mozilla.org/2017/06/avoiding-race-conditions-in-sharedarraybuffers-with-atomics/#data-race\">another article</a>.</p>\n<p>If you‚Äôre accepting contributions from hundreds or thousands of engineers, how can you program in parallel without fear? That‚Äôs what we have Rust for.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/08/19.png\"><img alt=\"Rust logo\" class=\"alignnone size-large wp-image-31198\" height=\"221\" src=\"https://hacks.mozilla.org/files/2017/08/19-500x221.png\" width=\"500\" /></a></p>\n<p>With Rust, you can statically verify that you don‚Äôt have data races. This means you avoid tricky-to-debug bugs by just not letting them into your code in the first place. The compiler won‚Äôt let you do it. I‚Äôll be writing more about this in a future article. In the meantime, you can watch this <a href=\"https://www.youtube.com/watch?v=cNeIOt8ZdAY\">intro video about parallelism in Rust</a> or this <a href=\"https://www.youtube.com/watch?v=gof_OEv71Aw\">more in-depth talk about work stealing</a>.</p>\n<p>With this, CSS style computation becomes what‚Äôs called an embarrassingly parallel problem‚Ää‚Äî‚Ääthere‚Äôs very little keeping you from running it efficiently in parallel. This means that we can get close to linear speed ups. If you have 4 cores on your machine, then it will run close to 4 times faster.</p>\n<h4>Speed up restyles with the Rule Tree</h4>\n<p>For each DOM node, the CSS engine needs to go through all of the rules to do selector matching. For most nodes, this matching likely won‚Äôt change very often. For example, if the user hovers over a parent, the rules that match it may change. We still need to recompute style for its descendants to handle property inheritance, but the rules that match those descendants probably won‚Äôt change.</p>\n<p>It would be nice if we could just make a note of which rules match those descendants so we don‚Äôt have to do selector matching for them again‚Ä¶ and that‚Äôs what the rule tree‚Äîborrowed from Firefox‚Äôs previous CSS engine‚Äî does.</p>\n<p>The CSS engine will go through the process of figuring out the selectors that match, and then sorting them by specificity. From this, it creates a linked list of rules.</p>\n<p>This list is going to be added to the tree.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/08/20.png\"><img alt=\"A linked list of rules being added to the rule tree\" class=\"alignnone size-large wp-image-31199\" height=\"189\" src=\"https://hacks.mozilla.org/files/2017/08/20-500x189.png\" width=\"500\" /></a></p>\n<p>The CSS engine tries to keep the number of branches in the tree to a minimum. To do this, it will try to reuse a branch wherever it can.</p>\n<p>If most of the selectors in the list are the same as an existing branch, then it will follow the same path. But it might reach a point where the next rule in the list isn‚Äôt in this branch of the tree. Only at that point will it add a new branch.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/08/21.png\"><img alt=\"The last item in the linked list being added to the tree\" class=\"alignnone size-large wp-image-31200\" height=\"298\" src=\"https://hacks.mozilla.org/files/2017/08/21-500x298.png\" width=\"500\" /></a></p>\n<p>The DOM node will get a pointer to the rule that was inserted last (in this example, the <code class=\"markup--code markup--p-code\">div#warning</code> rule). This is the most specific one.</p>\n<p>On restyle, the engine does a quick check to see whether the change to the parent could potentially change the rules that match children. If not, then for any descendants, the engine can just follow the pointer on the descendant node to get to that rule. From there, it can follow the tree back up to the root to get the full list of matching rules, from most specific to least specific. This means it can skip selector matching and sorting completely.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/08/22.png\"><img alt=\"Skipping selector matching and sorting by specificity\" class=\"alignnone size-large wp-image-31201\" height=\"174\" src=\"https://hacks.mozilla.org/files/2017/08/22-500x174.png\" width=\"500\" /></a></p>\n<p>So this helps reduce the work needed during restyle. But it‚Äôs still a lot of work during initial styling. If you have 10,000 nodes, you still need to do selector matching 10,000 times. But there‚Äôs another way to speed that up.</p>\n<h4>Speed up initial render (and the cascade) with the style sharing cache</h4>\n<p>Think about a page with thousands of nodes. Many of those nodes will match the same rules. For example, think of a long Wikipedia page‚Ä¶ the paragraphs in the main content area should all end up matching the exact same rules, and have the exact same computed styles.</p>\n<p>If there‚Äôs no optimization, then the CSS engine has to match selectors and compute styles for each paragraph individually. But if there was a way to prove that the styles will be the same from paragraph to paragraph, then the engine could just do that work once and point each paragraph node to the same computed style.</p>\n<p>That‚Äôs what the style sharing cache‚Äîinspired by Safari and Chrome‚Äîdoes. After it‚Äôs done processing a node, it puts the computed style into the cache. Then, before it starts computing styles on the next node, it runs a few checks to see whether it can use something from the cache.</p>\n<p>Those checks are:</p>\n<ul>\n<li>Do the 2 nodes have the same ids, classes, etc? If so, then they would match the same rules.</li>\n<li>For anything that isn‚Äôt selector based‚Äîinline styles, for example‚Äîdo the nodes have the same values? If so, then the rules from above either won‚Äôt be overridden, or will be overridden in the same way.</li>\n<li>Do both parents point to the same computed style object? If so, then the inherited values will also be the same.</li>\n</ul>\n<p><a href=\"https://hacks.mozilla.org/files/2017/08/23.png\"><img alt=\"Computed styles being shared by all siblings, and then asking the question of whether a cousin can share. Answer: yes\" class=\"alignnone size-large wp-image-31202\" height=\"505\" src=\"https://hacks.mozilla.org/files/2017/08/23-500x505.png\" width=\"500\" /></a></p>\n<p>Those checks have been in earlier style sharing caches since the beginning. But there are a lot of other little cases where styles might not match. For example, if a CSS rule uses the <code class=\"markup--code markup--p-code\">:first-child</code> selector, then two paragraphs might not match, even though the checks above suggest that they should.</p>\n<p>In WebKit and Blink, the style sharing cache would give up in these cases and not use the cache. As more sites use these modern selectors, the optimization was becoming less and less useful, so the Blink team recently removed it. But it turns out there is a way for the style sharing cache to keep up with these changes.</p>\n<p>In Quantum CSS, we gather up all of those weird selectors and check whether they apply to the DOM node. Then we store the answers as ones and zeros. If the two elements have the same ones and zeros, we know they definitely match.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/08/24.png\"><img alt=\"A scoreboard showing 0s and 1s, with the columns labeled with selectors like :first-child\" class=\"alignnone size-large wp-image-31203\" height=\"195\" src=\"https://hacks.mozilla.org/files/2017/08/24-500x195.png\" width=\"500\" /></a></p>\n<p>If a DOM node can share styles that have already been computed, you can skip pretty much all of the work. Because pages often have many DOM nodes with the same styles, this style sharing cache can save on memory and also really speed things up.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/08/25.png\"><img alt=\"Skipping all of the work\" class=\"alignnone size-large wp-image-31204\" height=\"166\" src=\"https://hacks.mozilla.org/files/2017/08/25-500x166.png\" width=\"500\" /></a></p>\n<h3>Conclusion</h3>\n<p>This is the first big technology transfer of Servo tech to Firefox. Along the way, we‚Äôve learned a lot about how to bring modern, high-performance code written in Rust into the core of Firefox.</p>\n<p>We‚Äôre very excited to have this big chunk of Project Quantum ready for users to experience first-hand. We‚Äôd be happy to have you try it out, and let us know if you <a href=\"https://bugzilla.mozilla.org/enter_bug.cgi?assigned_to=nobody%40mozilla.org&amp;bug_file_loc=http%3A%2F%2F&amp;bug_ignored=0&amp;bug_severity=normal&amp;bug_status=NEW&amp;cf_fx_iteration=---&amp;cf_fx_points=---&amp;component=CSS%20Parsing%20and%20Computation&amp;contenttypemethod=autodetect&amp;contenttypeselection=text%2Fplain&amp;defined_groups=1&amp;flag_type-203=X&amp;flag_type-37=X&amp;flag_type-4=X&amp;flag_type-41=X&amp;flag_type-5=X&amp;flag_type-607=X&amp;flag_type-721=X&amp;flag_type-737=X&amp;flag_type-781=X&amp;flag_type-787=X&amp;flag_type-799=X&amp;flag_type-800=X&amp;flag_type-803=X&amp;flag_type-835=X&amp;flag_type-846=X&amp;flag_type-855=X&amp;flag_type-863=X&amp;flag_type-864=X&amp;flag_type-914=X&amp;flag_type-916=X&amp;form_name=enter_bug&amp;keywords=nightly-community%2C%20&amp;maketemplate=Remember%20values%20as%20bookmarkable%20template&amp;op_sys=Unspecified&amp;priority=--&amp;product=Core&amp;rep_platform=Unspecified&amp;short_desc=Stylo%3A%20&amp;target_milestone=---&amp;version=Trunk\">find any issues</a>.</p>", "title": "Inside a super fast CSS engine: Quantum CSS (aka¬†Stylo)", "author_name": "Lin Clark", "source_type": "rss", "link": "https://hacks.mozilla.org/2017/08/inside-a-super-fast-css-engine-quantum-css-aka-stylo/", "source_link": "https://hacks.mozilla.org", "source_title": "Mozilla Hacks ‚Äì the Web developer blog", "published": "2017-08-22T15:30:00"}, {"source_name": "Twitter", "description": "", "tags": "computer science,tech,twitter", "source_link": "https://twitter.com", "title": "RT @AgileSteveSmith: Thanks @ckubicek for the reminder of @KentBeck's awesome 2015 post \"Taming complexity with reversibility\" https://t.co‚Ä¶", "author_name": "Kent Beck", "source_type": "twitter", "link": "https://twitter.com/KentBeck/status/899973864905723904", "author_link": "https://twitter.com/KentBeck", "published": "2017-08-22T12:37:00", "source_title": "Twitter", "share_count": 6, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "computer science,tech,twitter", "source_link": "https://twitter.com", "title": "RT @joshilewis: @bertocoetsee @AgileFaye &amp; @KentBeck playing a game illustrating flow &amp; cost of delay while @ryanripley watches https://t.c‚Ä¶", "author_name": "Kent Beck", "source_type": "twitter", "link": "https://twitter.com/KentBeck/status/899939176652656641", "author_link": "https://twitter.com/KentBeck", "published": "2017-08-22T10:19:00", "source_title": "Twitter", "share_count": 11, "favorite_count": 0}, {"source_name": "Twitter", "description": "", "tags": "computer science,tech,twitter", "source_link": "https://twitter.com", "title": "RT @samlaing: ROFL @KentBeck 'how do we excise the cancer of certification?' #agileafrica ü§£ poor @ryanripley and @AgileFaye", "author_name": "Kent Beck", "source_type": "twitter", "link": "https://twitter.com/KentBeck/status/899898465928577024", "author_link": "https://twitter.com/KentBeck", "published": "2017-08-22T07:38:00", "source_title": "Twitter", "share_count": 11, "favorite_count": 0}, {"source_name": "2ality", "description": "<p>In Promise-based code, there are usually many callbacks, each one having a separate scope for variables. What if you want to share data between those callbacks? This blog post describes techniques for doing so.</p>\n\n<div><a href=\"http://2ality.com/2017/08/promise-callback-data-flow.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/qms1YN2DYAY\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "Passing data between Promise callbacks", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/08/promise-callback-data-flow.html", "author_link": "http://2ality.com/", "published": "2017-08-22T07:22:00", "source_title": "2ality feed"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "ChromiumBlog", "description": "By default, when users install Chrome, they receive the most stable and supported build available. However, Chrome fans and web developers have long been able to opt into new Chrome features by installing pre-release packages such as Chrome Beta and Dev. Historically it's been impossible to install these pre-releases on the same computer as stable Chrome, forcing developers to choose between testing their site in the next version of Chrome and experiencing their site as users see it now.<br /><br />Starting today, Chrome Beta and Chrome Dev can be installed on the same Windows computer as stable Chrome and run simultaneously, allowing developers to more easily test their site across multiple versions of Chrome. This means side-by-side Chrome installation is available on Windows, Android, and Linux, and will be made available on other platforms in future releases.<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://2.bp.blogspot.com/-7rQgBGWHzWc/WZsmCHMHDpI/AAAAAAAAAz4/21w0IvPIHCAt-ljJH3gVI6QbdzOjQKDcgCLcBGAs/s1600/Screenshot%2B2017-08-21%2Bat%2B11.26.48%2BAM.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"208\" src=\"https://2.bp.blogspot.com/-7rQgBGWHzWc/WZsmCHMHDpI/AAAAAAAAAz4/21w0IvPIHCAt-ljJH3gVI6QbdzOjQKDcgCLcBGAs/s640/Screenshot%2B2017-08-21%2Bat%2B11.26.48%2BAM.png\" width=\"640\" /></a></div><br /><div style=\"text-align: center;\"><i>Chrome, Chrome Beta, and Chrome Dev can now be installed side by side on the same Windows computer.&nbsp;</i></div><br />To install Chrome Beta or Chrome Dev, visit the <a href=\"https://www.chromium.org/getting-involved/dev-channel\">Chromium release channels</a> page. If you already have Chrome Dev or Beta and wish to run it side-by-side with stable Chrome, you'll need to uninstall it and then reinstall from this page. To easily transfer your bookmarks, settings, and other data, <a href=\"https://support.google.com/chrome/answer/185277?co=GENIE.Platform%3DDesktop\">sign in to Chrome</a> before you uninstall. And if you see something not quite right in Chrome Dev or Beta, please <a href=\"https://support.google.com/chrome/?p=FB_betactl\">send us feedback</a>.<br /><br />Posted by Greg Thompson, Bitmason", "title": "Run multiple versions of Chrome side-by-side", "source_link": "http://blog.chromium.org/", "author_link": "https://plus.google.com/106190864297512596007", "author_name": "Chrome Blog", "source_type": "rss", "link": "http://blog.chromium.org/2017/08/run-multiple-versions-of-chrome-side-by.html", "published": "2017-08-21T19:17:00", "source_title": "Chromium Blog", "tags": "browsers,chromium,tech,web"}, {"source_name": "FacebookCode", "description": "Edge Fabric makes Facebook's edge networking faster, less congested, and more flexible.", "tags": "facebook,services,tech", "source_link": "https://code.facebook.com/", "title": "Steering oceans of content to the world", "author_name": "Hyojeong Kim", "source_type": "rss", "link": "https://code.facebook.com/posts/565767133547005/steering-oceans-of-content-to-the-world/?utm_source=codedot_rss_feed&utm_medium=rss&utm_campaign=RSS+Feed", "published": "2017-08-21T15:00:00", "source_title": "Facebook Code"}, {"source_name": "FacebookCode", "description": "We clarify the BSD + Patents license.", "tags": "facebook,services,tech", "source_link": "https://code.facebook.com/", "title": "Explaining React's license", "author_name": "Adam Wolff", "source_type": "rss", "link": "https://code.facebook.com/posts/112130496157735/explaining-react-s-license/?utm_source=codedot_rss_feed&utm_medium=rss&utm_campaign=RSS+Feed", "published": "2017-08-18T23:21:00", "source_title": "Facebook Code"}, {"source_name": "2ality", "description": "<p>This blog post describes a technique for making <code>instanceof</code> applicable to more values (on the right-hand side). Specifically, for primitive values.</p>\n\n<div><a href=\"http://2ality.com/2017/08/type-right.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/AqCQeKiWH4o\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "Beyond <code>typeof</code> and <code>instanceof</code>: simplifying dynamic type checks", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/08/type-right.html", "author_link": "http://2ality.com/", "published": "2017-08-18T12:34:00", "source_title": "2ality feed"}, {"source_name": "EdgeBlog", "description": "<p>Independent rendering allows the browser to selectively offload graphics processing to an additional CPU thread, so they can be rendered with minimal impact to the user interface thread and the overall visible performance characteristics page, such as silk-smooth scrolling, responsive interactions, and fluid animations. This technique was pioneered in Internet Explorer 11, and is key [&#8230;]</p>\n<p>The post <a href=\"https://blogs.windows.com/msedgedev/2017/08/17/making-web-smoother-independent-rendering/\" rel=\"nofollow\">Making the web smoother with independent rendering</a> appeared first on <a href=\"https://blogs.windows.com/msedgedev\" rel=\"nofollow\">Microsoft Edge Dev Blog</a>.</p>", "tags": "pc,browsers,edge,tech,web", "text": "<p>Independent rendering allows the browser to selectively offload graphics processing to an additional CPU thread, so they can be rendered with minimal impact to the user interface thread and the overall visible performance characteristics page, such as <a href=\"https://blogs.windows.com/msedgedev/2017/03/08/scrolling-on-the-web\">silk-smooth scrolling</a>, responsive interactions, and fluid animations. This technique was pioneered in Internet Explorer 11, and is key to providing a fluid experience.</p>\n<blockquote><p>Today, we&#8217;re excited to share major improvements to the independent rendering pipeline in Microsoft Edge which will make pages significantly faster in EdgeHTML 16 and the Windows 10 Fall Creators Update.</p><cite></cite></blockquote>\n<p>Independent rendering is transformative to the user experience ‚Äî but historically there have been a few elements that could disable it entirely when present on a page.</p>\n<ul>\n<li>&lt;select&gt; control</li>\n<li>&lt;canvas&gt; element</li>\n<li>certain &lt;svg&gt; elements</li>\n</ul>\n<p>Starting with EdgeHTML 16, we&#8217;ve enabled independent rendering on more sites by adding full support for the elements listed above. These investments greatly improve actual and perceived performance of a huge number of apps and sites, as these elements are very common on the web. You can preview these changes in recent builds via the Windows Insider Program ‚Äì read on to learn more about the impact of these changes!</p>\n<h2><strong>Visualizing independent rendering improvements</strong></h2>\n<p>Independent rendering noticeably improves performance in several common scenarios: <strong>content processing</strong>, such as loading the page or adding significant portions of dynamically generated content; <strong>iterative operations or experiences with tight frame budgets</strong>, such as games, script-driven animations, and data visualizations; and <strong>scrolling while the main thread is processing script</strong>, where the rendering thread can continue displaying available content even if main thread is busy</p>\n<h2><strong>Getting to the screen faster when processing content</strong></h2>\n<p>By offloading rendering to a separate (parallel) thread, independent rendering can improve page load and dynamic content updates, while more efficiently utilizing multicore CPUs.</p>\n<p>The visualizations below show simplified examples of modern browsers using the CPU as content is loaded, either as part of page load or as part of dynamic content updates. The first stage of this process is content processing, which involves downloading, parsing, creating the DOM, and laying out elements on the page. This is followed by the actual rendering process ‚Äî drawing content on the screen.</p>\n<p>While the browser has always tried to utilize the rendering thread wherever possible, as previously mentioned, it often could not be used due to the presence of the certain elements on the page. This resulted in a more saturated main thread, as the content processing and rendering operations had to be performed sequentially:</p>\n<div class=\"wp-caption alignnone\" id=\"attachment_21313\" style=\"width: 1034px;\"><img alt=\"Figure 1. CPU activity sequence required to display a web page in EdgeHTML 15. Note that the rendering thread is available, but is not always used due to the presence of certain elements on the page.\" class=\"size-large wp-image-21313\" height=\"336\" src=\"https://winblogs.azureedge.net/win/2017/08/c74ab6b5dcbeb010e2e46825201f0e3e-1024x336.png\" width=\"1024\" /><p class=\"wp-caption-text\">Figure 1. CPU activity sequence required to display a web page in EdgeHTML 15. Note that the rendering thread is available, but is not always used due to the presence of certain elements on the page.</p></div>\n<p>Now that EdgeHTML 16 supports independent rendering of these elements, rendering can happen independently of content processing:</p>\n<div class=\"wp-caption alignnone\" id=\"attachment_21316\" style=\"width: 1034px;\"><img alt=\"Figure 2. CPU activity sequence required to display a web page in EdgeHTML 16.\" class=\"wp-image-21316 size-large\" height=\"336\" src=\"https://winblogs.azureedge.net/win/2017/08/b31599d56b2e1bdc9022971afe088787-1024x336.png\" width=\"1024\" /><p class=\"wp-caption-text\">Figure 2. CPU activity sequence required to display a web page in EdgeHTML 16.</p></div>\n<p>By leveraging multiple CPU cores, parallelized rendering results in faster page load times across the sites you use daily while using a similar amount of total CPU time.</p>\n<h2><strong>Allowing applications to do more per frame</strong></h2>\n<p>Another scenario that often benefits from independent rendering is script driven animations such as those present in games or complex visualizations. A typical rendering pipeline for such applications is as follows:</p>\n<ul>\n<li>Setting up the frame &#8211; updating model, view</li>\n<li>Requesting updated view to be rendered</li>\n<li>Getting a callback for the next available frame and repeating the sequence</li>\n</ul>\n<p>Similar to the previous page load and content update scenarios, the following visualization shows how the frame by frame rendering updates can be performed more efficiently by offloading rendering to a separate thread. When the duration of each frame is time constrained (e.g. to achieve a framerate of 60 frames per second, each frame can be no more than 16.7ms long), every millisecond saved helps your applications achieve their target framerates.</p>\n<div class=\"wp-caption alignnone\" id=\"attachment_21319\" style=\"width: 1034px;\"><img alt=\"Figure 3. CPU activity sequence required to process frame updates - can lead to missing frame targets.\" class=\"wp-image-21319 size-large\" height=\"336\" src=\"https://winblogs.azureedge.net/win/2017/08/9f730e4da1b0f61e9f38e80376e69095-1024x336.png\" style=\"font-size: 19px;\" width=\"1024\" /><p class=\"wp-caption-text\">Figure 3. CPU activity sequence required to process frame updates &#8211; can lead to missing frame targets.</p></div>\n<div class=\"wp-caption alignnone\" id=\"attachment_21322\" style=\"width: 1034px;\"><img alt=\"Figure 4. CPU activity sequence required to process frame updates - can improve frame rates by freeing up main thread.\" class=\"wp-image-21322 size-large\" height=\"336\" src=\"https://winblogs.azureedge.net/win/2017/08/417c728d97718c36bc949e7e27696a9b-1024x336.png\" width=\"1024\" /><p class=\"wp-caption-text\">Figure 4. CPU activity sequence required to process frame updates &#8211; can improve frame rates by freeing up main thread.</p></div>\n<h2><strong>Faster vector graphics with independently rendered &lt;svg&gt; elements</strong></h2>\n<p>In EdgeHTML 16 we&#8217;re introducing independent rendering support for the following SVG elements:</p>\n<ul>\n<li>Clip-path</li>\n<li>Gradients</li>\n<li>Markers</li>\n<li>Masks</li>\n<li>Patterns</li>\n</ul>\n<p>These elements have already been supported in Windows Insider Preview builds for some time, and we are going to introduce support for independently rendered SVG filters in an upcoming Windows Insider Preview build.</p>\n<p>Our telemetry shows that these SVG elements were the main reason that independent rendering was disabled on the top 100 sites. We&#8217;re excited to see these sites rendered even faster as a result of these improvements!</p>\n<h2><strong>Faster 2D graphics with independently rendered &lt;canvas&gt; elements</strong></h2>\n<p>In addition to the improvements outlined above, we are also introducing independent rendering for 2D &lt;canvas&gt; content.</p>\n<p>Supporting independent rendering for canvas was critical to improving the performance of many demos, games and other interactive content on the web. Our telemetry showed 2D &lt;canvas&gt; was the leading cause of independent rendering being disabled across in browsing sessions by volume.</p>\n<p>Common canvas APIs are now significantly faster in the EdgeHTML 16:</p>\n<div class=\"wp-caption alignnone\" id=\"attachment_21325\" style=\"width: 1034px;\"><img alt=\"Figure 5. Canvas APIs Performance (ms; 75 percentile) shows improvements in EdgeHTML 15 to EdgeHTML 16.\" class=\"size-large wp-image-21325\" height=\"545\" src=\"https://winblogs.azureedge.net/win/2017/08/91b62df83170edd8f8aac2e026982888-1024x545.png\" width=\"1024\" /><p class=\"wp-caption-text\">Figure 5. Canvas APIs Performance (ms; 75 percentile) shows improvements in EdgeHTML 15 to EdgeHTML 16.</p></div>\n<h2><strong>Other improvements</strong></h2>\n<p>We&#8217;re also happy to report that our work to make apps and sites faster also accrues to benchmarks. We&#8217;ve run the <a href=\"http://browserbench.org/MotionMark/\">MotionMark</a> benchmark on two identical Surface Book laptops and measured a 43% overall score improvement!</p>\n<div class=\"wp-caption alignnone\" id=\"attachment_21328\" style=\"width: 1034px;\"><img alt=\"Figure 6. Overall 43% improvement in MotionMark score from EdgeHTML 15 to EdgeHTML 16.\" class=\"size-large wp-image-21328\" height=\"727\" src=\"https://winblogs.azureedge.net/win/2017/08/9b29ece94bf1c3d199aec937e5dbd7cd-1024x727.png\" width=\"1024\" /><p class=\"wp-caption-text\">Figure 6. Overall 43% improvement in MotionMark score from EdgeHTML 15 to EdgeHTML 16.</p></div>\n<p>We couldn&#8217;t be more excited to see web content get dramatically faster in EdgeHTML 16 on a wide variety of hardware. We look forward to seeing web developers deliver an even faster and more graphical web soon!</p>\n<p>Bogdan Brinza, Matt Kotsenas, and Scott Low<br />\nProgram Managers, Microsoft Edge</p>\n<p>The post <a href=\"https://blogs.windows.com/msedgedev/2017/08/17/making-web-smoother-independent-rendering/\" rel=\"nofollow\">Making the web smoother with independent rendering</a> appeared first on <a href=\"https://blogs.windows.com/msedgedev\" rel=\"nofollow\">Microsoft Edge Dev Blog</a>.</p>", "title": "Making the web smoother with independent rendering", "author_name": "Bogdan Brinza, Matt Kotsenas and Scott Low", "source_type": "rss", "comments_count": 4, "published": "2017-08-17T17:00:00", "link": "https://blogs.windows.com/msedgedev/2017/08/17/making-web-smoother-independent-rendering/", "source_link": "https://blogs.windows.com/msedgedev", "source_title": "Microsoft Edge Dev Blog"}, {"source_name": "Habrahabr", "description": "<img src=\"https://habrastorage.org/web/f16/43c/9c9/f1643c9c9e404b03b156930aae34bb88.jpg\" /><br />\n<br />\n–ú—ã –≤ Parallels –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ—Ç—á—ë—Ç—ã –æ–± –æ—à–∏–±–∫–∞—Ö. –£ –Ω–∞—Å –Ω–∞ —ç—Ç–æ—Ç —Å—á–µ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–±—É—á–µ–Ω–Ω—ã–µ –ª—é–¥–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –ª–µ—á–∞—Ç –±–æ–ª—è—á–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –û–¥–Ω–∞–∫–æ, –Ω–µ –≤—Å–µ —Ä–∞–∑–¥–µ–ª—è—é—Ç –Ω–∞—à—É —Ñ–∏–ª–æ—Å–æ—Ñ–∏—é. –ü–æ–¥ –∫–∞—Ç–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ <a href=\"https://medium.freecodecamp.org/why-relying-on-your-users-to-report-errors-is-the-dumbest-thing-youll-ever-do-cca307fa67f0\">–º–Ω–µ–Ω–∏–µ –ù–∏–∫–∞ –•–∞—Ä–ª–∏</a> –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ Medium. –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –º–æ–∂–Ω–æ –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥–∏—Å–∫—É—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Ç–µ–º—É. <a href=\"https://habrahabr.ru/post/335858/#habracut\">–ß–∏—Ç–∞—Ç—å –¥–∞–ª—å—à–µ ‚Üí</a>", "tags": "habr,perf,tech,web", "source_link": "https://habrahabr.ru/hub/client_side_optimization/posts/all/", "title": "–ü–æ—á–µ–º—É –Ω–µ–ª—å–∑—è –ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ—Ç—á—ë—Ç—ã –æ–± –æ—à–∏–±–∫–∞—Ö", "author_name": "SmirkinDA", "source_type": "rss", "link": "https://habrahabr.ru/post/335858/", "published": "2017-08-17T15:14:00", "source_title": "–•–∞–±—Ä–∞—Ö–∞–±—Ä / –í—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–¥—Ä—è–¥ / –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"}, {"source_name": "FacebookCode", "description": "This year's event features innovative and scalable approaches to data management, developer tools, site reliability, video, machine learning, and technology for emerging markets.", "tags": "facebook,services,tech", "source_link": "https://code.facebook.com/", "title": "@Scale 2017 agenda is live!", "author_name": "Lauren Rugani", "source_type": "rss", "link": "https://code.facebook.com/posts/1961882774081188/-scale-2017-agenda-is-live-/?utm_source=codedot_rss_feed&utm_medium=rss&utm_campaign=RSS+Feed", "published": "2017-08-16T16:29:00", "source_title": "Facebook Code"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "ChromiumBlog", "description": "<div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><div style=\"line-height: 1.2; margin-bottom: 6pt; margin-top: 24pt;\"><span id=\"docs-internal-guid-fd77d040-e72c-12e8-1e07-d54193764078\"><span>Unless otherwise noted, changes described below apply to the newest Chrome </span><a href=\"https://www.google.com/landing/chrome/beta/\"><span>Beta</span></a><span> channel release for Android, Chrome OS, Linux, Mac, and Windows.</span></span></div><div style=\"line-height: 1.2; margin-bottom: 6pt; margin-top: 24pt;\"><span>JavaScript modules</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Modules allow developers to declare a script's dependencies and are already popular in third-party build tools, which use them to bundle only the required scripts.</span><span> This release adds native support for </span><a href=\"https://www.chromestatus.com/feature/5365692190687232\" style=\"text-decoration: none;\"><span>JavaScript modules</span></a><span> via the new </span><span>&lt;script type=module&gt;</span><span> element.</span></div><b id=\"docs-internal-guid-b18237e3-e729-52ef-654d-7d539608b578\" style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Native support means the browser can fetch granular dependencies in parallel, taking advantage of caching, avoiding duplications across the page, and ensuring the script executes in the correct order, all without a build step.</span></div><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>To get started, </span><a href=\"https://jakearchibald.com/2017/es-modules-in-browsers/\" style=\"text-decoration: none;\"><span>learn more about JavaScript modules</span></a><span> and </span><a href=\"https://ponyfoo.com/articles/es6-modules-in-depth\" style=\"text-decoration: none;\"><span>the aspects of the JavaScript language affected by modules</span></a><span>.</span></div><h1 dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 6pt; margin-top: 20pt;\"><span>Payment Request API on desktop</span></h1><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><a href=\"https://developers.google.com/web/fundamentals/discovery-and-monetization/payment-request/\" style=\"text-decoration: none;\"><span>Payment Request API</span></a><span> is now available for Windows, Mac, Linux, and ChromeOS, following the </span><a href=\"https://developers.google.com/web/updates/2016/07/payment-request\" style=\"text-decoration: none;\"><span>announcement of Android support</span></a><span> last year. Developers can now offer secure, seamless checkout experiences across platforms. To get started, ‚Äúcheck out‚Äù our </span><a href=\"https://developers.google.com/web/fundamentals/discovery-and-monetization/payment-request/deep-dive-into-payment-request\" style=\"text-decoration: none;\"><span>integration guide</span></a><span>.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><img height=\"180\" src=\"https://lh6.googleusercontent.com/AF2J0iFzVFNrhIw9OvyJTZVCxCOEljwtzYrn4uPPYLK0H8yRvZAOgv0lMOMiPM6QpToGL55ein4TqB9A6-T8MWfTPHwCiVfJ6P_ZXt98PVMUxaT-J6U-1F7idf8R-WnhCBNsaDNK\" width=\"624\" /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span>The PaymentRequest process throughout a transaction.</span></div><h1 dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 6pt; margin-top: 20pt;\"><span>Web Share API</span></h1><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>To allow users to easily share content on social networks, developers have had to manually integrate sharing buttons into their site for each social service. This often leads to users not being able to share with the services they actually use, in addition to bloated page sizes and security risks from including third-party code.</span></div><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Sites can now use the new </span><a href=\"https://developers.google.com/web/updates/2016/10/navigator-share\" style=\"text-decoration: none;\"><span>navigator.share</span></a><span> API on Chrome for Android to trigger the native Android share dialog, allowing the user to easily share text or links with any of their installed native apps. In a future release, this API will also be able to share to installed web apps.</span></div><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span><img height=\"338px\" src=\"https://lh5.googleusercontent.com/Wk_I9LLfcNn1ERdSqaZdSQqIKoDf22-vcoC41ZK2cSY-YSDr_uYAt8biZSDTA2aJy_uCnyTwvyPoNFnIqg4k3o8uZTQKlQSqNH8H-PtnBWrrsBzB35TaJRJIeo2gGgtHUGU6hFrK\" width=\"211\" /></span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span>The navigator.share API allows the user to share content with a variety of native apps via the native Android share dialog.</span></div><h1 dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 6pt; margin-top: 20pt;\"><span>WebUSB</span></h1><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Most hardware peripherals such as keyboards, mice, printers, and gamepads are supported by high-level web platform APIs. To use specialized educational, scientific, or industrial USB peripherals, users must find and install potentially unsafe drivers and software with system-level privileges.</span></div><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Chrome now supports the </span><a href=\"https://developers.google.com/web/updates/2016/03/access-usb-devices-on-the-web\" style=\"text-decoration: none;\"><span>WebUSB API</span></a><span>, allowing web apps to communicate with peripherals given a user's consent. This enables all the functionality provided by these devices, while still preserving the security guarantees of the web.</span></div><h1 dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 6pt; margin-top: 20pt;\"><span>Other features in this release</span></h1><ul style=\"margin-bottom: 0pt; margin-top: 0pt;\"><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><a href=\"http://wicg.github.io/netinfo/\" style=\"text-decoration: none;\"><span>Network Information API</span></a><span> is now available on desktop as well as Android, </span><a href=\"https://github.com/GoogleChrome/samples/tree/gh-pages/network-information\" style=\"text-decoration: none;\"><span>enabling sites</span></a><span> to access the underlying connection information of a device.</span></div></li><li dir=\"ltr\" style=\"background-color: white; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Developers can now specify scrolling smoothness via a new optional parameter in existing </span><a href=\"https://drafts.csswg.org/cssom-view/#extension-to-the-element-interface\" style=\"text-decoration: none;\"><span>Scroll APIs</span></a><span> or with the </span><span>scroll-behavior</span><span> </span><a href=\"https://drafts.csswg.org/cssom-view/#smooth-scrolling\" style=\"text-decoration: none;\"><span>CSS property</span></a><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>The CSSOM View </span><a href=\"https://drafts.csswg.org/cssom-view/#extension-to-the-element-interface\" style=\"text-decoration: none;\"><span>Smooth Scroll API</span></a><span> brings native smooth scrolling to the platform through a the </span><span>scroll-behavior: smooth</span><span> CSS property or by using the </span><span>window.scrollTo()</span><span> DOM scroll method, eliminating the need to implement this behavior with JavaScript</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgba\" style=\"text-decoration: none;\"><span>CSS color values</span></a><span> can now </span><a href=\"https://codepen.io/malyw/pen/wGNOrd\" style=\"text-decoration: none;\"><span>be 8- and 4-digit</span></a><span> hex colors of the format </span><span>#RRGGBBAA</span><span> and </span><span>#RGBA</span><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Sites can now access the relative positions of the screen content with the </span><a href=\"https://github.com/WICG/ViewportAPI\" style=\"text-decoration: none;\"><span>Visual Viewport API</span></a><span>, exposing complex functionality like pinch-and-zoom in a more direct way. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><a href=\"https://github.com/WICG/device-memory\" style=\"text-decoration: none;\"><span>Device RAM API</span></a><span> is now available, exposing the amount of RAM on a user‚Äôs device to sites to optimize overall performance of a web application. </span></div></li><li dir=\"ltr\" style=\"background-color: white; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>When navigating from an installed web app to a site outside the initial web app‚Äôs scope, the new site now automatically loads in a </span><a href=\"https://developer.chrome.com/multidevice/android/customtabs\" style=\"text-decoration: none;\"><span>Custom Chrome Tab</span></a><span>. </span></div></li><li dir=\"ltr\" style=\"background-color: white; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>For video using native controls, Chrome will now automatically </span><a href=\"https://developers.google.com/web/updates/2017/07/chrome-61-media-updates\" style=\"text-decoration: none;\"><span>expand video to fullscreen</span></a><span> when a user rotates their device</span><span> in an orientation that matches a video playing on the screen.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/nextHopProtocol\" style=\"text-decoration: none;\"><span>nextHopProtocol</span></a><span> is now available in </span><a href=\"https://w3c.github.io/resource-timing/#dfn-nexthopprotocol\" style=\"text-decoration: none;\"><span>Resource Timing</span></a><span> and </span><a href=\"https://www.w3.org/TR/navigation-timing/\" style=\"text-decoration: none;\"><span>Navigation Timing</span></a><span>, providing access to the </span><a href=\"https://tools.ietf.org/html/rfc7301\" style=\"text-decoration: none;\"><span>network protocol</span></a><span> used to fetch a resource. &nbsp;</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Sites can now require embedded third-party content to enforce a given </span><a href=\"https://w3c.github.io/webappsec-csp/#header-content-security-policy\" style=\"text-decoration: none;\"><span>Content Security Policy</span></a><span> via the new </span><span>csp</span><span> </span><a href=\"https://w3c.github.io/webappsec-csp/embedded/\" style=\"text-decoration: none;\"><span>attribute</span></a><span> on </span><span>&lt;iframe&gt;</span><span> elements.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList\" style=\"text-decoration: none;\"><span>DOMTokenList</span></a><span> interface now supports </span><a href=\"https://dom.spec.whatwg.org/#dom-domtokenlist-replace\" style=\"text-decoration: none;\"><span>replace()</span></a><span> to easily change all identical tokens to a new one, such as </span><span>active</span><span> to </span><span>inactive</span><span> on expiration. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>To access a list of </span><a href=\"https://dom.spec.whatwg.org/#concept-attribute\" style=\"text-decoration: none;\"><span>attribute</span></a><span> names of an element, </span><a href=\"https://dom.spec.whatwg.org/#dom-element-getattributenames\" style=\"text-decoration: none;\"><span>getAttributeNames()</span></a><span> is now supported and gives developers a more direct mechanism than going through the </span><a href=\"https://dom.spec.whatwg.org/#dom-element-attributes\" style=\"text-decoration: none;\"><span>attributes</span></a><span> collection.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>To increase security, sites will now automatically exit full screen if a JavaScript dialog opens. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Sites can now </span><a href=\"https://developers.google.com/web/updates/2017/08/estimating-available-storage-space\" style=\"text-decoration: none;\"><span>access an estimate</span></a><span> for the disk space used by a given origin and </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate/quota\" style=\"text-decoration: none;\"><span>quota</span></a><span> in bytes via the </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage_API\" style=\"text-decoration: none;\"><span>Storage API‚Äôs</span></a><span> new </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/StorageManager\" style=\"text-decoration: none;\"><span>navigator.storage.estimate()</span></a><span> function.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>To improve the browser‚Äôs cache hit rate, </span><a href=\"https://url.spec.whatwg.org/#interface-urlsearchparams\" style=\"text-decoration: none;\"><span>URLSearchParams</span></a><span> now supports </span><a href=\"https://url.spec.whatwg.org/#dom-urlsearchparams-sort\" style=\"text-decoration: none;\"><span>sort()</span></a><span> to list all stored name-value pairs.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><a href=\"https://url.spec.whatwg.org/#interface-urlsearchparams\" style=\"text-decoration: none;\"><span>URLSearchParams</span></a><span> constructor has been updated to accept any object as a parameter instead of only other </span><a href=\"https://url.spec.whatwg.org/#interface-urlsearchparams\" style=\"text-decoration: none;\"><span>URLSearchParams</span></a><span> instances.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>To prevent the use of mis-issued certificates from going unnoticed, sites can use the new </span><a href=\"https://tools.ietf.org/html/draft-ietf-httpbis-expect-ct-01\" style=\"text-decoration: none;\"><span>Expect-CT</span></a><span> </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers\" style=\"text-decoration: none;\"><span>HTTP header</span></a><span> which will enable automated reporting and/or enforcement of Certificate Transparency requirements.</span></div></li><li dir=\"ltr\" style=\"background-color: white; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Chrome will no longer decode frames for videos using Media Source in </span><a href=\"https://developers.google.com/web/updates/2017/07/chrome-61-media-updates\" style=\"text-decoration: none;\"><span>background tabs</span></a><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: white; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><a href=\"https://developers.google.com/web/updates/2016/12/imagecapture#capabilities_and_settings\" style=\"text-decoration: none;\"><span>\"Non-Live\" camera settings</span></a><span> such as photo resolution, red eye reduction, and flash mode can now be retrieved with </span><a href=\"https://www.chromestatus.com/feature/5104908176982016\" style=\"text-decoration: none;\"><span>ImageCapture.getPhotoSettings()</span></a><span>. </span></div></li><li dir=\"ltr\" style=\"background-color: white; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Sites can now use the <a href=\"https://www.w3.org/TR/clear-site-data/\" style=\"text-decoration: none;\"><span>Clear-Site-Data header</span></a> to delete their own client-side data, such as cookies, service workers, storage, and cache entries.</span></div></li></ul><b style=\"font-weight: normal;\"><br /></b><br /><h1 dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 6pt; margin-top: 20pt;\"><span>Deprecations and interoperability improvements</span></h1><ul style=\"margin-bottom: 0pt; margin-top: 0pt;\"><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>To increase security, resources with URLs containing both </span><span>\\n</span><span> and </span><span>&lt;</span><span> characters will now be </span><a href=\"https://github.com/whatwg/fetch/pull/519\" style=\"text-decoration: none;\"><span>blocked</span></a><span>. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>To increase security, support for the </span><a href=\"https://w3c.github.io/presentation-api/\" style=\"text-decoration: none;\"><span>Presentation API‚Äôs</span></a><span> </span><a href=\"https://w3c.github.io/presentation-api/#dom-presentationrequest-start\" style=\"text-decoration: none;\"><span>start</span></a><span> function has been deprecated and removed for insecure contexts.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; font-size: 10pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><span style=\"background-color: transparent; color: black; font-size: 10pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"background-color: white; font-family: sans-serif; font-size: 13px; white-space: normal;\">To align with the spec and preserve browser consistency, the&nbsp;</span><a href=\"https://developer.mozilla.org/en/docs/Web/API/document/scrollingElement\" style=\"background-color: white; color: #7e57c2; font-size: 13px; white-space: normal;\" target=\"_blank\"><span style=\"font-family: Courier New, Courier, monospace;\">scrollingElement</span></a><span style=\"background-color: white; font-family: sans-serif; font-size: 13px; white-space: normal;\">&nbsp;is now the </span><span style=\"background-color: white; font-size: 13px; white-space: normal;\"><span style=\"font-family: Courier New, Courier, monospace;\">documentElement</span></span><span style=\"background-color: white; font-family: sans-serif; font-size: 13px; white-space: normal;\"> in&nbsp;</span><a href=\"https://dev.opera.com/articles/fixing-the-scrolltop-bug/\" style=\"background-color: white; color: #7e57c2; font-family: sans-serif; font-size: 13px; white-space: normal;\" target=\"_blank\">standards mode</a><span style=\"background-color: white; color: #212121; font-family: sans-serif; font-size: 13px; white-space: normal;\">.</span></span></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>To increase consistency across </span><span>on&lt;event&gt;</span><span> attributes, </span><span>onwheel</span><span> attributes have been moved from </span><span>Element</span><span> to </span><span>Window</span><span>, </span><span>Document</span><span>, </span><span>HTMLElement</span><span>, and </span><span>SVGElement</span><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>To better follow spec and provide more granular control over the flow of referred content, Chrome now supports three new </span><a href=\"https://w3c.github.io/webappsec-referrer-policy/\" style=\"text-decoration: none;\"><span>Referrer Policy</span></a><span> values, </span><span>same-origin</span><span>, </span><span>strict-origin</span><span>, and </span><span>strict-origin-when-cross-origin</span><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Following the change in spec, the maximum value for </span><a href=\"https://html.spec.whatwg.org/#dom-col-span\" style=\"text-decoration: none;\"><span>colSpan</span></a><span> has been decreased from 8190 to 1000.</span></div></li></ul><br /><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Posted by Domenic Denicola, Maverick Modulator</span></div></div>", "title": "Chrome 61 Beta: JavaScript modules, Payment Request API on desktop, Web Share API, and WebUSB", "source_link": "http://blog.chromium.org/", "author_link": "https://plus.google.com/106190864297512596007", "author_name": "Chrome Blog", "source_type": "rss", "link": "http://blog.chromium.org/2017/08/chrome-61-beta-javascript-modules.html", "published": "2017-08-15T18:34:00", "source_title": "Chromium Blog", "tags": "browsers,chromium,tech,web"}, {"source_name": "MozillaHacks", "description": "With the release of the WebVR API v1.1, and WebVR support in Firefox 55, here's a collection of useful resources for WebVR development. From the landing page at vr.mozilla.org to the A-Frame website and community, here's everything you need to get started.", "tags": "mozilla,services,tech", "text": "<p>The general <a href=\"https://hacks.mozilla.org/2017/08/firefox-55-supports-webvr/\" rel=\"noopener\" target=\"_blank\">release of Firefox 55</a> brought a number of cool new features to the Gecko platform, one of which is the <a href=\"https://w3c.github.io/webvr/spec/1.1/\">WebVR API v1.1</a>. This allows developers to create immersive VR experiences inside web apps, compatible with popular hardware such as <a href=\"https://www.vive.com/uk/\">HTC VIVE</a>, <a href=\"https://www.oculus.com/rift/\">Oculus Rift</a>, and <a href=\"https://vr.google.com/daydream/\">Google Daydream</a>. This article looks at the resources we&#8217;ve made available to facilitate getting into WebVR development.</p>\n<h2>Support notes</h2>\n<p><a href=\"https://w3c.github.io/webvr/spec/1.1/\">Version 1.1 of the WebVR API</a> is very new, with varying support available across modern browsers:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/Firefox/Releases/55\">Firefox 55</a> sees full support on Windows, and more experimental support available for Mac in the Beta/Nightly release channels only, until testing and final work is completed. Supported VR hardware includes HTC VIVE, Oculus Rift, and Google Daydream.</li>\n<li>Chrome support is still experimental ‚Äî you can currently only see support out in the wild on Chrome for Android with Google Daydream.</li>\n<li>Edge fully supports WebVR 1.1, through the¬†Windows Mixed Reality headset.</li>\n<li>Support is also available in Samsung Internet, via their GearVR hardware.</li>\n</ul>\n<p>Note that the 1.0 version of the API can be considered obsolete, and has been (or will be) removed from all major browsers.</p>\n<p>Controlling WebVR apps using the full features of VR controllers relies on the <a href=\"https://w3c.github.io/gamepad/extensions.html\">Gamepad Extensions API</a>. This adds features to the <a href=\"https://w3c.github.io/gamepad/\">Gamepad API</a> that provide access to controller features like haptic actuators (e.g. vibration hardware) and position/orientation data (i.e., <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/GamepadPose\">pose</a>). This currently has even more limited support than the WebVR API; Firefox 55+ has it available in Beta/Nightly channels.</p>\n<p>In other browsers, you&#8217;ll have to make do for now with basic Gamepad API functionality, like reporting button presses.</p>\n<h2>vr.mozilla.org</h2>\n<p><a href=\"https://vr.mozilla.org\">vr.mozilla.org</a> ‚Äî Mozilla&#8217;s new landing pad for WebVR ‚Äî features demos, utilities, news and updates, and all the other information you&#8217;ll need to get up and running with WebVR.</p>\n<h2>MDN documentation</h2>\n<p>MDN has full documentation available for both the APIs mentioned above. See:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API\">WebVR API reference</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API\">Gamepad API reference</a>, which includes the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API#Experimental_Gamepad_extensions\">Gamepad Extensions API</a></li>\n</ul>\n<p>In addition, we&#8217;ve written some useful guides to get you familiar with the basics of using these APIs:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API/Concepts\">WebVR concepts</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API/Using_the_WebVR_API\">Using the WebVR API</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API/Using_VR_controllers_with_WebVR\">Using VR controllers with WebVR</a></li>\n</ul>\n<h2>A-Frame and other libraries</h2>\n<p>WebVR experiences can be fairly complex to develop. The API itself is easy to use, but you need to use WebGL to create the 3D scenes you want to feature in your apps, and this can prove difficult to those not well-versed in low-level graphics programming. However, there are a number of libraries to hand that can help with this.</p>\n<p>The hero of the WebVR world is Mozilla&#8217;s <a href=\"https://aframe.io/\">A-Frame library</a>, which allows you to create nice looking 3D scenes using custom HTML elements, handling all the WebGL for you behind the scenes. A-Frame apps are also WebVR-compatible by default. It is perfect for putting together apps and experiences quickly.</p>\n<ul>\n<li><a href=\"https://aframe.io/docs/0.6.0/introduction/\">A-Frame documentation</a></li>\n<li><a href=\"https://aframe.io/examples/\">A-Frame demos</a></li>\n<li><a href=\"https://hacks.mozilla.org/category/webvr/tools-for-vr-development/\">Salva&#8217;s Tools for VR development article series</a></li>\n</ul>\n<p>There are a number of other well-written 3D libraries available too, which abstract away the difficulty of working with raw WebGL. Good examples include:</p>\n<ul>\n<li><a href=\"https://threejs.org/\">Three.js</a></li>\n<li><a href=\"http://www.babylonjs.com/\">BabylonJS</a></li>\n<li><a href=\"https://playcanvas.com/\">PlayCanvas</a></li>\n</ul>\n<p>These don&#8217;t include VR capabilities out of the box, but it is not too difficult to write your own WebVR rendering code around them.</p>\n<p>If you are worried about supporting older browsers that only include WebVR 1.0 (or no VR) as well as newer browsers with 1.1, you&#8217;ll be pleased to know that there is a <a href=\"https://github.com/googlevr/webvr-polyfill/\">WebVR polyfill available</a>.</p>\n<h2>Demos and examples</h2>\n<ul>\n<li><a href=\"https://vr.mozilla.org\">vr.mozilla.org</a> ‚Äî the main Mozilla landing pad for WebVR, with demos, utilities, and other information.</li>\n<li><a class=\"external external-icon\" href=\"https://github.com/mdn/webvr-tests\">webvr-tests</a> ‚Äî very simple examples to accompany the MDN WebVR documentation.</li>\n<li><a class=\"external external-icon\" href=\"https://github.com/facebook/Carmel-Starter-Kit\">Carmel starter kit</a> ‚Äî nice simple, well-commented examples that go along with Carmel, Facebook&#8217;s WebVR browser.</li>\n<li><a class=\"external external-icon\" href=\"https://webvr.info/samples/\">WebVR.info samples</a>¬†‚Äî slightly more in-depth examples plus source code</li>\n<li><a class=\"external external-icon\" href=\"https://webvr.rocks/firefox#demos\">WebVR.rocks Firefox demos</a>¬†‚Äî showcase examples</li>\n<li><a class=\"external external-icon\" href=\"https://aframe.io/\">A-Frame homepage</a>¬†‚Äî examples showing A-Frame usage</li>\n</ul>\n<h2>See also</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API\">WebGL reference</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas\">The &lt;canvas&gt; element</a></li>\n</ul>", "title": "Essential WebVR resources", "author_name": "Chris Mills", "source_type": "rss", "link": "https://hacks.mozilla.org/2017/08/essential-webvr-resources/", "source_link": "https://hacks.mozilla.org", "source_title": "Mozilla Hacks ‚Äì the Web developer blog", "published": "2017-08-15T13:30:00"}, {"source_name": "MozillaHacks", "description": "Announcing a new twist to this year's js13kgames competition - the A-Frame category! We challenge you to build a WebVR game experience with A-Frame. For this category, you‚Äôll have the same file size limit set to 13 kilobytes plus the A-Frame library for free.  This year's theme: lost.  Submissions close: September 13.", "tags": "mozilla,services,tech", "text": "<p>It&#8217;s that time of the year again &#8211; the latest edition of the <a href=\"http://2017.js13kgames.com/\">js13kGames</a> competition opened yesterday, on Sunday, August 13th. Just like <a href=\"https://hacks.mozilla.org/2016/08/js13kgames-code-golf-for-game-devs/\">last year</a>, and going back to 2012 when I started this competition. Every year the contest has a new theme, but this time there&#8217;s another new twist that&#8217;s a little bit different &#8211; a brand new <a href=\"http://js13kgames.com/aframe\">A-Frame VR category</a> just in time for <a href=\"https://hacks.mozilla.org/2017/08/firefox-55-supports-webvr/\" target=\"_blank\">the arrival of WebVR to Firefox 55</a> and a desktop browser near you.</p>\n<p><a href=\"http://2017.js13kgames.com/\" target=\"_blank\"><img alt=\"\" class=\"alignnone size-large wp-image-31172\" height=\"262\" src=\"https://hacks.mozilla.org/files/2017/08/js13k2017-500x262.jpg\" width=\"500\" /></a></p>\n<p><strong>Js13kGames</strong> is an online competition for HTML5 game developers where the fun part is that the size limit is set to 13 kilobytes. Unlike a 48-hour game jam, you have a whole month to come up with your best idea, create it, polish as much as you can, and submit &#8211; deadline is September 13th. </p>\n<h2>A brief history of js13kgames</h2>\n<p>It started five years ago from the pure need of having a competition for JavaScript game developers like me &#8211; I couldn&#8217;t find anything interesting, so I created one myself. Somehow it was cool enough for people to participate, and from what I heard they really enjoyed it, so I kept it going over the years even though managing everything on my own is exhausting and time-consuming.<br />\n<a href=\"http://js13kgames.com/entries/evil-glitch\"><img alt=\"\" class=\"alignnone size-large wp-image-31170\" height=\"259\" src=\"https://hacks.mozilla.org/files/2017/08/evil-glitch-500x259.jpg\" width=\"500\" /></a></p>\n<p>There have been many great games created since the beginning &#8211; you can check <a href=\"https://github.com/blog/2409-build-a-game-in-13kb-or-less-with-js13kgames\">GitHub&#8217;s recent blog post</a> for a quick recap of some of my personal favourites. Two of the best entries from 2016 ended up on Steam in their post-competition versions: <a href=\"http://js13kgames.com/entries/evil-glitch\">Evil Glitch</a> and <a href=\"http://js13kgames.com/entries/glitch-buster\">Glitch Buster</a>, and keys for both of them are available as prizes in the competition this year.</p>\n<h2>A-Frame category</h2>\n<p>The big news this year that I&#8217;m really proud of: Virtual Reality has arrived with the new <a href=\"http://js13kgames.com/aframe\">A-Frame category</a>. Be sure to check it out the <a href=\"http://js13kgames.com/aframe\" target=\"_blank\">A-Frame landing page</a> for the rules and details. You can reference the minified version of the A-Frame library and you are not required to count its size as part of the 13 kilobytes size limit that defines this contest. </p>\n<p><a href=\"http://js13kgames.com/aframe\"><img alt=\"\" class=\"alignnone size-large wp-image-31169\" height=\"303\" src=\"https://hacks.mozilla.org/files/2017/08/banner-aframe-500x303.png\" width=\"500\" /></a></p>\n<p>Since the <a href=\"http://aframe.io/\">A-Frame</a> library itself was announced I have been really excited trying it out. I believe it&#8217;s a real game changer (pun intended) for the WebVR world. With just a few lines of HTML markup you can set up a simple scene with VR mode, controls, lights. Prototyping is extremely easy, and you can build really cool experiments within minutes. There are many useful components in the <a href=\"https://aframe.io/aframe-registry/\">Registry</a> that can help you out too, so you don&#8217;t have to write everything yourself. A-Frame is very powerful, yet so easy to use &#8211; I really can&#8217;t wait to see what you&#8217;ll come up with this year.</p>\n<h2>Resources</h2>\n<p>If WebVR is all brand new to you and you have no idea where to start, read Chris Mills&#8217; recent article <a href=\"https://hacks.mozilla.org/2017/08/essential-webvr-resources/\" target=\"_blank\">&#8220;WebVR Essentials&#8221;</a>. Then be sure to check out the A-Frame website for useful docs and demos, and a lively community of WebVR creators: </p>\n<ul>\n<li><a href=\"https://aframe.io/docs/0.6.0/introduction/\">A-Frame documentation</a></li>\n<li><a href=\"https://aframe.io/examples/\">A-Frame demos</a></li>\n</ul>\n<p>I realize the 13K size limit is very constraining, but these limitations spawn creativity. There have been many cool and inspiring games created over the years, and all their source code is available on GitHub in a readable form for everyone to learn from. There are plenty of <a href=\"https://developer.mozilla.org/en-US/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_A-Frame\">A-Frame tutorials</a> out there, so feel free to look for the specific solutions to your ideas. I&#8217;m sure you&#8217;ll find something useful.</p>\n<h2>Feedback</h2>\n<p>Many developers who&#8217;ve participated in this competition in previous years have mentioned expert feedback as a key benefit from the competition. This year&#8217;s judges for the A-Frame category will focus their full attention to on WebVR games only, in order to be able to offer constructive feedback on your entry. </p>\n<p>The A-Frame judges include: <a href=\"https://twitter.com/fernandojsg\">Fernando Serrano Garcia</a> (WebVR and WebGL developer), <a href=\"https://twitter.com/dmarcos\">Diego Marcos</a> (A-Frame co creator, API designer and maintainer), <a href=\"http://twitter.com/lady_ada_king\">Ada Rose Edwards</a> (Senior Engineer and WebVR advocate at Samsung) and <a href=\"http://twitter.com/potch\">Matthew &#8216;Potch&#8217; Claypotch</a> (Developer Advocate at Mozilla).</p>\n<h2>Prizes</h2>\n<p>This year, we&#8217;ll be offering custom-made VR <em>cardboards</em> to all participants in the js13kGames competition. These will be shipped for every complete submission, along with the traditional annual t-shirt, and a bunch of cool stickers.</p>\n<p>In addition to the physical package that&#8217;s shipped for free to your doorstep, there&#8217;s a whole bunch of digital prizes you can win &#8211; software licenses, engines, editors and other tools, as well as subscription plans for various services and online courses, games and game assets, ebooks, and vouchers.</p>\n<p>Prizes for the A-Frame category include PlayCanvas licenses, WebVR video courses, and WebStorm licenses. There are other ways to win more prizes too: Community Awards and Social Specials. You can find all the details and rules about how to enter on the competition website. </p>\n<h2>A look back</h2>\n<p>I&#8217;m happy to see this competition become more and more popular. I&#8217;ve started many projects, and many have failed. Yet this one is still alive and kicking, even though HTML5 game deveopment itself is a niche, and the size constraint in this contest means you have to mind the size of every resource you want to use. It is indeed a tough competition and not every developer makes it to the finish, but the feeling of submitting an entry minutes before the deadline is priceless.</p>\n<p><a href=\"http://js13kgames.com/\"><img alt=\"\" class=\"alignnone size-large wp-image-31173\" height=\"353\" src=\"https://hacks.mozilla.org/files/2017/08/js13kgames-community-500x353.jpg\" width=\"500\" /></a></p>\n<p>I&#8217;m a programmer, and my wife <a href=\"http://mypoint.pl/\">Ewa</a> is a graphic designer on all our projects, including js13kGames. I guess that makes <a href=\"http://enclavegames.com/\">Enclave Games</a> a family business! With our little baby daughter Kasia born last year, it&#8217;s an ongoing challenge to balance work, family and game development.  It&#8217;s not easy, but if you believe in something you have to try and make it work. </p>\n<h2>Start your engines</h2>\n<p>Anyway, the new category in the competition is a great opportunity to learn A-Frame if you haven&#8217;t tried it yet, or improve your skills. After all you have a full month, and there&#8217;s guaranteed swag for every entry. The theme this year is &#8220;<em>lost</em>&#8221; &#8211; I hope it will help you find a good idea for the game.</p>\n<p>Visit <a href=\"http://2017.js13kgames.com/\">js13kGames website</a> for all the details, see the <a href=\"http://js13kgames.com/aframe\">A-Frame category</a> landing page, and follow <a href=\"https://twitter.com/js13kgames\">@js13kgames on Twitter</a> or <a href=\"https://www.facebook.com/js13kGames/\">on Facebook</a> for announcements. The friendly js13kGames community can help you with any problems or issues you&#8217;ll face; they can be found on our <a href=\"http://slack.js13kgames.com/\">js13kgames Slack</a> channel. Good luck and have fun!</p>", "title": "A-Frame comes to js13kGames: build a game in WebVR", "author_name": "Andrzej Mazur", "source_type": "rss", "link": "https://hacks.mozilla.org/2017/08/a-frame-comes-to-js13kgames/", "source_link": "https://hacks.mozilla.org", "source_title": "Mozilla Hacks ‚Äì the Web developer blog", "published": "2017-08-14T15:03:00"}, {"source_name": "Habrahabr", "description": "<blockquote>–í—Å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–∑–ª–æ–∂–µ–Ω–æ —Ç–∞–∫ –ø—Ä–æ—Å—Ç–æ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ –Ω–µ –ø—Ä–æ—â–µ.</blockquote>–ê. –≠–π–Ω—à—Ç–µ–π–Ω<br />\n<br />\n–î–æ–±—Ä—ã–π –¥–µ–Ω—å —É–≤–∞–∂–∞–µ–º—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏. –î–æ–≤–æ–ª—å–Ω–æ —á–∞—Å—Ç–æ <s>–ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—è</s> –∫–æ–ø–∞—è—Å—å –≤ —á—É–∂–æ–º –∫–æ–¥–µ —è –Ω–∞—Ç–∞–ª–∫–∏–≤–∞—é—Å—å –Ω–∞ —Ç–∞–∫–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å –∏–∫–æ–Ω–∫–æ–π.<br />\n<br />\n<b>HTML</b><br />\n<br />\n<pre><code class=\"html\">&lt;div class=\"bl_button__wrapp\"&gt;\n  &lt;div class=\"bl_button\"&gt;\n      &lt;i class=\"fa fa-bars\" aria-hidden=\"true\"&gt;&lt;/i&gt;\n      &lt;span class=\"bl_button__text\"&gt;menu&lt;/span&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <a href=\"https://habrahabr.ru/post/335632/#habracut\">–ß–∏—Ç–∞—Ç—å –¥–∞–ª—å—à–µ ‚Üí</a>", "tags": "habr,perf,tech,web", "source_link": "https://habrahabr.ru/hub/client_side_optimization/posts/all/", "title": "[–ò–∑ –ø–µ—Å–æ—á–Ω–∏—Ü—ã] –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–∞–π—Ç–∞. –î–µ–ª–∞—Ç—å –ø—Ä–æ—â–µ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ª–µ–≥—á–µ", "author_name": "BlackStar1991", "source_type": "rss", "link": "https://habrahabr.ru/post/335632/", "published": "2017-08-14T14:33:00", "source_title": "–•–∞–±—Ä–∞—Ö–∞–±—Ä / –í—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–¥—Ä—è–¥ / –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"}, {"source_name": "2ality", "description": "<p>This blog post tracks what features may be included in ES2018. I will continually update it.</p>\n\n<div><a href=\"http://2ality.com/2017/02/ecmascript-2018.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/xF94-Ko5XuE\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "Feature watch: ECMAScript 2018", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/02/ecmascript-2018.html", "author_link": "http://2ality.com/", "published": "2017-08-13T16:43:00", "source_title": "2ality feed"}, {"source_name": "2ality", "description": "<p>The proposal ‚Äú<a href=\"https://github.com/tc39/proposal-optional-catch-binding\">Optional catch binding</a>‚Äù by Michael Ficarra is currently at <a href=\"http://exploringjs.com/es2016-es2017/ch_tc39-process.html\">stage 3</a>. This blog post explains how it works.</p>\n\n<div><a href=\"http://2ality.com/2017/08/optional-catch-binding.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/JKfLa7fiC-w\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "ES proposal: optional catch binding", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/08/optional-catch-binding.html", "author_link": "http://2ality.com/", "published": "2017-08-13T16:42:00", "source_title": "2ality feed"}, {"source_name": "Habrahabr", "description": "–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!<br />\n<br />\n¬´–ï—Å–ª–∏ –º–æ–∂–µ—à—å —á—Ç–æ-—Ç–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å –Ω–∞ GPU, –¥–µ–ª–∞–π —ç—Ç–æ¬ª<br />\n// –ö–æ–Ω–µ—á–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö —Ä–∞–∑—É–º–Ω–æ–≥–æ<br />\n<br />\n<img alt=\"image\" src=\"https://habrastorage.org/getpro/habr/post_images/269/e28/71a/269e2871a4c0eb98005b71832d000ed5.jpg\" /><br />\n<br />\nVS <br />\n<br />\n<img alt=\"image\" src=\"https://habrastorage.org/getpro/habr/post_images/cdf/61d/787/cdf61d787f3284c0e2328605b01833af.jpg\" /><br />\n<i>–û–±—Ä–∞—â–∞–µ–º –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑–Ω–∏—Ü—É –≤ —Ñ–ø—Å</i><br />\n<br />\n–ù–∞—á–Ω—É, –ø–æ–∂–∞–ª—É–π, —Å –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏. –û–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤, —Ä–µ—à–∏–ª –ø—Ä–æ–≤–µ—Ä–∏—Ç—å UI –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–∞–¥–µ–Ω–∏—è —Ñ–ø—Å. –ò –º—ã –Ω–∞—à–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å, –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –º–∏–Ω–∏–∫–∞—Ä—Ç—ã —Ñ–ø—Å –ø–æ–¥–Ω–∏–º–∞–ª—Å—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –ù—É–∂–Ω–æ —Ä–µ—à–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É. –°—Ä–∞–∑—É –Ω–∞–ø–∏—à—É —á—Ç–æ –ø—Ä–æ –∞—Ç–ª–∞—Å—ã –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—É–ª—ã, –º—ã –ø—Ä–æ–±–æ–≤–∞–ª–∏. –ò —Ç–æ–≥–¥–∞ —è —Ä–µ—à–∏–ª –∑–∞–Ω—è—Ç—å—Å—è —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ. –ò —Ç—É—Ç –ø–µ—Ä–≤–∞—è –º—ã—Å–ª—å, –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—è –ø–æ—Å–µ—Ç–∏–ª–∞, UI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª, –∑–Ω–∞—á–∏—Ç –º–æ–∂–Ω–æ –≤—Å–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ –ì–ü–£, –Ω–∞—á–Ω–µ–º.<br /> <a href=\"https://habrahabr.ru/post/335524/#habracut\">–ß–∏—Ç–∞—Ç—å –¥–∞–ª—å—à–µ ‚Üí</a>", "tags": "habr,perf,tech,web", "source_link": "https://habrahabr.ru/hub/client_side_optimization/posts/all/", "title": "Optimization Unity3d UI by GPU (for example minimap) –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–∫–∞—Ä—Ç—É –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–º–µ—Ä –∏ —Å–ø—Ä–∞–π—Ç–æ–≤", "author_name": "derek_streyt", "source_type": "rss", "link": "https://habrahabr.ru/post/335524/", "published": "2017-08-13T12:55:00", "source_title": "–•–∞–±—Ä–∞—Ö–∞–±—Ä / –í—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–¥—Ä—è–¥ / –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"}, {"source_name": "2ality", "description": "<p>The proposal ‚Äú<a href=\"https://github.com/tc39/proposal-promise-try\"><code>Promise.try()</code></a>‚Äù by Jordan Harband is currently at <a href=\"http://exploringjs.com/es2016-es2017/ch_tc39-process.html\">stage 1</a>. This blog post explains how it works.</p>\n\n<div><a href=\"http://2ality.com/2017/08/promise-try.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/6DXhmAyl60o\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "ES proposal: <code>Promise.try()</code>", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/08/promise-try.html", "author_link": "http://2ality.com/", "published": "2017-08-12T08:02:00", "source_title": "2ality feed"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "V8Blog", "description": "<div style=\"line-height: 1.1;\"><h1 dir=\"ltr\" style=\"margin-bottom: 6pt; margin-top: 20pt;\"><b id=\"docs-internal-guid-cfc71207-d23c-8f2f-038a-051b49eacd72\" style=\"font-weight: normal;\"><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span>Early July this year, Node.js released a </span><a href=\"https://nodejs.org/en/blog/vulnerability/july-2017-security-releases/\" style=\"text-decoration: none;\"><span>security update</span></a><span> for all currently maintained branches to address a hash flooding vulnerability. This intermediate fix comes at the cost of a significant startup performance regression. In the meantime, V8 has implemented a solution which avoids the performance penalty.</span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span>In this post, we want to give some background and history on the vulnerability and the eventual solution.</span></div></b></h1><h2 dir=\"ltr\" style=\"margin-bottom: 6pt; margin-top: 18pt;\"><span>Hash flooding attack</span></h2><h1 dir=\"ltr\" style=\"margin-bottom: 6pt; margin-top: 20pt;\"><b style=\"font-weight: normal;\"><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span>Hash tables are one of the most important data structures in computer science. They are widely used in V8, for example to store an object‚Äôs properties. On average, inserting a new entry is very efficient at </span><a href=\"https://en.wikipedia.org/wiki/Big_O_notation\" style=\"text-decoration: none;\"><span>O(1)</span></a><span>. However, hash collisions could lead to a worst case of </span><span>O(n)</span><span>. That means that inserting </span><span>n</span><span> entries can take up to </span><span>O(n¬≤)</span><span>.</span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span>In Node.js, </span><a href=\"https://nodejs.org/api/http.html#http_response_getheaders\" style=\"text-decoration: none;\"><span>HTTP headers</span></a><span> are represented as JavaScript objects. Pairs of header name and values are stored as object properties. With cleverly prepared HTTP requests, an attacker could perform a denial-of-service attack. A Node.js process would become unresponsive, being busy with worst-case hash table insertions.</span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span>This attack has been disclosed as early as </span><a href=\"https://events.ccc.de/congress/2011/Fahrplan/events/4680.en.html\" style=\"text-decoration: none;\"><span>December of 2011</span></a><span>, and shown to affect a wide range of programming languages. How come it took this long for V8 and Node.js to finally address this issue?</span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span>In fact, very soon after the disclosure, V8 engineers worked with the Node.js community on a </span><a href=\"https://github.com/v8/v8/commit/81a0271004833249b4fe58f7d64ae07e79cffe40\" style=\"text-decoration: none;\"><span>mitigation</span></a><span>. From </span><span>Node.js v0.11.8 onwards, this issue had been addressed. The fix introduced a so-called </span><span><i>hash seed value</i></span><span>. The hash seed is randomly chosen at startup and used to seed every hash value in a particular V8 instance. Without the knowledge of the hash seed, an attacker has a hard time to hit the worst-case, let alone come up with an attack that targets all Node.js instances.</span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span>This is part of the </span><a href=\"https://github.com/v8/v8/commit/81a0271004833249b4fe58f7d64ae07e79cffe40\" style=\"text-decoration: none;\"><span>commit</span></a><span> message of the fix:</span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;\"><span>This version only solves the issue for those that compile V8 themselves or those that do not use snapshots. A snapshot-based precompiled V8 will still have predictable string hash codes.</span></div></b></h1><h2 dir=\"ltr\" style=\"margin-bottom: 6pt; margin-top: 18pt;\"><span>Startup snapshot</span></h2><h1 dir=\"ltr\" style=\"margin-bottom: 6pt; margin-top: 20pt;\"><b style=\"font-weight: normal;\"><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span>Startup snapshots are a mechanism in V8 to dramatically speed up both engine startup and creating new contexts (i.e. via the </span><a href=\"https://nodejs.org/api/vm.html\" style=\"text-decoration: none;\"><span>vm</span><span> module</span></a><span> in Node.js). Instead of setting up initial objects and internal data structures from scratch, V8 deserializes from an existing snapshot. An up-to-date build of V8 with snapshot starts up in less than 3ms, and requires a fraction of a millisecond to create a new context. Without the snapshot, startup takes more than 200ms, and a new context more than 10ms. This is a difference of two orders of magnitude.</span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span>We covered how any V8 embedder can take advantage of startup snapshots in </span><a href=\"https://v8project.blogspot.com/2015/09/custom-startup-snapshots.html\" style=\"text-decoration: none;\"><span>previous</span></a><span> </span><a href=\"https://v8project.blogspot.com/2017/05/energizing-atom-with-v8s-custom-start.html\" style=\"text-decoration: none;\"><span>posts</span></a><span>.</span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span>A pre-built snapshot contains hash tables and other hash-value-based data structures. Once initialized from snapshot, the hash seed can no longer be changed without corrupting these data structures. A Node.js release that bundles the snapshot has a fixed hash seed, making the mitigation ineffective.</span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span>That is what the explicit warning in the commit message was about.</span></div></b></h1><h2 dir=\"ltr\" style=\"margin-bottom: 6pt; margin-top: 18pt;\"><span>Almost fixed, but not quite</span></h2><h1 dir=\"ltr\" style=\"margin-bottom: 6pt; margin-top: 20pt;\"><b style=\"font-weight: normal;\"><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span>Fast-forward to 2015, a Node.js </span><a href=\"https://github.com/nodejs/node/issues/1631\" style=\"text-decoration: none;\"><span>issue</span></a><span> reports that creating a new context has regressed in performance. Unsurprisingly, this is because the startup snapshot has been disabled as part of the mitigation. But by that time not everyone participating in the discussion was aware of the </span><a href=\"https://github.com/nodejs/node/issues/528#issuecomment-71009086\" style=\"text-decoration: none;\"><span>reason</span></a><span>.</span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span>As explained in this </span><a href=\"https://v8project.blogspot.com/2015/12/theres-mathrandom-and-then-theres.html\" style=\"text-decoration: none;\"><span>post</span></a><span>, V8 uses a pseudo-random number generator to generate </span><span>Math.random</span><span> results. Every V8 context has its own copy of the random number generate state. This is to prevent </span><span>Math.random</span><span> results from being predictable across contexts.</span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span>The random number generator state is seeded from an external source right after the context is created. It does not matter whether the context is created from scratch, or deserialized from snapshot.</span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span>Somehow, the random number generator state has been </span><a href=\"https://github.com/nodejs/node/issues/1631#issuecomment-100044148\" style=\"text-decoration: none;\"><span>confused</span></a><span> with the hash seed. As result, a pre-built snapshot started being part of the official release since </span><a href=\"https://github.com/nodejs/node/pull/1679\" style=\"text-decoration: none;\"><span>io.js v2.0.2</span></a><span>.</span></div></b></h1><h2 dir=\"ltr\" style=\"margin-bottom: 6pt; margin-top: 18pt;\"><span>Second attempt</span></h2><h1 dir=\"ltr\" style=\"margin-bottom: 6pt; margin-top: 20pt;\"><span style=\"font-weight: normal;\"><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span>It was not until May 2017, during some internal discussions between V8, </span><a href=\"https://googleprojectzero.blogspot.com/\"><span>Google‚Äôs Project Zero</span></a><span>, and Google‚Äôs Cloud Platform, when we realized that Node.js was still vulnerable to hash flooding attacks.</span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span>The initial response came from our colleagues </span><a href=\"https://twitter.com/ofrobots\"><span>Ali</span></a><span> and </span><a href=\"https://twitter.com/MylesBorins\"><span>Myles</span></a><span> from the team behind </span><a href=\"https://cloud.google.com/nodejs/\"><span>Google Cloud Platform's Node.js offerings</span></a><span>. They worked with the Node.js community to </span><a href=\"https://github.com/nodejs/node/commit/eff636d8eb7b009c40fb053802c169ba1417293d\"><span>disable startup snapshot</span></a><span> by default, again. This time around, they also added a </span><a href=\"https://github.com/nodejs/node/commit/9fedc1f09648ff7cebed65883966f5647686a38a\"><span>test case</span></a><span>.</span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span>But we did not want to leave it at that. Disabling startup snapshot has </span><a href=\"https://github.com/nodejs/node/issues/14229\"><span>significant</span></a><span> performance impacts. Over the years, we have added many new </span><a href=\"https://v8project.blogspot.com/2017/02/high-performance-es2015-and-beyond.html\"><span>language</span></a><span> </span><a href=\"https://v8project.blogspot.com/2016/10/webassembly-browser-preview.html\"><span>features</span></a><span> and </span><a href=\"https://v8project.blogspot.com/2017/05/launching-ignition-and-turbofan.html\"><span>sophisticated</span></a><span> </span><a href=\"https://v8project.blogspot.com/2017/01/speeding-up-v8-regular-expressions.html\"><span>optimizations</span></a><span> to V8. Some of these additions made starting up from scratch even more expensive. Immediately after the security release, we started working on a long-term solution. The goal is to be able to </span><a href=\"https://github.com/nodejs/node/issues/14171\"><span>re-enable startup snapshot</span></a><span> without becoming vulnerable to hash flooding.</span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span>From </span><a href=\"https://docs.google.com/document/d/1br7T3jk5JAJSYaT8eZdQlqrPTDRClheGpRU1-BpY1ss/edit\"><span>proposed solutions</span></a><span>, we chose and implemented the most pragmatic one. After deserializing from snapshot, we would choose a new hash seed. Affected data structures are then rehashed to ensure consistency.</span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span>As it turns out, in an ordinary startup snapshot few data structures are actually affected. And to our delight, </span><a href=\"https://github.com/v8/v8/commit/0e8e0030775518b69eb8522823ea3754e6bddc69\"><span>rehashing hash tables</span></a><span> have been made easy in V8 in the meantime. The overhead this adds is insignificant.</span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span>The patch to re-enable startup snapshot has been </span><a href=\"https://github.com/nodejs/node/commit/2ae2874ae7dfec2c55b5d390d25b6eed9932f78d\"><span>merged</span></a><span> </span><a href=\"https://github.com/nodejs/node/commit/14e4254f68f71a6afaf3ebe16794172b08e68d7b\"><span>into</span></a><span> Node.js. It is part of the recent Node.js v8.3.0 </span><a href=\"https://medium.com/the-node-js-collection/node-js-8-3-0-is-now-available-shipping-with-the-ignition-turbofan-execution-pipeline-aa5875ad3367\"><span>release</span></a><span>.</span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span>Posted by Yang Guo, aka </span><span><a href=\"https://twitter.com/hashseed\">@hashseed</a></span></div><div><br /></div></span></h1></div>", "title": "About that hash flooding vulnerability in Node.js‚Ä¶", "source_link": "http://v8project.blogspot.com/", "author_link": "http://www.blogger.com/profile/02128634431048629148", "author_name": "Mathias Bynens", "source_type": "rss", "link": "http://v8project.blogspot.com/2017/08/about-that-hash-flooding-vulnerability.html", "published": "2017-08-11T16:40:00", "source_title": "V8 JavaScript Engine", "tags": "browsers,chromium,js,tech,web"}, {"source_name": "EdgeBlog", "description": "<p>Editor‚Äôs Note: Today‚Äôs post is a guest post from John-David Dalton, a Program Manager on the Microsoft Edge team and creator of the popular Lodash JavaScript library, sharing the news of a new community project to bring ECMAScript modules to Node. I‚Äôm excited to announce the release of @std/esm (standard/esm), an opt-in, spec-compliant, ECMAScript (ES) [&#8230;]</p>\n<p>The post <a href=\"https://blogs.windows.com/msedgedev/2017/08/10/es-modules-node-today/\" rel=\"nofollow\">ES Modules in Node Today!</a> appeared first on <a href=\"https://blogs.windows.com/msedgedev\" rel=\"nofollow\">Microsoft Edge Dev Blog</a>.</p>", "tags": "mobile,pc,tablet,browsers,edge,tech,web", "text": "<p><em>Editor‚Äôs Note: Today‚Äôs post is a guest post from <a href=\"https://twitter.com/sindresorhus/status/861991464858812416\">John-David Dalton</a>, a Program Manager on the Microsoft Edge team and creator of the popular Lodash JavaScript library, sharing the news of a new community project to bring ECMAScript modules to Node.</em></p>\n<p>I‚Äôm excited to announce the release of <a href=\"https://medium.com/r/?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40std%2Fesm\"><code>@std/esm</code></a> <em>(standard/esm)</em>, an opt-in, spec-compliant, ECMAScript (ES) module loader that enables a smooth transition between Node and ES module formats with near built-in performance! This fast, small, zero dependency package is all you need to enable ES modules in Node 4+ today!</p>\n<div class=\"wp-caption aligncenter\" id=\"attachment_21202\" style=\"width: 490px;\"><img alt=\"Animation showing @std-esm being used in the Node REPL in a command prompt\" height=\"360\" src=\"https://winblogs.azureedge.net/win/2017/08/8cd5c5b5c39cde993f37d18f105c38a5.gif\" width=\"480\" /><p class=\"wp-caption-text\">@std/esm used in the Node¬†REPL</p></div>\n<h1>A tale of two module¬†formats</h1>\n<p>With ESM¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fcaniuse.com%2F%23feat%3Des6-module\" rel=\"nofollow noopener\" target=\"_blank\">landing in browsers</a>, attention is turning to Node‚Äôs future ESM support. Unlike browsers, which have an out-of-band¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fhtml.spec.whatwg.org%2Fmultipage%2Fscripting.html%23attr-script-type\" rel=\"nofollow noopener\" target=\"_blank\">parse goal signal</a>¬†and no prior module format,<em>¬†</em>support for ESM in Node is a bit more‚Ä¶prickly. Node‚Äôs legacy module format, a¬†<a href=\"https://medium.com/r/?url=http%3A%2F%2Fwiki.commonjs.org%2Fwiki%2FCommonJS\" rel=\"nofollow noopener\" target=\"_blank\">CommonJS</a>¬†<em>(CJS)¬†</em>variant, is a big reason for Node‚Äôs popularity, but CJS also complicates Node‚Äôs future ESM support. As a refresher, let‚Äôs look at an example of both module syntaxes.</p>\n<p>CJS:</p>\n<pre class=\"brush: jscript; title: ; notranslate\">const a = require(&quot;./a&quot;)\nmodule.exports = { a, b: 2 }</pre>\n<p>ESM:</p>\n<pre class=\"brush: jscript; title: ; notranslate\">import a from &quot;./a&quot;\nexport default { a, b: 2 }</pre>\n<p><em>Note: For more in-depth comparisons see¬†</em><a href=\"https://medium.com/r/?url=https%3A%2F%2Ftwitter.com%2Fnzgb\" rel=\"nofollow noopener\" target=\"_blank\"><em>Nicol√°s Bevacqua‚Äôs</em></a><em>¬†excellent¬†</em><a href=\"https://medium.com/r/?url=https%3A%2F%2Fponyfoo.com%2Farticles%2Fes6-modules-in-depth%23the-es6-module-system\" rel=\"nofollow noopener\" target=\"_blank\"><em>post</em></a><em>.</em></p>\n<p>Because CJS is not compatible with ESM, a distinction must be made. After much discussion, Node has¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fnodejs%2Fnode-eps%2Fblob%2Fmaster%2F002-es-modules.md%2332-determining-if-source-is-an-es-module\" rel=\"nofollow noopener\" target=\"_blank\">settled on</a>¬†using the ‚Äú.mjs‚Äù¬†<em>(modular JavaScript)¬†</em>file extension to signal the ‚Äúmodule‚Äù parse goal. Node has a history of processing resources by file extension. For example, if you¬†<code>require</code>¬†a¬†<code>.json</code>file, Node will happily load and¬†<code>JSON.parse</code>¬†the result.</p>\n<p>ESM support is slated to land, unflagged, in Node v10 around¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fnodejs%2FLTS\" rel=\"nofollow noopener\" target=\"_blank\"><em>April 2018</em></a><em>.¬†</em>This¬†puts developers, esp. package authors, in a tough spot. They could choose to:</p>\n<ul>\n<li>Go all in, shipping only ESM, and alienate users of older Node versions</li>\n<li>Wait until Jan 1, 2020, the day after¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fnodejs%2FLTS\" rel=\"nofollow noopener\" target=\"_blank\">Node 8 support ends</a>, to go all in</li>\n<li>Ship both transpiled CJS and ESM sources, inflating package size and shouldering the responsibility for ensuring 1:1 behavior</li>\n</ul>\n<p>None of those choices seem super appealing. The ecosystem needs something that meets it where it is to span the CJS to ESM gap.</p>\n<p><a href=\"https://twitter.com/sindresorhus/status/861991464858812416\"><img alt=\"Screen capture of tweet from @sindresorhus: &quot;The strength of Node.js has always been in the community and user-land packages.&quot;\" class=\"aligncenter wp-image-21286 size-full\" height=\"215\" src=\"https://winblogs.azureedge.net/win/2017/08/c13c4219b4234e7b665157709bcd2d89.png\" width=\"510\" /></a></p>\n<figure></figure>\n<h1>Bridge building</h1>\n<p>Enter the¬†<code><a href=\"https://medium.com/r/?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40std%2Fesm\" rel=\"nofollow noopener\" target=\"_blank\">@std/esm</a></code>¬†loader, a user-land package designed to bridge the module gap. Since Node¬†<a href=\"https://medium.com/r/?url=http%3A%2F%2Fnode.green%2F\" rel=\"nofollow noopener\" target=\"_blank\">now supports</a>¬†most ES2015 features,¬†<code><a href=\"https://medium.com/r/?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40std%2Fesm\" rel=\"nofollow noopener\" target=\"_blank\">@std/esm</a></code>¬†is free to focus solely on enabling ESM.</p>\n<p>The loader stays out of your way and tries to be a good neighbor by:</p>\n<ul>\n<li>Not polluting stack traces</li>\n<li>Working with your existing tools like¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fbabeljs.io\" rel=\"noopener nofollow\" target=\"_blank\">Babel</a>¬†and¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fwebpack.js.org%2F\" rel=\"noopener nofollow\" target=\"_blank\">webpack</a>.</li>\n<li>Playing well with other loaders like¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fbabeljs.io%2Fdocs%2Fusage%2Fbabel-register%2F\" rel=\"noopener nofollow\" target=\"_blank\">babel-register</a><br />\n<em>(using¬†.babelrc¬†</em><code><a href=\"https://medium.com/r/?url=https%3A%2F%2Fbabeljs.io%2Fdocs%2Fplugins%2Fpreset-env%2F%23optionsmodules\" rel=\"noopener nofollow\" target=\"_blank\"><em>\"modules\":false</em></a></code><em>)</em></li>\n<li>Only processing files of packages that explicitly opt-in with a¬†<code>@std/esm</code> configuration object or having <code>@std/esm</code> as a dependency, dev dependency, or peer dependency</li>\n<li>Supporting versioning<br />\n<em>(i.e. package ‚ÄúA‚Äù can depend on one version of¬†</em><code><em>@std/esm</em></code><em>¬†and package ‚ÄúB‚Äù on another)</em></li>\n</ul>\n<p>Unlike existing ESM solutions which require shipping transpiled CJS,¬†<code><a href=\"https://medium.com/r/?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40std%2Fesm\" rel=\"nofollow noopener\" target=\"_blank\">@std/esm</a></code>¬†performs minimal source transformations on demand, processing and caching files at runtime. Processing files at runtime has a number of advantages.</p>\n<ul>\n<li>Only process what is used, when it‚Äôs used</li>\n<li>The same code is executed in all Node versions</li>\n<li>Features are configurable by module consumers<br />\n<em>(e.g. module ‚ÄúA‚Äù consumes module ‚ÄúC‚Äù with the default</em><code><a href=\"https://medium.com/r/?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40std%2Fesm\" rel=\"nofollow noopener\" target=\"_blank\"><em>@std/esm</em></a></code><em>¬†config while module ‚ÄúB‚Äù consumes module ‚ÄúC‚Äù with¬†</em><code><em>cjs</em></code><em>¬†compat rules enabled)</em></li>\n<li>More spec-compliance opportunities<br />\n<em>(i.e.¬†</em><code><a href=\"https://medium.com/r/?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40std%2Fesm\" rel=\"nofollow noopener\" target=\"_blank\"><em>@std/esm</em></a></code><em>¬†can enforce¬†</em><a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fnodejs%2Fnode-eps%2Fblob%2Fmaster%2F002-es-modules.md\" rel=\"nofollow noopener\" target=\"_blank\"><em>Node‚Äôs ESM rules</em></a><em>¬†for environment variables, error codes, path protocol and resolution, etc.)</em></li>\n</ul>\n<h1>Standard features</h1>\n<p>Defaults are important. The¬†<code><a href=\"https://medium.com/r/?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40std%2Fesm\" rel=\"nofollow noopener\" target=\"_blank\">@std/esm</a></code>¬†loader strives to be as spec-compliant as possible while following Node‚Äôs¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fnodejs%2Fnode-eps%2Fblob%2Fmaster%2F002-es-modules.md\" rel=\"nofollow noopener\" target=\"_blank\">planned</a>¬†built-in behaviors. This means, by default, ESM requires the use of the ¬†<code>.mjs</code>¬†extension.</p>\n<p>Out of the box,¬†<code><a href=\"https://medium.com/r/?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40std%2Fesm\" rel=\"nofollow noopener\" target=\"_blank\">@std/esm</a></code>¬†just works, no configuration necessary, and supports:</p>\n<ul>\n<li><code><a href=\"https://ponyfoo.com/articles/es6-modules-in-depth#import\" rel=\"nofollow noopener\" target=\"_blank\">import</a></code> / <code><a href=\"https://ponyfoo.com/articles/es6-modules-in-depth#export\" rel=\"nofollow noopener\" target=\"_blank\">export</a></code></li>\n<li><a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Ftc39%2Fproposal-dynamic-import\" rel=\"nofollow noopener\" target=\"_blank\">Dynamic¬†</a><code><a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Ftc39%2Fproposal-dynamic-import\" rel=\"nofollow noopener\" target=\"_blank\">import()</a></code></li>\n<li><a href=\"https://medium.com/r/?url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FFile_URI_scheme\" rel=\"nofollow noopener\" target=\"_blank\">The file URI scheme</a></li>\n<li><a href=\"https://medium.com/r/?url=https%3A%2F%2Fponyfoo.com%2Farticles%2Fes6-modules-in-depth%23bindings-not-values\" rel=\"nofollow noopener\" target=\"_blank\">Live bindings</a></li>\n<li><a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fnodejs%2Fnode-eps%2Fblob%2Fmaster%2F002-es-modules.md%2332-determining-if-source-is-an-es-module\" rel=\"nofollow noopener\" target=\"_blank\">Loading¬†</a><code><a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fnodejs%2Fnode-eps%2Fblob%2Fmaster%2F002-es-modules.md%2332-determining-if-source-is-an-es-module\" rel=\"nofollow noopener\" target=\"_blank\">.mjs</a></code><a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fnodejs%2Fnode-eps%2Fblob%2Fmaster%2F002-es-modules.md%2332-determining-if-source-is-an-es-module\" rel=\"nofollow noopener\" target=\"_blank\">¬†files as ESM</a></li>\n</ul>\n<h1><strong>Unlockables</strong></h1>\n<p>Developers have strong opinions on just about everything. To accommodate, <code>@std/esm</code>¬†allows¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fstandard-things%2Fesm%23unlockables\" rel=\"nofollow noopener\" target=\"_blank\">unlocking extra features</a>¬†with the¬†<code>\"@std/esm\"</code>¬†package.json field. Options include:</p>\n<ul>\n<li>Enabling unambiguous module support¬†<em>(i.e. files with at least an¬†</em><code><em>import</em></code><em>,¬†</em><code><em>export</em></code><em>, or¬†</em><code><em>\"use module\"</em></code><em>¬†pragma are treated as ESM)</em></li>\n<li>¬†Supporting¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fponyfoo.com%2Farticles%2Fes6-modules-in-depth%23importing-named-exports\" rel=\"nofollow noopener\" target=\"_blank\">named exports</a>¬†of CJS modules</li>\n<li>Top-level¬†<code>await</code>¬†in main modules</li>\n<li>Loading gzipped modules</li>\n</ul>\n<h1>Performance</h1>\n<p>Before I continue, let me qualify the following section:</p>\n<p><strong><em>It‚Äôs still super early, mileage may vary, and results may be hand wavey!</em></strong></p>\n<p>Testing was done using Node 9 compiled from¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fnodejs%2Fnode%2Fpull%2F14369\" rel=\"nofollow noopener\" target=\"_blank\">PR #14369</a>, which enables built-in ESM support. I measured the¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FTime_%28Unix%29\" rel=\"nofollow noopener\" target=\"_blank\">time</a>¬†taken to load the 643 modules of¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Flodash-es\" rel=\"noopener nofollow\" target=\"_blank\">lodash-es</a>, converted to¬†<code>.mjs</code>, against a baseline run loading nothing. Keep in mind the¬†<code><a href=\"https://medium.com/r/?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40std%2Fesm\" rel=\"nofollow noopener\" target=\"_blank\">@std/esm</a></code>¬†cache is good for the lifetime of the unmodified file. Ideally, that means you‚Äôll only have a single non-cached load in production.</p>\n<ul>\n<li>Loading CJS equivs was ~0.28 milliseconds per module</li>\n<li>Loading built-in ESM was ~0.51 milliseconds per module</li>\n<li>First¬†<code><a href=\"https://medium.com/r/?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40std%2Fesm\" rel=\"nofollow noopener\" target=\"_blank\">@std/esm</a></code>¬†no cache run<em>¬†</em>was ~1.6 milliseconds per module</li>\n<li>Secondary¬†<code><a href=\"https://medium.com/r/?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40std%2Fesm\" rel=\"nofollow noopener\" target=\"_blank\">@std/esm</a></code>¬†cached runs were ~0.54 milliseconds per module</li>\n</ul>\n<p>Initial results look very promising, with cached¬†<code><a href=\"https://medium.com/r/?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40std%2Fesm\" rel=\"nofollow noopener\" target=\"_blank\">@std/esm</a></code>¬†loads achieving near built-in performance! I‚Äôm sure, with your help, parse and runtime performance will continue to improve.</p>\n<h1>Getting started</h1>\n<ol>\n<li>Run¬†<code>npm i --save @std/esm</code>¬†in your app or package directory.</li>\n<li>Call¬†<code>require(\"@std/esm\")</code>¬†before importing ES modules.</li>\n</ol>\n<p><em>index.js:</em></p>\n<pre>require(\"@std/esm\")\nmodule.exports = require(\"./main.mjs\").default</pre>\n<p>For package authors with sub modules:</p>\n<pre>// Have \"foo\" require only \"<code>@std/esm\".</code> require(\"foo\") // Sub modules work! const bar = require(\"foo/bar\").default</pre>\n<p>Enable ESM in the Node CLI by loading¬†<code><a href=\"https://medium.com/r/?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40std%2Fesm\" rel=\"nofollow noopener\" target=\"_blank\">@std/esm</a></code>¬†with¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fnodejs.org%2Fapi%2Fcli.html%23cli_r_require_module\" rel=\"nofollow noopener\" target=\"_blank\">the¬†</a><code><a href=\"https://medium.com/r/?url=https%3A%2F%2Fnodejs.org%2Fapi%2Fcli.html%23cli_r_require_module\" rel=\"nofollow noopener\" target=\"_blank\">-r</a></code><a href=\"https://medium.com/r/?url=https%3A%2F%2Fnodejs.org%2Fapi%2Fcli.html%23cli_r_require_module\" rel=\"nofollow noopener\" target=\"_blank\">¬†option</a>:</p>\n<pre>node -r @std/esm file.mjs</pre>\n<p>Enable ESM in the Node REPL by loading¬†<code><a href=\"https://medium.com/r/?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40std%2Fesm\" rel=\"nofollow noopener\" target=\"_blank\">@std/esm</a></code>¬†upon entering:</p>\n<pre>$ node\n> require(\"@std/esm\")\n@std/esm enabled\n> import p from \"path\"\nundefined\n> p.join(\"hello\", \"world\")\n'hello/world'</pre>\n<h1>Meteor‚Äôs might</h1>\n<p>The¬†<code><a href=\"https://medium.com/r/?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40std%2Fesm\" rel=\"nofollow noopener\" target=\"_blank\">@std/esm</a></code>¬†loader wouldn‚Äôt exist without¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fbenjamn\" rel=\"noopener nofollow\" target=\"_blank\">Ben Newman</a>, creator of the¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fbenjamn%2Freify\" rel=\"noopener nofollow\" target=\"_blank\">Reify</a>¬†compiler from which¬†<code><a href=\"https://medium.com/r/?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40std%2Fesm\" rel=\"nofollow noopener\" target=\"_blank\">@std/esm</a></code>¬†is forked. He‚Äôs proven the loader implementation¬†<a href=\"https://medium.com/@benjamn/70425fa45d81\" rel=\"noopener\" target=\"_blank\">in production at Meteor</a>, since May 2016, in tens of thousands of Meteor apps!</p>\n<h1>All green¬†thumbs</h1>\n<p>Even though¬†<code><a href=\"https://medium.com/r/?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40std%2Fesm\" rel=\"nofollow noopener\" target=\"_blank\">@std/esm</a></code>¬†has just been released, it‚Äôs already had a positive impact on several related projects:</p>\n<ul>\n<li>Fixing Acorn‚Äôs¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fternjs%2Facorn%2Fissues%2F574\" rel=\"nofollow noopener\" target=\"_blank\">strict mode pragma detection</a>¬†and¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fternjs%2Facorn%2Fpull%2F533\" rel=\"nofollow noopener\" target=\"_blank\">aligning parser APIs</a></li>\n<li>Improving dynamic import support of¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fbabel%2Fbabylon%2Fissues%2F527\" rel=\"nofollow noopener\" target=\"_blank\">Babel</a>¬†and¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fkesne%2Facorn-dynamic-import%2Fissues%2F7\" rel=\"nofollow noopener\" target=\"_blank\">Acorn plugin</a><br />\n<em>(the dynamic import Acorn plugin is used by webpack for code splitting)</em></li>\n<li>Improving <a href=\"https://github.com/Microsoft/ChakraCore/issues/3505\">property iteration order</a> in ChakraCore</li>\n<li>Improving the parse, load time, and spec compliance of Reify</li>\n<li>Inspiring a fast¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2FRReverser%2Fesmod\" rel=\"noopener nofollow\" target=\"_blank\">top-level parser</a>¬†proof of concept</li>\n<li>Spurred championing of¬†<code><a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Ftc39%2Fproposal-export-ns-from\" rel=\"nofollow noopener\" target=\"_blank\">export * as ns from \"mod\"</a></code>¬†and¬†<code><a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Ftc39%2Fproposal-export-default-from\" rel=\"nofollow noopener\" target=\"_blank\">export default from \"mod\"</a></code>¬†proposals</li>\n</ul>\n<h1>What‚Äôs next</h1>\n<p>Like many developers, I want ES modules yesterday. I plan to use¬†<code><a href=\"https://medium.com/r/?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40std%2Fesm\" rel=\"noopener nofollow\" target=\"_blank\">@std/esm</a></code>¬†in Lodash v5 to not only transition to ESM but also leverage features like gzip module support to greatly reduce its package size.</p>\n<p>The¬†<code><a href=\"https://medium.com/r/?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40std%2Fesm\" rel=\"nofollow noopener\" target=\"_blank\">@std/esm</a></code>¬†loader is¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fstandard-things%2Fesm\" rel=\"noopener nofollow\" target=\"_blank\">available on GitHub</a>. It‚Äôs my hope that others are as excited and as energized as I am. ES modules are here! This is just the start. What‚Äôs next is up to you. I look forward to seeing where you take it.</p>\n<h1>Final Thought</h1>\n<p>While this is not a Microsoft release, we‚Äôre proud to have a growing number of core contributors to fundamental JavaScript frameworks, libraries, and utilities at Microsoft. Contributors like¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Ftwitter.com%2Fmaggiepint\" rel=\"noopener nofollow\" target=\"_blank\">Maggie Pint</a>¬†of¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fmomentjs.com%2F\" rel=\"noopener nofollow\" target=\"_blank\">Moment.js</a>, <a href=\"https://twitter.com/mattpodwysocki\">Matthew Podwysocki</a> of <a href=\"http://reactivex.io/\">ReactiveX</a>, <a href=\"https://medium.com/r/?url=https%3A%2F%2Ftwitter.com%2Fnolanlawson\" rel=\"noopener nofollow\" target=\"_blank\">Nolan Lawson</a>¬†of¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fpouchdb.com%2F\" rel=\"noopener nofollow\" target=\"_blank\">PouchDB</a>,¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Ftwitter.com%2Fpatrickkettner\" rel=\"noopener nofollow\" target=\"_blank\">Patrick Kettner</a>¬†of¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fmodernizr.com%2F\" rel=\"noopener nofollow\" target=\"_blank\">Modernizr</a>,¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Ftwitter.com%2FEisenbergEffect\" rel=\"noopener nofollow\" target=\"_blank\">Rob Eisenberg</a>¬†of¬†<a href=\"https://medium.com/r/?url=http%3A%2F%2Faurelia.io%2F\" rel=\"noopener nofollow\" target=\"_blank\">Aurelia</a>,¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Ftwitter.com%2FTheLarkInn\" rel=\"noopener nofollow\" target=\"_blank\">Sean Larkin</a>¬†of¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fwebpack.js.org%2F\" rel=\"noopener nofollow\" target=\"_blank\">webpack</a>, and¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Ftwitter.com%2Ftomdale\" rel=\"noopener nofollow\" target=\"_blank\">Tom Dale</a>¬†of¬†<a href=\"https://medium.com/r/?url=https%3A%2F%2Fwww.emberjs.com%2F\" rel=\"noopener nofollow\" target=\"_blank\">Ember</a>, to name a few, who in addition to their roles at Microsoft, are helping shape the future of JavaScript and the web at large through standards engagement and ecosystem outreach. I‚Äôm happy to share this news on the Microsoft Edge blog to share our enthusiasm with the community!</p>\n<p>‚Äï <a href=\"https://twitter.com/jdalton\">John-David Dalton</a>, Program Manager, Microsoft Edge</p>\n<p>The post <a href=\"https://blogs.windows.com/msedgedev/2017/08/10/es-modules-node-today/\" rel=\"nofollow\">ES Modules in Node Today!</a> appeared first on <a href=\"https://blogs.windows.com/msedgedev\" rel=\"nofollow\">Microsoft Edge Dev Blog</a>.</p>", "title": "ES Modules in Node Today!", "author_name": "Microsoft Edge Team", "source_type": "rss", "comments_count": 0, "published": "2017-08-10T17:00:00", "link": "https://blogs.windows.com/msedgedev/2017/08/10/es-modules-node-today/", "source_link": "https://blogs.windows.com/msedgedev", "source_title": "Microsoft Edge Dev Blog"}, {"source_name": "Habrahabr", "description": "–í –Ω–∞—à–µ–º –ø—Ä–æ—à–ª–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ, –ø–æ—Å–≤—è—â–µ–Ω–Ω–æ–º—É –ø–µ—Ä–µ–≤–æ–¥–∞–º, –º—ã —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–ª–∏ —Ç–µ–º—É –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –°–µ–≥–æ–¥–Ω—è —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –≤–µ–±–µ –∏ –Ω–∞ —á—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ.<br />\n<br />\n<h3>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Å—å–º–∞</h3><br />\n–ù–∞—á–Ω–µ–º —Å –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ. –°–µ–≥–æ–¥–Ω—è –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç—Ä–∏ —Ç–∏–ø–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏—Å—Ö–æ–¥—è –∏–∑ –ø–∏—Å—å–º–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–¥–∏—Ü–∏–π: –∑–∞–ø–∞–¥–Ω—ã–π (–ª–µ–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π), –±–ª–∏–∂–Ω–µ–≤–æ—Å—Ç–æ—á–Ω—ã–π (–ø—Ä–∞–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π) –∏ —Å–º–µ—à–∞–Ω–Ω—ã–π. <br />\n<br />\n–ï—Å–ª–∏ –≤—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç–µ, –≤ –∫–∞–∫—É—é —Å—Ç–µ–ø—å –º—ã —É–≤–æ–¥–∏–º —Ä–∞–∑–≥–æ–≤–æ—Ä, —Ç–æ –≤–æ—Ç –≤–∞–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∞—Ä–∞–±—Å–∫–æ–π Windows —Å –ø—Ä–∞–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º:<br />\n<br />\n<img alt=\"image\" src=\"https://habrastorage.org/getpro/habr/post_images/5bc/6a5/6cb/5bc6a56cb68b4f77d203600350ebc214.jpg\" /><br />\n<br />\n–ê–∑–∏–∞—Ç—Å–∫–∏–π –≤–µ–± —Å–æ —Å–≤–æ–∏–º–∏ –∏–¥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º–∏ —è–∑—ã–∫–∞–º–∏ –Ω–µ —Å—Ç–∞–ª –≤—ã–¥—É–º—ã–≤–∞—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥ –∏ –≤–Ω–µ–¥—Ä—è—Ç—å –∂–µ—Å—Ç–∫—É—é –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é (—Ö–æ—Ç—è —Ñ–æ—Ä–º–∞–ª—å–Ω–æ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç), –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –Ω–æ—Ä–º—ã –∏–µ—Ä–æ–≥–ª–∏—Ñ–∏—á–µ—Å–∫–æ–π –ø–∏—Å—å–º–µ–Ω–Ω–æ—Å—Ç–∏, –∞ –ø—Ä–æ—Å—Ç–æ –≤–æ –º–Ω–æ–≥–∏—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö –ø—Ä–∏–Ω—è–ª –∫–∞–∫ –¥–∞–Ω–Ω–æ—Å—Ç—å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é. –ù–æ —Ç—É—Ç –µ—Å—Ç—å –æ–¥–∏–Ω –±–æ–ª—å—à–æ–π –ø–æ–¥–≤–æ–¥–Ω—ã–π –∫–∞–º–µ–Ω—å: –∫–∞–∫ –º–∏–Ω–∏–º—É–º –∫–∏—Ç–∞–π—Ü—ã –∏ —è–ø–æ–Ω—Ü—ã –º–æ–≥—É—Ç –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –ø–∏—Å—å–º–æ –≤ –ª—é–±—É—é —É–¥–æ–±–Ω—É—é –¥–ª—è –Ω–∏—Ö —Å—Ç–æ—Ä–æ–Ω—É. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∏—Ç–∞–π—Å–∫–∏–µ –≥–∞–∑–µ—Ç—ã –≥—Ä–µ—à–∞—Ç —Ç–µ–º, —á—Ç–æ –Ω–∞ –æ–¥–Ω–æ–º —Ä–∞–∑–≤–æ—Ä–æ—Ç–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–≤–º–µ—â–µ–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Å–ª–µ–≤–∞ –Ω–∞ –ø—Ä–∞–≤–æ, —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑ (—Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ) –∏ —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑ (—Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ). –ö–∞–∫ –∫ —ç—Ç–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è?<br />\n <br />\n–ù—É, —ç—Ç–æ –∞–∑–∏–∞—Ç—ã. <br /> <a href=\"https://habrahabr.ru/post/335200/#habracut\">–ß–∏—Ç–∞—Ç—å –¥–∞–ª—å—à–µ ‚Üí</a>", "tags": "habr,perf,tech,web", "source_link": "https://habrahabr.ru/hub/client_side_optimization/posts/all/", "title": "–û —á–µ–º –≤—Å–µ–≥–¥–∞ —Å—Ç–æ–∏—Ç –ø–æ–º–Ω–∏—Ç—å –ø—Ä–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–µ–±-—Å–∞–π—Ç–∞, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –Ω–µ –±—ã–ª–æ —Å—Ç—ã–¥–Ω–æ", "author_name": "Lokalise", "source_type": "rss", "link": "https://habrahabr.ru/post/335200/", "published": "2017-08-10T16:53:00", "source_title": "–•–∞–±—Ä–∞—Ö–∞–±—Ä / –í—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–¥—Ä—è–¥ / –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"}, {"source_name": "WebkitBlog", "description": "Safari Technology Preview Release 37 is now available for download for macOS Sierra and betas of macOS High Sierra.", "tags": "safari technology preview,browsers,safari,tech,web,webkit", "text": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 37 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Sierra and betas of macOS High Sierra. If you already have Safari Technology Preview installed, you can update from the Mac App Store‚Äôs Updates tab. This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=219567&amp;rev=220128&amp;limit=999\">219567-220128</a>.</p>\n<h3>Web API</h3>\n<ul>\n<li>Added initial support for <code>navigator.sendBeacon</code> behind an experimental feature flag (<a href=\"https://trac.webkit.org/changeset/220121/webkit/\">r220121</a>)</li>\n<li>Implemented <code>document.elementsFromPoint</code>  (<a href=\"https://trac.webkit.org/changeset/219961/webkit/\">r219961</a>)</li>\n<li>Made cross-origin properties enumerable (<a href=\"https://trac.webkit.org/changeset/219659/webkit/\">r219659</a>)</li>\n<li>Fixed dispatching the click event to the parent when the child target stops hit testing after <code>mouseDown</code> (<a href=\"https://trac.webkit.org/changeset/219568/webkit/\">r219568</a>)</li>\n<li>Moved <code>DOMException</code> properties to the prototype and changed to use <code>Error.prototype.toString()</code> (<a href=\"https://trac.webkit.org/changeset/219607/webkit/\">r219607</a>, <a href=\"https://trac.webkit.org/changeset/219663/webkit/\">r219663</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Added <code>finally</code> method support to <code>Promise</code> (<a href=\"https://trac.webkit.org/changeset/219989/webkit/\">r219989</a>)</li>\n<li>Added support for optional <code>catch</code> binding (<a href=\"https://trac.webkit.org/changeset/220068/webkit/\">r220068</a>)</li>\n</ul>\n<h3>WebAssembly</h3>\n<ul>\n<li>Reduced the size of generated binaries (<a href=\"https://trac.webkit.org/changeset/219899/webkit/\">r219899</a>)</li>\n</ul>\n<h3>Apple Pay</h3>\n<ul>\n<li>Added <code>\"carteBancaire\"</code> as a supported payment network (<a href=\"https://trac.webkit.org/changeset/219896/webkit/\">r219896</a>)</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Aligned quirky number parsing with other browsers (<a href=\"https://trac.webkit.org/changeset/219642/webkit/\">r219642</a>)</li>\n</ul>\n<h3>Web Inspector</h3>\n<ul>\n<li>Added a context menu item to the Elements tab for taking a screenshot of a node (<a href=\"https://trac.webkit.org/changeset/219870/webkit/\">r219870</a>)</li>\n<li>The debugger now captures async stack traces when web content calls <code>addEventListener</code> (<a href=\"https://trac.webkit.org/changeset/220036/webkit/\">r220036</a>)</li>\n<li>Prevented outputting &#8220;No message&#8221; for multi-value logs like <code>console.log(x, y)</code> (<a href=\"https://trac.webkit.org/changeset/219900/webkit/\">r219900</a>)</li>\n<li>Fixed warnings about <code>console.assert</code> lines without semicolons (<a href=\"https://trac.webkit.org/changeset/219894/webkit/\">r219894</a>)</li>\n<li>Inlined multiple console log values if they are simple (<a href=\"https://trac.webkit.org/changeset/219893/webkit/\">r219893</a>)</li>\n<li>Fixed <code>inspect(aFunction)</code> to jump to the function definition (<a href=\"https://trac.webkit.org/changeset/219749/webkit/\">r219749</a>)</li>\n<li>Fixed the page overlay highlight to fade out when a page is constantly updating (<a href=\"https://trac.webkit.org/changeset/219596/webkit/\">r219596</a>)</li>\n<li>Fixed some controls overlaying the header in the Settings tab (<a href=\"https://trac.webkit.org/changeset/219851/webkit/\">r219851</a>)</li>\n</ul>\n<h3>WebDriver</h3>\n<ul>\n<li>Fixed an issue where implicit navigations didn&#8217;t cause a browsing context switch (<a href=\"https://trac.webkit.org/changeset/219723/webkit/\">r219723</a>)</li>\n<li>Fixed link and partial link queries if the text link contains trailing or leading whitespaces (<a href=\"https://trac.webkit.org/changeset/219604/webkit/\">r219604</a>)</li>\n<li>Fixed an issue that caused some script evaluations to be attributed to the wrong frame (<a href=\"https://trac.webkit.org/changeset/219649/webkit/\">r219649</a>)</li>\n</ul>\n<h3>Rendering</h3>\n<ul>\n<li>Changed to disable async image decoding for large images after the first time a tile is painted (<a href=\"https://trac.webkit.org/changeset/219876/webkit/\">r219876</a>)</li>\n<li>Fixed the minimum font size preference to affect absolute <code>line-height</code> values and prevent text lines from overlapping (<a href=\"https://trac.webkit.org/changeset/219665/webkit/\">r219665</a>)</li>\n<li>Fixed getting round-trip <code>stroke-width</code> styles causing text to gain a stroke (<a href=\"https://trac.webkit.org/changeset/219755/webkit/\">r219755</a>)</li>\n<li>Fixed Reeder&#8217;s default font to correctly use San Francisco (<a href=\"https://trac.webkit.org/changeset/220009/webkit/\">r220009</a>)</li>\n</ul>\n<h3>Accessibility</h3>\n<ul>\n<li>Fixed zoom to follow the keyboard insertion point (<a href=\"https://trac.webkit.org/changeset/219987/webkit/\">r219987</a>)</li>\n<li>Added a background color for the focus state of the icon buttons in the media controls (<a href=\"https://trac.webkit.org/changeset/220041/webkit/\">r220041</a>)</li>\n<li>Fixed the incorrect range from index and length on <code>&lt;p&gt;</code> tags with <code>contenteditable</code> (<a href=\"https://trac.webkit.org/changeset/219949/webkit/\">r219949</a>)</li>\n<li>Changed to dispatch <code>accessibilityPerformPressAction</code> asynchronously on macOS (<a href=\"https://trac.webkit.org/changeset/219906/webkit/\">r219906</a>)</li>\n<li>Fixed silent VoiceOver or skipping over time values on the media player (<a href=\"https://trac.webkit.org/changeset/219983/webkit/\">r219983</a>)</li>\n<li>Fixed the web page getting reloaded when a node is labelling multiple child nodes (<a href=\"https://trac.webkit.org/changeset/219661/webkit/\">r219661</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Fixed media controls missing content in fullscreen when the document has a scroll offset (<a href=\"https://trac.webkit.org/changeset/219645/webkit/\">r219645</a>)</li>\n<li>Fixed the mouse pointer not hiding during fullscreen playback (<a href=\"https://trac.webkit.org/changeset/219625/webkit/\">r219625</a>)</li>\n<li>Fixed pressing the Escape key to not be a valid user gesture to enter fullscreen (<a href=\"https://trac.webkit.org/changeset/219950/webkit/\">r219950</a>)</li>\n</ul>", "title": "Release Notes for Safari Technology Preview 37", "author_name": "Jon Davis", "source_type": "rss", "link": "https://webkit.org/blog/7862/release-notes-for-safari-technology-preview-37/", "source_link": "https://webkit.org", "source_title": "WebKit", "published": "2017-08-09T17:00:00"}, {"source_name": "2ality", "description": "<p>The ECMAScript proposal ‚Äú<a href=\"https://github.com/tc39/proposal-class-fields\">Class Fields</a>‚Äù by Daniel Ehrenberg and Jeff Morrison is currently at stage 3. This blog post explains how it works.</p>\n\n<div><a href=\"http://2ality.com/2017/07/class-fields.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/VjUlx8--ZO4\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "ES proposal: class fields", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/07/class-fields.html", "author_link": "http://2ality.com/", "published": "2017-08-09T11:36:00", "source_title": "2ality feed"}, {"source_name": "MozillaHacks", "description": "Firefox on Windows is the first desktop browser to support the new WebVR standard (and macOS support is ready now in Nightly!) You'll find many new features for developers, as well as underlying platform changes that make Firefox and the Web faster and more secure.", "tags": "mozilla,services,tech", "text": "<div>\n<div style=\"padding-bottom: 56%;\"></div>\n</div>\n<h2><b>WebVR Support on Desktop</b></h2>\n<p>Firefox on Windows is the <a href=\"https://hacks.mozilla.org/2017/08/webvr-for-all-windows-users/\">first desktop browser</a> to support the new <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API\">WebVR</a> standard (and macOS support is in <a href=\"https://nightly.mozilla.org/\">Nightly</a>!). As the originators of WebVR, Mozilla wanted it to embody the same principles of standardization, openness, and interoperability that are hallmarks of the Web, which is why WebVR works on any device: Vive, Rift, and beyond.</p>\n<p>To learn more, check out <a href=\"https://vr.mozilla.org/\">vr.mozilla.org</a>, or dive into <a href=\"https://aframe.io/\">A-Frame</a>, an open source framework for building immersive VR experiences on the Web.</p>\n<h2><b>New Features for Developers</b></h2>\n<p>Firefox 55 supports several new ES2017/2018 features, including <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions#Async_generator_methods\">async generators</a> and the rest/spread (&#8220;<code>...</code>&#8220;) operator for objects:</p>\n<pre><code class=\"lang-javascript\">let a = { foo: 1, bar: 2 };\nlet b = { bar: 'two' };\nlet c = { ...a, ...b }; // { foo: 1, bar: 'two' };</code></pre>\n<p>MDN has great documentation on using <code>...</code> with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator#Spread_in_object_literals\">object literals</a> or for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">destructuring assignment</a>, and the <a href=\"https://github.com/tc39/proposal-object-rest-spread\">TC39 proposal</a> also provides a concise overview of this feature.</p>\n<p>Over in DevTools, the Network panel now supports filtering results with queries like &#8220;<code>status-code:200</code>&#8220;.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/08/devtools-network-filter.png\"><img alt=\"Screenshot showing the Firefox DevTools' Network panel with a filter on status-code:304, and a pop-up showing the new columns that are available.\" class=\"aligncenter wp-image-31164 size-large\" height=\"298\" src=\"https://hacks.mozilla.org/files/2017/08/devtools-network-filter-500x298.png\" width=\"500\" /></a></p>\n<p>There are also new, optional columns for cookies, protocol, scheme, and more that can be hidden or shown inside the Network panel, as seen in the screenshot above.</p>\n<h2><b>Making Firefox Faster</b></h2>\n<p>We&#8217;ve implemented several new features to keep Firefox itself running quickly:</p>\n<ul>\n<li>New installations of Firefox on Windows will now default to the more stable and secure 64-bit version. Existing installations will upgrade to 64-bit with our next release, Firefox 56.</li>\n<li>Restoring a session or restarting Firefox with many tabs open is now an order of magnitude faster. For reasons unknown, <a href=\"https://twitter.com/dietrich\">Dietrich Ayala</a> has a Firefox profile with <b>1,691 open tabs</b>. With Firefox 54, starting up his instance of Firefox took 300 seconds and 2 GB of memory. Today, with Firefox 55, it takes just <a href=\"https://metafluff.com/2017/07/21/i-am-a-tab-hoarder/\">15 seconds and 0.5 GB</a> of memory. This improvement is primarily thanks to the tireless work of an external contributor, Kevin Jones, who virtually eliminated the fixed costs associated with restoring tabs.</li>\n<li>Users can now <a href=\"https://support.mozilla.org/kb/performance-settings\">adjust Firefox&#8217;s number of content processes</a> from within Preferences. Multiple content processes <a href=\"https://hacks.mozilla.org/2017/06/firefox-54-e10s-webextension-apis-css-clip-path/\">debuted in Firefox 54</a>, and allow Firefox to take better advantage of modern, multi-core CPUs, while still being respectful of RAM utilization.</li>\n<li>Firefox now uses its built-in <a href=\"https://developer.mozilla.org/en-US/Firefox/Privacy/Tracking_Protection\">Tracking Protection</a> lists to identify and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Throttling_of_tracking_timeout_scripts\">throttle tracking scripts</a> running in background pages. After a short grace period, Firefox will increase the minimum <code>setInterval</code> or <code>setTimeout</code> for callbacks scheduled by tracking scripts to <b>10 seconds</b> while the tab is in the background. This is in addition to our usual 1 second throttling for background tabs, and helps ensure that unused tabs can&#8217;t invisibly ruin performance or battery life. Of course, tabs that are playing audio or video are not throttled, so music in a background tab won&#8217;t stutter.</li>\n<li>With the announcement of <a href=\"https://blogs.adobe.com/conversations/2017/07/adobe-flash-update.html\">Flash&#8217;s end of life</a>, and in coordination with <a href=\"https://blogs.windows.com/msedgedev/2017/07/25/flash-on-windows-timeline/\">Microsoft</a> and <a href=\"https://www.blog.google/products/chrome/saying-goodbye-flash-chrome/\">Google</a>, Firefox 55 now requires users to explicitly <a href=\"https://blog.mozilla.org/futurereleases/2017/07/25/firefox-roadmap-flash-end-life/\">click to activate Flash</a> on web pages as we work together toward completely removing Flash from the Web platform in 2020.</li>\n</ul>\n<h2><b>Making the Web Faster</b></h2>\n<p>Firefox 55 introduces several new low-level capabilities that help improve the performance of demanding web applications:</p>\n<ul>\n<li>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\">IntersectionObserver</a> API allows the browser to respond to the visibility of elements on a page far more efficiently and reliably than existing hacks with polling or invisible Flash movies. You can read more in <a href=\"https://hacks.mozilla.org/2017/08/intersection-observer-comes-to-firefox/\">my article on IntersectionObserver</a> from last week.</li>\n</ul>\n<p>See the Pen <a href=\"https://codepen.io/callahad/pen/YxXpyN/\">Hello IntersectionObserver</a> by Dan Callahan (<a href=\"https://codepen.io/callahad\">@callahad</a>) on <a href=\"https://codepen.io\">CodePen</a>.<br />\n</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a> objects are new JavaScript primitives that allow workers to share and simultaneously access the same memory. This finally makes efficient multi-threading a reality on the Web. The only downside? Developers have to care about thread safety, mutexes, etc. when sharing memory, just like in any other multi-threaded language. You can learn more about <code>SharedArrayBuffer</code> in <a href=\"https://hacks.mozilla.org/2017/06/a-cartoon-intro-to-arraybuffers-and-sharedarraybuffers/\">this code cartoon introduction</a> and <a href=\"https://hacks.mozilla.org/2016/05/a-taste-of-javascripts-new-parallel-primitives/\" rel=\"noopener\" target=\"_blank\">this explainer article</a> from last year.</li>\n<li>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Background_Tasks_API\">requestIdleCallback()</a> API offers a new way to schedule callbacks whenever the browser has a few extra, unused milliseconds between frames, or whenever a maximum timeout has elapsed. This makes it possible to squeeze work into the margins where the browser would otherwise be idle, and to defer lower priority work while the browser is busy. Using this API requires a bit of finesse, but <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Background_Tasks_API\">MDN has great documentation</a> on how to use <code>requestIdleCallback()</code> effectively.</li>\n</ul>\n<h2><b>Making the Web More Secure</b></h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Geolocation\">Geolocation</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage_API\">Storage</a> join the ranks of powerful APIs like <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\">Service Workers</a> that are only allowed on secure, <code>https://</code> origins. If your site needs a TLS certificate, consider <a href=\"https://letsencrypt.org/\">Let&#8217;s Encrypt</a>: a completely free, automated, and non-profit Certificate Authority.</p>\n<p>Additionally, Firefox 55 will <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1335475\">not allow plug-ins to load from or on non-HTTP/S schemes</a>, such as <code>file:</code>.</p>\n<h2><b>New WebExtension APIs</b></h2>\n<p>WebExtensions can now:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/Add-ons/WebExtensions/manifest.json/chrome_settings_overrides\">Replace the new tab page</a> and modify the browser&#8217;s search engine.</li>\n<li><a href=\"https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/proxy\">Change proxy settings</a> dynamically.</li>\n<li><a href=\"https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/permissions\">Request and inspect permissions</a> that they have been granted.</li>\n<li>Opt-in to the browser&#8217;s native styling via the <code>browser_styles</code> manifest property on sidebars, action menus, and more.</li>\n</ul>\n<h2><b>And more&#8230;</b></h2>\n<p>There are many more changes in the works as we get ready for the <a href=\"https://www.cnet.com/special-reports/mozilla-firefox-fights-back-against-google-chrome/\">next era of Firefox</a> in November. Some users of Firefox 55 will begin seeing our new <a href=\"https://screenshots.firefox.com/\">Firefox Screenshots</a> feature, the Bookmarks / History sidebar can now be docked on either side of the browser, and we just announced three new <a href=\"https://testpilot.firefox.com\">Test Pilot experiments</a>.</p>\n<p>For a complete overview of what&#8217;s new, refer to the official <a href=\"https://www.mozilla.org/en-US/firefox/55.0/releasenotes/\">Release Notes</a>, MDN&#8217;s <a href=\"https://developer.mozilla.org/en-US/Firefox/Releases/55\">Firefox 55 for Developers</a>, and the <a href=\"https://blog.mozilla.org/blog/2017/08/08/webvr-new-speedy-features/\" rel=\"noopener\" target=\"_blank\">Mozilla Blog announcement</a> .</p>", "title": "Firefox 55: first desktop browser to support WebVR", "author_name": "Dan Callahan", "source_type": "rss", "link": "https://hacks.mozilla.org/2017/08/firefox-55-supports-webvr/", "source_link": "https://hacks.mozilla.org", "source_title": "Mozilla Hacks ‚Äì the Web developer blog", "published": "2017-08-08T13:01:00"}, {"source_name": "MozillaHacks", "description": "On August 8, Mozilla will make WebVR available in Firefox for all 64-bit Windows users with an Oculus Rift or HTC VIVE headset.  Since we first announced this feature two months ago, we‚Äôve seen tremendous growth in the tooling, art content, and applications being produced for WebVR.", "tags": "mozilla,services,tech", "text": "<p>With the release of <a href=\"https://www.mozilla.org/en-US/firefox/\">Firefox 55</a> on August 8, Mozilla is pleased to make <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API\">WebVR 1.1</a> available for all 64-bit Windows users with an <a href=\"https://www.oculus.com/rift/\">Oculus Rift</a> or <a href=\"https://www.vive.com/\">HTC VIVE</a> headset. Since we first announced this feature <a href=\"https://blog.mozilla.org/blog/2017/06/01/mozilla-brings-virtual-reality-to-all-firefox-users/\">two months ago</a>, we‚Äôve seen tremendous growth in the tooling, art content, and applications being produced for WebVR &#8211; check out some highlights in this showcase video:</p>\n<p></p>\n<p><a href=\"https://sketchfab.com/\">Sketchfab</a> also just <a href=\"https://blog.sketchfab.com/sketchfab-now-largest-online-repository-gltf-files/\">announced support</a> for exporting their 3D models into the <a href=\"https://www.khronos.org/gltf\">glTF format</a> and have over 100,000 models available for free download under Creative Commons licensing, so it‚Äôs easier to bring high-quality art assets into your WebVR scenes with libraries such <a href=\"https://threejs.org/\">three.js</a> and <a href=\"http://www.babylonjs.com\">Babylon.js</a> and know that they will just work.</p>\n<p>They are also one of the first sites to take advantage of WebVR to make an <a href=\"https://sketchfab.com/models/618ea0209b1045e89b2c6d2b74d0956e?share=93f9cd2e5a714fa7f0ee0d2a9490c3d2a9ea7b1f0cdb3d5d20bc24b57c5918d2\">animated short</a> and highlight the openness of URLs to support <a href=\"https://blog.mozvr.com/link-traversal/\">link traversal</a> to build awesome <a href=\"https://sketchfab.com/vr-launcher?model=c0022acc4f3242e2bcae8043e08df8cc&amp;vr_link_navigation=1\">in-VR experiences</a> within <a href=\"https://sketchfab.com/vr-launcher?model=c0022acc4f3242e2bcae8043e08df8cc&amp;vr_link_navigation=1#collection?id=db3255d0369a4128a491475af0897a43\">web content</a>.</p>\n<p>The growth in numbers of new users having their first experiences with WebVR content has been phenomenal as well. In the last month, we have seen over 13 million uses of the <a href=\"https://aframe.io/\">A-Frame</a> library, started here at Mozilla to make it easier for web developers, designers and people of all backgrounds to create WebVR content.</p>\n<p>We can‚Äôt wait to see what you will <a href=\"http://vr.mozilla.org\"><strong>build with WebVR</strong></a>. Please show off what you‚Äôre doing by tweeting to <a href=\"https://twitter.com/mozillavr\">@MozillaVR</a> or saying hi in the <a href=\"http://webvr-slack.herokuapp.com/\">WebVR Slack</a>.</p>\n<p>Stay tuned for an upcoming A-Frame contest announcement with even more opportunities to learn, experiment, and get feedback!</p>", "title": "WebVR for All Windows Users", "author_name": "Lars Bergstrom", "source_type": "rss", "link": "https://hacks.mozilla.org/2017/08/webvr-for-all-windows-users/", "source_link": "https://hacks.mozilla.org", "source_title": "Mozilla Hacks ‚Äì the Web developer blog", "published": "2017-08-07T14:53:00"}, {"source_name": "Habrahabr", "description": "–ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—É—é —á–∞—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è <b>Red Architecture</b> –ø–æ—Å–≤—è—Ç–∏–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏. –†–∞–¥–∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏ —Å—Ç–æ–∏—Ç —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ <a href=\"https://habrahabr.ru/post/333870/\">–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç</a> –∫–ª–∞—Å—Å–∞ v –Ω–µ–ª—å–∑—è —Å—á–∏—Ç–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ –≤ –Ω—ë–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –æ–¥–Ω–æ–π –∏–∑ –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –∫ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–º–∏–Ω—É–µ–º–æ –ø—Ä–∏—Ö–æ–¥—è—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ real world –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç—å–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ–Ω—Ü–µ–ø—Ü–∏–µ–π Red Architecture <a href=\"https://habrahabr.ru/post/333870/\">–∑–¥–µ—Å—å</a>.<br />\n<br />\n<img alt=\"Red Architecture\" src=\"https://habrastorage.org/web/e20/b7a/567/e20b7a5674cc4abfad5f507f51733956.png\" /><br />\n<br />\n–ó–∞–±–µ–≥–∞—è –≤–ø–µ—Ä—ë–¥ —Å–∫–∞–∂—É, —á—Ç–æ –Ω–∞–º —É–¥–∞—Å—Ç—Å—è —Ä–µ—à–∏—Ç—å –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω–µ –≤—ã—Ö–æ–¥—è –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–ª–∞—Å—Å–∞ v. –ü—Ä–∏—á—ë–º –∏–∑–º–µ–Ω–µ–Ω–∏–π –±—É–¥–µ—Ç –≥–æ—Ä–∞–∑–¥–æ –º–µ–Ω—å—à–µ —á–µ–º –º–æ–≥–ª–æ –ø–æ–∫–∞–∑–∞—Ç—å—Å—è, –∏ –≤ –∏—Ç–æ–≥–µ –∫–æ–¥ –∫–ª–∞—Å—Å–∞ v —Å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ—à—ë–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –Ω–µ–º–Ω–æ–≥–∏–º –±–æ–ª–µ–µ 50 —Å—Ç—Ä–æ–∫! –ü—Ä–∏—á—ë–º —ç—Ç–∏ 50 —Å –Ω–µ–±–æ–ª—å—à–∏–º —Å—Ç—Ä–æ–∫ –±—É–¥—É—Ç –±–æ–ª–µ–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã, —á–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –∫–ª–∞—Å—Å–∞ v, –æ–ø–∏—Å–∞–Ω–Ω—ã–π –≤ <a href=\"https://habrahabr.ru/post/333870/\">–ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏</a>. –ü—Ä–∏ —ç—Ç–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥, —Ä–µ—à–∞—é—â–∏–π –ø—Ä–æ–±–ª–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Ç–æ–∫–æ–≤ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ –ª–∏—à—å 20 —Å—Ç—Ä–æ–∫!<br /> <a href=\"https://habrahabr.ru/post/334840/#habracut\">–ß–∏—Ç–∞—Ç—å –¥–∞–ª—å—à–µ ‚Üí</a>", "tags": "habr,perf,tech,web", "source_link": "https://habrahabr.ru/hub/client_side_optimization/posts/all/", "title": "Red Architecture ‚Äî –∫—Ä–∞—Å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∏ –∑–∞–ø—É—Ç–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º ‚Äî —á–∞—Å—Ç—å 3 (–º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∞–º –≤ –ø–æ–º–æ—â—å)", "author_name": "anagovitsyn", "source_type": "rss", "link": "https://habrahabr.ru/post/334840/", "published": "2017-08-04T10:56:00", "source_title": "–•–∞–±—Ä–∞—Ö–∞–±—Ä / –í—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–¥—Ä—è–¥ / –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"}, {"source_name": "Habrahabr", "description": "–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–Ω–æ–≥–æ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –º–µ–∂–¥—É —Å–æ–±–æ–π: –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Ç—Ä–µ–±—É–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –∑–Ω–∞–Ω–∏—è —è–∑—ã–∫–∞, –Ω–æ –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ —É—Å–∏–ª–∏—è. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ—Ä–æ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–æ–∏—Ç –∑–∞–¥–∞—á–∞ —á–µ—Ç–∫–æ –∏–∑–ª–æ–∂–∏—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏ –Ω–∞, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, —Ä–æ–¥–Ω–æ–º –¥–ª—è –Ω–µ–≥–æ —è–∑—ã–∫–µ, —Ç–æ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –≤ —Ä–∞–≤–Ω–æ–π —Å—Ç–µ–ø–µ–Ω–∏ –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ —Ö–æ—Ç–µ–ª —Å–∫–∞–∑–∞—Ç—å –∞–≤—Ç–æ—Ä ‚Äî –∏ —É–º–µ—Ç—å –ø–µ—Ä–µ—Å–∫–∞–∑–∞—Ç—å —ç—Ç–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–æ—Ä–º–∞–º–∏ —Ü–µ–ª–µ–≤–æ–≥–æ —è–∑—ã–∫–∞ —Ç–∞–∫, —á—Ç–æ–±—ã —ç—Ç–æ –±—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ —á–∏—Ç–∞—Ç—å. <br />\n<br />\n<div style=\"text-align: center;\"><img src=\"https://habrastorage.org/web/56f/446/fae/56f446fae7cb4b0da328fb53c877df28.png\" /></div><font color=\"#808080\"><em>–¢–∏–ø–∏—á–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–∞</em></font><br />\n<br />\n–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä —Å–∏–º–±–∏–æ–∑–∞ –∑–Ω–∞–Ω–∏—è —è–∑—ã–∫–∞ –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∞–ª–∞ –≤ —Ö–æ–¥–µ –ø–µ—Ä–µ–≤–æ–¥–∞ ‚Äî –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—Ä–∞—Ç—å–µ–≤ –°—Ç—Ä—É–≥–∞—Ü–∫–∏—Ö. –ö—Ä–æ–º–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π, –æ–Ω–∏ –æ–±–∞ —Ä–∞–±–æ—Ç–∞–ª–∏ –∫–∞–∫ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∏ —è–ø–æ–Ω—Å–∫–æ–≥–æ –ø–æ–¥ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞–º–∏ –°. –ë–µ—Ä–µ–∂–∫–æ–≤, –°. –ü–æ–±–µ–¥–∏–Ω –∏ –°. –í–∏—Ç–∏–Ω. –ò –µ—Å–ª–∏ –≤—ã —á–∏—Ç–∞–ª–∏ —Å–æ–≤–µ—Ç—Å–∫–∏–µ –∏–∑–¥–∞–Ω–∏—è –ê–∑–∏–º–æ–≤–∞ ¬´–ö–∞–∫ –∏–º –±—ã–ª–æ –≤–µ—Å–µ–ª–æ¬ª, –ù–æ—Ä—Ç–æ–Ω ¬´–°–∞—Ä–≥–∞—Å—Å—ã –≤ –∫–æ—Å–º–æ—Å–µ¬ª –∏–ª–∏ –£–∏–Ω–¥–µ–º–∞ ¬´–î–µ–Ω—å —Ç—Ä–∏—Ñ—Ñ–∏–¥–æ–≤¬ª ‚Äî —Ç–æ —ç—Ç–æ –±—ã–ª–∏ –ø–µ—Ä–µ–≤–æ–¥—ã –°—Ç—Ä—É–≥–∞—Ü–∫–∏—Ö.<br /> <a href=\"https://habrahabr.ru/post/334850/#habracut\">–ß–∏—Ç–∞—Ç—å –¥–∞–ª—å—à–µ ‚Üí</a>", "tags": "habr,perf,tech,web", "source_link": "https://habrahabr.ru/hub/client_side_optimization/posts/all/", "title": "–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è: –ø–æ—á–µ–º—É —Ç–∞–∫ —Ç—Ä—É–¥–Ω–æ –Ω–∞–π—Ç–∏ —Ö–æ—Ä–æ—à–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞", "author_name": "Lokalise", "source_type": "rss", "link": "https://habrahabr.ru/post/334850/", "published": "2017-08-03T19:30:00", "source_title": "–•–∞–±—Ä–∞—Ö–∞–±—Ä / –í—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–¥—Ä—è–¥ / –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "V8Blog", "description": "<div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Every six weeks, we create a new branch of V8 as part of our </span><a href=\"https://github.com/v8/v8/wiki/Release-Process\" style=\"text-decoration: none;\"><span>release process</span></a><span>. Each version is branched from V8‚Äôs git master immediately before a Chrome Beta milestone. Today we‚Äôre pleased to announce our newest branch, </span><a href=\"https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/6.1\" style=\"text-decoration: none;\"><span>V8 version 6.1</span></a><span>, which is in beta until its release in coordination with Chrome 61 Stable in several weeks. V8 v6.1 is filled with all sorts of developer-facing goodies. We‚Äôd like to give you a preview of some of the highlights in anticipation of the release.</span></div><h1 dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 6pt; margin-top: 20pt;\"><span>Performance improvements</span></h1><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Visiting all the elements of the Maps and Sets ‚Äî either via </span><a href=\"http://exploringjs.com/es6/ch_iteration.html\" style=\"text-decoration: none;\"><span>iteration</span></a><span> or the </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach\" style=\"text-decoration: none;\"><span>Map.prototype.forEach</span></a><span> / </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach\" style=\"text-decoration: none;\"><span>Set.prototype.forEach</span></a><span> methods ‚Äî became significantly faster, with a raw performance improvement of up to </span><span>11√ó</span><span> since V8 version 6.0. Check the </span><a href=\"http://benediktmeurer.de/2017/07/14/faster-collection-iterators/\" style=\"text-decoration: none;\"><span>dedicated blog post</span></a><span> for additional information.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><img height=\"385\" src=\"https://lh5.googleusercontent.com/NtIEqXhASRucTHgEaBDr0bAixwIsudCGHvu3-qo8ScAJvvcOaG_N7zwQrBaNdWjnT3ssobATBPIW9LcjYnOEh_sMv0LbarCvTzDh1_LSEWsagy4tUDgTQaIcKLz_knoFkCIkql9T\" title=\"Points scored\" width=\"624\" /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>In addition to that, work continued on the performance of other language features. For example, the </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\" style=\"text-decoration: none;\"><span>Object.prototype.isPrototypeOf</span></a><span> method, which is important for constructor-less code using mostly object literals and </span><span>Object.create</span><span> instead of classes and constructor functions, is now always as fast and often faster than using the </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof\" style=\"text-decoration: none;\"><span>instanceof</span></a><span> operator.</span><span><img height=\"384\" src=\"https://lh5.googleusercontent.com/unnZizdyItYS7R2DDeHaGSLAmRpFwAng2rSoLJLfU1t2XGf7vTpS1bOeseiBqAdHWmYm7O3SPc8uncHNr7Iy8IRrwQT_1d6CQy4brLlQL0IQJ7sW0pBoHH8ourn0hRqBjj9efrti\" title=\"Points scored\" width=\"624\" /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Function calls and constructor invocations with variable number of arguments also got significantly faster. Calls made with </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/apply\" style=\"text-decoration: none;\"><span>Reflect.apply</span></a><span> and </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct\" style=\"text-decoration: none;\"><span>Reflect.construct</span></a><span> received an up to 17√ó performance boost in the latest version.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><img height=\"385\" src=\"https://lh6.googleusercontent.com/v6hJCBurPDmrrrYy_rU73TltJ2MOIAzWpvjzqQdFk-_OtRQ7yyHrfOOs1ZsE6ZOJPnptKRMc0DsHn5E7qz_8SMwQwKfo4zf1Dy6MrgkrJOdB336z1ks3szniEMMdMTn5cdDkXnF7\" title=\"Points scored\" width=\"624\" /></span></div><b id=\"docs-internal-guid-abf30f45-a943-cc36-8aa0-2629917a96b6\" style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Array.prototype.forEach</span><span> is now inlined in TurboFan and optimized for all major non-holey elements kinds.</span></div><h1 dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 6pt; margin-top: 20pt;\"><span>Binary size reduction</span></h1><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>The V8 team has completely removed the deprecated Crankshaft compiler, giving a significant reduction in binary size. Alongside the removal of the builtins generator, this reduces the deployed binary size of V8 by over 700 KB, depending on the exact platform.</span></div><h1 dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 6pt; margin-top: 20pt;\"><span>asm.js is now validated and compiled to WebAssembly</span></h1><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>If V8 encounters asm.js code it now tries to validate it. Valid asm.js code is then transpiled to WebAssembly. According to V8‚Äôs performance evaluations, this generally boosts throughput performance. Due to the added validation step, isolated regressions in startup performance might happen.</span><br /><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Please note that this feature was switched on by default on the Chromium side only. If you are an embedder and want to leverage the asm.js validator, enable the flag </span><span>--validate-asm</span><span>.</span></div><h1 dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 6pt; margin-top: 20pt;\"><span>WebAssembly</span></h1><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>When debugging WebAssembly, it is now possible to display local variables in DevTools when a breakpoint in WebAssembly code is hit.</span></div><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>V8 API</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Please check out our </span><a href=\"http://bit.ly/v8-api-changes\" style=\"text-decoration: none;\"><span>summary of API changes</span></a><span>. This document is regularly updated a few weeks after each major release. </span></div><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Developers with an </span><a href=\"https://github.com/v8/v8/wiki/Using%20Git\" style=\"text-decoration: none;\"><span>active V8 checkout</span></a><span> can use </span><span>git checkout -b 6.1 -t branch-heads/6.1</span><span> to experiment with the new features in V8 v6.1. Alternatively you can </span><a href=\"https://www.google.com/chrome/browser/beta.html\" style=\"text-decoration: none;\"><span>subscribe to Chrome‚Äôs Beta channel</span></a><span> and try the new features out yourself soon.</span></div><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Posted by the V8 team</span></div>", "title": "V8 Release 6.1", "source_link": "http://v8project.blogspot.com/", "author_link": "http://www.blogger.com/profile/02128634431048629148", "author_name": "Mathias Bynens", "source_type": "rss", "link": "http://v8project.blogspot.com/2017/08/v8-release-61.html", "published": "2017-08-03T18:21:00", "source_title": "V8 JavaScript Engine", "tags": "browsers,chromium,js,tech,web"}, {"source_name": "FacebookCode", "description": "More than 4.5 billion translations every day are now powered by neural networks, which provide better accuracy and fluency than previous models.", "tags": "facebook,services,tech", "source_link": "https://code.facebook.com/", "title": "Transitioning entirely to neural machine translation", "author_name": "Juan Miguel Pino", "source_type": "rss", "link": "https://code.facebook.com/posts/289921871474277/transitioning-entirely-to-neural-machine-translation/?utm_source=codedot_rss_feed&utm_medium=rss&utm_campaign=RSS+Feed", "published": "2017-08-03T16:00:00", "source_title": "Facebook Code"}, {"source_name": "GoogleDevelopersWeb", "description": "<img src=\"https://ga-beacon.appspot.com/UA-52746336-1/web/updates/2017/08/chrome-61-deprecations?feed_type=atom&amp;pixel\" />\n        \n        <h1 id=\"deprecations-and-removals-in-chrome-61\">Deprecations and Removals in Chrome 61</h1>\n<p>In nearly every version of Chrome, we see a significant number of updates and\nimprovements to the product, its performance, and also capabilities of the Web\nPlatform. This article describes the deprecations and removals in Chrome 61,\nwhich is in beta as of August 3. This list is subject to change at any time.</p>\n<h2 id=\"security-and-privacy\">Security and Privacy</h2>\n<h3 id=\"block-resources-whose-urls-contain-n-and-lt-characters-\">Block resources whose URLs contain '\\n' and '&lt;' characters.</h3>\n<p>There is a type of hacking called <em>dangling markup injection</em> in which a\ntruncated URL is used to send data to an external endpoint. For example,\nconsider a page containing <code>&lt;img src='https://evil.com/?</code>. Because the URL has no\nclosing quote, browsers will read to the next quote that occurs and treat the\nenclosed characters as if it were a single URL.</p>\n<p>Chrome 61 mitigates this vulnerability by restricting the character sets\nallowed in <code>href</code> and <code>src</code> attributes. Specifically, Chrome will stop\nprocessing URLs when it encounters new line characters (<code>\\n</code>) and less than\ncharacters (<code>&lt;</code>).</p>\n<p>Developers with a legitimate use case for new line and less than characters in a\nURL should instead escape these characters.</p>\n<p><a href=\"https://groups.google.com/a/chromium.org/d/topic/blink-dev/KaA_YNOlTPk/discussion\">Intent to Remove</a> &#124;\n<a href=\"https://www.chromestatus.com/feature/5735596811091968\">Chromestatus Tracker</a> &#124;\n<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=680970\">Chromium Bug</a></p>\n<h2 id=\"remove-usage-of-notifications-from-insecure-iframes\">Remove usage of notifications from insecure iframes</h2>\n<p>Permission requests from iframes can confuse users since it is difficult to\ndistinguish between the containing page's origin and the origin of the iframe\nthat is making the request. When the requests scope is unclear, it is difficult\nfor users to judge whether to grant or deny permission.</p>\n<p>Disallowing notifications in iframes will also align the requirements for\nnotification permission with that of push notifications, easing friction for\ndevelopers.</p>\n<p>Developers who need this functionality can open a new window to request\nnotification permission.</p>\n<p><a href=\"https://groups.google.com/a/chromium.org/d/topic/blink-dev/n37ij1E_1aY/discussion\">Intent to Remove</a> &#124;\n<a href=\"https://www.chromestatus.com/feature/6451284559265792\">Chromestatus Tracker</a> &#124;\n<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=695693\">Chromium Bug</a> </p>\n<h2 id=\"deprecate-and-remove-presentation-api-on-insecure-contexts\">Deprecate and remove Presentation API on insecure contexts</h2>\n<p>It's been found that on insecure origins, the Presentation API can be used as a\nhacking vector on insecure origins. Since displays don't have address bars the\nAPI can be used to spoof content. It's also possible to exfiltrate data from\nrunning presentation.</p>\n<p>In aligning with Blink‚Äôs intention to <a href=\"https://www.chromium.org/Home/chromium-security/\ndeprecating-powerful-features-on-insecure-origins\">remove powerful features on insecure\norigins</a>, we plan to deprecate and\nremove support for the Presentation API on insecure contexts. Starting in Chrome\n61, <code>PresentationRequest.start()</code> will no longer function on insecure origins.</p>\n<p><a href=\"https://groups.google.com/a/chromium.org/d/topic/blink-dev/lumj0lVdtHA/discussion\">Intent to Remove</a> &#124;\n<a href=\"https://www.chromestatus.com/feature/5766218384408576\">Chromestatus Tracker</a> &#124;\n<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=733381\">Chromium Bug</a></p>\n<h2 id=\"css\">CSS</h2>\n<h3 id=\"make-shadow-piercing-descendant-combinator-behave-like-descendent-combinator\">Make shadow-piercing descendant combinator behave like descendent combinator</h3>\n<p>Note: This change was originally slated for Chrome 60, but was bumped after\nChrome 60 removals were published.</p>\n<p>The shadow-piercing descendant combinator (<code>&gt;&gt;&gt;</code>), part of\n<a href=\"https://drafts.csswg.org/css-scoping/\">CSS Scoping Module Level 1</a>\n, was intended to match the children of a particular ancestor element\neven when they appeared inside of a shadow tree. This had some limitations.\nFirst, <a href=\"https://drafts.csswg.org/css-scoping/#deep-combinator\">per the spec</a>, it\ncould only be used in JavaScript calls such as <code>querySelector()</code> and did not\nwork in stylesheets. More importantly, browser vendors were unable to make it\nwork beyond one level of the Shadow DOM.</p>\n<p>Consequently, the descendant combinator has been removed from relevant specs\nincluding Shadow DOM v1. Rather than break web pages by removing this selector\nfrom Chromium, we've chosen instead to alias the shadow-piercing descendent\ncombinator to the descendant combinator. The original behavior was\n<a href=\"https://www.chromestatus.com/features/6750456638341120\">deprecated in Chrome 45</a>.\nThe new behavior is implemented in Chrome 61.</p>\n<p><a href=\"https://groups.google.com/a/chromium.org/d/topic/blink-dev/HX5Y8Ykr5Ns/discussion\">Intent to Remove</a> &#124;\n<a href=\"https://www.chromestatus.com/feature/4964279606312960\">Chromestatus Tracker</a> &#124;\n<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=489954\">Chromium Bug</a></p>\n<h2 id=\"javascript\">JavaScript</h2>\n<h3 id=\"disallow-defining-of-indexed-properties-on-windows\">Disallow defining of indexed properties on windows</h3>\n<p>Previously some browsers allowed for JavaScript assignments like the following:</p>\n<pre><code>window[0] = 1;\n</code></pre><p>The <a href=\"https://html.spec.whatwg.org/multipage/window-object.html#windowproxy-defineownproperty\">current HTML spec \nnotes</a>\nthat this is an explicit violation of\nthe JavaScript spec. As such, this ability is removed in Chrome 61. As of\nFebruary 2016, Firefox is already in compliance.</p>\n<p><a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=695385\">Chromium Bug</a></p>\n<p>&lt;&lt;../../_deprecation-policy.md&gt;&gt;</p>", "tags": "chrome61,deprecations,removals,tech,web", "source_link": "https://developers.google.com/web/updates/?utm_source=feed&utm_medium=feed&utm_campaign=updates_feed", "title": "Deprecations and Removals in Chrome 61", "author_name": "Joseph Medley", "source_type": "rss", "link": "https://developers.google.com/web/updates/2017/08/chrome-61-deprecations?utm_source=feed&utm_medium=feed&utm_campaign=updates_feed", "published": "2017-08-03T00:00:00", "source_title": "Updates"}, {"source_name": "MozillaHacks", "description": "What do infinite scrolling, lazy loading, and online advertisements all have in common? They need to know about‚Äîand react to‚Äîthe visibility of elements on a page! Unfortunately, knowing whether or not an element is visible has traditionally been difficult on the Web. Most solutions listen for scroll and resize events, then use DOM APIs like [&#8230;]", "tags": "mozilla,services,tech", "text": "<p>What do infinite scrolling, lazy loading, and online advertisements all have in common?</p>\n<p>They need to know about‚Äîand react to‚Äîthe visibility of elements on a page!</p>\n<p>Unfortunately, knowing whether or not an element is visible has traditionally been difficult on the Web. Most solutions listen for <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/scroll\">scroll</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/resize\">resize</a> events, then use DOM APIs like<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\"> getBoundingClientRect()</a> to manually calculate where elements are relative to the viewport. This usually works, but it‚Äôs inefficient and doesn‚Äôt take into account other ways in which an element‚Äôs visibility can change, such as a large image finally loading higher up on the page, which pushes everything else downward.</p>\n<p>Things get worse for advertisements, since <i>real money</i> is involved. As <a href=\"https://twitter.com/cramforce\">Malte Ubl</a> explained in <a href=\"https://www.youtube.com/watch?v=jO1TNGNTwpc#t=3m30\">his presentation</a> at JSConf Iceland, advertisers don‚Äôt want to pay for ads that never get displayed. To make sure they know when ads are visible, they cover them in dozens of tiny, single-pixel Flash movies whose visibility can be inferred from their framerate. On platforms without Flash, like smartphones, advertisers set up timers to force browsers to recalculate the position of each ad every few milliseconds.</p>\n<p>These techniques kill performance, drain batteries, and would be <i>completely unnecessary</i> if the browser could just <i>notify us</i> whenever an element‚Äôs visibility changed.</p>\n<p>That‚Äôs what <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver\">IntersectionObserver</a> does.</p>\n<h2><b>Hello, new IntersectionObserver()</b></h2>\n<p>At its most basic, the IntersectionObserver API looks something like:</p>\n<pre><code class=\"lang-javascript\">let observer = new IntersectionObserver(handler);\nobserver.observe(target); // &lt;-- Element to watch</code></pre>\n<p>The <a href=\"https://codepen.io/callahad/pen/YxXpyN\">demo</a> below shows a simple handler in action.</p>\n<p>See the Pen <a href=\"https://codepen.io/callahad/pen/YxXpyN/\">Hello IntersectionObserver</a> by Dan Callahan (<a href=\"https://codepen.io/callahad\">@callahad</a>) on <a href=\"https://codepen.io\">CodePen</a>.<br />\n</p>\n<p>A single observer can watch many target elements simultaneously; just repeat the call to <code>observer.observe()</code> for each target.</p>\n<h2><b>Intersection? I thought this was about visibility?</b></h2>\n<p>By default, IntersectionObservers calculate how much of a target element overlaps (or <i>‚Äúintersects with‚Äù</i>) the visible portion of the page, also known as the browser&#8217;s &#8220;viewport:&#8221;</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/08/Blank-Diagram-Page-1.png\"><img alt=\"Illustration of a target element partially intersecting with a browser's viewport\" class=\"aligncenter wp-image-31150 size-large\" height=\"355\" src=\"https://hacks.mozilla.org/files/2017/08/Blank-Diagram-Page-1-500x355.png\" width=\"500\" /></a></p>\n<p>However, observers can also monitor how much of an element intersects with an arbitrary parent element, regardless of actual on-screen visibility. This can be useful for widgets that load content on demand, like an infinitely scrolling list inside a container <code>div</code>. In those cases, the widget could use IntersectionObservers to help load just enough content to fill its container.</p>\n<p>For simplicity, the rest of this article will discuss things in terms of ‚Äúvisibility,‚Äù but remember that IntersectionObservers aren‚Äôt necessarily limited to <em>literal</em> visibility.</p>\n<h2><b>Handler basics</b></h2>\n<p>Observer handlers are callbacks that receive two arguments:</p>\n<ol>\n<li>A list of <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry\">IntersectionObserverEntry</a> objects, each containing metadata about how a target‚Äôs intersection has changed since the last invocation of the handler.</li>\n<li>A reference to the observer itself.</li>\n</ol>\n<p>Observers default to monitoring the browser‚Äôs viewport, which means the demo above just needs to look at the <code>isIntersecting</code> property to determine if any part of a target element is visible.</p>\n<p>By default, handlers only run at the moment when target elements transition from being completely off-screen to being partially visible, or vice versa, but what if you want to distinguish between partially-visible and fully-visible elements?</p>\n<p>Thresholds to the rescue!</p>\n<h2><b>Working with Thresholds</b></h2>\n<p>In addition to a handler callback, the IntersectionObserver constructor can take an object with several configuration options for the observer. One of these options is <code>threshold</code>, which defines breakpoints for invoking the handler.</p>\n<pre><code class=\"lang-javascript\">let observer = new IntersectionObserver(handler, {\n    threshold: 0 // &lt;-- This is the default\n});</code></pre>\n<p>The default <code>threshold</code> is <code>0</code>, which invokes the handler whenever a target becomes partially visible or completely invisible. Setting <code>threshold</code> to <code>1</code> would fire the handler whenever the target flips between fully visible and partially visible, and setting it to <code>0.5</code> would fire when the target passes point of 50% visibility, in either direction.</p>\n<p>You can also supply an array of thresholds, as shown by <code>threshold: [0, 1]</code> in the <a href=\"https://codepen.io/callahad/pen/OjVRrg/\">demo</a> below:</p>\n<p>See the Pen <a href=\"https://codepen.io/callahad/pen/OjVRrg/\">IntersectionObserver Thresholds</a> by Dan Callahan (<a href=\"https://codepen.io/callahad\">@callahad</a>) on <a href=\"https://codepen.io\">CodePen</a>.<br />\n</p>\n<p>Slowly scroll the target in and out of the viewport and observe its behavior.</p>\n<p>The target starts fully visible‚Äîits <code>intersectionRatio</code> is <code>1</code>‚Äîand changes twice as it scrolls off the screen: once to something like <code>0.87</code>, and then to <code>0</code>. As the target scrolls back into view, its <code>intersectionRatio</code> changes to <code>0.05</code>, then <code>1</code>. The <code>0</code> and <code>1</code> make sense, but where did the additional values come from, and what about all of the <i>other</i> numbers between <code>0</code> and <code>1</code>?</p>\n<p>Thresholds are defined in terms of transitions: the handler fires whenever the browser notices that a target‚Äôs <code>intersectionRatio</code> has grown or shrunk past one of the thresholds. Setting the thresholds to <code>[0, 1]</code> tells the browser ‚Äúnotify me whenever a target crosses the lines of no visibility (<code>0</code>) and full visibility (<code>1</code>),‚Äù which effectively defines three states: fully visible, partially visible, and not visible.</p>\n<p>The observed value of <code>intersectionRatio</code> varies from test to test because the browser must wait for an idle moment before checking and reporting on intersections; those sorts of calculations happen in the background at a lower priority than things like scrolling or user input.</p>\n<p>Try <a href=\"https://codepen.io/callahad/pen/OjVRrg\">editing the codepen</a> to add or remove thresholds. Watch how it changes when and where the handler runs.</p>\n<h2><b>Other options</b></h2>\n<p>The IntersectionObserver constructor can take two other options:</p>\n<ul>\n<li><code>root</code>: The area to observe (default: the browser viewport).</li>\n<li><code>rootMargin</code>: How much to shrink or expand the root‚Äôs logical size when calculating intersections (default: <code>\"0px 0px 0px 0px\"</code>).</li>\n</ul>\n<p>Changing the <code>root</code> allows an observer to check for intersection with respect to a parent container element, instead of just the browser‚Äôs viewport.</p>\n<p>Growing the observer‚Äôs <code>rootMargin</code> makes it possible to detect when a target nears a given region. For example, an observer could wait to load off-screen images until <i>just before</i> they become visible.</p>\n<h2><b>Browser support</b></h2>\n<p>IntersectionObserver is available by default in Edge 15, Chrome 51, and Firefox 55, which is due for release next week.</p>\n<p>A <a href=\"https://github.com/WICG/IntersectionObserver/tree/gh-pages/polyfill\">polyfill</a> is available which works effectively everywhere, albeit without the performance benefits of native implementations.</p>\n<h2><b>Additional Resources:</b></h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\">MDN: Intersection Observer</a></li>\n<li><a href=\"https://github.com/WICG/IntersectionObserver/tree/gh-pages/polyfill\">Cross-browser Polyfill</a></li>\n<li><a href=\"http://caniuse.com/#feat=intersectionobserver\">Can I Use</a> browser support information</li>\n</ul>", "title": "Intersection Observer comes to Firefox", "author_name": "Dan Callahan", "source_type": "rss", "link": "https://hacks.mozilla.org/2017/08/intersection-observer-comes-to-firefox/", "source_link": "https://hacks.mozilla.org", "source_title": "Mozilla Hacks ‚Äì the Web developer blog", "published": "2017-08-02T19:51:00"}, {"source_name": "GoogleDevelopersWeb", "description": "<img src=\"https://ga-beacon.appspot.com/UA-52746336-1/web/updates/2017/08/estimating-available-storage-space?feed_type=atom&amp;pixel\" />\n        \n        <h1 id=\"estimating-available-storage-space\">Estimating Available Storage Space</h1>\n<h3 id=\"tl-dr\">tl;dr</h3>\n<p>Chrome 61, with more browsers to follow, now exposes an estimate of how much\nstorage a web app is using and how much is available via:</p>\n<pre><code>if ('storage' in navigator &amp;&amp; 'estimate' in navigator.storage) {\n  navigator.storage.estimate().then(({usage, quota}) =&gt; {\n    console.log(`Using ${usage} out of ${quota} bytes.`);\n  });\n}\n</code></pre><h2 id=\"modern-web-apps-and-data-storage\">Modern web apps and data storage</h2>\n<p>When you think about the storage needs of a modern web application, it helps to\nbreak <em>what's</em> being stored into two categories: the core data needed to load\nthe web application, and the data needed for meaningful user interaction once\nthe application's loaded.</p>\n<p>The first type of data, what's needed to load your web app, consists of HTML,\nJavaScript, CSS, and perhaps some images. <a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/service-workers\">Service\nworkers</a>, along with\nthe <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Cache\">Cache Storage API</a>,\nprovide the needed infrastructure for saving those core resources and then using\nthem later to quickly load your web app, ideally bypassing the network entirely.\n(Tools that integrate with your web app's build process, like the new\n<a href=\"https://workboxjs.org/\">Workbox</a> libraries or the older\n<code><a href=\"https://developers.google.com/web/updates/2015/02/offline-first-with-sw-precache\">sw-precache</a></code>,\ncan fully automate the process of storing, updating, and using this type of\ndata.)</p>\n<p>But what about the other type of data? These are resources that aren't needed to\nload your web app, but which might play a crucial role in your overall user\nexperience. If you're writing an image editing web app, for instance, you may\nwant to save one or more local copies of an image, allowing users to switch\nbetween revisions and undo their work. Or if you're developing an offline media\nplayback experience, saving audio or video files locally would be a critical\nfeature. Every web app that can be personalized ends up needing to save some\nsort of <a href=\"https://developers.google.com/web/fundamentals/instant-and-offline/web-storage/indexeddb-best-practices-app-state\">state\ninformation</a>.\nHow do you know how much space is available for this type of runtime storage,\nand what happens when you run out of room?</p>\n<h2 id=\"the-past-window-webkitstorageinfo-and-navigator-webkittemporarystorage\">The past: window.webkitStorageInfo and navigator.webkitTemporaryStorage</h2>\n<p>Browsers have historically supported this type of introspection via prefixed\ninterfaces, like the very old (and deprecated) \n<code><a href=\"https://github.com/Modernizr/Modernizr/issues/866\">window.webkitStorageInfo</a></code>,\nand the not-quite-as-old, but still non-standard\n<a href=\"https://developer.chrome.com/apps/offline_storage#query\"><code>navigator.webkitTemporaryStorage</code></a>.\nWhile these interfaces provided useful information, they don't have have a\nfuture as web standards.</p>\n<p>That's where the <a href=\"https://github.com/whatwg/storage\">WHATWG Storage Standard</a>\nenters the picture.</p>\n<h2 id=\"the-future-navigator-storage\">The future: navigator.storage</h2>\n<p>As part of the ongoing work on the <a href=\"https://storage.spec.whatwg.org/\">Storage Living\nStandard</a>, a couple of useful APIs have made\nit to the\n<code><a href=\"https://storage.spec.whatwg.org/#storagemanager\">StorageManager</a></code>\ninterface, which is exposed to browsers as\n<code><a href=\"https://storage.spec.whatwg.org/#navigatorstorage\">navigator.storage</a></code>.\nLike many other newer web APIs, <code>navigator.storage</code> is <a href=\"https://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features\">only\navailable on\nsecure</a>\n(served via HTTPS, or localhost) origins.</p>\n<p>Last year, we <a href=\"https://developers.google.com/web/updates/2016/06/persistent-storage\">introduced</a> the\n<code><a href=\"https://storage.spec.whatwg.org/#persistence\">navigator.storage.persist()</a></code>\nmethod, which allows your web application to request that its storage be\nexempted from automatic cleanup.</p>\n<p>It's now joined by the <code>navigator.storage.estimate()</code> method, which serves as a\nmodern replacement for <code>navigator.webkitTemporaryStorage.queryUsageAndQuota()</code>.\n<code>estimate()</code> returns similar information, but it exposes a\n<a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/promises\">promise-based</a> interface,\nwhich is in keeping with other modern asynchronous APIs. The promise that\n<code>estimate()</code> returns resolves with an object containing two properties: <code>usage</code>,\nrepresenting the number of bytes currently used, and <code>quota</code>, representing the\nmaximum bytes that can be stored by the current\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin\">origin</a>.\n(Like everything else related to storage, quota is applied across an entire\norigin.)</p>\n<p>If a web application attempts to store‚Äîusing, for example, IndexedDB or the\nCache Storage API‚Äîdata that's large enough to bring a given origin over its\navailable quota, the request will fail with a\n<code><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\">QuotaExceededError</a></code>\nexception.</p>\n<h3 id=\"storage-estimates-in-action\">Storage estimates in action</h3>\n<p>Exactly how you use <code>estimate()</code> depends on the type of data your app needs to\nstore. For example, you could update a control in your interface letting users\nknow how much space is being used after each storage operation is complete.\nYou'd ideally then provide an interface allowing users to manually clean up data\nthat's no longer needed. You might write code along the lines of:</p>\n<pre><code>// For a primer on async/await, see\n// https://developers.google.com/web/fundamentals/getting-started/primers/async-functions\nasync function storeDataAndUpdateUI(dataUrl) {\n  // Pro-tip: The Cache Storage API is available outside of service workers!\n  // See https://googlechrome.github.io/samples/service-worker/window-caches/\n  const cache = await caches.open('data-cache');\n  await cache.add(dataUrl);\n\n  if ('storage' in navigator &amp;&amp; 'estimate' in navigator.storage) {\n    const {usage, quota} = await navigator.storage.estimate();\n    const percentUsed = Math.round(usage / quota * 100);\n    const usageInMib = Math.round(usage / (1024 * 1024));\n    const quotaInMib = Math.round(quota / (1024 * 1024));\n\n    const details = `${usageInMib} out of ${quotaInMib} MiB used (${percentUsed}%)`;\n\n    // This assumes there's a &lt;span id=&quot;storageEstimate&quot;&gt; or similar on the page.\n    document.querySelector('#storageEstimate').innerText = details;\n  }\n}\n</code></pre><h3 id=\"how-accurate-is-the-estimate-\">How accurate is the estimate?</h3>\n<p>It's hard to miss the fact that the data you get back from the function is just\nan estimate of the space an origin is using. It's right there in the function\nname! Neither the <code>usage</code> nor the <code>quota</code> values are intended to be stable, so\nit's recommended that you take the following into account:</p>\n<ul>\n<li><code>usage</code> reflects how many bytes a given origin is effectively using for\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">same-origin</a>\ndata, which in turn can be impacted by internal compression techniques,\nfixed-size allocation blocks that might include unused space, and the presence\nof <a href=\"https://en.wikipedia.org/wiki/Tombstone_(data_store\">&quot;tombstone&quot; records</a>)\nthat might be created temporarily following a deletion. To prevent the leakage\nof exact size information, cross-origin,\n<a href=\"https://stackoverflow.com/questions/39109789/what-limitations-apply-to-opaque-responses/39109790#39109790\">opaque resources</a>\nsaved locally may contribute additional padding bytes to the overall <code>usage</code>\nvalue.</li>\n<li><code>quota</code> reflects the amount of space currently reserved for an origin. The\nvalue depends on some constant factors like the overall storage size, but also a\nnumber of potentially volatile factors, including the amount of storage space\nthat's currently unused. So as other applications on a device write or delete\ndata, the amount of space that the browser is willing to devote to your web\napp's origin will likely change.</li>\n</ul>\n<h2 id=\"the-present-feature-detection-and-fallbacks\">The present: feature detection and fallbacks</h2>\n<p><code>estimate()</code> is enabled by default starting in Chrome 61. Firefox is\nexperimenting with <code>navigator.storage</code>, but, as of August 2017, it's not turned\non by default. You need to\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/NavigatorStorage/storage#Browser_compatibility\">enable the <code>dom.storageManager.enabled</code> preference</a>\nin order to test it.</p>\n<p>When working with functionality that isn't yet supported in all browsers,\nfeature detection is a must. You can combine feature detection along with a\npromise-based wrapper on top of the older <code>navigator.webkitTemporaryStorage</code>\nmethods to provide a consistent interface along the lines of:</p>\n<pre><code>function storageEstimateWrapper() {\n  if ('storage' in navigator &amp;&amp; 'estimate' in navigator.storage) {\n    // We've got the real thing! Return its response.\n    return navigator.storage.estimate();\n  }\n\n  if ('webkitTemporaryStorage' in navigator &amp;&amp;\n      'queryUsageAndQuota' in navigator.webkitTemporaryStorage) {\n    // Return a promise-based wrapper that will follow the expected interface.\n    return new Promise(function(resolve, reject) {\n      navigator.webkitTemporaryStorage.queryUsageAndQuota(\n        function(usage, quota) {resolve({usage: usage, quota: quota})},\n        reject\n      );\n    });\n  }\n\n  // If we can't estimate the values, return a Promise that resolves with NaN.\n  return Promise.resolve({usage: NaN, quota: NaN});\n}\n</code></pre>", "tags": "chrome61,indexeddb,serviceworker,storage,tech,web", "source_link": "https://developers.google.com/web/updates/?utm_source=feed&utm_medium=feed&utm_campaign=updates_feed", "title": "Estimating Available Storage Space", "author_name": "Jeff Posnick", "source_type": "rss", "link": "https://developers.google.com/web/updates/2017/08/estimating-available-storage-space?utm_source=feed&utm_medium=feed&utm_campaign=updates_feed", "published": "2017-08-02T00:00:00", "source_title": "Updates"}, {"source_name": "MozillaHacks", "description": "We began work on a developer tool to help with understanding and using CSS Grid over a year ago. In March, we shipped the first version of a Grid Inspector in the Firefox DevTools along with CSS Grid. Now significant new features are landing in Firefox Nightly. Here&#8217;s a tour of what&#8217;s arrived in July [&#8230;]", "tags": "mozilla,services,tech", "text": "<p>We began work on a developer tool to help with understanding and using CSS Grid over a year ago. In March, we shipped the first version of a Grid Inspector in the Firefox DevTools along with CSS Grid. Now significant new features are landing in Firefox Nightly. Here&#8217;s a tour of what&#8217;s arrived in July 2017.</p>\n<p></p>\n<p>Download <a href=\"http://nightly.mozilla.org/\">Firefox Nightly</a> (if you don&#8217;t have it already) to get access to the latest and greatest, and to keep up with the continuing improvements. </p>", "title": "Tour the latest features of the CSS Grid Inspector, July 2017", "author_name": "Jen Simmons", "source_type": "rss", "link": "https://hacks.mozilla.org/2017/07/tour-the-latest-features-of-the-css-grid-inspector-july-2017/", "source_link": "https://hacks.mozilla.org", "source_title": "Mozilla Hacks ‚Äì the Web developer blog", "published": "2017-07-31T14:00:00"}, {"source_name": "GoogleDevelopersWeb", "description": "<img src=\"https://ga-beacon.appspot.com/UA-52746336-1/web/updates/2017/07/chrome-61-media-updates?feed_type=atom&amp;pixel\" />\n        \n        <h1 id=\"media-updates-in-chrome-61\">Media Updates in Chrome 61</h1>\n<ul>\n<li>Chrome now <a href=\"https://developers.google.com/web/updates/atom.xml#background-video-track-optimizations\">disables video tracks when a MSE video is played in the\nbackground</a> to optimize performance.</li>\n<li>Video will <a href=\"https://developers.google.com/web/updates/atom.xml#auto-fullscreen-rotate\">go fullscreen when device is rotated</a>.</li>\n</ul>\n<h2 id=\"background-video-track-optimizations-mse-only-\">Background video track optimizations (MSE only)</h2>\n<p>Warning: This feature has been delayed until Chrome 62. See <a href=\"http://crbug.com/752726\">http://crbug.com/752726</a>.</p>\n<p>To improve battery life, Chrome now disables video tracks when the video is\nplayed in the background if the video uses <a href=\"https://developers.google.com/web/fundamentals/media/mse/seamless-playback\">Media Source Extensions (MSE)</a>.</p>\n<p>You can inspect these changes by going to the <code>chrome://media-internals</code> page,\nand filter for the &quot;info&quot; property. When the tab containing a playing video\nbecomes inactive, you'll see a message like <code>Selected video track: []</code>\nindicating that the video track has been disabled. When the tab becomes active\nagain, video track is re-enabled automatically.</p>\n<figure>\n  <img alt=\"Log panel in the chrome://media-internals page\" src=\"https://developers.google.com/web/updates/images/2017/07/media-internals.png\" />\n  <figcaption>\n    <b>Figure 1.</b>\n    Log panel in the <i>chrome://media-internals</i> page\n  </figcaption>\n</figure>\n\n<p>For those who want to understand what is happening, here's a JavaScript code\nsnippet that shows you what Chrome is roughly doing behind the scenes.</p>\n<pre><code>var video = document.querySelector('video');\nvar selectedVideoTrackIndex;\n\ndocument.addEventListener('visibilitychange', function() {\n  if (document.hidden) {\n    // Disable video track when page is hidden.\n    selectedVideoTrackIndex = video.videoTracks.selectedIndex;\n    video.videoTracks[selectedVideoTrackIndex].selected = false;\n  } else {\n    // Re-enable video track when page is not hidden anymore.\n    video.videoTracks[selectedVideoTrackIndex].selected = true;\n  }\n});\n</code></pre><p>You may want to reduce the quality of the video stream when video track is\ndisabled. It would be as simple as using the <a href=\"https://www.w3.org/TR/page-visibility/\">Page Visibility API</a> as shown\nabove to detect when a page is hidden.</p>\n<p>And here are some restrictions:</p>\n<ul>\n<li>This optimization only applies to videos with a <a href=\"https://en.wikipedia.org/wiki/Key_frame#Video_compression\">keyframe</a> distance &lt; 5s.</li>\n<li>If the video doesn't contain any audio tracks, the video will be\nautomatically paused when played in the background.</li>\n</ul>\n<p><a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=663999\">Chromium Bug</a></p>\n<h2 id=\"automatic-video-fullscreen-when-device-is-rotated\">Automatic video fullscreen when device is rotated</h2>\n<p>If you rotate a device to landscape while a video is playing in the viewport,\nplayback will automatically switch to fullscreen mode. Rotating the device to\nportrait puts the video back to windowed mode.</p>\n<p>Note that you can implement manually this behaviour yourself. (See the <a href=\"https://developers.google.com/web/fundamentals/media/mobile-web-video-playback#fullscreen\">Mobile Web Video\nPlayback</a> article).</p>\n<figure>\n  <img alt=\"Automatic video fullscreen when device is rotated\" src=\"https://developers.google.com/web/updates/images/2017/07/auto-fullscreen-rotate.png\" />\n</figure>\n\n<p>This magic behaviour only happens when:</p>\n<ul>\n<li>device is an Android phone (not a tablet)</li>\n<li>user's screen orientation is set to &quot;Auto-rotate&quot;</li>\n<li>video size is at least 200x200px</li>\n<li>video uses native controls</li>\n<li>video is currently playing</li>\n<li>at least 75% of the video is visible (on-screen)</li>\n<li>orientation rotates by 90 degrees (not 180 degrees)</li>\n<li>there is no <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenElement\">fullscreen element</a> yet</li>\n<li>screen is not locked using the <a href=\"https://w3c.github.io/screen-orientation/\">Screen Orientation API</a></li>\n</ul>\n<p><a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=713233\">Chromium Bug</a></p>", "tags": "chrome61,media,news,tech,web", "source_link": "https://developers.google.com/web/updates/?utm_source=feed&utm_medium=feed&utm_campaign=updates_feed", "title": "Media Updates in Chrome 61", "author_name": "Fran√ßois Beaufort", "source_type": "rss", "link": "https://developers.google.com/web/updates/2017/07/chrome-61-media-updates?utm_source=feed&utm_medium=feed&utm_campaign=updates_feed", "published": "2017-07-28T00:00:00", "source_title": "Updates"}, {"source_name": "EdgeBlog", "description": "<p>Today, we are happy to announce a new preview release of Node-ChakraCore, based on Node.js 8, available for you to try on Windows, macOS, and Linux. We started our Node-ChakraCore journey with a focus on extending the reach of Node.js to a new platform, Windows 10 IoT Core. From the beginning, it‚Äôs been clear that [&#8230;]</p>\n<p>The post <a href=\"https://blogs.windows.com/msedgedev/2017/07/27/node-chakracore-update-n-api-ios/\" rel=\"nofollow\">Node-ChakraCore Update: N-API, Node.js on iOS and more</a> appeared first on <a href=\"https://blogs.windows.com/msedgedev\" rel=\"nofollow\">Microsoft Edge Dev Blog</a>.</p>", "tags": "announcements,chakra,chakracore,internet of things,node.js,uncategorized,browsers,edge,tech,web", "text": "<p>Today, we are happy to announce a new <a href=\"https://aka.ms/nodechakracore\">preview release</a> of Node-ChakraCore, based on Node.js 8, available for you to try on Windows, macOS, and Linux.</p>\n<p>We started our Node-ChakraCore journey with a focus on <a href=\"https://blogs.windows.com/buildingapps/2015/05/12/bringing-node-js-to-windows-10-iot-core/\">extending the reach of Node.js</a> to a new platform, Windows 10 IoT Core. From the beginning, it‚Äôs been clear that in addition to growing the reach of Node.js ecosystem, there‚Äôs a need to address real problems facing developers and the Node.js ecosystem through innovation, openness and community collaboration.</p>\n<p>As we continue our journey to bring fresh new ideas and enable the community to imagine new scenarios, we want to take a moment to reflect on some key milestones we‚Äôve achieved in the last year.</p>\n<h1>Full cross-platform support</h1>\n<p>While ChakraCore was born on Windows, we‚Äôve always aspired to make it cross-platform. At NodeSummit 2016, we <a href=\"https://blogs.windows.com/msedgedev/2016/07/27/chakracore-on-linux-osx/\">announced</a> experimental support for the Node-ChakraCore interpreter and runtime on Linux and macOS.</p>\n<p>In the year since that announcement, we‚Äôve brought support for full JIT compilation and <a href=\"https://twitter.com/ChakraCore/status/868158902071836673\">concurrent and partial GC</a> on x64 to both macOS and Ubuntu Linux 14.04 and higher. This has been a massive undertaking that brings Node-ChakraCore features to parity across all major desktop operating systems. We are actively working on cross-platform internationalization to complete this support.</p>\n<h1>Support for Node.js API (N-API)</h1>\n<p>This year, our team was part of the <a href=\"https://github.com/nodejs/abi-stable-node\">community effort</a> to design and develop the next-generation Node.js API (N-API) in Node.js 8 which is <a href=\"https://github.com/nodejs/node-chakracore/releases\">fully supported in ChakraCore</a>. N-API is a stable Node API layer for native modules, which provides ABI compatibility guarantees across different Node versions &amp; flavors. This allows N-API-enabled native modules to just work across different versions and flavors of Node.js, without recompilations.</p>\n<p>According to <a href=\"https://channel9.msdn.com/events/Build/2017/T6056\">some estimates</a>, 30% of the module ecosystem gets impacted every time there is a new Node.js release, due to lack of ABI stability.¬† This <a href=\"https://twitter.com/dshaw/status/848974711337897984\">causes friction in Node.js upgrades</a> in production deployments and adds cost to native module maintainers in having to maintain several supported versions for their module.</p>\n<p></p>\n<h1>Node.js on iOS</h1>\n<p>We are always delighted to see the community build and extend Node-ChakraCore in novel and interesting ways. Janea Systems <a href=\"http://www.janeasystems.com/blog/node-js-meets-ios/\">recently announced</a> their experimental port of Node.js to run on iOS, powered by Node-ChakraCore. This takes Node.js to iOS for the first time, expanding the reach of the Node.js ecosystem to an entire new category of devices.</p>\n<p></p>\n<p>Node.js on iOS would not be possible without Node-ChakraCore. Because of the JITing restrictions on iOS, stock Node.js cannot run. However, Node-ChakraCore can be built to use the interpreter only, with the JIT completely turned off.</p>\n<p>This is particularly useful for scenarios like <a href=\"http://hood.ie/blog/say-hello-to-offline-first.html\">offline-first</a> mobile apps designed with the expectation of unreliable connectivity or limited bandwidth. These apps primarily rely on local cache on the device, and use store and forward techniques to opportunistically use data connectivity when available. These kinds of apps are common in scenarios like large factory floors, remote oil rigs, disaster zones, and more.</p>\n<h1>Time-Travel Debugging</h1>\n<p>This year also brought the debut of <a href=\"https://aka.ms/nodeTTD\">Time-Travel debugging</a> with Node-ChakraCore on all the supported platforms, as originally demoed using <a href=\"https://twitter.com/code\">VSCode</a> at NodeSummit 2016. This innovation directly helps with the <a href=\"https://blog.risingstack.com/survey-node-js-developers-struggle-with-debugging-and-downtimes/\">biggest pain-point</a> developers have with Node.js ‚Äì <em>debugging</em>! With this release, Time-Travel Debugging has improved in stability and functionality since its introduction, and is also available with Node-ChakraCore on Linux and macOS.</p>\n<h1>¬†And much more ‚Ä¶</h1>\n<p>These are just the start ‚Äì our team has also made major investments in infrastructure automation, which have resulted in <a href=\"https://twitter.com/AruneshC/status/877215625466175488\">faster turnaround</a> of Node-ChakraCore <a href=\"https://twitter.com/AruneshC/status/886976700990472193\">updates</a> following the Node.js 8. Both <a href=\"https://nodejs.org/download/chakracore-release/\">stable Node-ChakraCore builds</a> and <a href=\"https://nodejs.org/download/chakracore-nightly/\">nightlies</a> are now available from the Node.js foundation build system.</p>\n<p>We recently started measuring module compatibility using CITGM modules, and have improved compatibility with a wide variety of modules. Popular node modules like, <a href=\"https://github.com/sass/node-sass/pull/1777\">node-sass</a>, <a href=\"https://github.com/expressjs/express/pull/3251\">express</a> and <a href=\"https://github.com/expressjs/body-parser/pull/233\">body-parser</a> are considering using Node-ChakraCore in their CI system to ensure ongoing compatibility. ¬†Node-ChakraCore also has improved 15% in ACMEAir performance on Linux in the last 2 months, and we‚Äôve identified areas to make further improvements in the near future.</p>\n<p>With our initial priority of full cross-platform support behind us, we are moving our focus to new priorities, including performance and module compatibility. These are our primary focus for the immediate future, and we look forward to sharing progress with the community as it happens!</p>\n<h1>Get involved</h1>\n<p>As with any open source project, community participation is the key to the health of Node-ChakraCore. We could not have come this far in our journey without the help of everyone who is active on our <a href=\"https://github.com/nodejs/node-chakracore/\">github repo</a><u>,</u> and in the broader Node community, for their reviews and guidance.¬† We are humbled by your enthusiasm and wish to <strong>thank you</strong> for everything you do. We will be counting on your continued support as we make progress in our journey together.</p>\n<p>For those who are looking to get involved outside of directly contributing code, there are several ways to get involved and advance the Node-ChakraCore project. If you are a ‚Ä¶</p>\n<ol>\n<li><em>Node.js Developer </em>‚Äì Try testing <a href=\"https://github.com/nodejs/node-chakracore/releases\">Node-ChakraCore</a> in your project, and use <a href=\"https://aka.ms/NodeTTD\">Time-Travel debugging</a> with VSCode and let us know how it goes.</li>\n<li><em>Node.js module maintainer</em> ‚Äì Try testing your module with <a href=\"https://github.com/nodejs/node-chakracore/releases\">Node-ChakraCore</a>. Use <a href=\"https://github.com/jasongin/nvs/blob/master/doc/CI.md\">these instructions</a> to add Node-ChakraCore in your own CI to ensure ongoing compatibility. If you run into issues, please let us know at <a href=\"https://github.com/nodejs/node-chakracore/issues\">our repo</a> or our <a href=\"https://gitter.im/Microsoft/ChakraCore\">gitter</a> channel.</li>\n<li><em>Native module maintainer</em> ‚Äì Consider porting your module to <a href=\"https://medium.com/the-node-js-collection/n-api-next-generation-node-js-apis-for-native-modules-169af5235b06\">N-API</a>. This will help insulate your module from breakage due to new Node releases and will also work with Node-ChakraCore.</li>\n</ol>\n<p>As always, we are eager to hear your feedback, so please keep them coming. Find us on twitter <a href=\"https://twitter.com/ChakraCore\">@ChakraCore</a>, our <a href=\"https://gitter.im/Microsoft/ChakraCore\">gitter</a> channel or you can open an issue on our <a href=\"https://github.com/nodejs/node-chakracore/issues\">github repo</a> to start a conversation.</p>\n<p>‚Äï <a href=\"https://twitter.com/AruneshC\">Arunesh Chandra</a>,¬†Senior Program Manager, Chakra</p>\n<p>The post <a href=\"https://blogs.windows.com/msedgedev/2017/07/27/node-chakracore-update-n-api-ios/\" rel=\"nofollow\">Node-ChakraCore Update: N-API, Node.js on iOS and more</a> appeared first on <a href=\"https://blogs.windows.com/msedgedev\" rel=\"nofollow\">Microsoft Edge Dev Blog</a>.</p>", "title": "Node-ChakraCore Update: N-API, Node.js on iOS and more", "author_name": "Arunesh Chandra", "source_type": "rss", "comments_count": 3, "published": "2017-07-27T16:00:00", "link": "https://blogs.windows.com/msedgedev/2017/07/27/node-chakracore-update-n-api-ios/", "source_link": "https://blogs.windows.com/msedgedev", "source_title": "Microsoft Edge Dev Blog"}, {"source_name": "2ality", "description": "<p>The ECMAScript proposal ‚Äú<a href=\"https://github.com/tc39/proposal-bigint\">BigInt: Arbitrary precision integers in JavaScript</a>‚Äù by Daniel Ehrenberg is currently at stage 3. This blog post gives an overview.</p>\n\n<div><a href=\"http://2ality.com/2017/03/es-integer.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/iQyL_FS2tl0\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "ES proposal: BigInt ‚Äì arbitrary precision integers", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/03/es-integer.html", "author_link": "http://2ality.com/", "published": "2017-07-27T02:36:00", "source_title": "2ality feed"}, {"source_name": "GoogleDevelopersWeb", "description": "<img src=\"https://ga-beacon.appspot.com/UA-52746336-1/web/updates/2017/07/nic60?feed_type=atom&amp;pixel\" />\n        \n        <h1 id=\"new-in-chrome-60\">New in Chrome 60</h1>\n<div class=\"clearfix\"></div>\n\n<div class=\"video-wrapper\">\n  \n  \n</div>\n\n<ul>\n<li><a href=\"https://developers.google.com/web/updates/atom.xml#paint\">Paint Timing API</a> allows you to measure time to first paint and\ntime to first contentful paint with the Paint Timings AP.</li>\n<li>The <a href=\"https://developers.google.com/web/updates/atom.xml#fontdisplay\"><code>font-display</code></a> allows you to control how fonts are \nrendered before they're downloaded.</li>\n<li><a href=\"https://developers.google.com/web/updates/atom.xml#wasm\">WebAssembly</a> has landed</li>\n<li>And there‚Äôs <a href=\"https://developers.google.com/web/updates/atom.xml#more\">plenty more</a>!</li>\n</ul>\n<p>Note: Want the full list of changes? Check out the\n<a href=\"https://chromium.googlesource.com/chromium/src/+log/59.0.3071.80..60.0.3112.78?pretty=fuller&amp;n=10000\">Chromium source repository change list</a></p>\n<div class=\"clearfix\"></div>\n\n<p>I‚Äôm Pete LePage. Let‚Äôs dive in and see what‚Äôs new for developers in Chrome 60! </p>\n<div class=\"clearfix\"></div>\n\n<h2 id=\"paint-timings-api\">Paint timings API</h2>\n<p>When a user navigates to a web page, they're look for some visual feedback\nto reassure them that everything is working. With the new paint timings API,\nwe can now measure that.</p>\n<p>The API exposes two metrics:</p>\n<ul>\n<li><strong>Time to first paint</strong> - which marks the point when the browser starts\nto render something, the first bit of content on the screen. </li>\n<li><strong>Time to first contentful paint</strong> - which marks the point when the browser\nrenders the first bit of content from the DOM, text, an image, etc. </li>\n</ul>\n<p><img src=\"https://developers.google.com/web/updates/images/2017/06/perf-metrics-load-timeline.png\" /></p>\n<p>Check out \n<a href=\"https://developers.google.com/web/updates/2017/06/user-centric-performance-metrics\">Leveraging the Performance Metrics that Most Affect User Experience</a>\nto learn how you can track these metrics and use them to improve your\nexperience.</p>\n<h2 id=\"css-font-display-property\">CSS <code>font-display</code> property</h2>\n<p>Web Fonts give you the ability to incorporate rich typography. But, if the\nuser doesn‚Äôt already have the typeface, it needs to be downloaded,\npotentially making your site appear slow.</p>\n<p>Thankfully, most browsers will use a fallback if the font takes too long to\ndownload. The new <code>font-display</code> property, allows you to control how a\ndownloadable font renders before it‚Äôs fully loaded.</p>\n<ul>\n<li><strong><code>auto</code></strong> uses whatever font display strategy the user-agent uses.</li>\n<li><strong><code>block</code></strong> gives the font face a short block period and an infinite\nswap period.</li>\n<li><strong><code>swap</code></strong> gives the font face a zero second block period and an infinite\nswap period.</li>\n<li><strong><code>fallback</code></strong> gives the font face an extremely small block period and a\nshort swap period.</li>\n<li><strong><code>optional</code></strong> gives the font face an extremely small block period and a\nzero second swap period.</li>\n</ul>\n<p>It‚Äôs supported in Chrome 60 and Opera, and is in development on Firefox.\nCheck out\n<a href=\"https://developers.google.com/web/updates/2016/02/font-display\">Controlling Font Performance with <code>font-display</code></a>\nfor more information.</p>\n<h2 id=\"webassembly\">WebAssembly</h2>\n<div class=\"video-wrapper\">\n  \n  \n</div>\n\n<p>Web Assembly or wasm provides a new way to run code, written in languages like\nC and C++ on the web, at near native speed. </p>\n<p>It provides the speed necessary to build an in-browser video editor or to run\na Unity game at a high frame rate utilizing existing standards-based web\nplatform APIs.</p>\n<p>You can find more info at <a href=\"http://webassembly.org\">webassembly.org</a>, including\ndemos, docs and how to get started.</p>\n<div class=\"clearfix\"></div>\n\n<h2 id=\"and-more-\">And more!</h2>\n<ul>\n<li>The new <a href=\"https://developers.google.com/web/updates/2017/06/budget-api\">Web Budget API</a> enables sites with\nthe Push Notification permission to send a limited number of push messages\nthat trigger background work such as syncing data or dismissing\nnotifications, without the need to show a user-visible notification.</li>\n<li><a href=\"https://w3c.github.io/push-api/#dom-pushsubscription-expirationtime\"><code>PushSubscription.expirationTime</code></a>\nis now available, notifying sites when and if a subscription will expire.</li>\n<li><a href=\"https://developers.google.com/web/updates/2017/06/object-rest-spread\">Object rest &amp; spread</a> properties \nare now supported, making it simpler to merge and shallow-clone objects and\nimplement various immutable object patterns. </li>\n</ul>\n<p>Note: The <a href=\"https://developers.google.com/web/fundamentals/discovery-and-monetization/payment-request/\">Payment Request API</a>\nwas pushed to Chrome 61.</p>\n<p>These are just a few of the changes in Chrome 60 for developers.  </p>\n<p>Then <a href=\"https://goo.gl/6FP1a5\">subscribe</a> to our\n<a href=\"https://www.youtube.com/user/ChromeDevelopers/\">YouTube channel</a>, and\nyou‚Äôll get an email notification whenever we launch a new video, or add our\n<a href=\"https://developers.google.com/web/shows/rss.xml\">RSS feed</a> to your feed reader.</p>\n<p>I‚Äôm Pete LePage, and as soon as Chrome 61 is released, I‚Äôll be right\nhere to tell you -- what‚Äôs new in Chrome!</p>", "tags": "chrome60,new-in-chrome,paint,performance,tech,web,webassembly,webfonts", "source_link": "https://developers.google.com/web/updates/?utm_source=feed&utm_medium=feed&utm_campaign=updates_feed", "title": "New in Chrome 60", "author_name": "Pete LePage", "source_type": "rss", "link": "https://developers.google.com/web/updates/2017/07/nic60?utm_source=feed&utm_medium=feed&utm_campaign=updates_feed", "published": "2017-07-27T00:00:00", "source_title": "Updates"}, {"source_name": "2ality", "description": "<p>The proposal ‚Äú<a href=\"https://github.com/tc39/proposal-promise-finally\"><code>Promise.prototype.finally</code></a>‚Äù by Jordan Harband is currently at <a href=\"http://exploringjs.com/es2016-es2017/ch_tc39-process.html\">stage 3</a>. This blog post explains it.</p>\n\n<div><a href=\"http://2ality.com/2017/07/promise-prototype-finally.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/4V_9d8mq3IM\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "ES proposal: <code>Promise.prototype.finally()</code>", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/07/promise-prototype-finally.html", "author_link": "http://2ality.com/", "published": "2017-07-26T23:31:00", "source_title": "2ality feed"}, {"source_name": "MozillaHacks", "description": "React, along with Redux, is one of the fastest and most flexible UI frameworks on the web. It‚Äôs easy to write, easy to use and is great for teams. However, it's not easy to debug them in the browser. Now, browser add-ons like <a href=\"https://addons.mozilla.org/en-US/firefox/addon/react-devtools/?src=search\">React Developer Tools</a>, <a href=\"https://addons.mozilla.org/en-US/firefox/addon/remotedev/\">Redux DevTools</a>, and <a href=\"https://addons.mozilla.org/en-US/firefox/addon/vue-js-devtools\">Vue</a> let you inspect, modify, and debug your code right in the browser.", "tags": "mozilla,services,tech", "text": "<p>React, along with Redux, is one of the fastest and most flexible UI frameworks on the web. It‚Äôs easy to write, easy to use and is great for teams. In fact, the Mozilla community uses React to build a lot of the Firefox DevTools UI and, famously, the Facebook UI is built with React. Despite its popularity, it‚Äôs still not easy to debug React in the browser. <a href=\"https://addons.mozilla.org/en-US/firefox/addon/react-devtools/?src=search\">React Developer Tools</a> by <a href=\"https://facebook.github.io/react/\">Facebook</a> and <a href=\"https://addons.mozilla.org/en-US/firefox/addon/remotedev/\">Redux DevTools</a> by <a href=\"https://github.com/zalmoxisus\">Zalmoxisus</a> however, let you inspect, modify, and debug your code right in the browser. And now they‚Äôre available for Firefox. These add-ons, and others like the <a href=\"https://addons.mozilla.org/en-US/firefox/addon/vue-js-devtools\">Vue add-on</a> will make debugging popular JavaScript frameworks easier. When combined with Mozilla‚Äôs <a href=\"https://hacks.mozilla.org/2016/09/introducing-debugger-html/\">Debugger.html tool</a>, all these stand-alone tools will turn your browser into a full-featured debugger.</p>\n<p><b>React</b></p>\n<p>Get the latest version of the React DevTool add-on <a href=\"https://addons.mozilla.org/en-US/firefox/addon/react-devtools/\">here</a>. Once it‚Äôs installed, you‚Äôll be able to examine React code on any site that uses it. When you visit a React-powered site, the add-on icon will appear to the right of the Firefox address bar:</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/react-notification.png\"><img alt=\"\" class=\"alignnone wp-image-31133 size-large\" height=\"101\" src=\"https://hacks.mozilla.org/files/2017/07/react-notification-500x101.png\" width=\"500\" /></a></p>\n<p>Open your DevTools by hitting command-option-i (control-shift-i for Windows), clicking the button in the toolbar, or right-clicking on the page and selecting ‚Äúinspect.‚Äù You‚Äôll see the React panel alongside the basic DevTools panels. The main panel will now show you the React tree view:</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/react-code.png\"><img alt=\"\" class=\"alignnone wp-image-31134 size-large\" height=\"137\" src=\"https://hacks.mozilla.org/files/2017/07/react-code-500x137.png\" width=\"500\" /></a></p>\n<p>The React tool works pretty much like every other DevTool. Use the arrow keys or hjkl keys to navigate the code, right-click components to examine them in the elements pane, show source, and so on. Expand or collapse items by clicking the arrows.</p>\n<p>The side pane is a great place to store variables and see updates to the code.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/react-side-pane.gif\"><img alt=\"\" class=\"alignnone wp-image-31135 size-large\" height=\"324\" src=\"https://hacks.mozilla.org/files/2017/07/react-side-pane-500x324.gif\" width=\"500\" /></a></p>\n<p>There‚Äôs also an awesome search bar.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/react-search.gif\"><img alt=\"\" class=\"alignnone wp-image-31136 size-large\" height=\"201\" src=\"https://hacks.mozilla.org/files/2017/07/react-search-500x201.gif\" width=\"500\" /></a></p>\n<p>Inspect a React element on a page using the regular inspector, then switch to the React tab. The element will automatically be selected in the React tree.</p>\n<p>You can also right-click an element and choose ‚ÄúFind the DOM node‚Äù to, well, find the DOM node of any element.</p>\n<p><b>Redux</b></p>\n<p>React and Redux go together like avocado and toast. Redux creates a predictable state container for your React library that lets it run reliably on virtually any system. It also lets you ‚Äútime travel‚Äù to previous versions of your states. <a href=\"https://addons.mozilla.org/en-US/firefox/addon/remotedev/\">The Redux devtool for Firefox</a> lets you inspect Redux actions and payloads, cancel actions, log action reducer errors, and automatically re-evaluate staged actions when you change reducer code.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/redux-tool.png\"><img alt=\"\" class=\"alignnone wp-image-31137 size-large\" height=\"292\" src=\"https://hacks.mozilla.org/files/2017/07/redux-tool-500x292.png\" width=\"500\" /></a></p>\n<p>The Redux devtool has extensive docs <a href=\"https://github.com/zalmoxisus/redux-devtools-extension\">on its GitHub repository</a>, including <a href=\"https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md\">arguments</a>, <a href=\"https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/API/Methods.md\">methods</a>, and even a tutorial on how to <a href=\"https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/API/Methods.md\">create a Redux store for debugging</a>. Check them out.</p>\n<p>With Firefox <a href=\"https://addons.mozilla.org/en-US/firefox/\">Add-ons</a>, you can have a complete React/Redux debugging toolset right in your browser.<br />\n<a href=\"https://www.mozilla.org/en-US/firefox/developer/\">Download Firefox Developer Edition</a> and then check out all the add-ons available at <a href=\"https://addons.mozilla.org\">addons.mozilla.org</a>.</p>", "title": "Inspect, Modify, and Debug React and Redux in Firefox with Add-ons", "author_name": "Dustin Driver", "source_type": "rss", "link": "https://hacks.mozilla.org/2017/07/debug-react-redux-firefox-add-ons/", "source_link": "https://hacks.mozilla.org", "source_title": "Mozilla Hacks ‚Äì the Web developer blog", "published": "2017-07-26T17:42:00"}, {"source_name": "FacebookCode", "description": "Facebook's style transfer technique was adapted to VR for the first time, demonstrating that AI can be used as a creative tool for filmmakers.", "tags": "facebook,services,tech", "source_link": "https://code.facebook.com/", "title": "Using AI for new visual storytelling techniques in VR", "author_name": "Piotr Bojanowski", "source_type": "rss", "link": "https://code.facebook.com/posts/158223298060942/using-ai-for-new-visual-storytelling-techniques-in-vr/?utm_source=codedot_rss_feed&utm_medium=rss&utm_campaign=RSS+Feed", "published": "2017-07-26T17:00:00", "source_title": "Facebook Code"}, {"source_name": "WebkitBlog", "description": "Safari Technology Preview Release 36 is now available for download for macOS Sierra and betas of macOS High Sierra.", "tags": "safari technology preview,browsers,safari,tech,web,webkit", "text": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 36 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Sierra and betas of macOS High Sierra. If you already have Safari Technology Preview installed, you can update from the Mac App Store‚Äôs Updates tab. This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=219131&amp;rev=219567&amp;limit=999\">219131-219567</a>.</p>\n<h3>JavaScript</h3>\n<ul>\n<li>Implemented Object Spread (<a href=\"https://trac.webkit.org/changeset/219443/webkit/\">r219443</a>)</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Changed to not resolve <code>auto</code> values of <code>align-self</code> and <code>justify-self</code> matching specification changes (<a href=\"https://trac.webkit.org/changeset/219315/webkit/\">r219315</a>)</li>\n<li>Fixed <code>line-height:&lt;number&gt;</code> to not be visually applied twice when text autosizing is in effect (<a href=\"https://trac.webkit.org/changeset/219543/webkit/\">r219543</a>)</li>\n</ul>\n<h3>WebRTC</h3>\n<ul>\n<li>Fixed incorrect <code>sdpMLineIndex</code> for video to fix interoperability with Firefox (<a href=\"https://trac.webkit.org/changeset/219393/webkit/\">r219393</a>)</li>\n<li>Fixed sending silence data for a disabled audio track (<a href=\"https://trac.webkit.org/changeset/219524/webkit/\">r219524</a>)</li>\n<li>Increased the render audio buffer sizes for WebRTC (<a href=\"https://trac.webkit.org/changeset/219517/webkit/\">r219517</a>)</li>\n</ul>\n<h3>Web Driver</h3>\n<ul>\n<li>Fixed link and partial link queries when the link contains formatting tags (<a href=\"https://trac.webkit.org/changeset/219555/webkit/\">r219555</a>)</li>\n</ul>\n<h3>Rendering</h3>\n<ul>\n<li>Disabled asynchronous image decoding for large images by default (<a href=\"https://trac.webkit.org/changeset/219438/webkit/\">r219438</a>)</li>\n<li>Enabled the Viewport Fit experimental feature by default (<a href=\"https://trac.webkit.org/changeset/219369/webkit/\">r219369</a>)</li>\n<li>Fixed an element not getting repainted when its background image finishes decoding (<a href=\"https://trac.webkit.org/changeset/219364/webkit/\">r219364</a>)</li>\n<li>Fixed an issue to avoid unnecessary copying of the frame buffer into a WebGL Layer (<a href=\"https://trac.webkit.org/changeset/219472/webkit/\">r219472</a>)</li>\n<li>Corrected the radix used in Unicode Escape in invalid character error message (<a href=\"https://trac.webkit.org/changeset/219396/webkit/\">r219396</a>)</li>\n<li>Fixed the low memory notification to prevent causing style recalculation (<a href=\"https://trac.webkit.org/changeset/219145/webkit/\">r219145</a>)</li>\n<li>Fixed GIFs with infinite animation often only playing once (<a href=\"https://trac.webkit.org/changeset/219389/webkit/\">r219389</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Fixed removing user gesture restrictions when adding the <code>autoplay</code> attribute to a media element during a user gesture (<a href=\"https://trac.webkit.org/changeset/219509/webkit/\">r219509</a>)</li>\n<li>Fixed reflecting <code>\"video\"</code> and <code>\"audio\"</code> when they are not a supported <code>as</code> attribute value (<a href=\"https://trac.webkit.org/changeset/219234/webkit/\">r219234</a>)</li>\n<li>Fixed bad behavior caused by removing samples when the presentation order does not match decode order (<a href=\"https://trac.webkit.org/changeset/219519/webkit/\">r219519</a>)</li>\n<li>Fixed media controls drawing behind the captions (<a href=\"https://trac.webkit.org/changeset/219558/webkit/\">r219558</a>)</li>\n<li>Fixed clicking the edges of media control buttons to execute the action, not just change the visual state of the button (<a href=\"https://trac.webkit.org/changeset/219549/webkit/\">r219549</a>)</li>\n</ul>\n<h3>Web Inspector</h3>\n<ul>\n<li>Changed to group Inspector Style Sheets as part of the Stylesheets folder (<a href=\"https://trac.webkit.org/changeset/219185/webkit/\">r219185</a>)</li>\n<li>Improved wording for Potential Custom Element that lacks a Custom definition (<a href=\"https://trac.webkit.org/changeset/219333/webkit/\">r219333</a>)</li>\n<li>Fixed resources that are sometimes missing from the tree outline right before grouping into folders (<a href=\"https://trac.webkit.org/changeset/219270/webkit/\">r219270</a>)</li>\n<li>Fixed WebSocket resource tree elements to show the connection status (<a href=\"https://trac.webkit.org/changeset/219269/webkit/\">r219269</a>)</li>\n</ul>\n<h3>WebAssembly</h3>\n<ul>\n<li>Implemented name section&#8217;s module name, and skipped unknown sections (<a href=\"https://trac.webkit.org/changeset/219134/webkit/\">r219134</a>)</li>\n</ul>\n<h3>Bug Fixes</h3>\n<ul>\n<li>Fixed the &#8220;Show My Relationship&#8221; link in familysearch.org (<a href=\"https://trac.webkit.org/changeset/219151/webkit/\">r219151</a>)</li>\n<li>Fixed an issue where font loads can cause Chinese characters to draw as <code>.notdef</code> (<a href=\"https://trac.webkit.org/changeset/219221/webkit/\">r219221</a>)</li>\n<li>Changed AppCache to ignore fallback entries whose namespace is not prefixed with the manifest path (<a href=\"https://trac.webkit.org/changeset/219272/webkit/\">r219272</a>)</li>\n</ul>", "title": "Release Notes for Safari Technology Preview¬†36", "author_name": "Jon Davis", "source_type": "rss", "link": "https://webkit.org/blog/7833/release-notes-for-safari-technology-preview-36/", "source_link": "https://webkit.org", "source_title": "WebKit", "published": "2017-07-26T17:00:00"}, {"source_name": "2ality", "description": "<p>I‚Äôve written the small library <a href=\"https://github.com/rauschma/re-template-tag\"><code>re-template-tag</code></a> that provides a template tag function for composing regular expressions. This blog post explains how it works.</p>\n\n<div><a href=\"http://2ality.com/2017/07/re-template-tag.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/PBx9dN4gxmI\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "Composing regular expressions via <code>re-template-tag</code>", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/07/re-template-tag.html", "author_link": "http://2ality.com/", "published": "2017-07-26T12:48:00", "source_title": "2ality feed"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "ChromiumBlog", "description": "This morning, <a href=\"http://blogs.adobe.com/conversations/2017/07/adobe-flash-update.html\">Adobe announced their plans</a> to end support for Flash in late 2020. For Flash developers this will mean <a href=\"https://developer.mozilla.org/en-US/docs/Plugins/Flash_to_HTML5\">transitioning</a> to HTML, as Chrome will <a href=\"https://www.chromium.org/flash-roadmap\">increasingly require explicit permission from users</a> to run Flash content until support is removed completely at the end of 2020.<br /><br />HTML is faster, safer, and more <a href=\"https://chrome.googleblog.com/2015/06/better-battery-life-for-your-laptop.html\">power efficient</a> than Flash and works across desktop and mobile. Three years ago, over 80% of Chrome daily desktop users visited sites with Flash. Today only 17% of users visit sites with Flash and we‚Äôre continuing to see a <a href=\"https://www.chromium.org/flash-roadmap/flash-usage-trends\">downward trend</a> as sites move to HTML.<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-p8srRJnCbMw/WXHjeW4rTAI/AAAAAAAAAzc/YPaVZotu7Fk5-O8yIzJIfU5I91twk-r5wCLcBGAs/s1600/Screenshot%2B2017-07-21%2Bat%2B7.20.06%2BAM.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" src=\"https://1.bp.blogspot.com/-p8srRJnCbMw/WXHjeW4rTAI/AAAAAAAAAzc/YPaVZotu7Fk5-O8yIzJIfU5I91twk-r5wCLcBGAs/s600/Screenshot%2B2017-07-21%2Bat%2B7.20.06%2BAM.png\" width=\"600\" /></a></div><div style=\"text-align: center;\">Over a three-year period, Flash usage has declined 80%.</div><div style=\"text-align: center;\"><br /></div><br />We strongly encourage sites that still rely on Flash to make the move to HTML as there will be an increasing number of <a href=\"https://www.chromium.org/flash-roadmap\">restrictions</a> on Flash leading up to the end of support:<br /><br /><ul><li>For sites that use Flash for gaming, a list of relevant APIs and demos can be found at <a href=\"https://www.openwebgames.com/\">OpenWebGames.com</a>. We recommend exploring technologies like <a href=\"http://webassembly.org/\">WebAssembly</a>, which allows for high-performance computing.</li><li>For sites that use Flash for media, Mozilla‚Äôs <a href=\"https://developer.mozilla.org/en-US/docs/Plugins/Flash_to_HTML5/Video\">media migration guide</a> gives an overview of the APIs used to prepare, distribute and play media on the web.</li><li>Finally, for sites that use Flash for advertising, we recommend switching to HTML ads. Please work with your ad provider directly for this.</li></ul>Flash helped make the web a rich, dynamic experience, and shaped the modern set of web standards. We recognize that any transition can have challenges, but we will continue to work closely with Adobe and the web community to ensure that users have a great experience and to help developers make the web transition to HTML.<br /><br />Posted by Anthony Laforge, on behalf of the Chrome team", "title": "So long, and thanks for all the Flash", "source_link": "http://blog.chromium.org/", "author_link": "https://plus.google.com/106190864297512596007", "author_name": "Chrome Blog", "source_type": "rss", "link": "http://blog.chromium.org/2017/07/so-long-and-thanks-for-all-flash.html", "published": "2017-07-25T16:08:00", "source_title": "Chromium Blog", "tags": "browsers,chromium,tech,web"}, {"source_name": "EdgeBlog", "description": "<p>Today, Adobe announced that Flash will no longer be supported after 2020. Microsoft will phase out support for Flash in Microsoft Edge and Internet Explorer ahead of this date. Flash led the way on the web for rich content, gaming, animations, and media of all kinds, and inspired many of the current web standards powering [&#8230;]</p>\n<p>The post <a href=\"https://blogs.windows.com/msedgedev/2017/07/25/flash-on-windows-timeline/\" rel=\"nofollow\">The End of an Era ‚Äì Next Steps for Adobe Flash</a> appeared first on <a href=\"https://blogs.windows.com/msedgedev\" rel=\"nofollow\">Microsoft Edge Dev Blog</a>.</p>", "tags": "adobe,announcements,flash,mobile,pc,tablet,browsers,edge,tech,web", "text": "<p>Today, <a href=\"http://blogs.adobe.com/conversations/2017/07/adobe-flash-update.html\">Adobe announced</a> that Flash will no longer be supported after 2020. Microsoft will phase out support for Flash in Microsoft Edge and Internet Explorer ahead of this date.</p>\n<p>Flash led the way on the web for rich content, gaming, animations, and media of all kinds, and inspired many of the current web standards powering HTML5. Adobe has partnered with Microsoft, Google, Mozilla, Apple, and many others, to ensure that the open web could meet and exceed the experiences that Flash has traditionally provided. HTML5 standards, implemented across all modern browsers, provide these capabilities with improved performance, battery life, and increased security. We look forward to continuing to work with Adobe and our industry partners on enriching the open web without the need for plug-ins.</p>\n<p>We will phase out Flash from Microsoft Edge and Internet Explorer, culminating in the removal of Flash from Windows entirely by the end of 2020. This process began already for Microsoft Edge with <a href=\"https://blogs.windows.com/msedgedev/2016/12/14/edge-flash-click-run/\">Click-to-Run for Flash</a> in the Windows 10 Creators Update. The process will continue in the following phases:</p>\n<ul>\n<li>Through the end of 2017 and into 2018, Microsoft Edge will continue to ask users for permission to run Flash on most sites the first time the site is visited, and will remember the user‚Äôs preference on subsequent visits. Internet Explorer will continue to allow Flash with no special permissions required during this time.</li>\n<li>In mid to late 2018, we will update Microsoft Edge to require permission for Flash to be run each session. Internet Explorer will continue to allow Flash for all sites in 2018.</li>\n<li>In mid to late 2019, we will disable Flash by default in both Microsoft Edge and Internet Explorer. Users will be able to re-enable Flash in both browsers. When re-enabled, Microsoft Edge will continue to require approval for Flash on a site-by-site basis.</li>\n<li>By the end of 2020, we will remove the ability to run Adobe Flash in Microsoft Edge and Internet Explorer across all supported versions of Microsoft Windows. Users will no longer have any ability to enable or run Flash.</li>\n</ul>\n<p>This timeline is consistent across browsers, including <a href=\"https://www.blog.google/products/chrome/saying-goodbye-flash-chrome/\">Google</a>, <a href=\"https://blog.mozilla.org/futurereleases/2017/07/25/firefox-roadmap-flash-end-life/\">Mozilla</a>, and <a href=\"https://webkit.org/blog/7839/adobe-announces-flash-distribution-and-updates-to-end/\">Apple</a>. We look forward to continuing our close collaboration with Adobe, other browser vendors, and the publishing community, as we evolve the future of the web for everyone.</p>\n<p>‚Äî John Hazen, Principal Program Manager Lead, Microsoft Edge</p>\n<p>The post <a href=\"https://blogs.windows.com/msedgedev/2017/07/25/flash-on-windows-timeline/\" rel=\"nofollow\">The End of an Era ‚Äì Next Steps for Adobe Flash</a> appeared first on <a href=\"https://blogs.windows.com/msedgedev\" rel=\"nofollow\">Microsoft Edge Dev Blog</a>.</p>", "title": "The End of an Era ‚Äì Next Steps for Adobe Flash", "author_name": "Microsoft Edge Team", "source_type": "rss", "comments_count": 5, "published": "2017-07-25T16:00:00", "link": "https://blogs.windows.com/msedgedev/2017/07/25/flash-on-windows-timeline/", "source_link": "https://blogs.windows.com/msedgedev", "source_title": "Microsoft Edge Dev Blog"}, {"source_name": "WebkitBlog", "description": "Adobe has announced it will stop distributing and updating Flash Player at the end of 2020 and is encouraging web developers to migrate any existing Flash content to open standards.", "tags": "news,browsers,safari,tech,web,webkit", "text": "<p><a href=\"http://blogs.adobe.com/conversations/2017/07/adobe-flash-update.html\" target=\"_blank\">Adobe has announced</a> it will stop distributing and updating Flash Player at the end of 2020 and is encouraging web developers to migrate any existing Flash content to open standards. Apple is working with Adobe, industry partners, and developers to complete this transition.</p>\n<p>Apple users have been experiencing the web without Flash for some time. iPhone, iPad, and iPod touch never supported Flash. For the Mac, the transition from Flash began in 2010 when Flash was no longer pre-installed. Today, if users install Flash, it remains off by default. Safari requires <a href=\"https://webkit.org/blog/6589/next-steps-for-legacy-plug-ins/\" target=\"_blank\">explicit approval</a> on each website before running the Flash plugin.</p>\n<p>To display rich interactive content in the browser, WebKit‚Äîthe engine that powers Safari‚Äîsupports the latest standards, including the following:</p>\n<ul>\n<li>HTML Video and Media Source Extensions support a wide range of video experiences, including short clips, longer content, and live streaming.</li>\n<li>HTML Canvas and WebGL provide fast, dynamic graphics for games and interactive experiences.</li>\n<li>CSS Transitions and Animations add polished animations to web interfaces.</li>\n<li>WebRTC enables real-time peer-to-peer video.</li>\n<li>WebAssembly allows games and other compute-intensive applications to run faster.</li>\n</ul>\n<p>The WebKit Project is excited about the future of the open web. We invite you to follow this blog to learn about new technologies as they&#8217;re implemented in WebKit.</p>", "title": "Adobe Announces Flash Distribution and Updates to End", "author_name": "Apple's WebKit Team", "source_type": "rss", "link": "https://webkit.org/blog/7839/adobe-announces-flash-distribution-and-updates-to-end/", "source_link": "https://webkit.org", "source_title": "WebKit", "published": "2017-07-25T16:00:00"}, {"source_name": "MozillaHacks", "description": "<a href=\"https://developer.mozilla.org/en-US/\" target=\"_blank\">MDN</a> is getting a new look today. Read about the changes we've made, like bug fixes, toning down the contrast and enabling http2. Want to hear more about our new system for overriding site fonts on a per-locale basis? Drop us a line in the comments section. Did we break something you love? <a href=\"https://bugzilla.mozilla.org/enter_bug.cgi?format=guided#h=dupes&#124;Mozilla%20Developer%20Network&#124;\" target=\"_blank\">File a bug</a> and we'll take a look.", "tags": "mozilla,services,tech", "text": "<p><a href=\"https://github.com/mozilla/kuma\" rel=\"noopener noreferrer\" target=\"_blank\">Kuma</a>, the code that produces the <a href=\"https://developer.mozilla.org/en-US/\" rel=\"noopener noreferrer\" target=\"_blank\">MDN</a> site, is a weird mix of the old and the new. <a href=\"https://developer.mozilla.org/en-US/docs/MDN_at_ten\">MDN turned ten</a> in 2015 and there‚Äôs still code and content around from those very first days. When I sat down to start coding the current redesign, the first thing I did was <a href=\"https://github.com/mozilla/kuma/pull/4254\">remove the last few traces of the last redesign</a>. In contrast, we have a cutting-edge audience: 92% of our users have a browser with CSS grid support! <a href=\"https://mozilla.github.io/meao/2017/06/26/http2/\">We enabled http2</a>, and 98% of our users have seen benefits from that.</p>\n<p>One of the ways we deal with old code in kuma is with the campsite rule: <em>Always leave your campsite better than you found it</em>. A redesign touches a lot of files, and this was a great opportunity to clean up and refactor ‚Äî at least until the deadline started getting close.</p>\n<p>A redesign is also a great time to change stuff you‚Äôre afraid of breaking. People are more understanding of you working the bugs out of something new than breaking something that‚Äôs worked for years. I removed 640 lines of stale code during the redesign. (And if I broke a six-year-old XPCOM tutorial you use daily by removing the custom list-style-type, please <a href=\"https://bugzilla.mozilla.org/enter_bug.cgi?format=guided#h=dupes|Mozilla%20Developer%20Network|\">file a bug</a>!)</p>\n<h3>One website with two looks</h3>\n<p>Rather than working on the CSS for the redesign in a separate ‚Äúredesign‚Äù folder, we duplicated all the files and added ‚Äú-old‚Äù to the file name of the old files, which means that all of our redesign work is happening in the ‚Äúofficial‚Äù files. This preserves the git history and means we don‚Äôt have to move anything around after launch. Once we‚Äôre happy with the code, we can delete the ‚Äú-old‚Äù files with confidence.</p>\n<p>To serve the new styles to our beta testers and the &#8220;-old&#8221; ones to everyone else, we use <a href=\"https://github.com/jsocol/django-waffle\">Django Waffle</a>. Waffle can also be used to serve different content but because there‚Äôs a strong separation of presentation and content on MDN, we‚Äôve made very few changes to the HTML.</p>\n<h3>Bugs our beta testers found</h3>\n<p>MDN is <em>huge</em>, and we can‚Äôt test every page in every locale. We‚Äôre really lucky to have active beta testers. :) Some of the biggest things they turned up for us were:</p>\n<h4>Highlighting</h4>\n<p><img alt=\"Problems with Zilla Highlight in Vietnamese and when there's inline code examples.\" class=\"aligncenter size-large wp-image-31123\" height=\"92\" src=\"https://hacks.mozilla.org/files/2017/07/vi-500x92.png\" width=\"500\" /></p>\n<p>We started out by replicating Mozilla‚Äôs brand ‚Äúhighlight‚Äù effect by using the Zilla Slab Highlight font, but we abandoned that pretty quickly when problems turned up in many <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1375831\">of</a> <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1375917\">our</a> <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1375879\">locales</a> and when used in combination with inline code.</p>\n<p>The current approach puts a full-width black background on h3 and h4 headings by default, and then some JavaScript runs to add a <code>&lt;span&gt;</code> tag so that the black background hugs the heading text. Progressive enhancement at work.</p>\n<p>We went back and forth about this for a while, wondering if the JavaScript and extra <code>&lt;span&gt;</code> was worth the effort. But we stuck with it because it makes the h3 and h4 headings much easier to spot when scanning the page.</p>\n<h4>What‚Äôs Taiwanese for Slab Serif?</h4>\n<p><img alt=\"Showing the difference between Zilla's thick strokes and the thin strokes of Taiwanese.\" class=\"aligncenter size-large wp-image-31124\" height=\"55\" src=\"https://hacks.mozilla.org/files/2017/07/taiwanese-500x55.png\" width=\"500\" /></p>\n<p>Previously we used Open Sans as our heading text. With the redesign, we switched to Zilla Slab. Open Sans was thin and an average height for a font. It didn‚Äôt look out of place next to the system fallbacks for Chinese or Japanese characters.</p>\n<p>Zilla is big and thick, and we started getting feedback about the contrast with these system fallbacks. Additionally, the character set for Zilla is European Latin only at the moment, so Vietnamese, which uses Latin characters plus a couple Latin characters not used in Europe, displayed <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1379259\">font fallbacks in the middles of words</a>.</p>\n<p>To address both these problems, we implemented a system that allowed us to <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1379259\">override the site fonts on a per-locale basis</a>. (Comment if you‚Äôd like a separate blog post about this).</p>\n<h4>Contrast</h4>\n<p>We received many complaints about the old design&#8217;s low-contrast display. We went a bit too far the other way with this design and received complaints about the high contrast. We‚Äôve toned it down to the ever-popular <code>#333</code> now.</p>\n<h3>What‚Äôs next</h3>\n<p>We‚Äôre moving on from this to make specific improvements to the article pages:</p>\n<ul>\n<li>Putting code samples high on the page; our hard-working writers and volunteers are doing this, one page at a time.</li>\n<li>A better approach to readable line-lengths and wide code examples, inspired by the Hacks Blog theme.</li>\n<li>Compatibility tables that display desktop and mobile data side by side.</li>\n<li>Code samples you can experiment with in the page.</li>\n</ul>\n<p>See this early by <a href=\"https://developer.mozilla.org/en-US/docs/MDN/Contribute/Howto/Be_a_beta_tester\">signing up to be a beta tester</a>.</p>\n<p>Enjoyed beta testing MDN? You can also <a href=\"https://www.mozilla.org/en-US/firefox/channel/desktop/\">beta-test Firefox by downloading Nightly</a>.</p>\n<h3>Who is ‚Äúwe‚Äù?</h3>\n<p>The MDN dev team is:</p>\n<ul>\n<li><strong>Stephanie Hobson</strong>, me, CSS-Pre-Pre-Processor</li>\n<li><strong>Schalk Neethling</strong>, who reviewed each of my 30+ pull requests in ALL THE BROWSERS, sometimes multiple times</li>\n<li><strong>John Whitlock</strong>, who did the awesome <a href=\"https://github.com/mozilla/kuma/pull/4303#issue-241394205\">locale fallbacks</a></li>\n<li><strong>Ryan Johnson</strong>, who always asks ‚ÄúWhy not?‚Äù when John and I say things can‚Äôt be done.</li>\n</ul>\n<p>We blog sporadically on the <a href=\"https://mozilla.github.io/meao/2017/07/06/kuma-report/\">Mozilla Marketing Engineering &amp; Operations blog</a>.</p>\n<p>You should also read this blog post by our Product Manager, Kadir Topal, about <a href=\"https://blog.mozilla.org/opendesign/future-mdn-focus-web-docs/\">The Future of MDN</a>.</p>", "title": "The MDN Redesign ‚ÄúBehind the Scenes‚Äù", "author_name": "Stephanie Hobson", "source_type": "rss", "link": "https://hacks.mozilla.org/2017/07/the-mdn-redesign-behind-the-scenes/", "source_link": "https://hacks.mozilla.org", "source_title": "Mozilla Hacks ‚Äì the Web developer blog", "published": "2017-07-25T15:20:00"}, {"source_name": "EdgeBlog", "description": "<p>Registration is now open¬†for Microsoft Edge Web Summit 2017. Join the Microsoft Edge team in Seattle on September 13th for a jam-packed day of energetic technical sessions looking at what‚Äôs new, and what‚Äôs next, for the web on Windows. Space is limited and reservations are on a first-come, first-served basis, so book your seat today! [&#8230;]</p>\n<p>The post <a href=\"https://blogs.windows.com/msedgedev/2017/07/24/register-now-edge-web-summit-2017/\" rel=\"nofollow\">Register now for Microsoft Edge Web Summit 2017</a> appeared first on <a href=\"https://blogs.windows.com/msedgedev\" rel=\"nofollow\">Microsoft Edge Dev Blog</a>.</p>", "tags": "announcements,behind the scenes,chakra,chakracore,edgehtml,mobile,new platform features,pc,tablet,web summit,browsers,edge,tech,web", "text": "<p><a href=\"https://summit.microsoftedge.com\">Registration is now open</a>¬†for Microsoft Edge Web Summit 2017. Join the Microsoft Edge team in Seattle on September 13th for a jam-packed day of energetic technical sessions looking at what‚Äôs new, and what‚Äôs next, for the web on Windows. Space is limited and reservations are on a first-come, first-served basis, so <a href=\"https://summit.microsoftedge.com/\">book your seat today</a>!</p>\n<p><a href=\"https://summit.microsoftedge.com\"><img alt=\"Duotone photo of Seattle with superimposed text reading &quot;Microsoft Edge Web Summit 2017, September 13th, 2017, Seattle, WA&quot;\" class=\"aligncenter size-full wp-image-21019\" height=\"620\" src=\"https://winblogs.azureedge.net/win/2017/06/c7245a81901b24ceddcc9e34b37f6b12.png\" width=\"1280\" /></a></p>\n<p>Microsoft Edge Web Summit is a¬†free conference presented by the engineers building Microsoft Edge. The main track consists of 14 jam-packed technical sessions, covering everything from performance, accessibility, and test guidance, to brand-new tools and APIs for building Progressive Web Apps on Windows, adding payments and biometric authentication to your sites, and building modern layouts with new CSS features like¬†CSS¬†Grid.</p>\n<p>This year, we‚Äôre introducing a new Hallway Track, where you can meet with engineers from across Microsoft to solve real problems today, and build invaluable connections for the future. Looking to reduce a troublesome performance issue? Struggling with best practices for accessibility? Eager to get started with WebVR? Curious about Bash on Windows? We‚Äôve got you covered. The Hallway Track connects you one-to-one with Microsoft engineers throughout the day for tangible results you can take back to your site or app.</p>\n<p>We‚Äôre excited to meet developers around the world face to face, and look forward to seeing you here in Seattle, WA! Space is limited and reservations are on a first-come, first-served basis, so <a href=\"https://summit.microsoftedge.com\">book your seat today</a>. Can&#8217;t make it? Don&#8217;t worry &#8211; though there&#8217;s no substitute for attending in person, we&#8217;ll be streaming live on Channel 9 all day (no registration required), and recorded sessions will be available after the fact.</p>\n<p>If you have any questions about the event, you can reach the event team on Twitter <a href=\"https://twitter.com/msedgedev\">@MSEdgeDev</a> or by email at <a href=\"mailto:edgesummit@microsoft.com\">edgesummit@microsoft.com</a>. See you there!</p>\n<p><img alt=\"Microsoft Edge Web Summit logo (two line-art alpine summits, with stylized angle brackets superimposed above them)\" class=\"aligncenter wp-image-21046 size-medium\" height=\"124\" src=\"https://winblogs.azureedge.net/win/2017/07/562d27da7cb057096383dc8409bf530b-300x124.png\" width=\"300\" /></p>\n<p>‚Äï <a href=\"https://twitter.com/kylealden\">Kyle Pflug</a>, Senior Program Manager, Microsoft Edge</p>\n<p>The post <a href=\"https://blogs.windows.com/msedgedev/2017/07/24/register-now-edge-web-summit-2017/\" rel=\"nofollow\">Register now for Microsoft Edge Web Summit 2017</a> appeared first on <a href=\"https://blogs.windows.com/msedgedev\" rel=\"nofollow\">Microsoft Edge Dev Blog</a>.</p>", "title": "Register now for Microsoft Edge Web Summit 2017", "author_name": "Kyle Pflug", "source_type": "rss", "comments_count": 0, "published": "2017-07-24T17:00:00", "link": "https://blogs.windows.com/msedgedev/2017/07/24/register-now-edge-web-summit-2017/", "source_link": "https://blogs.windows.com/msedgedev", "source_title": "Microsoft Edge Dev Blog"}, {"source_name": "MozillaHacks", "description": "A-Frame makes building 3D and VR web applications easy, so developers of all skill levels can create rich and interactive virtual worlds. For an Oregon State University student project focused on WebVR, our team investigated performance and optimizations for A-Frame on Android smartphones. We developed a means of benchmarking the level of 3D complexity a mobile phone is capable of, and determining which performance metrics are required for such a benchmark.", "tags": "mozilla,services,tech", "text": "<p><a href=\"https://aframe.io/\">A-Frame</a> makes building 3D and VR web applications easy, so developers of all skill levels can create rich and interactive virtual worlds ‚Äì and help make the web the best and largest deployment surface for VR content. For an Oregon State University <a href=\"https://github.com/Rogersyp/CS_Capstone_VR-AR_In_Our_Pocket\">capstone project</a> focused on WebVR, our team investigated performance and optimizations for A-Frame on Android smartphones. We developed a means of benchmarking the level of 3D complexity a mobile phone is capable of, and determining which performance metrics are required for such a benchmark.</p>\n<p><em><a href=\"https://hacks.mozilla.org/files/2017/07/Screen-Shot-2017-07-19-at-11.11.49.png\"><img alt=\"Team OVRAR!\" class=\"aligncenter wp-image-31102 size-large\" height=\"380\" src=\"https://hacks.mozilla.org/files/2017/07/Screen-Shot-2017-07-19-at-11.11.49-500x380.png\" width=\"500\" /></a></em></p>\n<p>From the left, Team OVRAR (Optimizing Virtual Reality and Augmented Reality):</p>\n<p><strong>Branden Berlin:</strong> Javascript Compatibility and Model Lighting<br />\n<strong>Charles Siebert:</strong> Team Captain, Project Designer, and Modeling<br />\n<strong>Yipeng (Roger) Song:</strong> Animations and Texturing</p>\n<h2>Results and Recommendations</h2>\n<p><strong>Texture size:</strong> The framework resizes textures to the nearest power of two, which heavily increases the loading and rendering workload in the scenes. We found that high-resolution textures that didn‚Äôt match the criteria reached sizes of 8196&#215;8196, with one texture taking up to 20 MB! Using texture dimensions that are a power of two helps ensure optimal memory use. Check the <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Web_Console\">Web Console</a> for warnings when textures are resized.</p>\n<p><strong>Asset Limit:</strong> We found that having more than 70 MB of assets loaded for one web page was unrealistic in a phone environment. It caused significant delays in loading the scene fully, and in some cases crashed the browser on our phones. Use the <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Performance/Allocations\">Allocations recorder in the Performance Tool in Firefox</a> to check your scene&#8217;s memory usage, and the <a href=\"https://aframe.io/docs/0.6.0/introduction/visual-inspector-and-dev-tools.html\">A-Frame Inspector</a> to tune aspects of rendering for individual objects.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/Screen-Shot-2017-07-19-at-11.11.32.png\"><img alt=\"Tree map\" class=\"aligncenter wp-image-31103 size-large\" height=\"285\" src=\"https://hacks.mozilla.org/files/2017/07/Screen-Shot-2017-07-19-at-11.11.32-500x285.png\" width=\"500\" /></a></p>\n<p><strong>Resolution cost:</strong> Higher resolution trees caused delays in loading the models and significant slowdowns in rendering the scenes. Our high resolution tree features 37,000 vertices which increases the graphics rendering workload, including lighting from multiple light sources. This heavily limited the number of models we could load into our scene. We also found an upper limit for our devices while handling these trees: When our room reached about 1,000,000 vertices, our phone browsers would crash after spending a few minutes attempting to load and render. You can add the <a href=\"https://aframe.io/docs/0.6.0/components/stats.html#metrics\">‚Äústats‚Äù property to your tag</a> to see the number of vertices in the scene.</p>\n<p><strong>Object count:</strong> Load times increased linearly based on the number of models to be drawn to the scene. This would add a significant amount of time, if each object to be loaded took, for example, three milliseconds. Further inspecting the memory snapshot shows that our object models are read in and stored into object arrays for quicker access and rendering. Larger object models would also increase linearly based off the number of vertices and faces that are used to create the model, and their resulting normal vectors. Check the <a href=\"https://aframe.io/docs/0.6.0/components/stats.html#metrics\">A-Frame stats monitor</a> to keep an eye on your object count.</p>\n<p><strong>Measurement overhead:</strong> During the testing, we used WebIDE to monitor on-device performance. We found that the overhead of USB debugging on our Android devices caused performance to drop by nearly half. Our testing showed that CPU performance was not the leading bottleneck in rendering the scenes. CPU usage hovered at 10-25% during heavy performance drops. This shows that the rendering is mostly done on the GPU, which follows how OpenGL ES 2.0 operates in this framework.</p>\n<h2>Testing Approach</h2>\n<p>Our approach was to:</p>\n<ul>\n<li>render multiple scenes while measuring specific metrics</li>\n<li>determine the best practices for those metrics on mobile</li>\n<li>report any relevant bugs that appear.</li>\n</ul>\n<p>The purpose of creating a benchmark application for a mobile device is to give a baseline for what is possible to develop, so developers can use this information to plan their own projects.</p>\n<p>We tested on the LG Nexus 5X and used the WebIDE feature in <a href=\"https://www.mozilla.org/en-US/firefox/channel/desktop/\" rel=\"noopener noreferrer\" target=\"_blank\">Firefox Nightly</a> to pull performance statistics from the phone while it was rendering our scenes, tracking frames-per-second (FPS), and using memory. Additionally, we tracked processor usage on the device through Android‚Äôs native developer settings.</p>\n<p>To begin, we broke down the fundamental parts of what goes into rendering computer graphics, and created separate scenes to test each of these parts on the device. We tested object modeling, texturing, animation, and lighting, and then created standards of performance that the phone needed to meet for each. We aimed to first find a baseline performance of 30 FPS for each part and then find the upper bound &#8211; the point at which the feature breaks or causes visual drops in performance. We separated these features by creating a VR environment with four ‚Äúrooms‚Äù that tested each in A-Frame.</p>\n<p><strong>Room 1: Loading object models using obj-loader</strong></p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/Screen-Shot-2017-07-19-at-11.11.03.png\"><img alt=\"Room 4 screenshot\" class=\"aligncenter wp-image-31104 size-large\" height=\"303\" src=\"https://hacks.mozilla.org/files/2017/07/Screen-Shot-2017-07-19-at-11.11.03-500x303.png\" width=\"500\" /></a></p>\n<p>In the first room, we implemented a high-resolution tree, loading a large number of low vertice-count objects and comparing to a low number of high vertice-count objects. Having a comparable number of vertices rendered in either scene helped us determine the performance impact of loading multiple objects at once.</p>\n<p><strong>Room 2: Animations and textures</strong></p>\n<p>In this room, we implemented textures and animations to determine the impact on initial load times and the impact in calculating animation methods. We used A-Frame‚Äôs built-in functions to attach assets to objects to texture them, and we used A-Frame&#8217;s animation methods to animate the objects in this room. This allowed us to easily test this scenario of animating the textured objects and measure the differences between the two iterations. In the first iteration, we implemented low-resolution textures on objects to compare them with high-resolution textures in the second iteration. These resolution sizes varied from 256&#215;256 to 8196&#215;8196. We also wanted to compare the performance between the two rooms, and see if texturing the objects would cause any unforeseen issues with animations other than the initial load time when downloading the assets from the web page.</p>\n<p><strong>Room 3: User interaction and lighting</strong></p>\n<p>This room‚Äôs initial concept focused on the basis of gaming: user interaction. We utilized JavaScript within A-Frame to allow the user to interact with objects scattered about a field. Due to the limited mobility of mobile-VR interaction, we kept it to visual interaction. Once the user looked at an object, it would either shrink or enlarge. We wanted to see if any geometric change due to interaction would impact hardware demand. We manipulated the growth size of object interactions and found a few unreliable stutters. Generally, though, the hardware performance was stable.</p>\n<p>For the second iteration, we ramped up the effects of user interactions. We saw that nothing changed when it came to physical effects on objects in the world, so we decided to include something that is more taxing on the hardware: lighting.</p>\n<p>As the user interacted with an object, the object would then turn into a light source, producing an ambient light at maximum intensity. We scattered these objects around the room and had the user turn them on, one by one. We started with 10 ‚Äòsuns‚Äô and noticed an initial lag when loading the room, as well as a 2-3 second FPS drop to 13, when turning on the first sphere. After that, the rest of the spheres turned on smoothly. We noticed a steady and consistent drop of about 10 FPS for every 10 max-intensity light sources. However, as the intensity was decreased, more and more lighting sources were allowed before a noticeable change in performance occurred.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/Screen-Shot-2017-07-19-at-09.33.59.png\"><img alt=\"Room 3 screenshots\" class=\"aligncenter wp-image-31105 size-large\" height=\"625\" src=\"https://hacks.mozilla.org/files/2017/07/Screen-Shot-2017-07-19-at-09.33.59-500x625.png\" width=\"500\" /></a></p>\n<p><strong>Room 4: All previous features implemented together.</strong></p>\n<p>Developers are unlikely to use just one of these specific features when creating their applications. We created this room to determine if the performance would drop at an exponential rate if all features were added together, as this would be a realistic scenario.</p>\n<p><strong>Further Information</strong></p>\n<p>You can find all the source code and documentation for our <a href=\"https://github.com/Rogersyp/CS_Capstone_VR-AR_In_Our_Pocket\">OVRAR project on Github</a>.</p>\n<p>If you have any questions, ask in the comments below. Thanks!</p>", "title": "Optimizing Performance of A-Frame Scenes for Mobile Devices", "author_name": "Charles Siebert", "source_type": "rss", "link": "https://hacks.mozilla.org/2017/07/optimizing-performance-of-a-frame-scenes-for-mobile-devices/", "source_link": "https://hacks.mozilla.org", "source_title": "Mozilla Hacks ‚Äì the Web developer blog", "published": "2017-07-24T15:37:00"}, {"source_name": "2ality", "description": "<p>This blog post describes a minimal setup for producing npm packages via Babel. You can see that setup in action in the GitHub repository for <a href=\"https://github.com/rauschma/re-template-tag\"><code>re-template-tag</code></a>.</p>\n\n<div><a href=\"http://2ality.com/2017/07/npm-packages-via-babel.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/LIPuOPJtOio\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "A minimal setup for Babel-based npm packages", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/07/npm-packages-via-babel.html", "author_link": "http://2ality.com/", "published": "2017-07-24T13:36:00", "source_title": "2ality feed"}, {"source_name": "2ality", "description": "<p>This blog post explains ways of targeting multiple platforms via the same npm package.</p>\n\n<div><a href=\"http://2ality.com/2017/04/setting-up-multi-platform-packages.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/P6Luv2K1nRk\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "Setting up multi-platform npm packages", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/04/setting-up-multi-platform-packages.html", "author_link": "http://2ality.com/", "published": "2017-07-23T17:17:00", "source_title": "2ality feed"}, {"source_name": "WebkitBlog", "description": "Cryptography is the cornerstone of information security, including various aspects such as data confidentiality, data integrity, authentication, and non-repudiation.", "tags": "standards,browsers,safari,tech,web,webkit", "text": "<p>Cryptography is the cornerstone of information security, including various aspects such as data confidentiality, data integrity, authentication, and non-repudiation. These provide support for the fundamental technologies of today&#8217;s Internet like HTTPS, DNSSEC, and VPN. The <a href=\"https://www.w3.org/TR/WebCryptoAPI/\">WebCrypto API</a> was created to bring these important high-level cryptography capabilities to the web. This API provides a set of JavaScript functions for manipulating low-level cryptographic operations, such as hashing, signature generation and verification, encryption and decryption, and shared secret derivation. In addition, it supports generation and management of corresponding key materials. Combining the complete support of various cryptographic operations with a wide range of algorithms, the WebCrypto API is able to assist web authors in tackling diverse security requirements.</p>\n<p>This blog post first talks about the advantages of implementing web cryptography through native APIs, and then introduces an overview of the WebCrypto API itself. Next, it presents some differences between the updated SubtleCrypto interface and the older <code>webkit-</code> prefixed interface. Some newly-added algorithms are discussed, and finally we demonstrate how to smoothly transition from the <code>webkit-</code> prefixed API to the new, standards-compliant API.</p>\n<h2>Native or Not Native?</h2>\n<p>Long before the WebCrypto API was standardized, several JavaScript cryptography libraries were created and have successfully served the open web since. So why bother implementing a web-facing cryptography library built on native APIs? There are several reasons, one of the more important being performance. Numbers tell the truth. We conducted several performance tests to compare our updated WebCrypto API and some famous pure JavaScript implementations.</p>\n<p>The latest <a href=\"http://bitwiseshiftleft.github.io/sjcl/\">SJCL</a> (1.0.7), <a href=\"https://github.com/vibornoff/asmcrypto.js/\">asmcrypto.js</a>, and <a href=\"https://code.google.com/archive/p/crypto-js/\">CryptoJS</a> (3.1) were selected for the comparison. The test suite contains:</p>\n<ol>\n<li><strong>AES-GCM</strong>: Test encryption/decryption against a 4MB file, repeat certain times and record down the average speed. It uses a 256-bit AES key.</li>\n<li><strong>SHA-2</strong>: Hash a 512KB file by SHA-512, repeat certain times and record down the average speed.</li>\n<li><strong>RSA</strong>: Test RSA-PSS signature and verification against a 512KB file, repeat certain times and record down the average speed. It uses a 2048-bit key pair and SHA-512 for hashing.</li>\n</ol>\n<p>The content under test was carefully selected to reflect the most frequently used day-to-day cryptography operations and paired with appropriate algorithms. The test platform was a MacBook Pro (MacBookPro11,5) with a 2.8 GHz Intel Core i7 running MacOS 10.13 Beta (17A306f) and Safari Technology Preview 35. Some of the pure JavaScript implementations do not support all of the test content, therefore corresponding results were omitted from those results.</p>\n<p>Here are the test results.</p>\n<figure class=\"widescreen mattewhite\"><img alt=\"AES-GCM Encryption/Decryption SHA-2\" class=\"wp-image-7802\" src=\"https://webkit.org/wp-content/uploads/AES-GCM-Encryption-Decryption-sha2.png\" /></figure>\n<figure class=\"widescreen mattewhite\"><img alt=\"RSA\" class=\"wp-image-7803\" src=\"https://webkit.org/wp-content/uploads/RSA.png\" /></figure>\n<p>As you can see, the difference in performance is staggering. This was a surprising result, since most modern JavaScript engines are very efficient. Working with our JavaScriptCore team, we learned that the causes of these pure JavaScript implementations not performing well is that most of them are not actively maintained. Few of them take full advantage of our fast JavaScriptCore engine or modern JavaScript coding practices. Otherwise, the gaps may not be that huge.</p>\n<p>Besides superior performance, WebCrypto API also benefits better security models. For example, when developing with pure JavaScript crypto libraries, secret or private keys are often stored in the global JavaScript execution context. It is extremely vulnerable as keys are exposed to any JavaScript resources being loaded and therefore allows XSS attackers be able to steal the keys. WebCrypto API instead protects the secret or private keys by storing them completely outside of the JavaScript execution context. This limits the risk of the private key being exfiltrated and reduces the window of compromise if an attacker gets to execute JavaScript in the victim‚Äôs browser. What&#8217;s more, our WebCrypto implementation on macOS/iOS is based on the <a href=\"https://opensource.apple.com/source/CommonCrypto/\">CommonCrypto</a> routines, which are highly tuned for our hardware platforms, and are regularly audited and reviewed for security and correctness. WebCrypto API is therefore the best way to ensure users enjoy the highest security protection.</p>\n<h2>Overview of WebCrypto API</h2>\n<p>The WebCrypto API starts with <code>crypto</code> global object:</p>\n<pre><code>Crypto\n{\n    subtle: SubtleCrypto,\n    ArrayBufferView getRandomValues(ArrayBufferView array)\n}\n</code></pre>\n<p>Inside, it owns a <code>subtle</code> object that is a singleton of the <code>SubtleCrypto</code> interface. The interface is named <code>subtle</code> because it warns developers that many of the crypto algorithms have sophisticated usage requirements that must be strictly followed to get the expected algorithmic security guarantees. The <code>subtle</code> object is the main entry point for interacting with underlying crypto primitives. The <code>crypto</code> global object also has the function <code>getRandomValues</code>, which provides a cryptographically strong random number generator (RNG). The WebKit RNG (macOS/iOS) is based on AES-CTR.</p>\n<p>The <code>subtle</code> object is composed of multiple methods to serve the needs of low-level cryptographic operations:</p>\n<pre><code>SubtleCrypto\n{\n    Promise&lt;ArrayBuffer&gt; encrypt(AlgorithmIdentifier algorithm, CryptoKey key, BufferSource data);\n    Promise&lt;ArrayBuffer&gt; decrypt(AlgorithmIdentifier algorithm, CryptoKey key, BufferSource data);\n    Promise&lt;ArrayBuffer&gt; sign(AlgorithmIdentifier algorithm, CryptoKey key, BufferSource data);\n    Promise&lt;boolean&gt; verify(AlgorithmIdentifier algorithm, CryptoKey key, BufferSource signature, BufferSource data);\n    Promise&lt;ArrayBuffer&gt; digest(AlgorithmIdentifier algorithm, BufferSource data);\n    Promise&lt;CryptoKey or CryptoKeyPair&gt; generateKey(AlgorithmIdentifier algorithm, boolean extractable, sequence&lt;KeyUsage&gt; keyUsages );\n    Promise&lt;CryptoKey&gt; deriveKey(AlgorithmIdentifier algorithm, CryptoKey baseKey, AlgorithmIdentifier derivedKeyType, boolean extractable, sequence&lt;KeyUsage&gt; keyUsages );\n    Promise&lt;ArrayBuffer&gt; deriveBits(AlgorithmIdentifier algorithm, CryptoKey baseKey, unsigned long length);\n    Promise&lt;CryptoKey&gt; importKey(KeyFormat format, (BufferSource or JsonWebKey) keyData, AlgorithmIdentifier algorithm, boolean extractable, sequence&lt;KeyUsage&gt; keyUsages );\n    Promise&lt;ArrayBuffer&gt; exportKey(KeyFormat format, CryptoKey key);\n    Promise&lt;ArrayBuffer&gt; wrapKey(KeyFormat format, CryptoKey key, CryptoKey wrappingKey, AlgorithmIdentifier wrapAlgorithm);\n    Promise&lt;CryptoKey&gt; unwrapKey(KeyFormat format, BufferSource wrappedKey, CryptoKey unwrappingKey, AlgorithmIdentifier unwrapAlgorithm, AlgorithmIdentifier unwrappedKeyAlgorithm, boolean extractable, sequence&lt;KeyUsage&gt; keyUsages );\n}\n</code></pre>\n<p>As the names of these methods imply, the WebCrypto API supports hashing, signature generation and verification, encryption and decryption, shared secret derivation, and corresponding key materials management. Let&#8217;s look closer at one of those methods:</p>\n<pre><code>Promise&lt;ArrayBuffer&gt; encrypt(AlgorithmIdentifier algorithm,\n                             CryptoKey key,\n                             BufferSource data)\n</code></pre>\n<p>All of the functions return a <code>Promise</code>, and most of them accept an <code>AlgorithmIdentifier</code> parameter. <code>AlgorithmIdentifier</code> can be either a string that specifies an algorithm, or a dictionary that contains all the inputs to a specific operation. For example, in order to do an AES-CBC encryption, one has to supply the above <code>encrypt</code> method with:</p>\n<pre><code>var aesCbcParams = {name: \"aes-cbc\", iv: asciiToUint8Array(\"jnOw99oOZFLIEPMr\")}\n</code></pre>\n<p><code>CryptoKey</code> is an abstraction of keying materials in WebCrypto API. Here is an illustration:</p>\n<pre><code>CryptoKey\n{\n    type: \"secret\",\n    extractable: true,\n    algorithm: { name: \"AES-CBC\", length: 128 },\n    usages: [\"decrypt\", \"encrypt\"]\n}\n</code></pre>\n<p>This code tells us that this key is an extractable (to JavaScript execution context) AES-CBC ‚Äúsecret‚Äù (symmetric) key with a length of 128 bits that can be used for both encryption and decryption. The <code>algorithm</code> object is a dictionary that characterizes different keying materials, while all the other slots are generic. Bear in mind that <code>CryptoKey</code> does not expose the underlying key data directly to web pages. This design of WebCrypto keeps the secret and private key data safely within the browser agent, while allowing web authors to still enjoy the flexibility of working with concrete keys.</p>\n<h2>Changes to WebKitSubtleCrypto</h2>\n<p>Those of you that have never heard of <code>WebKitSubtleCrypto</code> may skip this section and use <code>SubtleCrypto</code> exclusively. This section is aimed at providing compelling reasons for current <code>WebKitSubtleCrypto</code> users to switch to our new standards-compliant <code>SubtleCrypto</code>.</p>\n<h3>1. Standards-compliant implementation</h3>\n<p><code>SubtleCrypto</code> is a standards-compliant implementation of the current specification, and is completely independent from <code>WebKitSubtleCrypto</code>. Here is an example code snippet that demonstrates the differences between the two APIs for importing a JsonWebKey (JWK) format key:</p>\n<pre><code class=\"js\"><span class=\"keyword type\">var</span> <span class=\"identifier\">jwkKey</span> <span class=\"operator\">=</span> {\n    <span class=\"string\">\"kty\"</span><span class=\"operator\">:</span> <span class=\"string\">\"oct\"</span>,  \n    <span class=\"string\">\"alg\"</span><span class=\"operator\">:</span> <span class=\"string\">\"A128CBC\"</span>,\n    <span class=\"string\">\"use\"</span><span class=\"operator\">:</span> <span class=\"string\">\"enc\"</span>,\n    <span class=\"string\">\"ext\"</span><span class=\"operator\">:</span> <span class=\"keyword literal\">true</span>,\n    <span class=\"string\">\"k\"</span><span class=\"operator\">:</span> <span class=\"string\">\"YWJjZGVmZ2gxMjM0NTY3OA\"</span>\n};\n\n<span class=\"comment\">// WebKitSubtleCrypto:\n</span><span class=\"comment\">// asciiToUint8Array() takes a string and converts it to an Uint8Array object.\n</span><span class=\"keyword type\">var</span> <span class=\"identifier\">jwkKeyAsArrayBuffer</span> <span class=\"operator\">=</span> <span class=\"identifier\">asciiToUint8Array</span>(<span class=\"identifier\">JSON</span>.<span class=\"identifier\">stringify</span>(<span class=\"identifier\">jwkKey</span>));\n<span class=\"identifier\">crypto</span>.<span class=\"identifier\">webkitSubtle</span>.<span class=\"identifier\">importKey</span>(<span class=\"string\">\"jwk\"</span>, <span class=\"identifier\">jwkKeyAsArrayBuffer</span>, <span class=\"keyword literal\">null</span>, <span class=\"keyword literal\">false</span>, [<span class=\"string\">\"encrypt\"</span>]).<span class=\"identifier\">then</span>(<span class=\"keyword type\">function</span>(<span class=\"identifier\">key</span>) {\n    <span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"string\">\"An AES-CBC key is imported via JWK format.\"</span>);\n});\n\n<span class=\"comment\">// SubtleCrypto:\n</span><span class=\"identifier\">crypto</span>.<span class=\"identifier\">subtle</span>.<span class=\"identifier\">importKey</span>(<span class=\"string\">\"jwk\"</span>, <span class=\"identifier\">jwkKey</span>, <span class=\"string\">\"aes-cbc\"</span>, <span class=\"keyword literal\">false</span>, [<span class=\"string\">\"encrypt\"</span>]).<span class=\"identifier\">then</span>(<span class=\"keyword type\">function</span>(<span class=\"identifier\">key</span>) {\n    <span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"string\">\"An AES-CBC key is imported via JWK format.\"</span>);\n});\n</code></pre>\n<p>With the new interface, one no longer has to convert the JSON key to <code>UInt8Array</code>. The SubtleCrypto interface is indeed significantly more standards-compliant than our old WebKitSubtleCrypto implementation. Here are the results of running W3C WebCrypto API tests:</p>\n<figure class=\"widescreen mattewhite\"><img alt=\"W3C WebCrypto TestSuite Result Chart\" class=\"wp-image-7801\" src=\"https://webkit.org/wp-content/uploads/W3C-WebCrypto-TestSuite-Result.png\" /></figure>\n<div class=\"note\">This test suite is an improved one based on the most updated <a href=\"https://github.com/w3c/web-platform-tests\">web-platform-tests</a> GitHub repository. Pull requests are made for all improvements: <a href=\"https://github.com/w3c/web-platform-tests/pull/6100\">#6100</a>, <a href=\"https://github.com/w3c/web-platform-tests/pull/6101\">#6101</a>, and <a href=\"https://github.com/w3c/web-platform-tests/pull/6102\">#6102</a>.</div>\n<p>The new implementation&#8217;s coverage is around 95% which is 48X higher than our <code>webkit-</code> prefixed one! The concrete numbers for all selected parties are: 999 for prefixed WebKit, 46653 for Safari 11, 45709 for Chrome 59, and 18636 for FireFox 54.</p>\n<h3>2. DER encoding support for importing and exporting asymmetric keys</h3>\n<p>The WebCrypto API specification supports DER encoding of public keys as <a href=\"https://www.w3.org/TR/WebCryptoAPI/#subtlecrypto-interface-datatypes\">SPKI</a>, and of private key as <a href=\"https://www.w3.org/TR/WebCryptoAPI/#subtlecrypto-interface-datatypes\">PKCS8</a>. Prior to this, <code>WebKitSubtleCrypto</code> only supported the JSON-based JWK format for RSA keys. This is convenient when keys are used on the web because of its structure and human readability. However, when public keys are often exchanged between servers and web browsers, they are usually embedded in certificates in a binary format. Even though some JavaScript frameworks have been written to read the binary format of a certificate and to extract its public key, few of them convert a binary public key into its JWK equivalent. This is why support for SPKI and PKCS8 is useful. Here are code snippets that demonstrate what can be done with the <code>SubtleCrypto</code> API:</p>\n<pre><code class=\"js\"><span class=\"comment\">// Import:\n</span><span class=\"comment\">// Generated from OpenSSL\n</span><span class=\"comment\">// Base64URL.parse() takes a Base64 encoded string and converts it to an Uint8Array object.\n</span><span class=\"keyword type\">var</span> <span class=\"identifier\">spkiKey</span> <span class=\"operator\">=</span> <span class=\"identifier\">Base64URL</span>.<span class=\"identifier\">parse</span>(<span class=\"string\">\"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwCjRCtFwvSNYMZ07u5SxARxglJl75T7bUZXFsDVxHkMhpNC2RaN4jWE5bwYUDMeD2fVmxhpaUQn/6AbFLh6gHxtwrCfc7rIo/SfDdGd3GkRlXK5xXwGuM6MvP9nuZHaarIyArRFh2U2UZxFlVsKI0pSHo6n58W1fPZ1syOoVEZ/WYE6gLhMMwfpeAm97mro7mekRdMULOV/mR5Ul3CHm9Zt93Dc8GpnPA8bhLiB0VNyGTEMa06nJul4gj1sjxLDoUvZY2EWq7oUUnfLBUYMfiqK0kQcW94wvBrIq2DQUApLyTTbaAOY46TLwX6c8LtubJriYKTC5a9Bb0/7ovTWB0wIDAQAB\"</span>);\n<span class=\"identifier\">crypto</span>.<span class=\"identifier\">subtle</span>.<span class=\"identifier\">importKey</span>(<span class=\"string\">\"spki\"</span>, <span class=\"identifier\">spkiKey</span>, {<span class=\"identifier\">name</span><span class=\"operator\">:</span> <span class=\"string\">\"RSA-OAEP\"</span>, <span class=\"identifier\">hash</span><span class=\"operator\">:</span> <span class=\"string\">\"sha-256\"</span>}, <span class=\"keyword literal\">true</span>, [<span class=\"string\">\"encrypt\"</span>]).<span class=\"identifier\">then</span>(<span class=\"keyword type\">function</span>(<span class=\"identifier\">key</span>) {\n    <span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"string\">\"A RSA-OAEP key is imported via SPKI format.\"</span>);\n});\n\n<span class=\"comment\">// Export:\n</span><span class=\"keyword type\">var</span> <span class=\"identifier\">rsaKeyGenParams</span> <span class=\"operator\">=</span> {\n    <span class=\"identifier\">name</span><span class=\"operator\">:</span> <span class=\"string\">\"RSA-OAEP\"</span>,\n    <span class=\"identifier\">modulusLength</span><span class=\"operator\">:</span> <span class=\"number\">2048</span>,\n    <span class=\"identifier\">publicExponent</span><span class=\"operator\">:</span> <span class=\"keyword operator\">new</span> <span class=\"identifier\">Uint8Array</span>([<span class=\"number\">0x01</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x01</span>]),  <span class=\"comment\">// Equivalent to 65537\n</span>    <span class=\"identifier\">hash</span><span class=\"operator\">:</span> <span class=\"string\">\"sha-256\"</span>\n};\n<span class=\"identifier\">crypto</span>.<span class=\"identifier\">subtle</span>.<span class=\"identifier\">generateKey</span>(<span class=\"identifier\">rsaKeyGenParams</span>, <span class=\"keyword literal\">true</span>, [<span class=\"string\">\"decrypt\"</span>, <span class=\"string\">\"encrypt\"</span>]).<span class=\"identifier\">then</span>(<span class=\"keyword type\">function</span>(<span class=\"identifier\">keyPair</span>) {\n    <span class=\"identifier\">crypto</span>.<span class=\"identifier\">subtle</span>.<span class=\"identifier\">exportKey</span>(<span class=\"string\">\"spki\"</span>, <span class=\"identifier\">keyPair</span>.<span class=\"identifier\">publicKey</span>).<span class=\"identifier\">then</span>(<span class=\"keyword type\">function</span>(<span class=\"identifier\">binary</span>) {\n        <span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"string\">\"A RSA-OAEP key is exported via SPKI format.\"</span>);\n    });\n});\n</code></pre>\n<p>A live example from a third party to generate public key certificates can be found <a href=\"https://pkijs.org/examples/X509_cert_complex_example.html\">here</a>.</p>\n<h2>3. Asynchronously execute time-consuming <code>SubtleCrypto</code> methods</h2>\n<p>In the previous <code>WebKitSubtleCrypto</code> implementation, only <code>generateKey</code> for RSA executes asynchronously, while all the other operations are synchronous. Even though synchronous operation works well for methods that finish quickly, most crypto methods are time-consuming. Consequently, all time-consuming methods in the new <code>SubtleCrypto</code> implementation execute asynchronously:</p>\n<figure class=\"table\">\n<table>\n<tbody>\n<tr>\n<th>Method</th>\n<th>encrypt</th>\n<th>decrypt</th>\n<th>sign</th>\n<th>verify</th>\n<th>digest</th>\n<th>generateKey*</th>\n<th>deriveKey</th>\n<th>deriveBits</th>\n<th>importKey</th>\n<th>exportKey</th>\n<th>wrapKey*</th>\n<th>unwrapKey*</th>\n</tr>\n<tr>\n<td>Asynchronous</td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td>‚úî</td>\n</tr>\n</tbody>\n</table>\n</figure>\n<p>Note that only RSA key pair generation is asynchronous while EC key pair and symmetric key generation are synchronous. Also notice that AES-KW is the only exception where synchronous operations are still done for <code>wrapKey/unwrapKey</code>. Normally key size is a few hundred bytes, and therefore it is less time-consuming to encrypt/decrypt such small amount of data. AES-KW is the only algorithm that directly supports <code>wrapKey/unwrapKey</code> operations while others are bridged to <code>encrypt/decrypt</code> operations. Hence, it becomes the only algorithm that executes <code>wrapKey/unwrapKey</code> synchronously. Web developers may treat every <code>SubtleCrypto</code> function the same as any other function that returns a promise.</p>\n<h3>4. Web worker support</h3>\n<p>Besides making most of the APIs asynchronous, we also support web workers to allow another model of asynchronous execution. Developers can choose which one best suit their needs. Combining these two models, developers now could integrate cryptographic primitives inside their websites without blocking any UI activities. The <code>SubtleCrypto</code> object in web workers uses the same semantics as the one in the <code>Window</code> object. Here is some example code that uses a web worker to encrypt text:</p>\n<pre><code class=\"js\"><span class=\"comment\">// In Window. \n</span><span class=\"keyword type\">var</span> <span class=\"identifier\">rawKey</span> <span class=\"operator\">=</span> <span class=\"identifier\">asciiToUint8Array</span>(<span class=\"string\">\"16 bytes of key!\"</span>);\n<span class=\"identifier\">crypto</span>.<span class=\"identifier\">subtle</span>.<span class=\"identifier\">importKey</span>(<span class=\"string\">\"raw\"</span>, <span class=\"identifier\">rawKey</span>, {<span class=\"identifier\">name</span><span class=\"operator\">:</span> <span class=\"string\">\"aes-cbc\"</span>, <span class=\"identifier\">length</span><span class=\"operator\">:</span> <span class=\"number\">128</span>}, <span class=\"keyword literal\">true</span>, [<span class=\"string\">\"encrypt\"</span>, <span class=\"string\">\"decrypt\"</span>]).<span class=\"identifier\">then</span>(<span class=\"keyword type\">function</span>(<span class=\"identifier\">localKey</span>) {\n    <span class=\"keyword type\">var</span> <span class=\"identifier\">worker</span> <span class=\"operator\">=</span> <span class=\"keyword operator\">new</span> <span class=\"identifier\">Worker</span>(<span class=\"string\">\"crypto-worker.js\"</span>);\n    <span class=\"identifier\">worker</span>.<span class=\"identifier\">onmessage</span> <span class=\"operator\">=</span> <span class=\"keyword type\">function</span>(<span class=\"identifier\">evt</span>) {\n        <span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"string\">\"Received encrypted data.\"</span>);\n    }\n    <span class=\"identifier\">worker</span>.<span class=\"identifier\">postMessage</span>(<span class=\"identifier\">localKey</span>);\n});\n\n<span class=\"comment\">// In crypto-worker.js.\n</span><span class=\"keyword type\">var</span> <span class=\"identifier\">plainText</span> <span class=\"operator\">=</span> <span class=\"identifier\">asciiToUint8Array</span>(<span class=\"string\">\"Hello, World!\"</span>);\n<span class=\"keyword type\">var</span> <span class=\"identifier\">aesCbcParams</span> <span class=\"operator\">=</span> {\n    <span class=\"identifier\">name</span><span class=\"operator\">:</span> <span class=\"string\">\"aes-cbc\"</span>,\n    <span class=\"identifier\">iv</span><span class=\"operator\">:</span> <span class=\"identifier\">asciiToUint8Array</span>(<span class=\"string\">\"jnOw99oOZFLIEPMr\"</span>),\n}\n<span class=\"identifier\">onmessage</span> <span class=\"operator\">=</span> <span class=\"keyword type\">function</span>(<span class=\"identifier\">key</span>)\n{\n    <span class=\"identifier\">crypto</span>.<span class=\"identifier\">subtle</span>.<span class=\"identifier\">encrypt</span>(<span class=\"identifier\">aesCbcParams</span>, <span class=\"identifier\">key</span>, <span class=\"identifier\">plainText</span>).<span class=\"identifier\">then</span>(<span class=\"keyword type\">function</span>(<span class=\"identifier\">cipherText</span>) {\n        <span class=\"identifier\">postMessage</span>(<span class=\"identifier\">cipherText</span>);\n    });\n}\n</code></pre>\n<p>A live example is <a href=\"https://webkit.org/demos/webcrypto/asynchronous-execution.html\">here</a> to demonstrate how asynchronous execution could help to make a more responsive website.</p>\n<p>In addition to the four major areas of improvement above, some minor changes that are worth mentioning include:</p>\n<ul>\n<li><code>CryptoKey</code> interface enhancement includes renaming from <code>Key</code> to <code>CryptoKey</code>, making algorithm and usages slots cacheable, and exposing it to web workers.</li>\n<li><code>HmacKeyParams.length</code> is now bits instead of bytes.</li>\n<li>RSA-OAEP can now import and export keys with SHA-256.</li>\n<li><code>CryptoKeyPair</code> is now a dictionary type.</li>\n</ul>\n<h2>Newly added cryptographic algorithms</h2>\n<p>Together with the new <code>SubtleCrypto</code> interface, this update also adds support for a number of cryptographic algorithms:</p>\n<ol>\n<li><a href=\"https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Feedback_.28CFB.29\">AES-CFB</a>: CFB stands for cipher feedback. Unlike CBC,  CFB does not require the plain text be padded to the block size of the cipher.</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Counter_.28CTR.29\">AES-CTR</a>: CTR stands for counter mode. CTR is best known for its parallelizability on both encryption and decryption.</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\">AES-GCM</a>: GCM stands for Galois/Counter Mode. GCM is an authenticated encryption algorithm designed to provide both data authenticity (integrity) and confidentiality.</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Elliptic_curve_Diffie%E2%80%93Hellman\">ECDH</a>: ECDH stands for Elliptic Curve Diffie‚ÄìHellman. Elliptic curve cryptography (ECC) is an approach to   public-key cryptography based on the algebraic structure of elliptic curves over finite fields. ECC requires smaller keys compared to RSA to provide equivalent security. ECDH is one among many ECC schemes. It allows two parties each of whom owns an ECC key pair to establish a shared secret over an insecure channel.</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm\">ECDSA</a>: ECDSA stands for Elliptic Curve Digital Signature Algorithm. It is another ECC scheme.</li>\n<li><a href=\"https://en.wikipedia.org/wiki/HKDF\">HKDF</a>: HKDF stands for HMAC-based Key Derivation Function. It transforms secrets into key, allowing to combine additional non-secret inputs when needed.</li>\n<li><a href=\"https://en.wikipedia.org/wiki/PBKDF2\">PBKDF2</a>ÔºöPBKDF2 stands for Password-Based Key Derivation Function 2. It takes a password or a passphrase along with a salt value to derive a cryptographic symmetric key.</li>\n<li><a href=\"https://en.wikipedia.org/wiki/PKCS_1\">RSA-PSS</a>: PSS stands for Probabilistic Signature Scheme. It is an improved digital signature algorithm for RSA.</li>\n</ol>\n<p>This set of new algorithms not only adds new functionality, e.g. key derivation functions, but also benefits developers from higher efficiency and better security by replacing existing ones having the same functionalities. To demonstrate the benefits, sample code snippets written with selected new algorithms are presented in the following. Implementations under these examples are not written with the best practices and therefore are for demonstration only.</p>\n<h3>Example 1: AES-GCM</h3>\n<p>Prior, AES-CBC is the only available block cipher for encryption/decryption. Even though it does a great job for protecting data confidentiality, yet it doesn&#8217;t protect the authenticity (integrity) of the produced ciphers. Hence, it often bundles with HMAC-SHA256 to prevent silent corruptions of the ciphers. Here is the corresponding code snippet:</p>\n<pre><code class=\"js\"><span class=\"comment\">// Assume aesKey and hmacKey are imported before with the same raw key.\n</span><span class=\"keyword type\">var</span> <span class=\"identifier\">plainText</span> <span class=\"operator\">=</span> <span class=\"identifier\">asciiToUint8Array</span>(<span class=\"string\">\"Hello, World!\"</span>);\n<span class=\"keyword type\">var</span> <span class=\"identifier\">aesCbcParams</span> <span class=\"operator\">=</span> {\n    <span class=\"identifier\">name</span><span class=\"operator\">:</span> <span class=\"string\">\"aes-cbc\"</span>,\n    <span class=\"identifier\">iv</span><span class=\"operator\">:</span> <span class=\"identifier\">asciiToUint8Array</span>(<span class=\"string\">\"jnOw99oOZFLIEPMr\"</span>),\n}\n\n<span class=\"comment\">// Encryption:\n</span><span class=\"comment\">// First encrypt the plain text with AES-CBC.\n</span><span class=\"identifier\">crypto</span>.<span class=\"identifier\">subtle</span>.<span class=\"identifier\">encrypt</span>(<span class=\"identifier\">aesCbcParams</span>, <span class=\"identifier\">aesKey</span>, <span class=\"identifier\">plainText</span>).<span class=\"identifier\">then</span>(<span class=\"keyword type\">function</span>(<span class=\"identifier\">result</span>) {\n    <span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"string\">\"Plain text is encrypted.\"</span>);\n    <span class=\"identifier\">cipherText</span> <span class=\"operator\">=</span> <span class=\"identifier\">result</span>;\n\n    <span class=\"comment\">// Then sign the cipher text with HMAC.\n</span>    <span class=\"keyword control\">return</span> <span class=\"identifier\">crypto</span>.<span class=\"identifier\">subtle</span>.<span class=\"identifier\">sign</span>(<span class=\"string\">\"hmac\"</span>, <span class=\"identifier\">hmacKey</span>, <span class=\"identifier\">cipherText</span>);\n}).<span class=\"identifier\">then</span>(<span class=\"keyword type\">function</span>(<span class=\"identifier\">result</span>) {\n    <span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"string\">\"Cipher text is signed.\"</span>);\n    <span class=\"identifier\">signature</span> <span class=\"operator\">=</span> <span class=\"identifier\">result</span>;\n\n    <span class=\"comment\">// Finally produce the final result by concatenating cipher text and signature.       \n</span>    <span class=\"identifier\">finalResult</span> <span class=\"operator\">=</span> <span class=\"keyword operator\">new</span> <span class=\"identifier\">Uint8Array</span>(<span class=\"identifier\">cipherText</span>.<span class=\"identifier\">byteLength</span> <span class=\"operator\">+</span> <span class=\"identifier\">signature</span>.<span class=\"identifier\">byteLength</span>);\n    <span class=\"identifier\">finalResult</span>.<span class=\"identifier\">set</span>(<span class=\"keyword operator\">new</span> <span class=\"identifier\">Uint8Array</span>(<span class=\"identifier\">cipherText</span>));\n    <span class=\"identifier\">finalResult</span>.<span class=\"identifier\">set</span>(<span class=\"keyword operator\">new</span> <span class=\"identifier\">Uint8Array</span>(<span class=\"identifier\">signature</span>), <span class=\"identifier\">cipherText</span>.<span class=\"identifier\">byteLength</span>);\n    <span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"string\">\"Final result is produced.\"</span>);\n});\n\n<span class=\"comment\">// Decryption:\n</span><span class=\"comment\">// First decode the final result from the encryption step.\n</span><span class=\"keyword type\">var</span> <span class=\"identifier\">position</span> <span class=\"operator\">=</span> <span class=\"identifier\">finalResult</span>.<span class=\"identifier\">length</span> <span class=\"operator\">-</span> <span class=\"number\">32</span>; <span class=\"comment\">// SHA-256 length\n</span><span class=\"identifier\">signature</span> <span class=\"operator\">=</span> <span class=\"identifier\">finalResult</span>.<span class=\"identifier\">slice</span>(<span class=\"identifier\">position</span>);\n<span class=\"identifier\">cipherText</span> <span class=\"operator\">=</span> <span class=\"identifier\">finalResult</span>.<span class=\"identifier\">slice</span>(<span class=\"number\">0</span>, <span class=\"identifier\">position</span>);\n\n<span class=\"comment\">// Then verify the cipher text.\n</span><span class=\"identifier\">crypto</span>.<span class=\"identifier\">subtle</span>.<span class=\"identifier\">verify</span>(<span class=\"string\">\"hmac\"</span>, <span class=\"identifier\">hmacKey</span>, <span class=\"identifier\">signature</span>, <span class=\"identifier\">cipherText</span>).<span class=\"identifier\">then</span>(<span class=\"keyword type\">function</span>(<span class=\"identifier\">result</span>) {\n    <span class=\"keyword control\">if</span> (<span class=\"identifier\">result</span>) {\n        <span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"string\">\"Cipher text is verified.\"</span>);\n\n        <span class=\"comment\">// Finally decrypt the cipher text.\n</span>        <span class=\"keyword control\">return</span> <span class=\"identifier\">crypto</span>.<span class=\"identifier\">subtle</span>.<span class=\"identifier\">decrypt</span>(<span class=\"identifier\">aesCbcParams</span>, <span class=\"identifier\">aesKey</span>, <span class=\"identifier\">cipherText</span>);\n    } <span class=\"keyword control\">else</span>\n        <span class=\"keyword control\">return</span> <span class=\"identifier\">Promise</span>.<span class=\"identifier\">reject</span>();\n}).<span class=\"identifier\">then</span>(<span class=\"keyword type\">function</span>(<span class=\"identifier\">result</span>) {\n    <span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"string\">\"Cipher text is decrypted.\"</span>);\n    <span class=\"identifier\">decryptedText</span> <span class=\"operator\">=</span> <span class=\"identifier\">result</span>;\n}, <span class=\"keyword type\">function</span>() {\n    <span class=\"comment\">// Error handling codes ...\n</span>});\n</code></pre>\n<p>So far, the codes are a bit complex with AES-CBC because the extra overhead of HMAC. However, it is much simpler to achieve the same authenticated encryption effect by using AES-GCM as it bundles authentication and encryption together within one single step. Here is the corresponding code snippet:</p>\n<pre><code class=\"js\"><span class=\"comment\">// Assume aesKey are imported/generated before, and the same plain text is used.\n</span><span class=\"keyword type\">var</span> <span class=\"identifier\">aesGcmParams</span> <span class=\"operator\">=</span> {\n    <span class=\"identifier\">name</span><span class=\"operator\">:</span> <span class=\"string\">\"aes-gcm\"</span>,\n    <span class=\"identifier\">iv</span><span class=\"operator\">:</span> <span class=\"identifier\">asciiToUint8Array</span>(<span class=\"string\">\"jnOw99oOZFLIEPMr\"</span>),\n}\n\n<span class=\"comment\">// Encryption:\n</span><span class=\"identifier\">crypto</span>.<span class=\"identifier\">subtle</span>.<span class=\"identifier\">encrypt</span>(<span class=\"identifier\">aesGcmParams</span>, <span class=\"identifier\">key</span>, <span class=\"identifier\">plainText</span>).<span class=\"identifier\">then</span>(<span class=\"keyword type\">function</span>(<span class=\"identifier\">result</span>) {\n    <span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"string\">\"Plain text is encrypted.\"</span>);\n    <span class=\"identifier\">cipherText</span> <span class=\"operator\">=</span> <span class=\"identifier\">result</span>; <span class=\"comment\">// It contains both the cipherText and the authentication data.\n</span>});\n\n<span class=\"comment\">// Decryption:\n</span><span class=\"identifier\">crypto</span>.<span class=\"identifier\">subtle</span>.<span class=\"identifier\">decrypt</span>(<span class=\"identifier\">aesGcmParams</span>, <span class=\"identifier\">key</span>, <span class=\"identifier\">cipherText</span>).<span class=\"identifier\">then</span>(<span class=\"keyword type\">function</span>(<span class=\"identifier\">result</span>) {\n    <span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"string\">\"Cipher text is decrypted.\"</span>);\n    <span class=\"identifier\">decryptedText</span> <span class=\"operator\">=</span> <span class=\"identifier\">result</span>;\n}, <span class=\"keyword type\">function</span>(<span class=\"identifier\">error</span>) {\n    <span class=\"comment\">// If any violation of the cipher text is detected, the operation will be rejected.\n</span>    <span class=\"comment\">// Error handling codes ...\n</span>});\n</code></pre>\n<p>It is just that simple to use AES-GCM. This simplicity will definitely improve developers&#8217; efficiency. A live example can also be found <a href=\"https://webkit.org/demos/webcrypto/aes-gcm.html\">here</a> to demonstrate how AES-GCM can prevent silent corruption during decrypting corrupted ciphers.</p>\n<h3>Example 2: ECDH(E)</h3>\n<p>Block ciphers alone are not sufficient to protect data confidentiality because secret (symmetric) keys need to be shared securely as well. Before this change, only RSA encryption was available for tackling this task. That is to encrypt the shared secret keys and then exchange the ciphers to prevent MITM attacks. This method is not entirely secure as <a href=\"https://en.wikipedia.org/wiki/Forward_secrecy\">perfect forward secrecy</a> (PFS) is difficult to guarantee. PFS requires session keys, the RSA key pair in this case, to be destroyed once a session is completed, i.e. after a secret key is successfully shared. So the shared secret key can never be recovered even if the MITM attackers are able to record down the exchanged cipher and access the recipient in the future. RSA key pairs are very hard to generate, and therefore maintaining PFS is really a challenge for RSA secret key exchange.</p>\n<p>However, maintaining PFS is a piece of cake for ECDH simply because EC key pairs are easy to generate. In average, it takes about 170 ms to generate a RSA-2048 key pair on the same test environment shown in the first section. On the contrary, it only takes about 2 ms to generate a P-256 EC key pair which can provide comparable security to a RSA-3072 alternative. ECDH works in the way that the involved two parties exchange their public keys first and then compute a <a href=\"https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication\">point multiplication</a> by using the acquired public keys and their own private keys, of which the result is the shared secret. ECDH with PFS is referred as Ephemeral ECDH (ECDHE). Ephemeral merely means that session keys are transient in this protocol. Since the EC key pairs involved with ECDH are transient, they cannot be used to confirm the identities of the involved two parties. Hence, other permanent asymmetric key pairs are needed for authentication. In general, RSA is used as it is widely supported by common <a href=\"https://en.wikipedia.org/wiki/Public_key_infrastructure\">public key infrastructures</a> (PKI). To demonstrate how ECDHE works, the following code snippet is shared:</p>\n<pre><code class=\"js\"><span class=\"comment\">// Assuming Bob and Alice are the two parties. Here we only show codes for Bob's.\n</span><span class=\"comment\">// Alice's should be similar.\n</span><span class=\"comment\">// Also assumes that permanent RSA keys are obtained before, i.e. bobRsaPrivateKey and aliceRsaPublicKey.\n</span><span class=\"comment\">// Prepare to send the hello message which includes Bob's public EC key and its signature to Alice:\n</span><span class=\"comment\">// Step 1: Generate a transient EC key pair.\n</span><span class=\"identifier\">crypto</span>.<span class=\"identifier\">subtle</span>.<span class=\"identifier\">generateKey</span>({ <span class=\"identifier\">name</span><span class=\"operator\">:</span> <span class=\"string\">\"ECDH\"</span>, <span class=\"identifier\">namedCurve</span><span class=\"operator\">:</span> <span class=\"string\">\"P-256\"</span> }, <span class=\"identifier\">extractable</span>, [<span class=\"string\">\"deriveKey\"</span>]).<span class=\"identifier\">then</span>(<span class=\"keyword type\">function</span>(<span class=\"identifier\">result</span>) {\n    <span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"string\">\"EC key pair is generated.\"</span>);\n    <span class=\"identifier\">bobEcKeyPair</span> <span class=\"operator\">=</span> <span class=\"identifier\">result</span>;\n\n    <span class=\"comment\">// Step 2: Sign the EC public key for authentication.\n</span>    <span class=\"keyword control\">return</span> <span class=\"identifier\">crypto</span>.<span class=\"identifier\">subtle</span>.<span class=\"identifier\">exportKey</span>(<span class=\"string\">\"raw\"</span>, <span class=\"identifier\">bobEcKeyPair</span>.<span class=\"identifier\">publicKey</span>);\n}).<span class=\"identifier\">then</span>(<span class=\"keyword type\">function</span>(<span class=\"identifier\">result</span>) {\n    <span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"string\">\"EC public key is exported.\"</span>);\n    <span class=\"identifier\">rawEcPublicKey</span> <span class=\"operator\">=</span> <span class=\"identifier\">result</span>;\n\n    <span class=\"keyword control\">return</span> <span class=\"identifier\">crypto</span>.<span class=\"identifier\">subtle</span>.<span class=\"identifier\">sign</span>({ <span class=\"identifier\">name</span><span class=\"operator\">:</span> <span class=\"string\">\"RSA-PSS\"</span>, <span class=\"identifier\">saltLength</span><span class=\"operator\">:</span> <span class=\"number\">16</span> }, <span class=\"identifier\">bobRsaPrivateKey</span>, <span class=\"identifier\">rawEcPublicKey</span>);\n}).<span class=\"identifier\">then</span>(<span class=\"keyword type\">function</span>(<span class=\"identifier\">result</span>) {\n    <span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"string\">\"Raw EC public key is signed.\"</span>);\n    <span class=\"identifier\">signature</span> <span class=\"operator\">=</span> <span class=\"identifier\">result</span>;\n\n    <span class=\"comment\">// Step 3: Exchange the EC public key together with the signature. We simplify the final result as\n</span>    <span class=\"comment\">// a concatenation of the raw format EC public key and its signature.\n</span>    <span class=\"identifier\">finalResult</span> <span class=\"operator\">=</span> <span class=\"keyword operator\">new</span> <span class=\"identifier\">Uint8Array</span>(<span class=\"identifier\">rawEcPublicKey</span>.<span class=\"identifier\">byteLength</span> <span class=\"operator\">+</span> <span class=\"identifier\">signature</span>.<span class=\"identifier\">byteLength</span>);\n    <span class=\"identifier\">finalResult</span>.<span class=\"identifier\">set</span>(<span class=\"keyword operator\">new</span> <span class=\"identifier\">Uint8Array</span>(<span class=\"identifier\">rawEcPublicKey</span>));\n    <span class=\"identifier\">finalResult</span>.<span class=\"identifier\">set</span>(<span class=\"keyword operator\">new</span> <span class=\"identifier\">Uint8Array</span>(<span class=\"identifier\">signature</span>), <span class=\"identifier\">rawEcPublicKey</span>.<span class=\"identifier\">byteLength</span>);\n    <span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"string\">\"Final result is produced.\"</span>);\n\n    <span class=\"comment\">// Send the message to Alice.\n</span>    <span class=\"comment\">// ...\n</span>});\n\n<span class=\"comment\">// After receiving Alice's hello message:\n</span><span class=\"comment\">// Step 1: Decode the counterpart from Alice.\n</span><span class=\"keyword type\">var</span> <span class=\"identifier\">position</span> <span class=\"operator\">=</span> <span class=\"identifier\">finalResult</span>.<span class=\"identifier\">length</span> <span class=\"operator\">-</span> <span class=\"number\">256</span>; <span class=\"comment\">// RSA-2048\n</span><span class=\"identifier\">signature</span> <span class=\"operator\">=</span> <span class=\"identifier\">finalResult</span>.<span class=\"identifier\">slice</span>(<span class=\"identifier\">position</span>);\n<span class=\"identifier\">rawEcPublicKey</span> <span class=\"operator\">=</span> <span class=\"identifier\">finalResult</span>.<span class=\"identifier\">slice</span>(<span class=\"number\">0</span>, <span class=\"identifier\">position</span>);\n\n<span class=\"comment\">// Step 2: Verify Alice's signature and her EC public key.\n</span><span class=\"identifier\">crypto</span>.<span class=\"identifier\">subtle</span>.<span class=\"identifier\">verify</span>({ <span class=\"identifier\">name</span><span class=\"operator\">:</span> <span class=\"string\">\"RSA-PSS\"</span>, <span class=\"identifier\">saltLength</span><span class=\"operator\">:</span> <span class=\"number\">16</span> }, <span class=\"identifier\">aliceRsaPublicKey</span>, <span class=\"identifier\">signature</span>, <span class=\"identifier\">rawEcPublicKey</span>).<span class=\"identifier\">then</span>(<span class=\"keyword type\">function</span>(<span class=\"identifier\">result</span>) {\n    <span class=\"keyword control\">if</span> (<span class=\"identifier\">result</span>) {\n        <span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"string\">\"Alice's public key is verified.\"</span>);\n\n        <span class=\"keyword control\">return</span> <span class=\"identifier\">crypto</span>.<span class=\"identifier\">subtle</span>.<span class=\"identifier\">importKey</span>(<span class=\"string\">\"raw\"</span>, <span class=\"identifier\">rawEcPublicKey</span>, { <span class=\"identifier\">name</span><span class=\"operator\">:</span> <span class=\"string\">\"ECDH\"</span>, <span class=\"identifier\">namedCurve</span><span class=\"operator\">:</span> <span class=\"string\">\"P-256\"</span> }, <span class=\"identifier\">extractable</span>, [ ]);\n    } <span class=\"keyword control\">else</span>\n        <span class=\"keyword control\">return</span> <span class=\"identifier\">Promise</span>.<span class=\"identifier\">reject</span>();\n}).<span class=\"identifier\">then</span>(<span class=\"keyword type\">function</span>(<span class=\"identifier\">result</span>) {\n    <span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"string\">\"Alice's public key is imported.\"</span>);\n    <span class=\"identifier\">aliceEcPublicKey</span> <span class=\"operator\">=</span> <span class=\"identifier\">result</span>;\n\n    <span class=\"comment\">// Step 3: Compute the shared AES-GCM secret key.\n</span>    <span class=\"keyword control\">return</span> <span class=\"identifier\">crypto</span>.<span class=\"identifier\">subtle</span>.<span class=\"identifier\">deriveKey</span>({ <span class=\"identifier\">name</span><span class=\"operator\">:</span> <span class=\"string\">\"ECDH\"</span>, <span class=\"keyword modifier\">public</span><span class=\"operator\">:</span> <span class=\"identifier\">aliceEcPublicKey</span> }, <span class=\"identifier\">bobEcKeyPair</span>.<span class=\"identifier\">privateKey</span>, { <span class=\"identifier\">name</span><span class=\"operator\">:</span> <span class=\"string\">\"aes-gcm\"</span>, <span class=\"identifier\">length</span><span class=\"operator\">:</span> <span class=\"number\">128</span> }, <span class=\"identifier\">extractable</span>, [<span class=\"char\">'decrypt'</span>, <span class=\"char\">'encrypt'</span>]);\n}).<span class=\"identifier\">then</span>(<span class=\"keyword type\">function</span>(<span class=\"identifier\">result</span>) {\n    <span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"string\">\"Shared AES secret key is computed.\"</span>);\n    <span class=\"identifier\">aesKey</span> <span class=\"operator\">=</span> <span class=\"identifier\">result</span>;\n\n    <span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"identifier\">aesKey</span>);\n\n    <span class=\"comment\">// Step 4: Delete the transient EC key pair.\n</span>    <span class=\"identifier\">bobEcKeyPair</span> <span class=\"operator\">=</span> <span class=\"keyword literal\">null</span>;\n    <span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"string\">\"EC key pair is deleted.\"</span>);\n});\n</code></pre>\n<p>In the above example, we omit the way how information, i.e. public keys and their corresponding parameters, is exchanged to focus on parts that WebCrypto API is involved. The ease to implement ECDHE will definitely improve the security level of secret key exchanges. Also, a live example to tell the differences between RSA secret key exchange and ECDH is included <a href=\"https://webkit.org/demos/webcrypto/ecdh.html\">here</a>.</p>\n<h3>Example 3: PBKDF2</h3>\n<p>The ability to derive a cryptographically secret key from existing secrets such as password is new. PBKDF2 is one of the newly added algorithms that can serve this purpose. The derived secret key from PBKDF2 not only can be used in the subsequent cryptographically operations, but also itself is a strong password hash given it is salted. The following code snippet demonstrates how to derive a strong password hash from a simple password:</p>\n<pre><code>var password = asciiToUint8Array(\"123456789\");\nvar salt = asciiToUint8Array(\"jnOw99oOZFLIEPMr\");\n\ncrypto.subtle.importKey(\"raw\", password, \"PBKDF2\", false, [\"deriveBits\"]).then(function(baseKey) {\n    return crypto.subtle.deriveBits({name: \"PBKDF2\", salt: salt, iterations: 100000, hash: \"sha-256\"}, baseKey, 128);\n}).then(function(result) {\n    console.log(\"Hash is derived!\")\n    derivedHash = result;\n});\n</code></pre>\n<p>A live example can be found <a href=\"https://webkit.org/demos/webcrypto/pbkdf2.html\">here</a>.</p>\n<p>The above examples are just a tip of capabilities of WebCrypto API. Here is a table listing all algorithms that WebKit currently supports, and corresponding permitted operations of each algorithm.</p>\n<figure class=\"table\">\n<table>\n<tbody>\n<tr>\n<th>Algorithm¬†name</th>\n<th>encrypt</th>\n<th>decrypt</th>\n<th>sign</th>\n<th>verify</th>\n<th>digest</th>\n<th>generateKey</th>\n<th>deriveKey</th>\n<th>deriveBits</th>\n<th>importKey**</th>\n<th>exportKey**</th>\n<th>wrapKey</th>\n<th>unwrapKey</th>\n</tr>\n<tr>\n<td>RSAES-PKCS1-v1_5***</td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td>‚úî</td>\n</tr>\n<tr>\n<td>RSASSA-PKCS1-v1_5</td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td></td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>RSA-PSS</td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td></td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>RSA-OAEP</td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td>‚úî</td>\n</tr>\n<tr>\n<td>ECDSA*</td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td></td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>ECDH*</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>AES-CFB</td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td>‚úî</td>\n</tr>\n<tr>\n<td>AES-CTR</td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td>‚úî</td>\n</tr>\n<tr>\n<td>AES-CBC</td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td>‚úî</td>\n</tr>\n<tr>\n<td>AES-GCM</td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td>‚úî</td>\n</tr>\n<tr>\n<td>AES-KW</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td>‚úî</td>\n</tr>\n<tr>\n<td>HMAC</td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td></td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>SHA-1***</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>SHA-224</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>SHA-256</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>SHA-384</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>SHA-512</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>HKDF</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>PBKDF2</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td>‚úî</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table><figcaption>\n* WebKit doesn&#8217;t support P-521 yet, see <a href=\"https://bugs.webkit.org/show_bug.cgi?id=169231\">bug 169231</a>.<br />\n** WebKit doesn&#8217;t check or produce any hash information from or to DER key data, see <a href=\"https://bugs.webkit.org/show_bug.cgi?id=165436\">bug 165436</a>, and <a href=\"https://bugs.webkit.org/show_bug.cgi?id=165437\">bug 165437</a>.<br />\n*** RSAES-PKCS1-v1_5 and SHA-1 should be avoided for security reasons.<br />\n</figcaption></figure>\n<h2>Transition to the New SubtleCrypto Interface</h2>\n<p>This section covers some common mistakes that web developers have made when they have tried to maintain compatibility to both <code>WebKitSubtleCrypto</code> and <code>SubtleCrypto</code>, and then we present recommended fixes to those mistakes. Finally, we summarize those fixes into a <em>de facto</em> rule to maintain compatibility.</p>\n<h3>Example 1:</h3>\n<pre><code class=\"js\"><span class=\"comment\">// Bad code:\n</span><span class=\"keyword type\">var</span> <span class=\"identifier\">subtleObject</span> <span class=\"operator\">=</span> <span class=\"keyword literal\">null</span>;\n<span class=\"keyword control\">if</span> (<span class=\"string\">\"subtle\"</span> <span class=\"keyword operator\">in</span> <span class=\"identifier\">self</span>.<span class=\"identifier\">crypto</span>)\n    <span class=\"identifier\">subtleObject</span> <span class=\"operator\">=</span> <span class=\"identifier\">self</span>.<span class=\"identifier\">crypto</span>.<span class=\"identifier\">subtle</span>;\n<span class=\"keyword control\">if</span> (<span class=\"string\">\"webkitSubtle\"</span> <span class=\"keyword operator\">in</span> <span class=\"identifier\">self</span>.<span class=\"identifier\">crypto</span>)\n    <span class=\"identifier\">subtleObject</span> <span class=\"operator\">=</span> <span class=\"identifier\">self</span>.<span class=\"identifier\">crypto</span>.<span class=\"identifier\">webkitSubtle</span>;\n</code></pre>\n<p>This example wrongly prioritizes <code>window.crypto.webkitSubtle</code> over <code>window.crypto.subtle</code>. Therefore, it will overwrite the subtleObject even that the <code>subtle</code> object actually exists. A quick fix for it is to prioritizes <code>window.crypto.subtle</code> over <code>window.crypto.webkitSubtle</code>.</p>\n<pre><code class=\"js\"><span class=\"comment\">// Fix:\n</span><span class=\"keyword type\">var</span> <span class=\"identifier\">subtleObject</span> <span class=\"operator\">=</span> <span class=\"keyword literal\">null</span>;\n<span class=\"keyword control\">if</span> (<span class=\"string\">\"webkitSubtle\"</span> <span class=\"keyword operator\">in</span> <span class=\"identifier\">self</span>.<span class=\"identifier\">crypto</span>)\n    <span class=\"identifier\">subtleObject</span> <span class=\"operator\">=</span> <span class=\"identifier\">self</span>.<span class=\"identifier\">crypto</span>.<span class=\"identifier\">webkitSubtle</span>;\n<span class=\"keyword control\">if</span> (<span class=\"string\">\"subtle\"</span> <span class=\"keyword operator\">in</span> <span class=\"identifier\">self</span>.<span class=\"identifier\">crypto</span>)\n    <span class=\"identifier\">subtleObject</span> <span class=\"operator\">=</span> <span class=\"identifier\">self</span>.<span class=\"identifier\">crypto</span>.<span class=\"identifier\">subtle</span>;\n</code></pre>\n<h3>Example 2:</h3>\n<pre><code class=\"js\"><span class=\"comment\">// Bad code:\n</span>(<span class=\"identifier\">window</span>.<span class=\"identifier\">agcrypto</span> <span class=\"operator\">=</span> <span class=\"identifier\">window</span>.<span class=\"identifier\">crypto</span>) <span class=\"operator\">&amp;</span><span class=\"operator\">&amp;</span> <span class=\"operator\">!</span><span class=\"identifier\">window</span>.<span class=\"identifier\">crypto</span>.<span class=\"identifier\">subtle</span> <span class=\"operator\">&amp;</span><span class=\"operator\">&amp;</span> <span class=\"identifier\">window</span>.<span class=\"identifier\">crypto</span>.<span class=\"identifier\">webkitSubtle</span> <span class=\"operator\">&amp;</span><span class=\"operator\">&amp;</span> (<span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"string\">\"Using crypto.webkitSubtle\"</span>), <span class=\"identifier\">window</span>.<span class=\"identifier\">agcrypto</span>.<span class=\"identifier\">subtle</span> <span class=\"operator\">=</span> <span class=\"identifier\">window</span>.<span class=\"identifier\">crypto</span>.<span class=\"identifier\">webkitSubtle</span>);\n<span class=\"keyword type\">var</span> <span class=\"identifier\">h</span> <span class=\"operator\">=</span> <span class=\"identifier\">window</span>.<span class=\"identifier\">crypto</span>.<span class=\"identifier\">webkitSubtle</span> <span class=\"operator\">?</span> <span class=\"identifier\">a</span>.<span class=\"identifier\">utils</span>.<span class=\"identifier\">json2ab</span>(<span class=\"identifier\">c</span>.<span class=\"identifier\">jwkKey</span>) <span class=\"operator\">:</span> <span class=\"identifier\">c</span>.<span class=\"identifier\">jwkKey</span>;\n<span class=\"identifier\">agcrypto</span>.<span class=\"identifier\">subtle</span>.<span class=\"identifier\">importKey</span>(<span class=\"string\">\"jwk\"</span>, <span class=\"identifier\">h</span>, <span class=\"identifier\">g</span>, <span class=\"operator\">!</span><span class=\"number\">0</span>, [<span class=\"string\">\"encrypt\"</span>]).<span class=\"identifier\">then</span>(<span class=\"keyword type\">function</span>(<span class=\"identifier\">a</span>) {\n    ...\n});\n</code></pre>\n<p>This example incorrectly pairs <code>window.agcrypto</code> and the latter <code>jwkKey</code>. The first line prioritizes <code>window.crypto.subtle</code> over <code>window.crypto.webkitSubtle</code>, which is correct. However, the second line prioritizes  <code>window.crypto.webkitSubtle</code> over <code>window.crypto.subtle</code> again.</p>\n<pre><code class=\"js\"><span class=\"comment\">// Fix:\n</span>(<span class=\"identifier\">window</span>.<span class=\"identifier\">agcrypto</span> <span class=\"operator\">=</span> <span class=\"identifier\">window</span>.<span class=\"identifier\">crypto</span>) <span class=\"operator\">&amp;</span><span class=\"operator\">&amp;</span> <span class=\"operator\">!</span><span class=\"identifier\">window</span>.<span class=\"identifier\">crypto</span>.<span class=\"identifier\">subtle</span> <span class=\"operator\">&amp;</span><span class=\"operator\">&amp;</span> <span class=\"identifier\">window</span>.<span class=\"identifier\">crypto</span>.<span class=\"identifier\">webkitSubtle</span> <span class=\"operator\">&amp;</span><span class=\"operator\">&amp;</span> (<span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"string\">\"Using crypto.webkitSubtle\"</span>), <span class=\"identifier\">window</span>.<span class=\"identifier\">agcrypto</span>.<span class=\"identifier\">subtle</span> <span class=\"operator\">=</span> <span class=\"identifier\">window</span>.<span class=\"identifier\">crypto</span>.<span class=\"identifier\">webkitSubtle</span>);\n<span class=\"keyword type\">var</span> <span class=\"identifier\">h</span> <span class=\"operator\">=</span> <span class=\"identifier\">window</span>.<span class=\"identifier\">crypto</span>.<span class=\"identifier\">subtle</span> <span class=\"operator\">?</span> <span class=\"identifier\">c</span>.<span class=\"identifier\">jwkKey</span> <span class=\"operator\">:</span> <span class=\"identifier\">a</span>.<span class=\"identifier\">utils</span>.<span class=\"identifier\">json2ab</span>(<span class=\"identifier\">c</span>.<span class=\"identifier\">jwkKey</span>);\n<span class=\"identifier\">agcrypto</span>.<span class=\"identifier\">subtle</span>.<span class=\"identifier\">importKey</span>(<span class=\"string\">\"jwk\"</span>, <span class=\"identifier\">h</span>, <span class=\"identifier\">g</span>, <span class=\"operator\">!</span><span class=\"number\">0</span>, [<span class=\"string\">\"encrypt\"</span>]).<span class=\"identifier\">then</span>(<span class=\"keyword type\">function</span>(<span class=\"identifier\">a</span>) {\n    ...\n});\n</code></pre>\n<p>A deeper analysis of these examples reveals they both assume <code>window.crypto.subtle</code> and <code>window.crypto.webkitSubtle</code> cannot coexist and therefore wrongly prioritize one over the other. In summary, developers should be aware of the coexistence of these two interfaces and should always prioritize <code>window.crypto.subtle</code> over <code>window.crypto.webkitSubtle</code>.</p>\n<h2>Feedback</h2>\n<p>In this blog post, we reviewed WebKit&#8217;s update to the WebCrypto API implementation which is available on macOS, iOS, and GTK+. We hope you enjoy it. You can try out all of these improvements in the latest Safari Technology Preview. Let us know how they work for you by sending feedback on Twitter (<a href=\"https://twitter.com/webkit\">@webkit</a>,   <a href=\"https://twitter.com/alanwaketan\">@alanwaketan</a>, <a href=\"https://twitter.com/jonathandavis\">@jonathandavis</a>) or by <a href=\"https://bugs.webkit.org/\">filing a bug</a>.</p>", "title": "Update on Web Cryptography", "author_name": "Jiewen Tan", "source_type": "rss", "link": "https://webkit.org/blog/7790/update-on-web-cryptography/", "source_link": "https://webkit.org", "source_title": "WebKit", "published": "2017-07-21T18:30:00"}, {"source_name": "2ality", "description": "<p>The proposal ‚Äú<a href=\"https://github.com/tc39/proposal-regexp-unicode-property-escapes\">RegExp Unicode Property Escapes</a>‚Äù by Brian Terlson, Daniel Ehrenberg, Mathias Bynens is currently at <a href=\"http://exploringjs.com/es2016-es2017/ch_tc39-process.html\">stage 3</a>. This blog post explains how it works.</p>\n\n<div><a href=\"http://2ality.com/2017/07/regexp-unicode-property-escapes.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/QfQCdm8lUDk\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "ES proposal: RegExp Unicode property escapes", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/07/regexp-unicode-property-escapes.html", "author_link": "http://2ality.com/", "published": "2017-07-20T18:59:00", "source_title": "2ality feed"}, {"source_name": "2ality", "description": "<p>The proposal ‚Äú<a href=\"https://github.com/tc39/proposal-regexp-dotall-flag\"><code>s</code> (<code>dotAll</code>) flag for regular expressions</a>‚Äù by Mathias Bynens and Brian Terlson is currently at <a href=\"http://exploringjs.com/es2016-es2017/ch_tc39-process.html\">stage 3</a>. This blog post explains how it works.</p>\n\n<div><a href=\"http://2ality.com/2017/07/regexp-dotall-flag.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/B14TKnT1GY4\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "ES proposal: <code>s</code> (<code>dotAll</code>) flag for regular expressions", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/07/regexp-dotall-flag.html", "author_link": "http://2ality.com/", "published": "2017-07-20T18:20:00", "source_title": "2ality feed"}, {"source_name": "MozillaHacks", "description": "Now available in Firefox and Chrome, and also soon in Edge and WebKit, WebAssembly enables near-native performance of code in the browser, which is great for game development, and has also shown benefits for WebVR applications. Here's a look at how far we've come and what's ahead for HTML5 game development.", "tags": "mozilla,services,tech", "text": "<p>Over the last few years, Mozilla has worked closely with other browsers and the industry to <a href=\"https://hacks.mozilla.org/2017/03/web-games-platform-newest-developments/\">advance the state of games on the Web</a>. Together, we have enabled developers to deploy native code on the web, first via asm.js, and then with its successor <a href=\"http://webassembly.org\">WebAssembly</a>. Now available in Firefox and Chrome, and also soon in <a href=\"https://blogs.windows.com/msedgedev/2017/04/20/improved-javascript-performance-webassembly-shared-memory/#oqgire84ExxVPttp.97\">Edge</a> and <a href=\"https://webkit.org/blog/7691/webassembly/\">WebKit</a>, WebAssembly enables near-native performance of code in the browser, which is great for game development, and has also shown benefits for WebVR applications. WebAssembly code is able to deliver more predictable performance due to JIT compilation and garbage collection being avoided. Its wide support across all major browser engines opens up paths to near-native speed, making it possible to build high-performing plugin-free games on the web.</p>\n<p><em>&#8220;In 2017 Kongregate <a href=\"http://blog.kongregate.com/html5-is-here/\">saw a shift away from Flash with nearly 60% of new titles using HTML5</a>,</em>‚Äù said Emily Greer, co-founder and CEO of Kongregate.¬† <em>‚ÄúDevelopers were able to take advantage of improvements in HTML5 technologies and tools while consumers were able to enjoy games without the need for 3rd-party plugins.¬† As HTML5 continues to evolve it will enable developers to create even more advanced games that will benefit the millions of gamers on Kongregate.com and the greater, still thriving, web gaming industry.‚Äù</em></p>\n<p>Kongregate&#8217;s data shows that on average, about 55% of uploaded games are HTML5 games.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/Kongregate-Game-Technology-Trends-by-Month.png\"><img alt=\"\" class=\"alignnone size-large wp-image-31115\" height=\"333\" src=\"https://hacks.mozilla.org/files/2017/07/Kongregate-Game-Technology-Trends-by-Month-500x333.png\" width=\"500\" /></a></p>\n<p>And we can also see that these are high-quality games, with over 60% of HTML5 titles receiving a ‚Äúgreat‚Äù score (better than a 4.0 out of 5 rating).</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/all-hosted-games-with-4-rating-10000-gameplays.png\"><img alt=\"\" class=\"alignnone size-large wp-image-31114\" height=\"333\" src=\"https://hacks.mozilla.org/files/2017/07/all-hosted-games-with-4-rating-10000-gameplays-500x333.png\" width=\"500\" /></a></p>\n<p>In spite of this positive trend, opportunities for improvement exist. The web is an ever-evolving platform, and developers are always looking for better performance. One major request we have often heard is for multithreading support on the web. <a href=\"https://hacks.mozilla.org/2017/06/a-crash-course-in-memory-management/\" target=\"_blank\">SharedArrayBuffer</a> is a required building block for multithreading, which enables concurrently sharing memory between multiple web workers. The <a href=\"https://tc39.github.io/ecma262/#sec-sharedarraybuffer-objects\" target=\"_blank\">specification</a> is finished, and Firefox <a href=\"https://groups.google.com/forum/#!topic/mozilla.dev.platform/Fjh9z7Er3aA\" target=\"_blank\">intends to ship</a> SharedArrayBuffer support in Firefox 55.</p>\n<p>Another common request is for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SIMD\" target=\"_blank\">SIMD</a> support. SIMD is short for Single Instruction, Multiple Data. It&#8217;s a way for a CPU to parallelize math instructions, offering significant performance improvements for math-heavy requirements such 3D rendering and physics.</p>\n<p>The <a href=\"http://webassembly.org\" target=\"_blank\">WebAssembly Community Group</a> is now focused on enabling hardware parallelism with SIMD and multithreading as the next major evolutionary steps for WebAssembly. Building on the momentum of shipping the first version of WebAssembly and continued collaboration, both of these new features should be stable and ready to ship in Firefox in early 2018.</p>\n<p>Much work has gone into optimizing runtime performance over the last few years, and with that we learned many lessons. We have collected many of these learnings in a practical blog post about <a href=\"https://hacks.mozilla.org/2017/07/webassembly-for-native-games-on-the-web\" target=\"_blank\">porting games from native to web</a>, and look forward to your input on other areas for improvement. As multithreading support lands in 2018, expect to see opportunities to further invest in improving memory usage.</p>\n<p>We again wish to extend our gratitude to the game developers, publishers, engine providers, and other browsers‚Äô engine teams who have collaborated with us over the years. We could not have done it without your help ‚Äî thank you!</p>", "title": "The Next Generation of Web Gaming", "author_name": "Andre Vrignaud", "source_type": "rss", "link": "https://hacks.mozilla.org/2017/07/the-next-generation-of-web-gaming/", "source_link": "https://hacks.mozilla.org", "source_title": "Mozilla Hacks ‚Äì the Web developer blog", "published": "2017-07-20T15:21:00"}, {"source_name": "MozillaHacks", "description": "There's never been a better time to port a native game to the web. Here are some tips from the trenches for getting started with WebAssembly and Emscripten.", "tags": "mozilla,services,tech", "text": "<p>The biggest improvement this year to web performance has been the introduction of <a href=\"http://webassembly.org/\" target=\"_blank\">WebAssembly</a>. Now available in Firefox and Chrome, and coming soon in Edge and WebKit, WebAssembly enables the execution of code at a low assembly-like level in the browser.</p>\n<p>Mozilla has worked closely with the games industry for several years to reach this stage: including milestones like  <a href=\"https://hacks.mozilla.org/2013/12/monster-madness-creating-games-on-the-web-with-emscripten/\" target=\"_blank\">the release of games built with Emscripten</a> in 2013, <a href=\"https://blog.mozilla.org/blog/2014/03/12/mozilla-and-epic-preview-unreal-engine-4-running-in-firefox/\" target=\"_blank\">the preview of Unreal Engine 4</a> running in Firefox (2014), <a href=\"https://blog.mozilla.org/blog/2014/03/18/mozilla-and-unity-bring-unity-game-engine-to-webgl/\" target=\"_blank\">bringing the Unity game engine to WebGL</a> also in 2014, <a href=\"https://hacks.mozilla.org/2016/05/exporting-an-indie-unity-game-to-webvr/\" target=\"_blank\">exporting an indie Unity game to WebVR</a> in 2016, and most recently, the March release of <a href=\"https://hacks.mozilla.org/2017/03/firefox-52-introducing-web-assembly-css-grid-and-the-grid-inspector/\" target=\"_blank\">Firefox 52 with WebAssembly</a>.</p>\n<p>WebAssembly builds on Mozilla&#8217;s original <a href=\"http://asmjs.org/\">asm.js</a> specification, which was created to serve as a plugin-free compilation target approach for applications and games on the web. This work has accumulated a great deal of knowledge at Mozilla specific to the process of porting games and graphics technologies. If you are an engineer working on games and this sounds interesting, read on to learn more about developing games in WebAssembly.</p>\n<h2>Where Does WebAssembly Fit In?</h2>\n<p>By now web developers have probably heard about WebAssembly&#8217;s promise of performance, but for developers who have not actually used it, let&#8217;s set some context for how it works with existing technologies and what is feasible. Lin Clark has written an excellent <a href=\"https://hacks.mozilla.org/2017/02/a-cartoon-intro-to-webassembly/\" target=\"_blank\">introduction to WebAssembly</a>. The main point is that unlike JavaScript, which is generally written by hand, WebAssembly is a compilation target, just like native assembly. Except perhaps for small snippets of code, WebAssembly is not designed to be written by humans. Typically, you&#8217;d develop the application in a source language (e.g. C/C++) and then use  a compiler (e.g. Emscripten), which transforms the source code to WebAssembly in a compilation step.</p>\n<p>This means that existing JavaScript code is not the subject of this model. If your application is written in JavaScript, then it already runs natively in a web browser, and it is not possible to somehow transform it to WebAssembly verbatim. What can be possible in these types of applications however, is to replace certain computationally intensive parts of your JavaScript with WebAssembly modules. For example, a web application might replace its JavaScript-implemented file decompression routine or a string regex routine by a WebAssembly module that does the same job, but with better performance. As another example, web pages written in JavaScript can use the <a href=\"https://github.com/kripken/ammo.js/\" target=\"_blank\">Bullet physics engine compiled to WebAssembly</a> to provide physics simulation.</p>\n<p>Another important property: Individual WebAssembly instructions do not interleave seamlessly in between existing lines of JavaScript code;  WebAssembly applications come in modules. These modules deal with low-level memory, whereas JavaScript operates on high-level object representations. This difference in structure means that data needs to undergo a transformation step‚Äîsometimes called <em>marshalling</em>‚Äîto convert between the two language representations. For primitive types, such as integers and floats, this step is very fast, but for more complex data types such as dictionaries or images, this can be time consuming. Therefore, replacing parts of a JavaScript application works best when applied to subroutines with large enough granularity to warrant replacement by a full WebAssembly module, so that frequent transitions between the language barriers are avoided.</p>\n<p>As an example, in a 3D game written in <a href=\"https://threejs.org/\" target=\"_blank\">three.js</a>, one would not want to implement a small Matrix*Matrix multiplication algorithm alone in WebAssembly. The cost of marshalling a matrix data type into a WebAssembly module and then back would negate the speed performance that is gained in doing the operation in WebAssembly. Instead, to reach performance gains, one should look at implementing larger collections of computation in WebAssembly, such as image or file decompression.</p>\n<p>On the other end of the spectrum are applications that are implemented as fully in WebAssembly as possible. This minimizes the need to marshal large amounts of data across the language barrier, and most of the application is able to run inside the WebAssembly module. Native 3D game engines such as Unity and Unreal Engine implement this approach, where one can deploy a whole game to run in WebAssembly in the browser. This will yield the best possible performance gain. However, WebAssembly is not a full replacement for JavaScript. Even if as much of the application as possible is implemented in WebAssembly, there are still parts that are implemented in JavaScript. WebAssembly code does not interact directly with existing browser APIs that are familiar to  web developers, your program will call out from WebAssembly to JavaScript to interact with the browser. It is possible that this behavior will change in the future as WebAssembly evolves.</p>\n<h2>Producing WebAssembly</h2>\n<p>The largest audience currently served by WebAssembly are native C/C++ developers, who are often positioned to write performance sensitive code. An open source community project supported by Mozilla, <a href=\"http://emscripten.org\" target=\"_blank\">Emscripten</a> is a GCC/Clang-compatible compiler toolchain that allows building WebAssembly applications on the web. The main scope of Emscripten is support for the C/C++ language family, but because Emscripten is powered by LLVM, it has potential to allow other languages to compile as well. If your game is developed in C/C++ and it targets OpenGL ES 2 or 3, an Emscripten-based port to the web can be a viable approach.</p>\n<p>Mozilla has benefited from games industry feedback &#8211; this has been a driving force shaping the development of asm.js and WebAssembly. As a result of this collaboration, <a href=\"https://docs.unity3d.com/Manual/webgl-building.html\" target=\"_blank\">Unity3D</a>, <a href=\"https://docs.unrealengine.com/latest/INT/Platforms/HTML5/GettingStarted/\" target=\"_blank\">Unreal Engine 4</a> and other game engines are already able to deploy content to WebAssembly. This support takes place largely under the hood in the engine, and the aim has been to make this as transparent as possible to the application.</p>\n<h2>Considerations For Porting Your Native Game</h2>\n<p>For the game developer audience, WebAssembly represents an addition to an already long list of supported target platforms (Windows, Mac, Android, Xbox, Playstation, &#8230;), rather than being a new original platform to which projects are developed from scratch. Because of this, we&#8217;ve placed a great deal of focus on development and feature parity with respect to other existing platforms in the development of Emscripten, asm.js, and WebAssembly. This parity continues to improve, although on some occasions the offered features differ noticeably, most often due to web security concerns.</p>\n<p>The remainder of this article focuses on the most important items that developers should be aware of when getting started with WebAssembly. Some of these are successfully hidden under an abstraction if you&#8217;re using an existing game engine, but native developers using Emscripten should most certainly be aware of the following topics.</p>\n<h2>Execution Model Considerations</h2>\n<p>Most fundamental are the differences where code execution and memory model are concerned.</p>\n<ul>\n<li>Asm.js and WebAssembly use the concept of a typed array (a contiguous linear memory buffer) that represents the <a href=\"https://hacks.mozilla.org/2017/06/a-cartoon-intro-to-arraybuffers-and-sharedarraybuffers/\" target=\"_blank\">low level memory address space for the application</a>. Developers specify an initial size for this heap, and the size of the heap can grow as the application needs more memory.</li>\n<li>Virtually all <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events\" target=\"_blank\">web APIs operate using events</a> and an event queue mechanism to provide notifications, e.g. for keyboard and mouse input, file IO and network events. These events are all asynchronous and delivered to event handler functions. There are no polling type APIs for synchronously asking the &#8220;browser OS&#8221; for events, such as those that native platforms often provide.</li>\n<li>Web browsers execute web pages on the main thread of the browser. This property carries over to WebAssembly modules, which are also executed on the main thread, unless one explicitly creates a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API\" target=\"_blank\">Web Worker</a> and runs the code there. On the main thread it is not allowed to block execution for long periods of time, since that would also block the processing of the browser itself. For C/C++ code, this means that the main thread cannot synchronously run its own loop, but must <a href=\"http://kripken.github.io/emscripten-site/docs/api_reference/emscripten.h.html#c.emscripten_set_main_loop\" target=\"_blank\">tick simulation and animation forward based on an event callback</a>, so that execution periodically yields control back to the browser. User-launched <a href=\"https://en.wikipedia.org/wiki/POSIX_Threads\" target=\"_blank\">pthreads</a> will not have this restriction, and they are allowed to run their own blocking main loops.</li>\n<li>At the time of writing, WebAssembly does not yet have multithreading support &#8211; this capability is currently in development.</li>\n<li>The web security model can be a bit more strict compared to other platforms. In particular, browser APIs constrain applications from gaining direct access to low-level information about the system hardware, to mitigate being able to generate strong fingerprints to identify users. For example, it is not possible to query information such as the CPU model, the local IP address, amount of RAM or amount of available hard disk space. Additionally, many web features operate on web domain boundaries, and information traveling across domains is configured by <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\" target=\"_blank\">cross-origin access control rules</a>.</li>\n<li>A special programming technique that web security also prevents is the dynamic generation and mutation of code on the fly. It is possible to generate WebAssembly modules in the browser, but after loading, WebAssembly modules are immutable and functions can no longer be added  to it or changed.</li>\n<li>When porting C/C++ code, standard compliant code should compile easily, but native compilers relax certain features on x86, such as unaligned memory accesses, overflowing float-&gt;int casts and invoking function pointers via signatures that mismatch from the actual type of the function. The ubiquitousness of x86 has made these kind of nonstandard code patterns somewhat common in native code, but when compiling to asm.js or WebAssembly, these types of constructs can cause issues at runtime. Refer to <a href=\"http://kripken.github.io/emscripten-site/docs/porting/guidelines/index.html\" target=\"_blank\">Emscripten documentation</a> for more information about what kind of code is portable.</li>\n</ul>\n<p>Another source of differences comes from the fact that code on a web page cannot directly access a native filesystem on the host computer, and so the filesystem solution that is provided looks a bit different than native. Emscripten defines a <a href=\"http://kripken.github.io/emscripten-site/docs/porting/files/index.html\" target=\"_blank\">virtual filesystem space</a> inside the web page, which backs onto the IndexedDB API for persistence across page visits. Browsers also store downloaded data in navigation caches, which sometimes is desirable but other times less so.</p>\n<p>Developers should be mindful in particular about content delivery. In native application stores the model of upfront downloading and installing a large application is an expected standard, but on the web, this type of monolithic deployment model can be an off-putting user experience. Applications can download and cache a large asset package at first run, but that can cause a sizable first-time download impact. Therefore, launching with minimal amount of downloading, and streaming additional asset data as needed can be critical for building a web-friendly user experience.</p>\n<h2>Toolchain Considerations</h2>\n<p>The first technical challenge for developers comes from adapting the existing build systems to target the <a href=\"https://github.com/kripken/emscripten/\" target=\"_blank\">Emscripten compiler</a>. To make this easier, the compiler (emcc &amp; em++) is designed to operate closely as a drop-in replacement for GCC or Clang. This eases migration of existing build systems that are already aware of GCC-like toolchains. Emscripten supports the popular CMake build system configuration generator, and emulates support for GNU Autotools configure scripts.</p>\n<p>A fact that is sometimes confused is that Emscripten is not a x86/ARM -&gt; WebAssembly code transformation toolchain, but a cross-compiler. That is, Emscripten does not take existing native x86/ARM compiled code and transform that to run on the web, but instead it compiles C/C++ source code to WebAssembly. This means that you must have all the source available (or use libraries bundled with Emscripten or ported to it). Any code that depends on platform-specific (often closed source) native components, such as Win32 and Cocoa APIs, cannot be compiled, but will need to be ported to utilize other solutions.</p>\n<h2>Performance Considerations</h2>\n<p>One of the most frequently asked questions about asm.js/WebAssembly is whether it is fast enough for a particular purpose. Curiously, developers who have not yet tried out WebAssembly are the ones who most often doubt its performance. Developers who have tried it, rarely mention performance as a major issue. There are some performance caveats however, which developers should be aware of.</p>\n<ul>\n<li>As mentioned earlier, multithreading is not available just yet, so applications that heavily depend on threads will not have the same performance available.</li>\n<li>Another feature that is not yet available in WebAssembly, but planned, is <a href=\"http://tc39.github.io/ecmascript_simd/\" target=\"_blank\">SIMD instruction set</a> support.</li>\n<li>Certain instructions can be relatively slower in WebAssembly compared to native. For example, calling virtual functions or function pointers has a higher performance footprint due to sandboxing compared to native code. Likewise, exception handling is observed to cause a bigger performance impact compared to native platforms. The performance landscape can look a bit different, so paying attention to this when profiling can be helpful.</li>\n<li>Web security validation is known to impact WebGL noticeably. It is recommended that applications using WebGL are careful to optimize their WebGL API calls, especially by <a href=\"https://github.com/kripken/emscripten/blob/incoming/site/source/docs/optimizing/Optimizing-WebGL.rst\" target=\"_blank\">avoiding redundant API calls</a>, which still pay the cost for driver security validation.</li>\n<li>Last, application memory usage is a particularly critical aspect to measure, especially if targeting mobile support as well. Preloading big asset packages on first run and uncompressing large amounts of audio assets are two known sources of memory bloat that are easy to do by accident. Applications will likely need to optimize specifically for this when porting, and this is an active area of optimization in WebAssembly and Emscripten runtime as well.</li>\n</ul>\n<h2>Summary</h2>\n<p>WebAssembly provides support for executing low-level code on the web at high performance, similar to how web plugins used to, except that web security is enforced. For developers using some of the super-popular game engines, leveraging WebAssembly will be as easy as choosing a new export target in the project build menu, and this support is available today. For native C/C++ developers, the open source Emscripten toolchain offers a drop-in compatible way to target WebAssembly. There exists a lively community of developers around Emscripten who contribute to its development, and a <a href=\"https://groups.google.com/forum/#!forum/emscripten-discuss\" target=\"_blank\">mailing list for discussion</a> that can help you getting started. Games that run on the web are accessible to everyone independent of which computation platform they are on, without compromising portability, performance, or security, or requiring up front installation steps.</p>\n<p>WebAssembly is only one part of a larger collection of APIs that power web-based games, so navigate on to the <a href=\"https://developer.mozilla.org/en-US/docs/Games\" target=\"_blank\">MDN games section</a> to see the big picture. Hop right on in, and happy <em>Emscriptening</em>!</p>", "title": "WebAssembly for Native Games on the Web", "author_name": "Jukka Jyl√§nki", "source_type": "rss", "link": "https://hacks.mozilla.org/2017/07/webassembly-for-native-games-on-the-web/", "source_link": "https://hacks.mozilla.org", "source_title": "Mozilla Hacks ‚Äì the Web developer blog", "published": "2017-07-20T15:21:00"}, {"source_name": "MozillaHacks", "description": "This is the 1st article in a 3-part series of articles with code cartoons that illustrate how to get started running WebAssembly modules in the browser today, how to work with memory in WebAssembly, and how to use table imports.", "tags": "mozilla,services,tech", "text": "<p><em>This is the 1st article in a 3-part series:</em></p>\n<ol>\n<li><em>Creating a WebAssembly module instance with JavaScript</em></li>\n<li><a href=\"https://hacks.mozilla.org/2017/07/memory-in-webassembly-and-why-its-safer-than-you-think/\"><em>Memory in WebAssembly (and why it‚Äôs safer than you think)</em></a></li>\n<li><a href=\"https://hacks.mozilla.org/2017/07/webassembly-table-imports-what-are-they/\"><em>WebAssembly table imports‚Ä¶ what are they?</em></a></li>\n</ol>\n<hr class=\"dino\" />\n<p>WebAssembly is a <a href=\"https://hacks.mozilla.org/2017/02/a-cartoon-intro-to-webassembly/\">new way of running code</a> on the web. With it, you can write modules in languages like C or C++ and run them in the browser.</p>\n<p>Currently modules can‚Äôt run on their own, though. This is expected to change as ES module support comes to browsers. Once that‚Äôs in place, WebAssembly modules will <a href=\"https://github.com/WebAssembly/design/issues/1087\">likely be loaded in the same way as other ES modules</a>,¬†e.g.¬†using <code>&lt;script type=\"module\"&gt;</code>.</p>\n<p>But for now, you need to use JavaScript to boot the WebAssembly module. This creates an instance of the module. Then your JavaScript code can call functions on that WebAssembly module instance.</p>\n<p>For example, let‚Äôs look at how React would instantiate a WebAssembly module. (You can learn more in this video about <a href=\"https://www.youtube.com/watch%3Fv%3D3GHJ4cbxsVQ\">how React could use WebAssembly</a>.)</p>\n<p>When the user loads the page, it would start in the same way.</p>\n<p>The browser would download the JS file. In addition, a .wasm file would be fetched. That contains the WebAssembly code, which is binary.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/1-1.png\"><img alt=\"Browser downloading a .js file and a .wasm file\" class=\"alignnone wp-image-31045 size-large\" height=\"400\" src=\"https://hacks.mozilla.org/files/2017/07/1-1-500x400.png\" width=\"500\" /></a></p>\n<p>We‚Äôll need to load the code in these files in order to run it. First comes the .js file, which loads the JavaScript part of React. That JavaScript will then create an instance of a WebAssembly module‚Ä¶ the reconciler.</p>\n<p>To do that, it will call <code>WebAssembly.instantiate</code>.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/1-2.png\"><img alt=\"React.js robot calling WebAssembly.instantiate\" class=\"alignnone wp-image-31071 size-large\" height=\"239\" src=\"https://hacks.mozilla.org/files/2017/07/1-2-500x239.png\" width=\"500\" /></a></p>\n<p>Let‚Äôs take a closer look at this.</p>\n<p>The first thing we pass into <code>WebAssembly.instantiate</code> is going to be the binary code that we got in that .wasm file. That‚Äôs the module code.</p>\n<p>So we extract the binary into a buffer, and then pass it in.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/1-03.png\"><img alt=\"Binary code being passed in as the source parameter to WebAssembly.instantiate\" class=\"alignnone wp-image-31072 size-large\" height=\"153\" src=\"https://hacks.mozilla.org/files/2017/07/1-03-500x153.png\" width=\"500\" /></a></p>\n<p>The engine will start compiling the module code down to something that is specific to the machine that it&#8217;s running on.</p>\n<p>But we don‚Äôt want to do this on the main thread. I‚Äôve talked before about how the main thread is like a full stack developer because it handles JavaScript, the DOM, and layout. We don‚Äôt want to block the main thread while we compile the module. So what <code>WebAssembly.instantiate</code> returns is a promise.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/1-04.png\"><img alt=\"Promise being returned as module compiles\" class=\"alignnone wp-image-31073 size-large\" height=\"232\" src=\"https://hacks.mozilla.org/files/2017/07/1-04-500x232.png\" width=\"500\" /></a></p>\n<p>This lets the main thread get back to its other work. The main thread knows that once the compiler is finished compiling this module, it will be notified by the promise. That promise will give it the instance.</p>\n<p>But the compiled module is not the only thing needed to create the instance. I think of the module as kind of like an instruction book.</p>\n<p>The instance is like a person who‚Äôs trying to make something with the instruction book. In order to make that thing, they also need raw materials. They need things that they can work with.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/1-05.png\"><img alt=\"Instruction book next to WebAssembly robot\" class=\"alignnone wp-image-31074 size-large\" height=\"300\" src=\"https://hacks.mozilla.org/files/2017/07/1-05-500x300.png\" width=\"500\" /></a></p>\n<p>This is where the second parameter to <code>WebAssembly.instantiate</code> comes in. That is the imports object.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/1-06.png\"><img alt=\"Arrow pointing to importObject param of WebAssembly.instantiate\" class=\"alignnone wp-image-31075 size-large\" height=\"95\" src=\"https://hacks.mozilla.org/files/2017/07/1-06-500x95.png\" width=\"500\" /></a><br />\nI think of the imports object as a box of those raw materials, like you would get from IKEA. The instance uses these raw materials‚Äîthese imports‚Äîto build a thing, as directed by the instructions. Just as an instruction manual expects a certain set of raw materials, each module expects a specific set of imports.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/1-07.png\"><img alt=\"Imports box next to WebAssembly robot\" class=\"alignnone wp-image-31076 size-large\" height=\"297\" src=\"https://hacks.mozilla.org/files/2017/07/1-07-500x297.png\" width=\"500\" /></a></p>\n<p>So when you are instantiating a module, you pass it an imports object that has those imports attached to it. Each import can be one of these four kinds of imports:</p>\n<ul>\n<li>values</li>\n<li>function closures</li>\n<li>memory</li>\n<li>tables</li>\n</ul>\n<h4>Values</h4>\n<p>It can have values, which are basically global variables. The only types that WebAssembly supports right now are integers and floats, so values have to be one of those two types. That will change as more types are added in the WebAssembly spec.</p>\n<h4>Function closures</h4>\n<p>It can also have function closures. This means you can pass in JavaScript functions, which WebAssembly can then call.</p>\n<p>This is particularly useful because in the current version of WebAssembly, you can‚Äôt call DOM methods directly. Direct DOM access is on the WebAssembly roadmap, but not part of the spec yet.</p>\n<p>What you can do in the meantime is pass in a JavaScript function that can interact with the DOM in the way you need. Then WebAssembly can just call that JS function.</p>\n<h4>Memory</h4>\n<p>Another kind of import is the memory object. This object makes it possible for WebAssembly code to emulate manual memory management. The concept of the memory object confuses people, so I‚Äòve gone into a little bit <a href=\"https://hacks.mozilla.org/2017/07/memory-in-webassembly-and-why-its-safer-than-you-think/\">more depth in another article</a>, the next post in this series.</p>\n<h4>Tables</h4>\n<p>The final type of import is related to security as well. It‚Äôs called a table. It makes it possible for you to use something called function pointers. Again, this is kind of complicated, so I <a href=\"https://hacks.mozilla.org/2017/07/webassembly-table-imports-what-are-they/\">explain it in the third part of this series</a>.</p>\n<p>Those are the different kinds of imports that you can equip your instance with.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/1-08.png\"><img alt=\"Different kinds of imports going into the imports box\" class=\"alignnone wp-image-31077 size-large\" height=\"308\" src=\"https://hacks.mozilla.org/files/2017/07/1-08-500x308.png\" width=\"500\" /></a></p>\n<p>To return the instance, the promise returned from <code>WebAssembly.instantiate</code> is resolved. It contains two things: the instance and, separately, the compiled module.</p>\n<p>The nice thing about having the compiled module is that you can spin up other instances of the same module quickly. All you do is pass the module in as the <code>source</code> parameter. The module itself doesn‚Äôt have any state (that‚Äôs all attached to the instance). That means that instances can share the compiled module code.</p>\n<p>Your instance is now fully equipped and ready to go. It has its instruction manual, which is the compiled code, and all of its imports. You can now call its methods.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/1-09.png\"><img alt=\"WebAssembly robot is booted\" class=\"alignnone wp-image-31078 size-large\" height=\"217\" src=\"https://hacks.mozilla.org/files/2017/07/1-09-500x217.png\" width=\"500\" /></a></p>\n<p>In the next two articles, we‚Äôll dig deeper into the <a href=\"https://hacks.mozilla.org/2017/07/memory-in-webassembly-and-why-its-safer-than-you-think/\">memory import</a> and the <a href=\"https://hacks.mozilla.org/2017/07/webassembly-table-imports-what-are-they/\">table import</a>.</p>", "title": "Creating a WebAssembly module instance with JavaScript", "author_name": "Lin Clark", "source_type": "rss", "link": "https://hacks.mozilla.org/2017/07/creating-a-webassembly-module-instance-with-javascript/", "source_link": "https://hacks.mozilla.org", "source_title": "Mozilla Hacks ‚Äì the Web developer blog", "published": "2017-07-19T15:02:00"}, {"source_name": "MozillaHacks", "description": "This is the 2nd article in a 3-part series of articles with code cartoons about running WebAssembly modules and memory safety.", "tags": "mozilla,services,tech", "text": "<p><em>This is the 2nd article in a 3-part series:</em></p>\n<ol>\n<li><a href=\"https://hacks.mozilla.org/2017/07/creating-a-webassembly-module-instance-with-javascript/\"><em>Creating a WebAssembly module instance with JavaScript</em></a></li>\n<li><em>Memory in WebAssembly (and why it‚Äôs safer than you think)</em></li>\n<li><a href=\"https://hacks.mozilla.org/2017/07/webassembly-table-imports-what-are-they/\"><em>WebAssembly table imports‚Ä¶ what are they?</em></a></li>\n</ol>\n<hr class=\"dino\" />\n<p>Memory in WebAssembly works a little differently than it does in JavaScript. With WebAssembly, you have direct access to the raw bytes‚Ä¶ and that worries some people. But it‚Äôs actually safer than you might think.</p>\n<h3>What is the memory object?</h3>\n<p>When a WebAssembly module is instantiated, it needs a memory object. You can either create a new <code>WebAssembly.Memory</code> and pass that object in. Or, if you don‚Äôt, a memory object will be created and attached to the instance automatically.</p>\n<p>All the JS engine will do internally is create an ArrayBuffer (which I explain in <a href=\"https://hacks.mozilla.org/2017/06/a-cartoon-intro-to-arraybuffers-and-sharedarraybuffers/\">another article</a>). The ArrayBuffer is a JavaScript object that JS has a reference to. JS allocates the memory for you. You tell it how much memory are going to need, and it will create an ArrayBuffer of that size.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/02-01.png\"><img alt=\"React.js requesting a new memory object and JS engine creating one\" class=\"alignnone size-large wp-image-31079\" height=\"384\" src=\"https://hacks.mozilla.org/files/2017/07/02-01-500x384.png\" width=\"500\" /></a></p>\n<p>The indexes to the array can be treated as though they were memory addresses. And if you need more memory later, you can do something called <em>growing</em> to make the array larger.</p>\n<p>Handling WebAssembly‚Äôs memory as an ArrayBuffer‚Ää‚Äî‚Ääas an object in JavaScript‚Ää‚Äî‚Äädoes two things:</p>\n<ol>\n<li>makes it easy to pass values between JS and WebAssembly</li>\n<li>helps make the memory management safe</li>\n</ol>\n<h3>Passing values between JS and WebAssembly</h3>\n<p>Because this is just a JavaScript object, that means that JavaScript can also dig around in the bytes of this memory. So in this way, WebAssembly and JavaScript can share memory and pass values back and forth.</p>\n<p>Instead of using a memory address, they use an array index to access each box.</p>\n<p>For example, the WebAssembly could put a string in memory. It would encode it into bytes‚Ä¶</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/02-02.png\"><img alt=\"WebAssembly robot putting string &quot;Hello&quot; through decoder ring\" class=\"alignnone size-large wp-image-31080\" height=\"370\" src=\"https://hacks.mozilla.org/files/2017/07/02-02-500x370.png\" width=\"500\" /></a></p>\n<p>‚Ä¶and then put those bytes in the array.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/02-03.png\"><img alt=\"WebAssembly robot putting bytes into memory\" class=\"alignnone size-large wp-image-31081\" height=\"371\" src=\"https://hacks.mozilla.org/files/2017/07/02-03-500x371.png\" width=\"500\" /></a></p>\n<p>Then it would return the first index, which is an integer, to JavaScript. So JavaScript can pull the bytes out and use them.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/02-04.png\"><img alt=\"WebAssembly robot returning index of first byte in string\" class=\"alignnone size-large wp-image-31082\" height=\"365\" src=\"https://hacks.mozilla.org/files/2017/07/02-04-500x365.png\" width=\"500\" /></a></p>\n<p>Now, most JavaScript doesn‚Äôt know how to work directly with bytes. So you‚Äôll need something on the JavaScript side, like you do on the WebAssembly side, that can convert from bytes into more useful values like strings.</p>\n<p>In some browsers, you can use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder\">TextDecoder</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder\">TextEncoder</a> APIs. Or you can add helper functions into your .js file. For example, a tool like <a href=\"https://github.com/kripken/emscripten\">Emscripten</a> can add encoding and decoding helpers.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/02-05.png\"><img alt=\"JS engine pulling out bytes, and React.js decoding them\" class=\"alignnone size-large wp-image-31083\" height=\"387\" src=\"https://hacks.mozilla.org/files/2017/07/02-05-500x387.png\" width=\"500\" /></a></p>\n<p>So that‚Äôs the first benefit of WebAssembly memory just being a JS object. WebAssembly and JavaScript can pass values back and forth directly through memory.</p>\n<h3>Making memory access safer</h3>\n<p>There&#8217;s another benefit that comes from this WebAssembly memory just being a JavaScript object: safety. It makes things safer by helping to prevent browser-level memory leaks and providing memory isolation.</p>\n<h4>Memory leaks</h4>\n<p>As I mentioned in the article on memory management, when you manage your own memory you may forget to clear it out. This can cause the system to run out of memory.</p>\n<p>If a WebAssembly module instance had direct access to memory, and if it forgot to clear out that memory before it went out of scope, then the browser could leak memory.</p>\n<p>But because the memory object is just a JavaScript object, it itself is tracked by the garbage collector (even though its contents are not).</p>\n<p>That means that when the WebAssembly instance that the memory object is attached to goes out of scope, this whole memory array can just be garbage collected.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/02-06.png\"><img alt=\"Garbage collector cleaning up memory object\" class=\"alignnone size-large wp-image-31084\" height=\"369\" src=\"https://hacks.mozilla.org/files/2017/07/02-06-500x369.png\" width=\"500\" /></a></p>\n<h4>Memory isolation</h4>\n<p>When people hear that WebAssembly gives you direct access to memory, it can make them a little nervous. They think that a malicious WebAssembly module could go in and dig around in memory it shouldn‚Äôt be able to. But that isn‚Äôt the case.</p>\n<p>The bounds of the ArrayBuffer provide a boundary. It‚Äôs a limit to what memory the WebAssembly module can touch directly.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/02-07.png\"><img alt=\"Red arrows pointing to the boundaries of the memory object\" class=\"alignnone size-large wp-image-31085\" height=\"374\" src=\"https://hacks.mozilla.org/files/2017/07/02-07-500x374.png\" width=\"500\" /></a></p>\n<p>It can directly touch the bytes that are inside of this array but it can‚Äôt see anything that‚Äôs outside the bounds of this array.</p>\n<p>For example, any other JS objects that are in memory, like the window global, aren‚Äôt accessible to WebAssembly. That‚Äôs really important for security.</p>\n<p>Whenever there‚Äôs a load or a store in WebAssembly, the engine does an array bounds checks to make sure that the address is inside the WebAssembly instance‚Äôs memory.</p>\n<p>If the code tries to access an out-of-bounds address, the engine will throw an exception. This protects the rest of the memory.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/02-08.png\"><img alt=\"WebAssembly trying to store out of bounds and being rejected\" class=\"alignnone size-large wp-image-31086\" height=\"371\" src=\"https://hacks.mozilla.org/files/2017/07/02-08-500x371.png\" width=\"500\" /></a></p>\n<p>So that‚Äôs the memory import. In the next article, we‚Äôll look at another kind of import that makes things safer‚Ä¶ the <a href=\"https://hacks.mozilla.org/2017/07/webassembly-table-imports-what-are-they/\">table import</a>.</p>", "title": "Memory in WebAssembly (and why it‚Äôs safer than you think)", "author_name": "Lin Clark", "source_type": "rss", "link": "https://hacks.mozilla.org/2017/07/memory-in-webassembly-and-why-its-safer-than-you-think/", "source_link": "https://hacks.mozilla.org", "source_title": "Mozilla Hacks ‚Äì the Web developer blog", "published": "2017-07-19T15:02:00"}, {"source_name": "MozillaHacks", "description": "This is the 3rd article in a 3-part series of articles with code cartoons that illustrate how to get started running WebAssembly modules and how to use table imports.", "tags": "mozilla,services,tech", "text": "<p><em>This is the 3rd article in a 3-part series:</em></p>\n<ol>\n<li><a href=\"https://hacks.mozilla.org/2017/07/creating-a-webassembly-module-instance-with-javascript/\"><em>Creating a WebAssembly module instance with JavaScript</em></a></li>\n<li><a href=\"https://hacks.mozilla.org/2017/07/memory-in-webassembly-and-why-its-safer-than-you-think/\"><em>Memory in WebAssembly (and why it‚Äôs safer than you think)</em></a></li>\n<li><em>WebAssembly table imports‚Ä¶ what are they?</em></li>\n</ol>\n<hr class=\"dino\" />\n<p>In the <a href=\"https://hacks.mozilla.org/2017/07/creating-a-webassembly-module-instance-with-javascript/\">first article</a>, I introduced the four different kinds of imports that a WebAssembly module instance can have:</p>\n<ul>\n<li>values</li>\n<li>function imports</li>\n<li>memory</li>\n<li>tables</li>\n</ul>\n<p>That last one is probably a little unfamiliar. What is a table import and what is it used for?</p>\n<p>Sometimes in a program you want to be able to have a variable that points to a function, like a callback. Then you can do things like pass it into another function.<a href=\"https://hacks.mozilla.org/files/2017/07/03-01.png\"><img alt=\"Defining a callback and passing it into a function\" class=\"alignnone size-large wp-image-31087\" height=\"105\" src=\"https://hacks.mozilla.org/files/2017/07/03-01-500x105.png\" width=\"500\" /></a></p>\n<p>In C, these are called function pointers. The function lives in memory. The variable, the function pointer, just points to that memory address.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/03-02.png\"><img alt=\"Function pointer at memory address 4 points to the callback at memory address 1\" class=\"alignnone size-large wp-image-31088\" height=\"315\" src=\"https://hacks.mozilla.org/files/2017/07/03-02-500x315.png\" width=\"500\" /></a></p>\n<p>And if you need to, later you could point the variable to a different function. This should be a familiar concept.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/03-03.png\"><img alt=\"Function pointer at memory address 4 changes to point to callback2 at memory address 4\" class=\"alignnone size-large wp-image-31089\" height=\"314\" src=\"https://hacks.mozilla.org/files/2017/07/03-03-500x314.png\" width=\"500\" /></a></p>\n<p>In web pages, all functions are just JavaScript objects. And because they‚Äôre JavaScript objects, they live in memory addresses that are outside of WebAssembly‚Äôs memory.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/03-04.png\"><img alt=\"JS function living in JS managed memory\" class=\"alignnone size-large wp-image-31090\" height=\"115\" src=\"https://hacks.mozilla.org/files/2017/07/03-04-500x115.png\" width=\"500\" /></a></p>\n<p>If we want to have a variable that points to one of these functions, we need to take its address and put it into our memory.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/03-05.png\"><img alt=\"Function pointer in WebAssembly memory pointing to function\" class=\"alignnone size-large wp-image-31091\" height=\"160\" src=\"https://hacks.mozilla.org/files/2017/07/03-05-500x160.png\" width=\"500\" /></a></p>\n<p>But part of keeping web pages secure is keeping those memory addresses hidden. You don‚Äôt want code on the page to be able to see or manipulate that memory address. If there‚Äôs malicious code on the page, it can use that knowledge of where things are laid out in memory to create an exploit.</p>\n<p>For example, it could change the memory address that you have in there, to point to a different memory location.</p>\n<p>Then when you try and call the function, instead you would load whatever is in the memory address the attacker gave you.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/03-06.png\"><img alt=\"Malicious actor changing the address in WebAssembly memory to point to malicious code\" class=\"alignnone size-large wp-image-31092\" height=\"323\" src=\"https://hacks.mozilla.org/files/2017/07/03-06-500x323.png\" width=\"500\" /></a></p>\n<p>That could be malicious code that was inserted into memory somehow, maybe embedded inside of a string.</p>\n<p>Tables make it possible to have function pointers, but in a way that isn‚Äôt vulnerable to these kinds of attacks.</p>\n<p>A table is an array that lives outside of WebAssembly‚Äôs memory. The values are references to functions.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/03-07.png\"><img alt=\"Another region of memory is added, distinct from WebAssembly memory, which contains the function pointer\" class=\"alignnone size-large wp-image-31093\" height=\"141\" src=\"https://hacks.mozilla.org/files/2017/07/03-07-500x141.png\" width=\"500\" /></a></p>\n<p>Internally, these references contain memory addresses, but because it‚Äôs not inside WebAssembly‚Äôs memory, WebAssembly can‚Äôt see those addresses.</p>\n<p>It does have access to the array indexes, though.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/03-08.png\"><img alt=\"All memory outside of the WebAssembly memory object is obfuscated\" class=\"alignnone size-large wp-image-31094\" height=\"112\" src=\"https://hacks.mozilla.org/files/2017/07/03-08-500x112.png\" width=\"500\" /></a></p>\n<p>If the WebAssembly module wants to call one of these functions, it passes the index to an operation called <code>call_indirect</code>. That will call the function.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2017/07/03-09.png\"><img alt=\"call_indirect points to the first element of the obfuscated array, which in turn points to the function\" class=\"alignnone size-large wp-image-31095\" height=\"201\" src=\"https://hacks.mozilla.org/files/2017/07/03-09-500x201.png\" width=\"500\" /></a></p>\n<p>Right now the use case for tables is pretty limited. They were added to the spec specifically to support these function pointers, because C and C++ rely pretty heavily on these function pointers.</p>\n<p>Because of this, the only kinds of references that you can currently put in a table are references to functions. But as the capabilities of WebAssembly expand‚Äîfor example, when direct access to the DOM is added‚Äîyou‚Äôll likely see other kinds of references being stored in tables and other operations on tables in addition to <code>call_indirect</code>.</p>", "title": "WebAssembly table imports‚Ä¶ what are they?", "author_name": "Lin Clark", "source_type": "rss", "link": "https://hacks.mozilla.org/2017/07/webassembly-table-imports-what-are-they/", "source_link": "https://hacks.mozilla.org", "source_title": "Mozilla Hacks ‚Äì the Web developer blog", "published": "2017-07-19T15:01:00"}, {"source_name": "2ality", "description": "<p>The proposal ‚Äú<a href=\"https://github.com/tc39/proposal-regexp-named-groups\">RegExp Named Capture Groups</a>‚Äù by Daniel Ehrenberg is currently at <a href=\"http://exploringjs.com/es2016-es2017/ch_tc39-process.html\">stage 3</a>. This blog post explains what it has to offer.</p>\n\n<div><a href=\"http://2ality.com/2017/05/regexp-named-capture-groups.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/A7ZmSmZJy5g\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "ES proposal: RegExp named capture groups", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/05/regexp-named-capture-groups.html", "author_link": "http://2ality.com/", "published": "2017-07-19T03:09:00", "source_title": "2ality feed"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "V8Blog", "description": "Regular expressions, or RegExps, are an important part of the JavaScript language. When used properly, they can greatly simplify string processing.<br /><br />ES2015 introduced many new features to the JavaScript language, including significant improvements to the regular expression syntax with the Unicode (<span>/u</span>) and sticky (<span>/y</span>) flags. But development has not stopped since then ‚Äî in tight collaboration with other members at TC39 (the ECMAScript standards body), the V8 team has proposed and co-designed several new features to make RegExps even more powerful.<br /><br />These features are currently being proposed for inclusion in the JavaScript specification. Even though the proposals have not been fully accepted, they are already at <a href=\"https://tc39.github.io/process-document/\">Stage 3 in the TC39 process</a>. We have implemented these features behind flags (see below) in order to be able to provide timely design and implementation feedback before the specification is finalized.<br /><br />In this blog post we want to give you a preview of this exciting future. If you'd like to follow along with the upcoming examples, enable experimental JavaScript features at <a href=\"\">chrome://flags/#enable-javascript-harmony</a>.<br /><br /><h2>Named Captures</h2><br />Regular expressions can contain so-called captures (or groups), which can capture a portion of the matched text. So far, developers could only refer to these captures by their numeric index, which is determined by the position of the capture within the pattern.<br /><pre><code class=\"javascript\">const pattern = /(\\d{4})-(\\d{2})-(\\d{2})/u;<br />const result = pattern.exec('2017-07-03');<br />// result[0] === '2017-07-03'<br />// result[1] === '2017'<br />// result[2] === '07'<br />// result[3] === '03'</code></pre><br />But regular expressions are already notoriously difficult to read, write, and maintain, and numeric references can add further complications. For instance, in longer patterns it can be tricky to determine the index of a particular capture:<br /><pre><code class=\"javascript\">/(?:(.)(.(?&lt;=[^(])(.)))/  // Index of the last capture?</code></pre><br />And even worse, changes to a pattern can potentially shift the indices of all existing captures:<br /><pre><code class=\"javascript\">/(a)(b)(c)\\3\\2\\1/     // A few simple numbered backreferences.<br />/(.)(a)(b)(c)\\4\\3\\2/  // All need to be updated.</code></pre><br />Named captures are an upcoming feature that helps mitigate these issues by allowing developers to assign names to captures. The syntax is similar to Perl, Java, .Net, and Ruby:<br /><pre><code class=\"javascript\">const pattern = /(?&lt;year&gt;\\d{4})-(?&lt;month&gt;\\d{2})-(?&lt;day&gt;\\d{2})/u;<br />const result = pattern.exec('2017-07-03');<br />// result.groups.year === '2017'<br />// result.groups.month === '07'<br />// result.groups.day === '03'</code></pre><br />Named captures can also be referenced by named backreferences and through <span>String.prototype.replace</span>:<br /><pre><code class=\"javascript\">// Named backreferences.<br />/(?&lt;lowercasex&gt;x)y\\k&lt;lowercasex&gt;/.test('xyx');  // true<br /><br />// String replacement.<br />const pattern = /(?&lt;fst&gt;a)(?&lt;snd&gt;b)/;<br />'ab'.replace(pattern, '$&lt;snd&gt;$&lt;fst&gt;');  // 'ba'<br />'ab'.replace(pattern, (m, p1, p2, o, s, {fst, snd}) =&gt; fst + snd);  // 'ba'</code></pre><br />Full details of this new feature are available in <a href=\"https://github.com/tc39/proposal-regexp-named-groups\">the specification proposal</a>.<br /><br /><h2>dotAll Flag</h2><br />By default, the <span>.</span> atom in regular expressions matches any character except for line terminators:<br /><pre><code class=\"javascript\">/foo.bar/u.test('foo\\nbar');  // false</code></pre><br /><a href=\"https://github.com/tc39/proposal-regexp-dotall-flag\">A proposal</a> introduces <span>dotAll</span> mode, enabled through the <span>/s</span> flag. In <span>dotAll</span> mode, <span>.</span> matches line terminators as well.<br /><pre><code class=\"javascript\">/foo.bar/su.test('foo\\nbar');  // true</code></pre><br />Full details of this new feature are available in <a href=\"https://tc39.github.io/proposal-regexp-dotall-flag/\">the specification proposal</a>.<br /><br /><h2>Unicode Property Escapes</h2><br />Regular expression syntax has always included shorthands for certain character classes. <span>\\d</span> represents digits and is really just <span>[0-9]</span>; <span>\\w</span> is short for word characters, or <span>[A-Za-z0-9_]</span>.<br /><br />With Unicode awareness introduced in ES2015, there are suddenly many more characters that could be considered numbers, for example the circled digit one: ‚ë†; or considered word characters, for example the Chinese character for snow: Èõ™.<br /><br />Neither of these can be matched with <span>\\d</span> or <span>\\w</span>. Changing the meaning of these shorthands would break existing regular expression patterns.<br /><br />Instead, new character classes are being <a href=\"https://github.com/tc39/proposal-regexp-unicode-property-escapes\">introduced</a>. Note that they are only available for Unicode-aware RegExps denoted by the <span>/u</span> flag.<br /><pre><code class=\"javascript\">/\\p{Number}/u.test('‚ë†');     // true<br />/\\p{Alphabetic}/u.test('Èõ™');  // true</code></pre><br />The inverse can be matched by with <span>\\P</span>.<br /><pre><code class=\"javascript\">/\\P{Number}/u.test('‚ë†');     // false<br />/\\P{Alphabetic}/u.test('Èõ™');  // false</code></pre><br />The Unicode consortium defines many more ways to classify code points, for example math symbols or Japanese Hiragana characters:<br /><pre><code class=\"javascript\">/^\\p{Math}+$/u.test('‚àõ‚àû‚àâ');                            // true<br />/^\\p{Script_Extensions=Hiragana}+$/u.test('„Å≤„Çâ„Åå„Å™');  // true</code></pre><br />The full list of supported Unicode property classes can be found in the current <a href=\"https://tc39.github.io/proposal-regexp-unicode-property-escapes/#sec-static-semantics-unicodematchproperty-p\">specification proposal</a>. For more examples, take a look at <a href=\"https://mathiasbynens.be/notes/es-unicode-property-escapes\">this informative article</a>.<br /><br /><h2>Lookbehind Assertions</h2><br />Lookahead assertions have been part of JavaScript‚Äôs regular expression syntax from the start. Their counterpart, lookbehind assertions, are finally being <a href=\"https://github.com/tc39/proposal-regexp-lookbehind\">introduced</a>. Some of you may remember that this has been part of V8 for quite some time already. We even use lookbehind asserts under the hood to implement the Unicode flag specified in ES2015.<br /><br />The name already describes its meaning pretty well. It offers a way to restrict a pattern to only match if preceded by the pattern in the lookbehind group. It comes in both matching and non-matching flavors:<br /><pre><code class=\"javascript\">/(?&lt;=\\$)\\d+/.exec('$1 is worth about ¬•123');  // ['1']<br />/(?&lt;!\\$)\\d+/.exec('$1 is worth about ¬•123');  // ['123']</code></pre><br />For more details, check out our <a href=\"https://v8project.blogspot.com/2016/02/regexp-lookbehind-assertions.html\">previous blog post</a> dedicated to lookbehind assertions, and examples in related <a href=\"https://github.com/v8/v8/blob/master/test/mjsunit/harmony/regexp-lookbehind.js\">V8 test cases</a>.<br /><br /><h2>Acknowledgements</h2><br />This blog post wouldn‚Äôt be complete without mentioning some of the people that have worked hard to make this happen: especially language champions <a href=\"https://twitter.com/mathias\">Mathias Bynens</a>, <a href=\"https://twitter.com/littledan\">Dan Ehrenberg</a>, <a href=\"https://github.com/claudepache\">Claude Pache</a>, <a href=\"https://twitter.com/bterlson\">Brian Terlson</a>, <a href=\"https://twitter.com/IgnoredAmbience\">Thomas Wood</a>, Gorkem Yakin, and Irregexp guru <a href=\"https://twitter.com/erikcorry\">Erik Corry</a>; but also everyone else who has contributed to the language specification and V8‚Äôs implementation of these features.<br /><br />We hope you‚Äôre as excited about these new RegExp features as we are!<br /><br />Posted by Yang Guo and Jakob Gruber, V8 RegExperts", "title": "Upcoming RegExp Features", "source_link": "http://v8project.blogspot.com/", "author_link": "", "author_name": "Unknown", "source_type": "rss", "link": "http://v8project.blogspot.com/2017/07/upcoming-regexp-features.html", "published": "2017-07-18T19:52:00", "source_title": "V8 JavaScript Engine", "tags": "browsers,chromium,js,tech,web"}, {"source_name": "WebkitBlog", "description": "Safari Technology Preview Release 35 is now available for download for macOS Sierra and betas of macOS High Sierra.", "tags": "safari technology preview,browsers,safari,tech,web,webkit", "text": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 35 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Sierra and betas of macOS High Sierra. If you already have Safari Technology Preview installed, you can update from the Mac App Store‚Äôs Updates tab. This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=218629&amp;rev=219131&amp;limit=999\">218629-219131</a>.</p>\n<h3>Performance</h3>\n<ul>\n<li>Fixed a 50% regression on MotionMark Suites when extended color support was added (<a href=\"https://trac.webkit.org/changeset/218717/webkit/trunk/Source\">r218717</a>)</li>\n<li>Fixed the bug that Speedometer&#8217;s score worsens by 40% when accessibility features are enabled (<a href=\"https://trac.webkit.org/changeset/218910\">r218910</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Changed image decoding so that when an image appears more than once on a page, decoding to paint one instance repaints them all (<a href=\"https://trac.webkit.org/changeset/219045/webkit/trunk/Source\">r219045</a>)</li>\n<li>Fixed a frame rate issue that caused <code>getUserMedia</code> to fail on some machines (<a href=\"https://trac.webkit.org/changeset/218852/webkit/trunk/Source\">r218852</a>)</li>\n<li>Fixed allowing media element to update its state when Mission Control closes the fullscreen window (<a href=\"https://trac.webkit.org/changeset/218813/webkit/trunk/Source\">r218813</a>)</li>\n<li>Made a change to hide volume controls when AirPlay is active (<a href=\"https://trac.webkit.org/changeset/218891/webkit/trunk/Source\">r218891</a>)</li>\n<li>Prevented capturing at unconventional resolutions when using the software encoder (<a href=\"https://trac.webkit.org/changeset/218699/webkit/trunk/Source\">r218699</a>)</li>\n<li>Prevented clearing capture mute from clearing audio mute (<a href=\"https://trac.webkit.org/changeset/218632/webkit/trunk/Source\">r218632</a>)</li>\n</ul>\n<h3>Web Inspector</h3>\n<ul>\n<li>Added a small delay before showing the progress spinner when loading resources (<a href=\"https://trac.webkit.org/changeset/219017/webkit/trunk/Source\">r219017</a>)</li>\n<li>Added a toggle button to the left side of the split console navigation bar (<a href=\"https://trac.webkit.org/changeset/218839/webkit/trunk/Source\">r218839</a>)</li>\n<li>Fixed initial search sometimes being performed twice, producing duplicate results (<a href=\"https://trac.webkit.org/changeset/219021/webkit/trunk/Source\">r219021</a>)</li>\n<li>Fixed slowness when pausing with a deep call stack by avoiding eagerly generating object previews (<a href=\"https://trac.webkit.org/changeset/218718/webkit/trunk/Source\">r218718</a>)</li>\n<li>Flipped all go-to-arrow instances in right-to-left mode (<a href=\"https://trac.webkit.org/changeset/218777/webkit/trunk/Source\">r218777</a>)</li>\n<li>Fixed script timeline bubbles that sometimes appear to miss large events (<a href=\"https://trac.webkit.org/changeset/218781/webkit/trunk/Source\">r218781</a>)</li>\n<li>Fixed a hang when using &#8220;break on all exceptions&#8221; throws a stack overflow (<a href=\"https://trac.webkit.org/changeset/218652/webkit/trunk/Source\">r218652</a>)</li>\n<li>Improved type token background color in the debugger (<a href=\"https://trac.webkit.org/changeset/219041/webkit/trunk/Source\">r219041</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Cleaned up <code>Object.entries</code> implementation (<a href=\"https://trac.webkit.org/changeset/218790/webkit/trunk/Source\">r218790</a>)</li>\n<li>Implemented Object Rest Destructuring (<a href=\"https://trac.webkit.org/changeset/218861/webkit/trunk/Source\">r218861</a>)</li>\n<li>Made <code>Object.values</code> faster by writing it in C++ (<a href=\"https://trac.webkit.org/changeset/218697/webkit/trunk/Source\">r218697</a>)</li>\n<li>Removed <code>Reflect.enumerate</code> (<a href=\"https://trac.webkit.org/changeset/218784/webkit/trunk/Source\">r218784</a>)</li>\n</ul>\n<h3>Accessibility</h3>\n<ul>\n<li>Fixed calling <code>setValue()</code> on <code>contenteditable</code> for ARIA text controls (<a href=\"https://trac.webkit.org/changeset/218986/webkit/trunk/Source\">r218986</a>)</li>\n<li>Fixed <code>role=\"none\"</code> or <code>role=\"presentation\"</code> on an <code>&lt;iframe&gt;</code> (<a href=\"https://trac.webkit.org/changeset/219075/webkit/trunk/Source\">r219075</a>)</li>\n</ul>\n<h3>WebAssembly</h3>\n<ul>\n<li>Disabled some WebAssembly APIs under CSP (<a href=\"https://trac.webkit.org/changeset/218951/webkit/trunk/Source\">r218951</a>)</li>\n</ul>\n<h3>WebCrypto</h3>\n<ul>\n<li>Fixed a backward compatibility issue with CryptoKey objects stored in the IndexedDB (<a href=\"https://trac.webkit.org/changeset/218666/webkit/trunk/Source\">r218666</a>) </li>\n</ul>\n<h3>Web APIs</h3>\n<ul>\n<li>Fixed a TypeError in the Fetch API when called with <code>body === {}</code> (<a href=\"https://trac.webkit.org/changeset/218677/webkit/trunk/Source\">r218677</a>)</li>\n<li>Fixed an issue causing Safari to leave a popup window opened during the <code>beforeunload</code> event (<a href=\"https://trac.webkit.org/changeset/219039/webkit/trunk/Source\">r219039</a>)</li>\n<li>Included <code>audio/vnd.wave</code> as a valid mime-type for <code>wav</code> files (<a href=\"https://trac.webkit.org/changeset/218634/webkit/trunk/Source\">r218634</a>)</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Added support for structured serialization of CSS Geometry types (<a href=\"https://trac.webkit.org/changeset/218644/webkit/trunk/Source\">r218644</a>)</li>\n<li>Fixed <code>@font-face</code> rules with invalid primary fonts never downloading their secondary fonts (<a href=\"https://trac.webkit.org/changeset/218733/webkit/trunk/Source\">r218733</a>)</li>\n<li>Fixed applying font features only for the particular type of font they are being applied to (<a href=\"https://trac.webkit.org/changeset/218919/webkit/trunk/Source\">r218919</a>)</li>\n<li>Fixed CSS text properties affecting <code>&lt;video&gt;</code> shadow root (<a href=\"https://trac.webkit.org/changeset/218655/webkit/trunk/Source\">r218655</a>)</li>\n</ul>", "title": "Release Notes for Safari Technology Preview¬†35", "author_name": "Jon Davis", "source_type": "rss", "link": "https://webkit.org/blog/7786/release-notes-for-safari-technology-preview-35/", "source_link": "https://webkit.org", "source_title": "WebKit", "published": "2017-07-12T17:00:00"}, {"source_name": "FacebookCode", "description": "Delivering enterprise tools across a large organization can be made simpler by taking an engineering approach to the challenge.", "tags": "facebook,services,tech", "source_link": "https://code.facebook.com/", "title": "Building open source tools for Adobe Creative Cloud updates", "author_name": "Nick McSpadden", "source_type": "rss", "link": "https://code.facebook.com/posts/1555751614499319/building-open-source-tools-for-adobe-creative-cloud-updates/?utm_source=codedot_rss_feed&utm_medium=rss&utm_campaign=RSS+Feed", "published": "2017-07-11T18:00:00", "source_title": "Facebook Code"}, {"source_name": "GoogleDevelopersWeb", "description": "<img src=\"https://ga-beacon.appspot.com/UA-52746336-1/web/updates/2017/07/devtools-release-notes?feed_type=atom&amp;pixel\" />\n        \n        <h1 id=\"what-s-new-in-devtools-chrome-61-\">What's New In DevTools (Chrome 61)</h1>\n<p>New features and major changes coming to DevTools in Chrome 61 include:</p>\n<ul>\n<li><a href=\"https://developers.google.com/web/updates/atom.xml#throttling\">Mobile device throttling simulation</a>. Set CPU and network\nthrottling simultaneously, to simulate mid-tier or low-end mobile devices.</li>\n<li><a href=\"https://developers.google.com/web/updates/atom.xml#storage\">Storage usage</a>. View how much storage an origin is using, broken\ndown by technology (IndexedDB, cache, local, session, etc.).</li>\n<li><a href=\"https://developers.google.com/web/updates/atom.xml#time-cached\">Cache timestamps</a>. View when a service worker cached a\nresponse.</li>\n<li><a href=\"https://developers.google.com/web/updates/atom.xml#fps-meter\">Enable the FPS Meter from the Command Menu</a>.</li>\n<li><a href=\"https://developers.google.com/web/updates/atom.xml#mousewheel\">Change mousewheel and trackpad behavior in the Performance\npanel</a>.</li>\n<li><a href=\"https://developers.google.com/web/updates/atom.xml#modules\">Debug ES6 modules natively</a>.</li>\n</ul>\n<p>Note: You can check what version of Chrome you're running at\n<code>chrome://version</code>. Chrome auto-updates to a new major version about every 6\nweeks.</p>\n<p>Check out the video version of these release notes below or read on to learn\nmore.</p>\n<div class=\"video-wrapper-full-width\">\n  \n  \n</div>\n\n<h2 id=\"simulate-low-end-and-mid-tier-mobile-devices-in-device-mode\">Simulate low-end and mid-tier mobile devices in Device Mode</h2>\n<p>The Device Mode <strong>Throttling</strong> menu is now exposed by default, and it now lets\nyou simulate a low-end or mid-tier mobile device with a couple of clicks.</p>\n<figure>\n  <img alt=\"The Throttling Menu\" src=\"https://developers.google.com/web/updates/images/2017/07/throttling-menu.png\" />\n  <figcaption>\n    <b>Figure 1</b>. The <b>Throttling Menu</b>\n  </figcaption>\n</figure>\n\n<figure>\n  <img alt=\"Throttling Menu definitions\" src=\"https://developers.google.com/web/updates/images/2017/07/throttling-definitions.svg\" />\n  <figcaption>\n    <b>Figure 2</b>. Hover over the <b>Throttling</b> menu or open the\n    <b>Capture Settings</b> menu to see the definitions for <b>Mid-tier\n    mobile</b> and <b>Low-end mobile</b>\n  </figcaption>\n</figure>\n\n<h2 id=\"view-storage-usage\">View storage usage</h2>\n<p>The new <strong>Usage</strong> section in the <strong>Clear Storage</strong> tab of the <strong>Application</strong>\npanel shows you how much storage an <a href=\"https://tools.ietf.org/html/rfc6454#section-3.2\">origin</a> is using, as well as the\nmaximum quota for the entire device.</p>\n<figure>\n  <img alt=\"The Usage section\" src=\"https://developers.google.com/web/updates/images/2017/07/usage-section.png\" />\n  <figcaption>\n    <b>Figure 3</b>. The <b>Usage</b> section shows that\n    <code><a href=\"https://airhorner.com\">https://airhorner.com</a></code> is using 66.9KB out of the device's\n    quota of 15214MB\n  </figcaption>\n</figure>\n\n<h2 id=\"view-when-a-service-worker-cached-responses\">View when a service worker cached responses</h2>\n<p>The new <strong>Time Cached</strong> column in the <strong>Cache Storage</strong> tab shows you\nwhen a service worker cached responses.</p>\n<figure>\n  <img alt=\"The Time Cached column\" src=\"https://developers.google.com/web/updates/images/2017/07/time-cached.png\" />\n  <figcaption>\n    <b>Figure 4</b>. The <b>Time Cached</b> column\n  </figcaption>\n</figure>\n\n<h2 id=\"enable-the-fps-meter-from-the-command-menu\">Enable the FPS Meter from the Command Menu</h2>\n<p>You can now enable the <a href=\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#fps-meter\">FPS Meter</a> from the <a href=\"https://developers.google.com/web/tools/chrome-devtools/ui#command-menu\">Command Menu</a>.</p>\n<figure>\n  <img alt=\"Enabling the FPS Meter from the Command Menu\" src=\"https://developers.google.com/web/updates/images/2017/07/fps-meter.png\" />\n  <figcaption>\n    <b>Figure 5</b>. Enabling the <b>FPS Meter</b> from the <b>Command\n    Menu</b>\n  </figcaption>\n</figure>\n\n<h2 id=\"set-mousewheel-behavior-to-zoom-or-scroll-with-performance-recordings\">Set mousewheel behavior to zoom or scroll with Performance recordings</h2>\n<p>Open <a href=\"https://developers.google.com/web/tools/chrome-devtools/ui#settings\">Settings</a> and set the new <strong>Flamechart mouse wheel action</strong> setting to\nchange how mousewheels behave on the <strong>Performance</strong> panel.</p>\n<p>For example, when you use a mousewheel on the <strong>Main</strong> section of a recording,\nor when you swipe with two fingers on a trackpad, the default behavior is\nto zoom in or out. When you change the setting to <strong>Scroll</strong>, this gesture now\nscrolls up or down.</p>\n<figure>\n  <img alt=\"The 'Flamechart mouse wheel action' setting\" src=\"https://developers.google.com/web/updates/images/2017/07/flamechart-setting.svg\" />\n  <figcaption>\n    <b>Figure 6</b>. The <b>Flamechart mouse wheel action</b> setting\n  </figcaption>\n</figure>\n\n<h2 id=\"debugging-support-for-es6-modules\">Debugging support for ES6 Modules</h2>\n<p>ES6 Modules are shipping natively in Chrome 61. There's not much going on here\nwith regards to DevTools, other than that debugging works as you'd expect it\nto. Try setting some breakpoints in and stepping through <a href=\"https://paulirish.github.io/es-modules-todomvc/\">Paul Irish's\nES6-Module-implementation</a> of <a href=\"http://todomvc.com/\">TodoMVC</a> to see for yourself.</p>\n<h2 id=\"feedback\">Feedback</h2>\n<p>The best place to discuss any of the features or changes you see here is\nthe <a href=\"https://groups.google.com/forum/#!forum/google-chrome-developer-tools\">google-chrome-developer-tools@googlegroups.com mailing list</a>. You\ncan also tweet us at <a href=\"https://twitter.com/chromedevtools\">@ChromeDevTools</a> if\nyou're short on time.</p>\n<p>That's all for what's new in DevTools in Chrome 61. See you in 6 weeks for\nChrome 62!</p>\n<h2 id=\"links-to-previous-release-notes\">Links to previous release notes</h2>\n<ul>\n<li><a href=\"https://developers.google.com/web/updates/2017/05/devtools-release-notes\">What's New In DevTools (Chrome 60)</a></li>\n<li><a href=\"https://developers.google.com/web/updates/2017/04/devtools-release-notes\">What's New In DevTools (Chrome 59)</a></li>\n<li><a href=\"https://developers.google.com/web/updates/2017/03/devtools-release-notes\">What's New In DevTools (Chrome 58)</a></li>\n</ul>", "tags": "chrome61,devtools,tech,web", "source_link": "https://developers.google.com/web/updates/?utm_source=feed&utm_medium=feed&utm_campaign=updates_feed", "title": "What's New In DevTools (Chrome 61)", "author_name": "Kayce Basques", "source_type": "rss", "link": "https://developers.google.com/web/updates/2017/07/devtools-release-notes?utm_source=feed&utm_medium=feed&utm_campaign=updates_feed", "published": "2017-07-10T00:00:00", "source_title": "Updates"}, {"source_name": "GoogleDevelopersWeb", "description": "<img src=\"https://ga-beacon.appspot.com/UA-52746336-1/web/updates/2017/07/upcoming-regexp-features?feed_type=atom&amp;pixel\" />\n        \n        <h1 id=\"upcoming-regular-expression-features\">Upcoming Regular Expression Features</h1>\n<p>ES2015 introduced many new features to the JavaScript language, including\nsignificant improvements to the regular expression syntax with the Unicode\n(<code>/u</code>) and sticky (<code>/y</code>) flags. But development has not stopped since then. In\ntight collaboration with other members at TC39 (the ECMAScript standards body),\nthe V8 team has proposed and co-designed several new features to make regular\nexpressions even more powerful.</p>\n<p>These features are currently being proposed for inclusion in the JavaScript\nspecification. Even though the proposals have not been fully accepted, they are\nalready at <a href=\"https://tc39.github.io/process-document/\">Stage 3 in the TC39\nprocess</a>. We have implemented these\nfeatures behind a flag (see below) in order to be able to provide timely design\nand implementation feedback to the respective proposal authors before the\nspecification is finalized.</p>\n<p>This blog post gives you a preview of this exciting future. If you'd like to\nfollow along with the upcoming examples, enable experimental JavaScript\nfeatures at <code>chrome://flags/#enable-javascript-harmony</code>.</p>\n<h2 id=\"named-captures\">Named Captures</h2>\n<p>Regular expressions can contain so-called captures (or groups), which can\ncapture a portion of the matched text. So far, developers could only refer to\nthese captures by their index, which is determined by the position of the\ncapture within the pattern.</p>\n<pre><code class=\"lang-js\">const pattern = /(\\d{4})-(\\d{2})-(\\d{2})/u;\nconst result = pattern.exec('2017-07-10');\n// result[0] === '2017-07-10'\n// result[1] === '2017'\n// result[2] === '07'\n// result[3] === '10'\n</code></pre>\n<p>But regular expressions are already notoriously difficult to read, write, and\nmaintain, and numeric references can add further complications. For instance,\nin longer patterns it can be tricky to determine the index of a particular\ncapture:</p>\n<pre><code class=\"lang-js\">/(?:(.)(.(?&lt;=[^(])(.)))/  // Index of the last capture?\n</code></pre>\n<p>And even worse, changes to a pattern can potentially shift the indices of all\nexisting captures:</p>\n<pre><code class=\"lang-js\">/(a)(b)(c)\\3\\2\\1/     // A few simple numbered backreferences.\n/(.)(a)(b)(c)\\4\\3\\2/  // All need to be updated.\n</code></pre>\n<p>Named captures are an upcoming feature that helps mitigate these issues by\nallowing developers to assign names to captures. The syntax is similar to Perl,\nJava, .Net, and Ruby:</p>\n<pre><code class=\"lang-js\">const pattern = /(?&lt;year&gt;\\d{4})-(?&lt;month&gt;\\d{2})-(?&lt;day&gt;\\d{2})/u;\nconst result = pattern.exec('2017-07-10');\n// result.groups.year === '2017'\n// result.groups.month === '07'\n// result.groups.day === '10'\n</code></pre>\n<p>Named captures can also be referenced by named backreferences and through\n<code>String.prototype.replace</code>:</p>\n<pre><code class=\"lang-js\">// Named backreferences.\n/(?&lt;LowerCaseX&gt;x)y\\k&lt;LowerCaseX&gt;/.test('xyx');  // true\n\n// String replacement.\nconst pattern = /(?&lt;fst&gt;a)(?&lt;snd&gt;b)/;\n'ab'.replace(pattern, '$&lt;snd&gt;$&lt;fst&gt;');                              // 'ba'\n'ab'.replace(pattern, (m, p1, p2, o, s, {fst, snd}) =&gt; fst + snd);  // 'ba'\n</code></pre>\n<p>Full details of this new feature are available in the <a href=\"https://github.com/tc39/proposal-regexp-named-groups\">specification\nproposal</a>.</p>\n<h2 id=\"dotall-flag\">dotAll Flag</h2>\n<p>By default, the <code>.</code> atom in regular expressions matches any character except\nfor line terminators:</p>\n<pre><code class=\"lang-js\">/foo.bar/u.test('foo\\nbar');   // false\n</code></pre>\n<p>A proposal introduces dotAll mode, enabled through the <code>/s</code> flag. In dotAll\nmode, <code>.</code> matches line terminators as well.</p>\n<pre><code class=\"lang-js\">/foo.bar/su.test('foo\\nbar');  // true\n</code></pre>\n<p>Full details of this new feature are available in the <a href=\"https://github.com/tc39/proposal-regexp-dotall-flag\">specification\nproposal</a>.</p>\n<h2 id=\"unicode-property-escapes\">Unicode Property Escapes</h2>\n<p>Regular expression syntax has always included shorthands for certain character\nclasses. <code>\\d</code> represent digits and is really just <code>[0-9]</code>; <code>\\w</code> is short for\nword characters, or <code>[A-Za-z0-9_]</code>.</p>\n<p>With Unicode awareness introduced in ES2015, there are suddenly many more\ncharacters that could be considered numbers, for example the circled digit one:\n‚ë†; or considered word characters, for example the Chinese character for snow:\nÈõ™.</p>\n<p>Neither of these can be matched with <code>\\d</code> or <code>\\w</code>. Changing the meaning of\nthese shorthands would break existing regular expression patterns.</p>\n<p>Instead, new character classes are being\n<a href=\"https://github.com/tc39/proposal-regexp-unicode-property-escapes\">introduced</a>.\nNote that they are only available for Unicode-aware regular expressions denoted\nby the <code>/u</code> flag.</p>\n<pre><code class=\"lang-js\">/\\p{Number}/u.test('‚ë†');      // true\n/\\p{Alphabetic}/u.test('Èõ™');  // true\n</code></pre>\n<p>The inverse can be matched by with <code>\\P</code>.</p>\n<pre><code class=\"lang-js\">/\\P{Number}/u.test('‚ë†');      // false\n/\\P{Alphabetic}/u.test('Èõ™');  // false\n</code></pre>\n<p>The Unicode consortium defines many more ways to classify code points, for\nexample math symbols or Japanese Hiragana characters:</p>\n<pre><code class=\"lang-js\">/^\\p{Math}+$/u.test('‚àõ‚àû‚àâ');                            // true\n/^\\p{Script_Extensions=Hiragana}+$/u.test('„Å≤„Çâ„Åå„Å™');  // true\n</code></pre>\n<p>The full list of supported Unicode property classes can be found in the current\n<a href=\"https://tc39.github.io/proposal-regexp-unicode-property-escapes/#sec-static-semantics-unicodematchproperty-p\">specification\nproposal</a>.\nFor more examples, take a look at <a href=\"https://mathiasbynens.be/notes/es-unicode-property-escapes\">this informative\narticle</a>.</p>\n<h2 id=\"lookbehind-assertions\">Lookbehind Assertions</h2>\n<p>Lookahead assertions have been part of JavaScript‚Äôs regular expression syntax\nfrom the start. Their counterpart, lookbehind assertions, are finally being\n<a href=\"https://github.com/tc39/proposal-regexp-lookbehind\">introduced</a>. Some of you\nmay remember that this has been part of V8 for quite some time already. We even\nuse lookbehind asserts under the hood to implement the Unicode flag specified\nin ES2015.</p>\n<p>The name already describes its meaning pretty well. It offers a way to restrict\na pattern to only match if preceded by the pattern in the lookbehind group. It\ncomes in both matching and non-matching flavors:</p>\n<pre><code class=\"lang-js\">/(?&lt;=\\$)\\d+/.exec('$1 is worth about ¬•123');  // ['1']\n/(?&lt;!\\$)\\d+/.exec('$1 is worth about ¬•123');  // ['123']\n</code></pre>\n<p>For more details, check out our <a href=\"https://v8project.blogspot.com/2016/02/regexp-lookbehind-assertions.html\">previous blog\npost</a>\ndedicated to lookbehind assertions, and examples in related <a href=\"https://github.com/v8/v8/blob/master/test/mjsunit/harmony/regexp-lookbehind.js\">V8 test\ncases</a>.</p>\n<h2 id=\"acknowledgements\">Acknowledgements</h2>\n<p>This blog post wouldn‚Äôt be complete without mentioning some of the people that\nhave worked hard to make this happen: especially language champions <a href=\"https://twitter.com/mathias\">Mathias\nBynens</a>, <a href=\"https://twitter.com/littledan\">Dan\nEhrenberg</a>, <a href=\"https://github.com/claudepache\">Claude\nPache</a>, <a href=\"https://twitter.com/bterlson\">Brian\nTerlson</a>, <a href=\"https://twitter.com/IgnoredAmbience\">Thomas\nWood</a>, Gorkem Yakin, and Irregexp guru\n<a href=\"https://twitter.com/erikcorry\">Erik Corry</a>; but also everyone else who has\ncontributed to the language specification and V8‚Äôs implementation of these\nfeatures.</p>\n<p>We hope you‚Äôre as excited about these new regular expression features as we\nare!</p>", "tags": "javascript,regex,tech,web", "source_link": "https://developers.google.com/web/updates/?utm_source=feed&utm_medium=feed&utm_campaign=updates_feed", "title": "Upcoming Regular Expression Features", "author_name": "Jakob Gruber", "source_type": "rss", "link": "https://developers.google.com/web/updates/2017/07/upcoming-regexp-features?utm_source=feed&utm_medium=feed&utm_campaign=updates_feed", "published": "2017-07-10T00:00:00", "source_title": "Updates"}, {"source_name": "EdgeBlog", "description": "<p>Beginning in the Windows 10 Fall Creators Update, we intend to disable VBScript execution in IE 11 for websites in the Internet Zone and the Restricted Sites Zone by default, to provide a more secure experience. This change was initially announced in a blog post in April. The new default behavior can be previewed beginning [&#8230;]</p>\n<p>The post <a href=\"https://blogs.windows.com/msedgedev/2017/07/07/update-disabling-vbscript-internet-explorer-11/\" rel=\"nofollow\">An update on disabling VBScript in Internet Explorer 11</a> appeared first on <a href=\"https://blogs.windows.com/msedgedev\" rel=\"nofollow\">Microsoft Edge Dev Blog</a>.</p>", "tags": "uncategorized,browsers,edge,tech,web", "text": "<p>Beginning in the Windows 10 Fall Creators Update, we intend to disable VBScript execution in IE 11 for websites in the Internet Zone and the Restricted Sites Zone by default, to provide a more secure experience. This change was initially announced in <a href=\"https://blogs.windows.com/msedgedev/2017/04/12/disabling-vbscript-execution-in-internet-explorer-11/\">a blog post in April</a>. The new default behavior can be previewed beginning with <a href=\"https://blogs.windows.com/windowsexperience/2017/07/07/announcing-windows-10-insider-preview-build-16237-pc/\">today‚Äôs Windows Insider Preview release, build 16237</a>.</p>\n<p>For customers on previous versions of Windows, we intend to include this change in future cumulative security updates for Internet Explorer 11.The settings to enable, disable, or prompt for VBScript execution in Internet Explorer 11 will remain configurable per site security zone, via Registry, or via Group Policy, on released versions of Windows. We will continue to post updates here in advance of these changes to default settings for VBScript execution in Internet Explorer 11.</p>\n<p>To provide feedback on this change, or to report any issues resulting from this change in Windows Insider Preview, you can use the Feedback Hub app on any Windows 10 device. Your feedback goes directly to our engineers to help make Windows even better.</p>\n<p>‚Äî Brent Mills, Senior Program Manager</p>\n<p>The post <a href=\"https://blogs.windows.com/msedgedev/2017/07/07/update-disabling-vbscript-internet-explorer-11/\" rel=\"nofollow\">An update on disabling VBScript in Internet Explorer 11</a> appeared first on <a href=\"https://blogs.windows.com/msedgedev\" rel=\"nofollow\">Microsoft Edge Dev Blog</a>.</p>", "title": "An update on disabling VBScript in Internet Explorer 11", "author_name": "Microsoft Edge Team", "source_type": "rss", "comments_count": 4, "published": "2017-07-07T17:30:00", "link": "https://blogs.windows.com/msedgedev/2017/07/07/update-disabling-vbscript-internet-explorer-11/", "source_link": "https://blogs.windows.com/msedgedev", "source_title": "Microsoft Edge Dev Blog"}, {"source_name": "FacebookCode", "description": "ELF allows researchers to test their algorithms in various game environments, speeding up training times by nearly 30 percent.", "tags": "facebook,services,tech", "source_link": "https://code.facebook.com/", "title": "Introducing ELF: An extensive, lightweight and flexible platform for game research", "author_name": "Yuandong Tian", "source_type": "rss", "link": "https://code.facebook.com/posts/132985767285406/introducing-elf-an-extensive-lightweight-and-flexible-platform-for-game-research/?utm_source=codedot_rss_feed&utm_medium=rss&utm_campaign=RSS+Feed", "published": "2017-07-06T16:45:00", "source_title": "Facebook Code"}, {"source_name": "WebkitBlog", "description": "We recently announced WebRTC support in Safari 11 on High Sierra and iOS 11 in our last WebKit blog post.", "tags": "standards,browsers,safari,tech,web,webkit", "text": "<p>We recently announced WebRTC support in Safari 11 on High Sierra and iOS 11 in our last <a href=\"https://webkit.org/blog/7726/announcing-webrtc-and-media-capture/\">WebKit blog post</a>. Today, we would like to dive into more details of our implementation, and provide some tips on bringing WebRTC support to your website.</p>\n<p>A website employing WebRTC and media capture can obtain and broadcast very personal information. Users must explicitly grant their trust to the website, and assume that their pictures and voices are used appropriately. WebKit requires websites to meet certain conditions in order to use the technologies and protect the privacy of its users. Additionally, Safari shows users when their capture devices are used, and gives users ways they can control a website&#8217;s access to their capture devices. For developers that use WebKit in their apps, <code>RTCPeerConnection</code> and <code>RTCDataChannel</code> are available in any web view, but access to the camera and microphone is currently limited to Safari.</p>\n<h2>Develop Menu</h2>\n<p><a href=\"https://webkit.org/blog/7760/release-notes-for-safari-technology-preview-34/\">Safari Technology Preview 34</a> exposes various flags to make it easier for you to test your WebRTC website or integrate Safari in your continuous integration systems through the <strong>Develop</strong> > <strong>WebRTC</strong> sub-menu:</p>\n<figure><img alt=\"WebRTC Menu\" class=\"wp-image-7769\" src=\"https://webkit.org/wp-content/uploads/webrtc-menu.png\" /></figure>\n<p>We&#8217;ll go through each of these flags and explain how they can help you in your development below.</p>\n<p>In addition, WebKit logs WebRTC state to the system log, which includes SDP offers and answers, ICE candidates, WebRTC statistics, and incoming and outgoing video frame counters.</p>\n<h2>Security Origin Policy for Media Capture</h2>\n<p>Websites that wish to access capture devices need to meet two constraints.</p>\n<p>First, the document requesting the camera and microphone needs to come from a HTTPS domain. Since that can be burdensome when you&#8217;re developing and testing locally, you can bypass the HTTPS restriction by checking ‚ÄúAllow Media Capture on Insecure Sites‚Äù in the <strong>Develop</strong> > <strong>WebRTC</strong> menu.</p>\n<p>Second, when a sub-frame requests a media capture device, the chain of frames leading to the main frame needs to come from the same secure origin. The user may not recognize the sub-frame&#8217;s third-party origin in relation to the main frame, so this constraint avoids confusing the user about whom the user is granting access to.</p>\n<h2>Mock Capture Devices</h2>\n<p>In the <strong>Develop</strong> > <strong>WebRTC</strong> menu, you can select ‚ÄúUse Mock Capture Devices‚Äù to replace the use of real capture devices with a mock one. The mock loops a bip-bop AV stream, as displayed below. When used as an incoming stream, the mock&#8217;s predictable data makes it easy to evaluate aspects of streaming media playback including synchronization, latency, and selection of input device.</p>\n<figure><img alt=\"Bip-Bop AV Mock Loop\" class=\"wp-image-7768\" src=\"https://webkit.org/wp-content/uploads/bip-bop.png\" /></figure>\n<p>The mock can also be useful for running automated tests in a continuous integration system. If you are using one and want to avoid prompts from <code>getUserMedia</code>, set the camera and microphone policy for the website to <strong>Allow</strong> through the Safari <strong>Preferences&#8230;</strong> > <strong>Websites</strong> panel.</p>\n<h2>ICE Candidate Restrictions</h2>\n<p>ICE candidates are exchanged at an early stage of a WebRTC connection to identify all possible network paths between two peers. To do this, WebKit must expose ICE candidates of each peer to websites so that they can be shared. ICE candidates expose IP addresses, and notably those that are host IP addresses can be used for tracking.</p>\n<p>In many network topologies, however, host ICE candidates are not necessary to make the connection. Server Reflexive and TURN ICE candidates usually suffice for ensuring the connection, regardless of whether it is used for exchanging video or arbitrary data. Without access to capture devices, WebKit only exposes Server Reflexive and TURN ICE candidates, which expose IPs that could already be gathered by websites. When access is granted, WebKit will expose host ICE candidates, which maximizes the chance the connection succeeds and is efficient. We make this exception since we believe that the user is expressing a high level of trust to the website by granting access to his or her capture streams.</p>\n<p>Some test pages may assume the availability of host ICE candidates. To test this, turn on ‚ÄúDisable ICE Candidate Restrictions‚Äù from the <strong>Develop</strong> > <strong>WebRTC</strong> menu, and reload the page.</p>\n<h2>Legacy WebRTC and Media Streams API</h2>\n<p>Through the WebRTC standardization process, the <code>RTCPeerConnection</code> API progressively improved in various ways. Initially callback-based, the API changed to being fully promise-based. API initially focused on <code>MediaStream</code> moved to <code>MediaStreamTrack</code>. Thanks to the upstream effort by the <a href=\"http://www.webrtcinwebkit.org/blog/2016/11/9/openwebrtc-in-webkit-upstream-complete\">WebRTC in WebKit team</a>, the <code>RTCPeerConnection</code> API was aligned with these two major changes.</p>\n<p>We have turned the legacy WebRTC APIs off by default on Safari Technology Preview 34, and plan to ship Safari 11 on macOS High Sierra and iOS 11 without these APIs. Keeping the legacy API around limits our ability to move forward faster on WebRTC. Any website looking to bring support to Safari may need to make other adjustments, so this is as good a time as ever to move away from these legacy APIs. Existing websites may still rely on these legacy APIs, which you can check by turning on ‚ÄúEnable Legacy WebRTC API‚Äù in the <strong>Develop</strong> > <strong>WebRTC</strong> menu.</p>\n<p>More precisely, the following APIs are only available with the legacy API switch turned on, with suggestions for how to update:</p>\n<pre><code>partial interface Navigator {\n    // Switch to navigator.mediaDevices.getUserMedia\n    void getUserMedia(MediaStreamConstraints constraints, NavigatorUserMediaSuccessCallback successCallback, NavigatorUserMediaErrorCallback errorCallback);\n};\n\npartial interface RTCPeerConnection {\n    // Switch to getSenders, and look at RTCRtpSender.track\n    sequence&lt;MediaStream&gt; getLocalStreams();\n    // Switch to getReceivers, and look at RTCRtpReceiver.track\n    sequence&lt;MediaStream&gt; getRemoteStreams();\n\n    // Switch to getSenders/getReceivers\n    MediaStream getStreamById(DOMString streamId);\n    // Switch to addTrack\n    void addStream(MediaStream stream);\n    // Switch to removeTrack\n    void removeStream(MediaStream stream);\n\n    // Listen to ontrack event\n    attribute EventHandler onaddstream;\n\n    // Update to promise-only version of createOffer\n    Promise&lt;void&gt; createOffer(RTCSessionDescriptionCallback successCallback, RTCPeerConnectionErrorCallback failureCallback, optional RTCOfferOptions options);\n    // Update to promise-only version of setLocalDescription\n    Promise&lt;void&gt; setLocalDescription(RTCSessionDescriptionInit description, VoidFunction successCallback, RTCPeerConnectionErrorCallback failureCallback);\n    // Update to promise-only version of createAnswer\n    Promise&lt;void&gt; createAnswer(RTCSessionDescriptionCallback successCallback, RTCPeerConnectionErrorCallback failureCallback);\n    // Update to promise-only version of setRemoteDescription\n    Promise&lt;void&gt; setRemoteDescription(RTCSessionDescriptionInit description, VoidFunction successCallback, RTCPeerConnectionErrorCallback failureCallback);\n    // Update to promise-only version of addIceCandidate\n    Promise&lt;void&gt; addIceCandidate((RTCIceCandidateInit or RTCIceCandidate) candidate, VoidFunction successCallback, RTCPeerConnectionErrorCallback failureCallback);\n};\n</code></pre>\n<p>Many sites polyfill API support through the open source <a href=\"https://github.com/webrtc/adapter\">adapter.js</a> project. Updating to the latest release is one way to cover for the API gap, but we recommend switching to the APIs listed in the specification.</p>\n<p>Here are a couple examples of how to use the latest APIs. A typical receive-only/webinar-like WebRTC call could be done like this:</p>\n<pre><code>var pc = new RTCPeerConnection();\npc.addTransceiver('audio');\npc.addTransceiver('video');\nvar offer = await pc.createOffer();\nawait pc.setLocalDescription(offer);\n// send offer to the other party\n...\n</code></pre>\n<p>And a typical audio-video WebRTC call could be done like this:</p>\n<pre><code>var stream = await navigator.mediaDevices.getUserMedia({audio: true, video: true});\nvar pc = new RTCPeerConnection();\nvar audioSender = pc.addTrack(stream.getAudioTracks()[0], stream);\nvar videoSender = pc.addTrack(stream.getVideoTracks()[0], stream);\nvar offer = await pc.createOffer();\nawait pc.setLocalDescription(offer);\n// send offer to the other party\n...\n</code></pre>\n<p><code>MediaStreamTrack</code>-based APIs make sense as most of the handling is done at this level. Let‚Äôs say the 640&#215;480 default resolution of the capture video track is not good enough. Continuing with the previous example, changing it dynamically can be done as follows:</p>\n<pre><code>videoSender.track.applyConstraints({width: 1280, height: 720});\n</code></pre>\n<p>Or we might want to mute the video but keep the audio flowing:</p>\n<pre><code>videoSender.track.enabled = false;\n</code></pre>\n<p>Oh but wait, let‚Äôs say that we actually want to apply some cool filter effects to the current video track, like in this <a href=\"https://webkit.org/blog-files/webrtc/pc-with-effects/index.html\">example</a>. All that is needed is a few function calls that will not require any SDP renegotiation:</p>\n<pre><code>videoSender.track.enabled = true;\nrenderWithEffects(video, canvas);\nvideoSender.replaceTrack(canvas.captureStream().getVideoTracks()[0]);\n</code></pre>\n<h2>Access to Capture Streams</h2>\n<p>Safari allows users to have complete control over a website&#8217;s access to their capture devices.</p>\n<p>First, the user is prompted to grant website access to capture devices when <code>getUserMedia</code> is first called. Unlike other browsers, however, Safari does not require the user to choose specific devices; instead the prompt requests access for all devices of a specific type, like all cameras or microphones. This reduces fatigue from being prompted multiple times, and potentially avoids training the user to always tap ‚ÄúAllow‚Äù. One common case where this could happen is switching between the front and back cameras of iOS devices. The resolved promise in <code>getUserMedia</code> returns a device that fulfills the constraints, and subsequent calls to <code>getUserMedia</code> for the same device type will avoid presenting additional prompts to the user. If you want to allow the user to switch to a different device, be sure to provide UI to do so.</p>\n<p>Second, the user can decide to always allow or deny access to the camera and microphone through Safari preferences. The user may do this on a per-origin basis and can even set a general policy for all websites.</p>\n<p>Third, once a website creates a <code>MediaStream</code> for a device, icons appear in the Safari UI and the system menu bar indicating that capture devices are being used. The user may click or tap that icon to pause the camera and microphone mid-stream. Here WebKit will send silent audio and black video frames, and your website can present appropriate UI by listening for the <code>mute</code> and <code>unmute</code> events on <code>MediaStreamTrack</code>.</p>\n<figure><img alt=\"Active Capture Devices Icons\" class=\"wp-image-7767\" src=\"https://webkit.org/wp-content/uploads/active-capture-devices-icon.png\" /></figure>\n<p>Finally, to avoid unexpected capture, WebKit only allows one tab to capture video or audio at a time. Tabs already using capture devices will see their <code>MediaStreamTrack</code>s silenced and receive the <code>mute</code> event when a new tab gains access.</p>\n<h2>Fingerprinting</h2>\n<p><code>navigator.mediaDevices.enumerateDevices</code> exposes the list of capture devices available, and can be queried by websites even when access to those devices is not granted. For users that have custom camera and microphone setups, this can add to a user&#8217;s fingerprinting surface. When access hasn&#8217;t yet been requested or is explicitly denied, WebKit avoids exposing this additional information by returning a default list of devices that may not correspond to the actual set of devices available. In addition, the devices have missing <code>label</code>s as per the <a href=\"https://w3c.github.io/mediacapture-main/#access-control-model\">specification</a>. Once access is granted, the full list of devices and their labels are available.</p>\n<h2>Media Capture and Autoplay Video</h2>\n<p>In <a href=\"https://webkit.org/blog/6784/new-video-policies-for-ios/\">previous</a> <a href=\"https://webkit.org/blog/7734/auto-play-policy-changes-for-macos/\">posts</a> we&#8217;ve discussed changes in autoplay policies for video on macOS and iOS. We&#8217;ve adjusted the policies on both platforms to accommodate WebRTC applications, where it is common to want to autoplay incoming media streams that include audio. To address these scenarios while retaining the benefits of the current autoplay rules, the following changes have been made:</p>\n<ul>\n<li><code>MediaStream</code>-backed media will autoplay if the web page is already capturing.</li>\n<li><code>MediaStream</code>-backed media will autoplay if the web page is already playing audio. A user gesture will still be required to initiate audio playback.</li>\n</ul>\n<h2>Performance</h2>\n<p>WebRTC is a very powerful feature that can have numerous applications. We all know that with great power comes great responsibility. Designing WebRTC applications require to have efficiency in mind from the start. CPU, memory and network have limits that can seriously affect user experience. This problem should be tackled by both the web engine and the web application. On the web application side, various mechanisms are already available: choosing the right video resolution and frame rate, selecting the right video codec profile, using <a href=\"https://tools.ietf.org/html/rfc7742#section-4\">CVO</a>, muting tracks at the source, and performing client-side monitoring of <a href=\"https://www.w3.org/TR/webrtc/#dom-rtcrtpsender-getstats()\">WebRTC statistics.</a></p>\n<h2>Feedback</h2>\n<p>That concludes our deep dive into WebRTC and media capture. Our door is always open to hear feedback from you. <a href=\"https://bugs.webkit.org/\">File a bug</a>, email <a href=\"mailto:web-evangelist@apple.com\">web-evangelist@apple.com</a>, or tweet to <a href=\"https://www.twitter.com/webkit\">@webkit</a>.</p>", "title": "A Closer Look Into WebRTC", "author_name": "Youenn Fablet, Jon Lee", "source_type": "rss", "link": "https://webkit.org/blog/7763/a-closer-look-into-webrtc/", "source_link": "https://webkit.org", "source_title": "WebKit", "published": "2017-07-03T17:00:00"}, {"source_name": "FacebookCode", "description": "The one-year program provides a mix of technical skills, hands-on experience, and mentorship to help engineers from all backgrounds grow their skills.", "tags": "facebook,services,tech", "source_link": "https://code.facebook.com/", "title": "Accelerating growth through Facebook's Rotational Engineering Program", "author_name": "Nimrod Hoofien", "source_type": "rss", "link": "https://code.facebook.com/posts/305821456495615/accelerating-growth-through-facebook-s-rotational-engineering-program/?utm_source=codedot_rss_feed&utm_medium=rss&utm_campaign=RSS+Feed", "published": "2017-06-30T17:55:00", "source_title": "Facebook Code"}, {"source_name": "FacebookCode", "description": "The aircraft flew for 1 hour and 46 minutes, a milestone in the Aquila program's progress to help bring the world closer together through connectivity.", "tags": "facebook,services,tech", "source_link": "https://code.facebook.com/", "title": "Aquila's successful second flight: Another step forward in bringing the world closer together", "author_name": "Martin Luis Gomez", "source_type": "rss", "link": "https://code.facebook.com/posts/200887800439084/aquila-s-successful-second-flight-another-step-forward-in-bringing-the-world-closer-together/?utm_source=codedot_rss_feed&utm_medium=rss&utm_campaign=RSS+Feed", "published": "2017-06-29T18:00:00", "source_title": "Facebook Code"}, {"source_name": "WebkitBlog", "description": "Safari Technology Preview Release 34 is now available for download for macOS Sierra and betas of macOS High Sierra.", "tags": "safari technology preview,browsers,safari,tech,web,webkit", "text": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 34 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Sierra and betas of macOS High Sierra. If you already have Safari Technology Preview installed, you can update from the Mac App Store‚Äôs Updates tab. This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=217978&amp;rev=218629&amp;limit=999\">217978-218629</a>.</p>\n<h3>WebRTC</h3>\n<ul>\n<li>Added WebRTC options to the Developer menu</li>\n<li>Disabled Legacy WebRTC API in the Experimental Features menu by default (<a href=\"http://trac.webkit.org/changeset/218169\">r218169</a>)</li>\n<li>Changed behavior to close NetworkProcess WebRTC sockets as soon as the Web Process no longer needs them (<a href=\"https://trac.webkit.org/changeset/218432/webkit/\">r218432</a>)</li>\n<li>Added support for receive-only SDP offers through <code>addTransceiver</code> (<a href=\"http://trac.webkit.org/changeset/218431\">r218431</a>)</li>\n<li>Changed handling capture status based on MediaStreamTrack (<a href=\"https://trac.webkit.org/changeset/218399/webkit/\">r218399</a>)</li>\n<li>Changed RTCPeerConnection to return RTCSessionDescriptionInit instead of RTCSessionDescription (<a href=\"http://trac.webkit.org/changeset/218335\">r218335</a>)</li>\n<li>Fixed a cloned MediaStreamTrack to not mute the other tracks using the same source (<a href=\"http://trac.webkit.org/changeset/218497\">r218497</a>)</li>\n<li>Fixed RTCPeerConnection <code>getReceivers()</code> to return transceivers that have an active receiver but no active sender (<a href=\"http://trac.webkit.org/changeset/218182\">r218182</a>)</li>\n<li>Fixed the screen going into sleep mode during WebRTC video (<a href=\"https://trac.webkit.org/changeset/218151/webkit/\">r218151</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Fixed high CPU usage when entering fullscreen or seeking during MSE video playback (<a href=\"https://trac.webkit.org/changeset/218463/webkit/\">r218463</a>)</li>\n<li>Fixed seeking during MSE video playback where audio would begin playing long before rendering the video (<a href=\"https://trac.webkit.org/changeset/218150/webkit/\">r218150</a>)</li>\n<li>Fixed video flashing black when switching back to a tab (<a href=\"https://trac.webkit.org/changeset/218291/webkit/\">r218291</a>)</li>\n<li>Improved media controls rendering for long-loading media files (<a href=\"https://trac.webkit.org/changeset/218600/webkit/\">r218600</a>)</li>\n<li>Prevented media elements continuing to load media data after navigation (<a href=\"https://trac.webkit.org/changeset/218016/webkit/\">r218016</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Made <code>Object.assign</code> faster by rewriting it in C++ (<a href=\"https://trac.webkit.org/changeset/218348/webkit/\">r218348</a>)</li>\n<li>Reduced Structure size (<a href=\"https://trac.webkit.org/changeset/218070/webkit/\">r218070</a>)</li>\n<li>Updated <code>RegExp.prototype.[@@search]]</code> implementation according to the latest specifications (<a href=\"https://trac.webkit.org/changeset/218051/webkit/\">r218051</a>)</li>\n<li>Fixed PreTypedArray constructor with a string to not throw an exception (<a href=\"https://trac.webkit.org/changeset/218082/webkit/\">r218082</a>)</li>\n</ul>\n<h3>Security</h3>\n<ul>\n<li>Applied <code>img-src</code> CSP directive to favicon loads (<a href=\"https://trac.webkit.org/changeset/218015/webkit/\">r218015</a>, <a href=\"https://trac.webkit.org/changeset/218026/webkit/\">r218026</a>)</li>\n<li>Implemented W3C Secure Contexts Draft Specification (<a href=\"https://trac.webkit.org/changeset/218027/webkit/\">r218027</a>, <a href=\"https://trac.webkit.org/changeset/218028/webkit/\">r218028</a>, <a href=\"https://trac.webkit.org/changeset/218155/webkit/\">r218155</a>, <a href=\"https://trac.webkit.org/changeset/218196/webkit/\">r218196</a>)</li>\n<li>Restricted filtered painting across cross-origin boundaries with transforms (<a href=\"https://trac.webkit.org/changeset/218300/webkit/\">r218300</a>)</li>\n<li>Added  <code>allow-popups-to-escape-sandbox</code> attribute support for <code>&lt;iframe&gt;</code> elements  (<a href=\"https://trac.webkit.org/changeset/218000/webkit/\">r218000</a>)</li>\n<li>Added Subresource Integrity as an experimental feature (<a href=\"https://trac.webkit.org/changeset/217996/webkit/\">r217996</a>)</li>\n</ul>\n<h3>Web Inspector</h3>\n<ul>\n<li>Added grid to image previews to clarify transparency and image size (<a href=\"https://trac.webkit.org/changeset/218159/webkit/\">r218159</a>)</li>\n<li>Fixed console message icons that overlap the source location (<a href=\"https://trac.webkit.org/changeset/218243/webkit/\">r218243</a>)</li>\n<li>Fixed pretty print, type info, and code coverage buttons disappearing after switching tabs (<a href=\"https://trac.webkit.org/changeset/218305/webkit/\">r218305</a>)</li>\n<li>Fixed SVG files and favicon files that don&#8217;t display properly (<a href=\"https://trac.webkit.org/changeset/218298/webkit/\">r218298</a>)</li>\n<li>Fixed the search highlight not showing up in resources when paused (<a href=\"https://trac.webkit.org/changeset/218359/webkit/\">r218359</a>)</li>\n<li>Fixed showing non-shadow children of an element with a shadow root (e.g. <code>&lt;video&gt;</code>) (<a href=\"https://trac.webkit.org/changeset/218020/webkit/\">r218020</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Fixed the meter element not respecting the writing direction (<a href=\"https://trac.webkit.org/changeset/218468/webkit/\">r218468</a>)</li>\n<li>Fixed WebGPU contexts to have a back reference to the canvas element (<a href=\"https://trac.webkit.org/changeset/218624/webkit/\">r218624</a>)</li>\n<li>Fixed CSS transitions added while page is not visible so they start animating when the page becomes visible (<a href=\"https://trac.webkit.org/changeset/217997/webkit/\">r217997</a>)</li>\n<li>Fixed <code>IndexedDB.getAll()</code> use inside a Web Worker (<a href=\"https://trac.webkit.org/changeset/218041/webkit\">r218041</a>)</li>\n</ul>\n<h3>WebCrypto</h3>\n<ul>\n<li>Moved SubtleCrypto from the experiemental features menu (<a href=\"https://trac.webkit.org/changeset/218129/webkit/\">r218129</a>)</li>\n<li>Removed unsupported <code>AES_CMAC</code>, <code>DH</code>, and <code>CONCAT</code> (<a href=\"https://trac.webkit.org/changeset/218030/webkit/\">r218030</a>)</li>\n</ul>\n<h3>WebAssembly</h3>\n<ul>\n<li>Fixed several miscellaneous bugs found from web platform tests (<a href=\"https://trac.webkit.org/changeset/218216/webkit/\">r218216</a>)</li>\n</ul>\n<h3>Rendering</h3>\n<ul>\n<li>Added an experimental feature setting for asynchronous frame scrolling (<a href=\"https://trac.webkit.org/changeset/218534/webkit/\">r218534</a>)</li>\n</ul>\n<h3>Accessibility</h3>\n<ul>\n<li>Exposed the inline property as an accessibility attribute (<a href=\"https://trac.webkit.org/changeset/218226/webkit/\">r218226</a>)</li>\n</ul>\n<h3>Bug Fixes</h3>\n<ul>\n<li>Fixed mint.com header rendering incorrectly when initially loaded (<a href=\"https://trac.webkit.org/changeset/218257/webkit/\">r218257</a>)</li>\n<li>Fixed scrubbing backward on a YouTube video</li>\n</ul>", "title": "Release Notes for Safari Technology Preview¬†34", "author_name": "Jon Davis", "source_type": "rss", "link": "https://webkit.org/blog/7760/release-notes-for-safari-technology-preview-34/", "source_link": "https://webkit.org", "source_title": "WebKit", "published": "2017-06-28T17:00:00"}, {"source_name": "2ality", "description": "<p><a href=\"https://nodejs.org/en/blog/release/v8.0.0/\">Node.js 8</a> has a new utility function: <a href=\"https://nodejs.org/api/util.html#util_util_promisify_original\"><code>util.promisify()</code></a>. It converts a callback-based function to a Promise-based one.</p>\n\n<div><a href=\"http://2ality.com/2017/05/util-promisify.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/i7uRfSMxRMU\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "Node.js 8: <code>util.promisify()</code>", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/05/util-promisify.html", "author_link": "http://2ality.com/", "published": "2017-06-23T11:26:00", "source_title": "2ality feed"}, {"source_name": "EdgeBlog", "description": "<p>We‚Äôre thrilled to announce that our third annual Microsoft Edge Web Summit is coming to Seattle on September 13th, 2017! Registration opens next month on summit.microsoftedge.com. Microsoft Edge Web Summit is your one stop to see what‚Äôs next for the web on Windows. Join us for a jam-packed day of energetic technical sessions, where we‚Äôll [&#8230;]</p>\n<p>The post <a href=\"https://blogs.windows.com/msedgedev/2017/06/20/save-the-date-edge-web-summit-2017-september-13th-seattle/\" rel=\"nofollow\">Save the date: Microsoft Edge Web Summit 2017 comes to Seattle on September 13th</a> appeared first on <a href=\"https://blogs.windows.com/msedgedev\" rel=\"nofollow\">Microsoft Edge Dev Blog</a>.</p>", "tags": "mobile,pc,tablet,browsers,edge,tech,web", "text": "<blockquote><p>Registration is now open! Grab your seat today at <a href=\"https://summit.microsoftedge.com\">summit.microsoftedge.com</a>.</p><cite></cite></blockquote>\n<p>We‚Äôre thrilled to announce that our third annual Microsoft Edge Web Summit is coming to Seattle on September 13th, 2017! Registration opens next month on <a href=\"https://summit.microsoftedge.com/\">summit.microsoftedge.com</a>.</p>\n<p><img alt=\"Duotone photo of Seattle with superimposed text reading &quot;Microsoft Edge Web Summit 2017, September 13th, 2017, Seattle, WA&quot;\" class=\"aligncenter size-full wp-image-21019\" height=\"620\" src=\"https://winblogs.azureedge.net/win/2017/06/c7245a81901b24ceddcc9e34b37f6b12.png\" width=\"1280\" /></p>\n<p>Microsoft Edge Web Summit is your one stop to see what‚Äôs next for the web on Windows. Join us for a jam-packed day of energetic technical sessions, where we‚Äôll take a closer look at what‚Äôs new and what‚Äôs next for Microsoft Edge. We‚Äôll dive deep into what‚Äôs new in EdgeHTML, the Chakra JavaScript engine, and the user experience of Microsoft Edge.</p>\n<p>You‚Äôll learn how to use exciting new web platform features like Service Worker, Web Authentication, and CSS Grid to build modern, performant experiences with native-like capabilities. And you‚Äôll have an opportunity to try out next-generation experiences built with technologies like Progressive Web Apps, WebVR, and lots more.</p>\n<p>Best of all, you&#8217;ll find great opportunities for networking during and after the event. You‚Äôll make new friends and valuable connections with passionate developers from the Seattle web community and around the world. You‚Äôll also get to know the team that builds Microsoft Edge, and make sure your voice is heard as we chart our course for future releases.</p>\n<p>Representatives of our Quality team will be on hand to help debug issues with sites and chase down bugs in the platform, and experienced web performance experts will be standing by to squeeze that extra ounce of efficiency out of your code.</p>\n<p>We‚Äôll have lots more to share next month ‚Äì in the meantime, mark your calendar now! We can‚Äôt wait to see you there!</p>\n<p>‚Äî <a href=\"https://twitter.com/kylealden\">Kyle Pflug</a>, Senior Program Manager, Microsoft Edge</p>\n<p>The post <a href=\"https://blogs.windows.com/msedgedev/2017/06/20/save-the-date-edge-web-summit-2017-september-13th-seattle/\" rel=\"nofollow\">Save the date: Microsoft Edge Web Summit 2017 comes to Seattle on September 13th</a> appeared first on <a href=\"https://blogs.windows.com/msedgedev\" rel=\"nofollow\">Microsoft Edge Dev Blog</a>.</p>", "title": "Save the date: Microsoft Edge Web Summit 2017 comes to Seattle on September 13th", "author_name": "Microsoft Edge Team", "source_type": "rss", "comments_count": 0, "published": "2017-06-20T19:33:00", "link": "https://blogs.windows.com/msedgedev/2017/06/20/save-the-date-edge-web-summit-2017-september-13th-seattle/", "source_link": "https://blogs.windows.com/msedgedev", "source_title": "Microsoft Edge Dev Blog"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "ChromiumBlog", "description": "<div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Unless otherwise noted, changes described below apply to the newest Chrome </span><a href=\"https://www.google.com/landing/chrome/beta/\" style=\"text-decoration: none;\"><span>Beta</span></a><span> channel release for Android, Chrome OS, Linux, Mac, and Windows.</span></div><h1 dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 6pt; margin-top: 20pt;\"><span>Paint Timing API</span></h1><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>While no generalized metric perfectly captures when a page is </span><a href=\"https://github.com/WICG/paint-timing\" style=\"text-decoration: none;\"><span>loaded</span></a><span> in all cases, </span><a href=\"https://developers.google.com/web/updates/2017/06/user-centric-performance-metrics#first_paint_and_fist_contentful_paint\" style=\"text-decoration: none;\"><span>First Paint and First Contentful Paint</span></a><span> are invaluable numbers to measure critical user moments during loading. To give developers </span><a href=\"https://developers.google.com/web/updates/2017/06/user-centric-performance-metrics\" style=\"text-decoration: none;\"><span>better insight</span></a><span> into their site‚Äôs loading performance, the new </span><a href=\"https://www.youtube.com/watch?v=6Ljq-Jn-EgU\" style=\"text-decoration: none;\"><span>Paint Timing API</span></a><span> exposes metrics that capture First Paint and First Contentful Paint. </span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span><img alt=\"Screen Shot 2017-06-08 at 8.57.03 AM.png\" height=\"425\" src=\"https://lh3.googleusercontent.com/fdMOM_Sb564Yd3IU6YSNx3F7mL8VcuNbsWgVXhhDBjZh83x1I_sKwoXzqiwhis_-ZiEIDnRWK9Is_KUVZ2Dz_S7QAfar0glVtuh_T2is3J9bkw6xkD3wICuCQfBrd-atdE406zkK\" width=\"624\" /></span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span>Stills of a First Paint and First Contentful Paint for Google.com, from </span><a href=\"https://youtu.be/6Ljq-Jn-EgU\" style=\"text-decoration: none;\"><span>‚ÄúWeb Performance: Leveraging the Metrics that Most Affect User Experience‚Äù</span></a><span> at Google I/O 2017</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><h1 dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 6pt; margin-top: 20pt;\"><span>CSS font-display </span></h1><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Downloadable web fonts are often used to create more visually rich web experiences. Historically, Chrome has delayed rendering text until the specified font is available, to ensure visual correctness. However, downloading a font can take as long as several seconds on a poor connection, significantly delaying the time until a user sees content. Chrome now supports the CSS </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face\" style=\"text-decoration: none;\"><span>@font-face</span></a><span> descriptor and corresponding </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display\" style=\"text-decoration: none;\"><span>font-display</span></a><span> </span><a href=\"https://developers.google.com/web/updates/2016/02/font-display\" style=\"text-decoration: none;\"><span>property</span></a><span>, allowing developers to specify how and when Chrome </span><a href=\"http://output.jsbin.com/nigahi/latest/quiet\" style=\"text-decoration: none;\"><span>displays text content</span></a><span> while downloading fonts. </span></div><h1 dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 6pt; margin-top: 20pt;\"><span>Credential Management API improvements</span></h1><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>In response to developer feedback and to make the Credential Management API easier to use for all sites, the need for a custom </span><span>fetch()</span><span> to access the stored password is now deprecated. Starting in Chrome 60, the user‚Äôs password will now be returned directly as part of the </span><span>PasswordCredential</span><span>.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>In addition, we've made a <a href=\"https://developers.google.com/web/updates/2017/06/credential-management-updates\">series of changes</a> to better align with the work being done in the </span><a href=\"https://github.com/w3c/webauthn\" style=\"text-decoration: none;\"><span>Web Authentication Working Group</span></a><span>. This includes the deprecation of </span><span>requireUserMediation</span><span>, which has been renamed to </span><span>preventSilentAccess</span><span>.</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><h1 dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 6pt; margin-top: 20pt;\"><span>Other features in this release</span></h1><ul style=\"margin-bottom: 0pt; margin-top: 0pt;\"><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Payment_Request_API\" style=\"text-decoration: none;\"><span>Payment Request API</span></a><span> is now supported on desktop versions of Chrome.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Sites can now </span><a href=\"https://docs.google.com/document/d/1izV4uC-tiRJG3JLooqY3YRLU22tYOsLTNq0P_InPJeE/edit\" style=\"text-decoration: none;\"><span>collect payments</span></a><span> through native Android payment apps using the </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Payment_Request_API\" style=\"text-decoration: none;\"><span>Payment Request API</span></a><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><a href=\"https://developers.google.com/web/updates/2017/06/object-rest-spread\" style=\"text-decoration: none;\"><span>Object rest &amp; spread properties</span></a><span> are now supported, making it simpler to merge and shallow-clone objects and implement various immutable object patterns. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>The new </span><a href=\"https://developers.google.com/web/updates/2017/06/budget-api\" style=\"text-decoration: none;\"><span>Web Budget API</span></a><span> enables sites with the Push Notification permission to send a limited number of push messages that trigger background work such as syncing data or dismissing notifications the user has handled on another device, without the need to show a user-visible notification.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>The new </span><a href=\"https://tools.ietf.org/html/draft-ietf-webpush-encryption-08\" style=\"text-decoration: none;\"><span>Web Push Encryption</span></a><span> format is now supported and </span><a href=\"https://w3c.github.io/push-api/#dom-pushmanager-supportedcontentencodings\" style=\"text-decoration: none;\"><span>PushManager.supportedContentEncodings</span></a><span> can be used to detect where it can be used.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><a href=\"https://w3c.github.io/push-api/#dom-pushsubscription-expirationtime\" style=\"text-decoration: none;\"><span>PushSubscription.expirationTime</span></a><span> is now available, notifying sites when and if a subscription will expire.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>To improve performance and predictability, &nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/pointermove\" style=\"text-decoration: none;\"><span>pointermove</span></a><span> and </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/mousemove\" style=\"text-decoration: none;\"><span>mousemove</span></a><span> events are now delivered once per </span><span>AnimationFrame</span><span>, matching the current functionality of </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/scroll\" style=\"text-decoration: none;\"><span>scroll</span></a><span> and </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\" style=\"text-decoration: none;\"><span>TouchEvents</span></a><span>. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><span>:focus-within</span><span> CSS pseudo-class is now available, </span><a href=\"https://codepen.io/anon/pen/xOLJym\" style=\"text-decoration: none;\"><span>affecting</span></a><span> </span><a href=\"https://blogs.igalia.com/mrego/files/2017/05/focus-within-menu.html#\" style=\"text-decoration: none;\"><span>any</span></a><span> </span><a href=\"https://blogs.igalia.com/mrego/files/2017/05/focus-within-demo.html\" style=\"text-decoration: none;\"><span>element</span></a><span> the </span><span>:focus</span><span> pseudo-class affects, as well as any element with a descendant affected by </span><span>:focus</span><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><a href=\"https://www.w3.org/TR/css-timing-1/#frames-timing-functions\" style=\"text-decoration: none;\"><span>CSS frames timing function</span></a><span> is now available, making it </span><a href=\"https://docs.google.com/document/d/1dxY0VLynyZzPr-KSOf7eIedhC-fjGaR2NTfWMZDjSTc/edit#\" style=\"text-decoration: none;\"><span>useful for animation loops</span></a><span> where the animation should display all frames for exactly the same length, including its first and last frames.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>To provide an enriched way to capture editing actions, </span><a href=\"https://www.w3.org/TR/2017/WD-input-events-1-20170321/\" style=\"text-decoration: none;\"><span>InputEvent</span></a><span> now allows user input to be managed by script, enhancing the details provided to editable elements. &nbsp;</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>To increase security, a </span><span>BeforeUnload</span><span> dialog triggered when the user leaves a site will now only be shown if the frame attempting to display it has ever received a user gesture or user interaction, though the </span><a href=\"https://html.spec.whatwg.org/multipage/browsers.html#unloading-documents\" style=\"text-decoration: none;\"><span>BeforeUnloadEvent</span></a><span> will still be dispatched regardless.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>VP9, an open and royalty-free video coding format, can now be </span><a href=\"https://cs.chromium.org/chromium/src/media/test/data/bear-320x240-v_frag-vp9.mp4\" style=\"text-decoration: none;\"><span>used</span></a><span> with the </span><a href=\"http://www.webmproject.org/vp9/mp4/\" style=\"text-decoration: none;\"><span>MP4 (ISO BMFF) container</span></a><span> and requires the new VP9 string format mentioned below.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>A new </span><a href=\"http://www.webmproject.org/vp9/mp4/#codecs-parameter-string\" style=\"text-decoration: none;\"><span>VP9 string format</span></a><span> is now available and accepted by various </span><a href=\"https://googlechrome.github.io/samples/media/vp9-codec-string.html\" style=\"text-decoration: none;\"><span>media-related APIs</span></a><span>, enabling developers to describe the encoding properties that are common in video codecs, but are not yet exposed.</span></div></li></ul><h1 dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 6pt; margin-top: 20pt;\"><span>Deprecations and interoperability improvements</span></h1><ul style=\"margin-bottom: 0pt; margin-top: 0pt;\"><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>getElementsByTagName()</span><span> now accepts qualified names in response to an update to the </span><a href=\"https://dom.spec.whatwg.org/#concept-getelementsbytagname\" style=\"text-decoration: none;\"><span>DOM specification</span></a><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>/deep/</span><span> now behaves like the </span><a href=\"https://drafts.csswg.org/css-scoping/#deep-combinator\" style=\"text-decoration: none;\"><span>descendant combinator</span></a><span>, which is effectively a no-op.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>To </span><a href=\"https://github.com/WICG/interventions/issues/47\" style=\"text-decoration: none;\"><span>improve user experience</span></a><span>, calls to </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Navigator/vibrate\" style=\"text-decoration: none;\"><span>Navigator.vibrate()</span></a><span> now immediately return </span><span>false</span><span> if the user hasn't explicitly tapped on the frame or any embedded frame, matching existing behavior for cross-origin </span><span>iframes</span><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>WEBKIT_KEYFRAME_RULE</span><span> and </span><span>WEBKIT_KEYFRAMES_RULE</span><span> have been removed in favor of the unprefixed standardized APIs, </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframeRule\" style=\"text-decoration: none;\"><span>KEYFRAME_RULE</span></a><span> and </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframesRule\" style=\"text-decoration: none;\"><span>KEYFRAMES_RULE</span></a><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Support for non-standard </span><span>WebKitAnimationEvent</span><span> and </span><span>WebKitTransitionEvent</span><span> has been removed from </span><a href=\"https://dom.spec.whatwg.org/#dom-document-createevent\" style=\"text-decoration: none;\"><span>document.createEvent()</span></a><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>To better align with </span><a href=\"https://heycam.github.io/webidl/#legacy-callback-interface-object\" style=\"text-decoration: none;\"><span>spec</span></a><span>, </span><span>NodeIterator.filter</span><span> and </span><span>TreeWalker.filter</span><span> no longer wrap JavaScript objects, and </span><span>.prototype</span><span> has been removed from </span><span>window.NodeFilter</span><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getStreamById\" style=\"text-decoration: none;\"><span>RTCPeerConnection.getStreamById()</span></a><span> is being removed, and a </span><a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=698163&amp;desc=5#c10\" style=\"text-decoration: none;\"><span>polyfill</span></a><span> is recommended as a replacement. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>SVGPathElement.getPathSegAtLength()</span><span> has been deprecated as it has been removed from the </span><a href=\"https://svgwg.org/svg2-draft/paths.html#InterfaceSVGPathElement.\" style=\"text-decoration: none;\"><span>SVGPathElement</span></a><span> spec.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Headers.prototype.getAll()</span><span> has been removed from the </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\" style=\"text-decoration: none;\"><span>Fetch API</span></a><span> in line with its removal from the spec.</span></div></li></ul><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><span id=\"docs-internal-guid-cbb86f3a-a2a9-3558-ea3e-0cbba481c06f\"></span><br /><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Posted by Shubhie Panicker, Paint Timing Promoter</span></div>", "title": "Chrome 60 Beta: Paint Timing API, CSS font-display, and Credential Management API improvements", "source_link": "http://blog.chromium.org/", "author_link": "https://plus.google.com/106190864297512596007", "author_name": "Chrome Blog", "source_type": "rss", "link": "http://blog.chromium.org/2017/06/chrome-60-beta-paint-timing-api-css.html", "published": "2017-06-13T18:17:00", "source_title": "Chromium Blog", "tags": "browsers,chromium,tech,web"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "V8Blog", "description": "<i>Every six weeks, we create a new branch of V8 as part of our <a href=\"https://github.com/v8/v8/wiki/Release%20Process\">release process</a>. Each version is branched from V8‚Äôs git master immediately before a Chrome Beta milestone. Today we‚Äôre pleased to announce our newest branch, <a href=\"https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/6.0\">V8 version 6.0</a>, which will be in beta until it is released in coordination with Chrome 60 Stable in several weeks. V8 6.0 is filled with all sorts of developer-facing goodies. We‚Äôd like to give you a preview of some of the highlights in anticipation of the release.</i><br /><div><br /><h2>SharedArrayBuffers</h2>V8 6.0 introduces support for <span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></span>, a low-level mechanism to share memory between JavaScript workers and synchronize control flow across workers. SharedArrayBuffers give JavaScript access to shared memory, atomics, and futexes. SharedArrayBuffers also unlock the ability to port threaded applications to the web via asm.js or WebAssembly.<br /><br />For a brief, low-level tutorial, see the spec <a href=\"https://github.com/tc39/ecmascript_sharedmem/blob/master/TUTORIAL.md\">tutorial page</a> or consult the <a href=\"https://kripken.github.io/emscripten-site/docs/porting/pthreads.html\">Emscripten documentation</a> for porting pthreads.<br /><br /><div><h2>Object rest/spread properties</h2>This release introduces rest properties for object destructuring assignment and spread properties for object literals. Object rest/spread properties are Stage 3 ES.next features.<br /><br />Spread properties also offer a terse alternative to <span>Object.assign()</span> in many situations.<br /><br /><pre><code>// Rest properties for object destructuring assignment:<br />const person = {<br />  firstName: 'Sebastian',<br />  lastName: 'Markb√•ge',<br />  country: 'USA',<br />  state: 'CA',<br />};<br />const { firstName, lastName, ...rest } = person;<br />console.log(firstName); // Sebastian<br />console.log(lastName); // Markb√•ge<br />console.log(rest); // { country: 'USA', state: 'CA' }<br /><br />// Spread properties for object literals:<br />const personCopy = { firstName, lastName, ...rest };<br />console.log(personCopy);<br />// { firstName: 'Sebastian', lastName: 'Markb√•ge', country: 'USA', state: 'CA' }<br /></code></pre><br />For more information, see the <a href=\"https://developers.google.com/web/updates/2017/06/object-rest-spread\">usage post on Web Fundamentals</a>.<br /><br /><h2>ES6 Performance</h2></div><div>V8 6.0 continues to improve performance of ES2015 features. This release contains optimizations to language feature implementations that overall result in a roughly 10% improvement in V8‚Äôs <a href=\"http://browserbench.org/ARES-6/\">ARES-6</a> score.</div><div><br /></div><h2>V8 API</h2>Please check out our <a href=\"http://bit.ly/v8-api-changes\">summary of API changes</a>. This document is regularly updated a few weeks after each major release. <br /><br />Developers with an <a href=\"https://github.com/v8/v8/wiki/Using%20Git\">active V8 checkout</a> can use '<span>git checkout -b 6.0 -t branch-heads/6.0</span>' to experiment with the new features in V8 6.0. Alternatively you can <a href=\"https://www.google.com/chrome/browser/beta.html\">subscribe to Chrome's Beta channel</a> and try the new features out yourself soon.<br /><div><br />Posted by the V8 team</div></div>", "title": "V8 Release 6.0", "source_link": "http://v8project.blogspot.com/", "author_link": "", "author_name": "Unknown", "source_type": "rss", "link": "http://v8project.blogspot.com/2017/06/v8-release-60.html", "published": "2017-06-09T20:12:00", "source_title": "V8 JavaScript Engine", "tags": "browsers,chromium,js,tech,web"}, {"source_name": "2ality", "description": "<p>The proposal ‚Äú<a href=\"https://github.com/tc39/proposal-regexp-lookbehind\">RegExp Lookbehind Assertions</a>‚Äù by Gorkem Yakin, Nozomu Kat≈ç, Daniel Ehrenberg is currently at <a href=\"http://exploringjs.com/es2016-es2017/ch_tc39-process.html\">stage 3</a>. This blog post explains it.</p>\n\n<div><a href=\"http://2ality.com/2017/05/regexp-lookbehind-assertions.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/3rGPHMPFfzA\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "ES proposal: RegExp lookbehind assertions", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/05/regexp-lookbehind-assertions.html", "author_link": "http://2ality.com/", "published": "2017-06-09T01:06:00", "source_title": "2ality feed"}, {"source_name": "2ality", "description": "<p>The idea of <a href=\"http://2ality.com/2017/02/babel-preset-env.html\"><code>babel-preset-env</code></a> is brilliant: write JavaScript with stage 4 features (or earlier stages, if you want to take that risk) and transpile it so that it is an exact fit for your target platform(s).</p>\n<p>However, at the moment, <code>preset-env</code> only works for your own app, but not for your dependencies, which are normally already transpiled.</p>\n<p>This blog post shows how package authors and package users can use the <code>package.json</code> property <code>esnext</code> to work with untranspiled source code in npm packages. The code is available in the repository <a href=\"https://github.com/rauschma/esnext-demo\"><code>esnext-demo</code></a> on GitHub.</p>\n\n<div><a href=\"http://2ality.com/2017/06/pkg-esnext.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/7wv8FTguFuA\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "Delivering untranspiled source code via npm", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/06/pkg-esnext.html", "author_link": "http://2ality.com/", "published": "2017-06-02T20:23:00", "source_title": "2ality feed"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "ChromiumBlog", "description": "<div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><p>Advertising is a critical component of the web, keeping content open and free for everyone. However, over the years we've increasingly heard from users that while some types of advertising are fine, others can seem overwhelmingly frustrating or intrusive. Due to these poor ad experiences, the usage of extensions that block ads across the web continues to rise, <a href=\"https://pagefair.com/blog/2017/adblockreport/\">up about 30% from just last year</a>. This reduces the ability for publishers to continue creating free content and threatens the sustainability of the web ecosystem.</p><p>Chrome has always focused on giving users the best possible experience browsing the web. For example, Chrome, like other browsers, prevents pop-ups in new tabs based on the fact that they are annoying. Today, we have an even better understanding of the types of experiences that bother users when it comes to unwanted advertising. New public, consumer-driven research done by the <a href=\"http://www.betterads.org\">Coalition for Better Ads</a> in creating the <a href=\"https://www.betterads.org/standards/\">Better Ads Standards</a> outlines a number of these experiences, such as full-page ad interstitials, ads that unexpectedly play sound, and flashing ads. In dialog with the Coalition and other industry groups, we plan to have Chrome stop showing ads (including those owned or served by Google) on websites that are not compliant with the Better Ads Standards starting in early 2018.</p><p>We know that many web developers make most or all of their revenue from digital advertising, and we want to make following the guidance of the standard as easy as possible. Starting today we're rolling out the <a href=\"https://www.google.com/webmasters/tools/ad-experience-unverified\">Ad Experience Report</a>, a new tool which provides screenshots and videos of annoying ad experiences we‚Äôve identified to make it easy to find and fix the issues. Developers can also use the report to re-submit their site for review once the problematic ad experiences have been addressed.</p><p>This is just one step toward making advertising an excellent experience across the web, and we plan to continue integrating user feedback with developer needs to help <a href=\"https://blog.google/topics/journalism-news/building-better-web-everyone\">balance the web</a><a href=\"https://blog.google/topics/journalism-news/building-better-web-everyone\"> ecosystem for all</a>.</p><p>Posted by Rahul Roy-Chowdhury, VP Product Management</p></div>", "title": "Improving advertising on the web", "source_link": "http://blog.chromium.org/", "author_link": "https://plus.google.com/106190864297512596007", "author_name": "Chrome Blog", "source_type": "rss", "link": "http://blog.chromium.org/2017/06/improving-advertising-on-web.html", "published": "2017-06-01T21:22:00", "source_title": "Chromium Blog", "tags": "browsers,chromium,tech,web"}, {"source_name": "EdgeBlog", "description": "<p>As the web becomes more interactive, web pages are becoming increasingly reliant on JavaScript for core functionality, such as input, rendering, layout, and composition. As more and more of this core functionality moves to the client side, it becomes imperative for browsers to adopt smart scheduling mechanisms to ensure that JavaScript workloads are processed in [&#8230;]</p>\n<p>The post <a href=\"https://blogs.windows.com/msedgedev/2017/06/01/input-responsiveness-event-loop-microsoft-edge/\" rel=\"nofollow\">Improving input responsiveness in Microsoft Edge</a> appeared first on <a href=\"https://blogs.windows.com/msedgedev\" rel=\"nofollow\">Microsoft Edge Dev Blog</a>.</p>", "tags": "component ui,event loop,input,mobile,pc,performance,responsiveness,tablet,ui thread,browsers,edge,tech,web", "text": "<p>As the web becomes more interactive, web pages are becoming increasingly reliant on JavaScript for core functionality, such as input, rendering, layout, and composition. As more and more of this core functionality moves to the client side, it becomes imperative for browsers to adopt smart scheduling mechanisms to ensure that JavaScript workloads are processed in an efficient manner.</p>\n<p>With EdgeHTML 15 and the Windows 10 Creators Update, Microsoft Edge takes a big leap forward in how it schedules JavaScript work, leading to noticeable improvements in the usability, responsiveness, and performance of the modern web. In this post, we‚Äôll share some behind-the-scenes details on how the EdgeHTML engine works, as well as the huge impact these improvements have had on making the browser feel faster and more responsive.</p>\n<h2>Timers: death by a thousand cuts</h2>\n<p>The web is surprisingly complex when it comes to task management. Rather than running one long JavaScript operation, most websites tend to execute a series of small-to-medium-sized operations that add up over time: event listeners, timeouts, Promises, and various other asynchronous tasks.</p>\n<p>Even on a page that looks relatively quiet, below the surface there may be quite a lot of work going on. News and content sites that rely on advertisements, analytics trackers, and scroll listeners are often a good example of this. For instance, here‚Äôs <a href=\"http://bl.ocks.org/nolanlawson/raw/0a943f0c7fc50bba05fa40fca32fbccc/\">a sample site</a> illustrating some problems we often see on poorly optimized sites in the wild:</p>\n<p style=\"text-align: center;\">\n\n</p>\n<p>While this page is loading, and even well after it‚Äôs ‚Äúsettled,‚Äù there is still an enormous amount of work going on under the hood. A web page such as this one may make network requests for additional resources, or it may call <code>setTimeout</code> to queue a task for the next ‚Äútick‚Äù of the event loop. Each of these callbacks can then schedule other timeouts and network requests, starting the process anew. It‚Äôs the browser‚Äôs job to coordinate these tasks, and to ensure that they‚Äôre processed correctly along with event listeners, Promises, and any other work in accordance with the <a href=\"https://www.w3.org/TR/html5/webappapis.html#event-loops\">HTML5 event loop spec</a>.</p>\n<p>Where it gets complicated is with input tasks. As noted in <a href=\"https://blogs.windows.com/msedgedev/2017/03/08/scrolling-on-the-web/\">‚ÄúScrolling on the web,‚Äù</a> Microsoft Edge already offers best-in class scrolling performance, because the vast majority of scrolling devices can be handled on a background thread. This means that these input methods are unaffected by a page that schedules lots of JavaScript work, so scrolling on a mousewheel, touchpad, or touchscreen should always feel smooth.</p>\n<p>Due to hardware limitations, though, some scrolling methods (such as using the keyboard) are still processed on the UI thread. This is also true of many other website interactions, such as clicking links and typing into a form field. And since these input events must be processed on the same thread that handles the JavaScript event loop, this is where things can go south very quickly.</p>\n<h2>Input blocking: the ‚ÄúIs this page broken?‚Äù effect</h2>\n<p>You‚Äôre probably familiar with this experience: you load a page, and the content appears on the screen, so you believe you can start interacting with it. However, if you try to click a link, several seconds pass by without anything happening. Or you might try to scroll using your keyboard‚Äôs up and down arrows, but the page moves at a glacial pace, or it doesn‚Äôt even scroll at all.</p>\n<p>This often occurred in previous releases of Microsoft Edge on pages that queue up a lot of <code>setTimeout</code>s or other callbacks. This is because our scheduling system didn‚Äôt prioritize input over regular JavaScript tasks, meaning that all scheduled timeouts had to be processed on the main thread before any input could be received.</p>\n<p>Beginning with EdgeHTML 15, Microsoft Edge now allows input events to ‚Äúcut in line‚Äù ahead of JavaScript work, using a technique called <em>input prioritization</em>. With this new scheduler in place, input events can be handled nearly instantly, even if the page has queued up a large backlog of <code>setTimeout</code> operations.</p>\n<p>The impact on some pages can be startling. We‚Äôve already heard feedback from Windows Insiders that the performance improvement of Microsoft Edge is <a href=\"https://twitter.com/toddreifsteck/status/844358753864507392\">‚Äúnight and day,‚Äù</a> thanks to the new ability to immediately scroll and immediately click links. No more waiting multiple agonizing seconds for a JavaScript-heavy page to finish its loading process!</p>\n<p>For example, the ‚Äúnews site‚Äù below is doing several seconds&#8217; worth of work on the UI thread while it‚Äôs loading. If you try to click the first link during that load, the navigation may be blocked, because mouse input is not being prioritized.</p>\n<p style=\"text-align: center;\">\n\n</p>\n<p>As of EdgeHTML 15, however, Microsoft Edge now prioritizes the click event ahead of other work, meaning that the next page loads nearly instantly:</p>\n<p style=\"text-align: center;\">\n\n</p>\n<p>Here‚Äôs another example showing the impact on scrolling. <a href=\"https://bl.ocks.org/nolanlawson/raw/07030bed55df0081d348935e83103cd5/\">This page</a>, like the sample news site, is running several <code>setTimeout</code>s in the background, which can interfere with keyboard scrolling:</p>\n<p style=\"text-align: center;\">\n\n</p>\n<p>As of EdgeHTML 15,¬†the page remains scrollable with the keyboard, even while the <code>setTimeout</code>s are being processed. This reduces a common source of blocked or laggy scrolling on very active web pages.</p>\n<h2>Giving priority to the user</h2>\n<p>To understand what EdgeHTML 15 is doing under the hood to achieve this performance boost, let‚Äôs whip up a quick metaphor. Note that, as is often the case, the actual implementation is a bit more complex, but we‚Äôll simplify a bit in the interests of clarity.</p>\n<p>With a little help from some illustrations courtesy of <a href=\"https://twitter.com/rachelnabors\">Rachel Nabors</a>, we can visualize the way tasks are processed in a web page by imagining a trendy club with a lineup of eager customers stretching out around the block, and a stern bouncer letting in only one client at a time.</p>\n<p><a href=\"https://winblogs.azureedge.net/win/2017/04/input_ui-thread_2x.png\"><img alt=\"Illustration showing a club, &quot;The UI Thread.&quot; In front of the club, a long queue of customers are lined up, labelled &quot;JS, Style, Layout,&quot; etc.\" class=\"aligncenter size-full wp-image-20339\" height=\"907\" src=\"https://winblogs.azureedge.net/win/2017/04/input_ui-thread_2x.png\" width=\"1360\" /></a></p>\n<p>In the pre-Creators Update implementation, everybody had to get into the same line: JavaScript timers, layout and style updates, and input events alike. Worse, since JavaScript timers can queue their own timers, these could actually cut in line ahead of other events, if the original timer took so much time to complete that the next timer was now ‚Äúscheduled‚Äù to run.</p>\n<p>In our club metaphor, this would be like a particularly inconsiderate patron calling their friend on the phone to say, ‚ÄúNo problem, I can hold your place in the line. I‚Äôll just tell the bouncer you‚Äôre on your way!‚Äù And then, insult of insults, the bouncer would actually allow them to hold up the entire line, waiting for their friend to show! All the while, the poor input event is still waiting at the back of the line.</p>\n<p>As of the Creators Update, though, this lineup has been completely redesigned. Rather than maintaining a single queue to process all events, there is now a priority queue for input events. This is as if our club added a special VIP line, allowing high-profile guests to get in ahead of the thoughtless patron trying to call their buddy.</p>\n<p><a href=\"https://winblogs.azureedge.net/win/2017/04/input_gaga_2x.png\"><img alt=\"Illustration of a character dressed as User Input, with mouse pointers for earrings, skipping the UI Thread line in a separate &quot;VIP&quot; line.\" class=\"aligncenter size-full wp-image-20336\" height=\"907\" src=\"https://winblogs.azureedge.net/win/2017/04/input_gaga_2x.png\" width=\"1360\" /></a></p>\n<p>This is a much better system, because input events fundamentally deserve higher priority than any other operations on a web page. Ultimately, the user is the king or queen of their browser, and whatever work a website is trying to complete is less important than what the user wants to accomplish. Even if a page is very busy running JavaScript timers, any input from the user‚Äôs mouse or keyboard should be considered top priority.</p>\n<h2>Prioritizing the browser UI itself over web content</h2>\n<p>In addition to creating a ‚Äúfast lane‚Äù for user input to web pages, another improvement we made in the Creators Update was to make <em>another</em> special queue for input to the browser UI itself.</p>\n<p>You can imagine that, if input is shared between a web page and the browser frame ‚Äì i.e. the URL bar, tabs, favorite button, etc. ‚Äì then a misbehaved web page could potentially render the entire browser unresponsive. For some web content, this was the situation before the Creators Update, but now Microsoft Edge is more intelligent about handling browser UI input separately from web page input.</p>\n<p>In this example, we‚Äôre using <a href=\"http://crashmybrowser.com\">crashmybrowser.com</a>, a wonderful site that does exactly what you&#8217;d think. In one of the site‚Äôs tests, we can create a ‚Äúfork bomb,‚Äù where a timeout spawns two more timeouts, each of which spawns two more timeouts, and so on, causing the page to become completely hung. Prior to the Creators Update, this kind of unrelenting JavaScript assault would prevent users from being able to close the tab or to open a new one, since browser UI input was not handled any separately from other kinds of input.</p>\n<p style=\"text-align: center;\">\n\n</p>\n<p>In the Creators Update, however, browser UI input has been given special priority, allowing the user to close a misbehaving tab without waiting for it to respond. Note that this input is handled <em>even earlier</em> than the in-page user input. For instance, in the case of an infinite loop (another fun option on crashmybrowser.com), input to the web page itself would <em>never</em> be handled, but input to the browser UI itself should be able to respond regardless of what the web page is up to.</p>\n<p style=\"text-align: center;\">\n\n</p>\n<p>Circling back to our trendy club example, this special treatment of browser UI input would be like a hidden side entrance to the club, only available to members of the band and their entourage. While VIPs may get first dibs to line up into the club, the band is even more important! So they should be able to fast-track into the green room.</p>\n<p><a href=\"https://winblogs.azureedge.net/win/2017/04/input_band_2x-1.png\"><img alt=\"Illustration showing a band member entering the club through a side door, labelled &quot;Browser Only&quot;\" class=\"aligncenter wp-image-20342 size-full\" height=\"943\" src=\"https://winblogs.azureedge.net/win/2017/04/input_band_2x-1.png\" width=\"1360\" /></a></p>\n<h2>Real users see web content responsiveness improvements</h2>\n<p>To see the impact of this work on web content responsiveness, we can look at aggregated telemetry from EdgeHTML 15 Windows Insider devices, comparing November builds (before input prioritization was implemented) to March builds (after it was introduced). For interactions, we broadly bucket responsiveness into ‚Äúgreat‚Äù sessions (&lt;300ms), ‚Äúpoor‚Äù sessions (300-1000ms), and ‚Äúterrible‚Äù sessions (&gt;1000ms).</p>\n<p><a href=\"https://winblogs.azureedge.net/win/2017/06/ec82a3a277403450247997dd04f7dc8f.png\"><img alt=\"Bar chart showing input responsiveness in EdgeHTML 15 November (before) versus March (after). Microsoft Edge has increased the number of ‚Äúgreat‚Äù sessions from 88.71% to 95.53%, while decreasing the number of ‚Äúpoor‚Äù sessions from 5.68% to 3% and the number of ‚Äúterrible‚Äù sessions from 5.61% to 1.46%.\" class=\"aligncenter size-full wp-image-20345\" height=\"522\" src=\"https://winblogs.azureedge.net/win/2017/06/ec82a3a277403450247997dd04f7dc8f.png\" width=\"1140\" /></a></p>\n<p>As you can see in the above chart, Microsoft Edge has increased the number of ‚Äúgreat‚Äù sessions from 88.71% to 95.53%, while decreasing the number of ‚Äúpoor‚Äù sessions from 5.68% to 3% and the number of ‚Äúterrible‚Äù sessions from 5.61% to 1.46%.</p>\n<p>The confirms that Microsoft Edge users are seeing the benefits of this input prioritization effort firsthand. For most sites, users have a great session.¬† However, when a site is bad, it can be a terrible experience. Aggregated Windows telemetry clearly shows that the input prioritization improvements in the Creators Update have significantly reduced the number of less-than-great sessions on heavy websites.</p>\n<h2>Conclusion</h2>\n<p>All these input changes serve one unique purpose: to put users in control of their browsing. Regardless of what a web page is trying to accomplish, the user should be able to interact with their browser and manage their tabs, scroll their content, and navigate to new pages as fast as their fingers can move. With these improvements in the Creators Update, Microsoft Edge users will enjoy a faster, more fluid, and more responsive browser.</p>\n<p>As Bret Victor <a href=\"https://vimeo.com/36579366\">famously said</a>, ‚Äúcreators need an immediate connection to what they&#8217;re creating.‚Äù This is true not only of creators but also of web surfers: when you type or click, the web page should immediately respond. This responsiveness helps maintain the most immersive aspects of the web, and creates a strong visceral connection between the user and their browser. Immediate feedback is crucial not only for creative flow, but also for seamless web surfing.¬† With the Creators Update, Microsoft Edge has made a big step in achieving that vision.</p>\n<p>‚Äï <a href=\"https://twitter.com/nolanlawson\">Nolan Lawson</a>, Program Manager, Microsoft Edge<br />\n‚Äï <a href=\"https://twitter.com/toddreifsteck/\">Todd Reifsteck</a>, Senior Program Manager, Microsoft Edge<br />\n‚Äï <a href=\"https://twitter.com/rachelnabors/\">Rachel Nabors</a>, Program Manager, Microsoft Edge</p>\n<p>The post <a href=\"https://blogs.windows.com/msedgedev/2017/06/01/input-responsiveness-event-loop-microsoft-edge/\" rel=\"nofollow\">Improving input responsiveness in Microsoft Edge</a> appeared first on <a href=\"https://blogs.windows.com/msedgedev\" rel=\"nofollow\">Microsoft Edge Dev Blog</a>.</p>", "title": "Improving input responsiveness in Microsoft Edge", "author_name": "Nolan Lawson, Todd Reifsteck and Rachel Nabors", "source_type": "rss", "comments_count": 2, "published": "2017-06-01T17:00:00", "link": "https://blogs.windows.com/msedgedev/2017/06/01/input-responsiveness-event-loop-microsoft-edge/", "source_link": "https://blogs.windows.com/msedgedev", "source_title": "Microsoft Edge Dev Blog"}, {"source_name": "2ality", "description": "<p>Figuring out the best strategy for transpiling with Babel is tricky. This blog post proposes a new strategy, made possible by <a href=\"http://2ality.com/2017/02/babel-preset-env.html\">Babel‚Äôs <code>preset-env</code></a>.</p>\n\n<div><a href=\"http://2ality.com/2017/04/transpiling-dependencies-babel.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/ds-RJFToqEQ\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "Transpiling dependencies with Babel", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/04/transpiling-dependencies-babel.html", "author_link": "http://2ality.com/", "published": "2017-06-01T15:20:00", "source_title": "2ality feed"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "ChromiumBlog", "description": "<div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Historically, running native code on the web required a browser plugin. In 2013, we </span><a href=\"https://blog.chromium.org/2013/11/portable-native-client-pinnacle-of.html\" style=\"text-decoration: none;\"><span>introduced the PNaCl sandbox</span></a><span> to provide a means of building safe, portable, high-performance apps without plugins. Although this worked well in Chrome, it did not provide a solution that worked seamlessly across all browsers.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Since then the web community has rallied around WebAssembly, as a cross-browser solution to high performance code. WebAssembly provides the speed necessary to build an </span><a href=\"https://d2jta7o2zej4pf.cloudfront.net/\" style=\"text-decoration: none;\"><span>in-browser video editor</span></a><span> or run a </span><a href=\"http://webassembly.org/demo/Tanks/\" style=\"text-decoration: none;\"><span>Unity game</span></a><span> at a high frame rate utilizing existing standards-based web platform APIs. Applications using WebAssembly already run in multiple browsers: Chrome and Firefox support WebAssembly natively and Edge and Safari support WebAssembly in preview versions of their browsers.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Given the momentum of cross-browser support, we plan to focus our native code efforts on WebAssembly going forward. We will remove support for PNaCl in the first quarter of 2018 everywhere except inside Chrome Apps and Extensions. We believe that the ecosystem around WebAssembly makes it a better fit for new and existing high-performance web apps, and that usage of PNaCl is sufficiently low to warrant deprecation.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>We recognize that technology migrations can be challenging. To help ease the transition we have prepared a </span><a href=\"https://developer.chrome.com/native-client/migration\" style=\"text-decoration: none;\"><span>set of recommendations</span></a><span> for existing PNaCl implementations to migrate to the web platform, as well as a feature </span><a href=\"https://wasmdash.appspot.com/\" style=\"text-decoration: none;\"><span>roadmap</span></a><span> for WebAssembly. As you embark on the migration process, please </span><a href=\"https://groups.google.com/forum/#!forum/native-client-discuss\" style=\"text-decoration: none;\"><span>let us know</span></a><span> if you run into any challenges, so that we can help make the shift as smooth as possible.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>With the launch of WebAssembly, the web platform has gained a foundation for a new generation of fast and immersive web apps that run in any browser. We‚Äôre excited to see what developers build next!</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><span id=\"docs-internal-guid-e5e2025f-5ab5-15f9-614e-cb1efb4cad3e\"></span><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Posted by Brad Nelson, Software Engineer on NaCl, PNaCl, and WebAssembly</span></div>", "title": "Goodbye PNaCl, Hello WebAssembly!", "source_link": "http://blog.chromium.org/", "author_link": "https://plus.google.com/106190864297512596007", "author_name": "Chrome Blog", "source_type": "rss", "link": "http://blog.chromium.org/2017/05/goodbye-pnacl-hello-webassembly.html", "published": "2017-05-30T20:01:00", "source_title": "Chromium Blog", "tags": "browsers,chromium,tech,web"}, {"source_name": "EdgeBlog", "description": "<p>In last year‚Äôs Windows 10 Anniversary Update, we introduced a new architecture for web accessibility, enabling a more accessible web with Microsoft Edge. With this dramatically improved foundation, we‚Äôve been hard at work improving the experience even more in EdgeHTML 15 and the Windows 10 Creators Update. This post details the web platform accessibility improvements [&#8230;]</p>\n<p>The post <a href=\"https://blogs.windows.com/msedgedev/2017/05/25/accessibility-improvements-edgehtml-15/\" rel=\"nofollow\">Accessibility improvements in EdgeHTML 15</a> appeared first on <a href=\"https://blogs.windows.com/msedgedev\" rel=\"nofollow\">Microsoft Edge Dev Blog</a>.</p>", "tags": "accessibility,announcements,edgehtml 15,mobile,new platform features,pc,tablet,browsers,edge,tech,web", "text": "<p>In last year‚Äôs Windows 10 Anniversary Update, <a href=\"https://blogs.windows.com/msedgedev/2016/04/20/building-a-more-accessible-web-platform\">we introduced a new architecture for web accessibility</a>, enabling a more accessible web with Microsoft Edge. With this dramatically improved foundation, we‚Äôve been hard at work improving the experience even more in EdgeHTML 15 and the Windows 10 Creators Update.</p>\n<p>This post details the web platform accessibility improvements introduced with EdgeHTML 15 in the Windows 10 Creators Update. These improvements are made possible by our continued partnership with the developer ecosystem, assistive technology community, and standards bodies, which allowed us to identify and implement the most impactful changes to enable a more accessible user experience.</p>\n<div class=\"wp-caption aligncenter\" id=\"attachment_20686\" style=\"width: 1290px;\"><a href=\"https://winblogs.azureedge.net/win/2017/05/a11y_CU.png\"><img alt=\"Diagram showing concentric circles, labeled from outermost to innermost: Advanced support for UIA Text Pattern and improved support for web accessibility patterns, built on top of the accessible Web Platform core introduced in Windows 10 Anniversary Update\" class=\"size-full wp-image-20686\" height=\"720\" src=\"https://winblogs.azureedge.net/win/2017/05/a11y_CU.png\" width=\"1280\" /></a><p class=\"wp-caption-text\">The Windows 10 Creators Update introduces advanced support for UIA Text Pattern and improved support for web accessibility patterns, built on top of the accessible Web Platform core introduced in the Windows 10 Anniversary Update.</p></div>\n<h2>Improved support for working with the text content of the site</h2>\n<p>Based on feedback from assistive technology vendors, we have implemented significant improvements to UI Automation TextPattern support in Microsoft Edge. <a href=\"https://msdn.microsoft.com/en-us/library/ms745158(v=vs.110).aspx\">UI Automation TextPattern</a> is a special purpose API designed to allow screen readers and other assistive technologies to access the textual content of the application.</p>\n<p>The main building blocks of the TextPattern APIs are:</p>\n<ul>\n<li>Text ranges that consist of spans of text content view with start and end points along with movement operations</li>\n<li>Text units: characters, words, paragraphs, etc.</li>\n<li>Objects embedded inside the text ranges, along with the methods to get them such as <a href=\"https://msdn.microsoft.com/en-us/library/system.windows.automation.text.textpatternrange.getchildren(v=vs.110).aspx\">GetChildren</a> and <a href=\"https://msdn.microsoft.com/en-us/library/system.windows.automation.text.textpatternrange.getenclosingelement(v=vs.110).aspx\">GetEnclosingElement</a></li>\n</ul>\n<p>There are a few important things to note on the representation of text and objects when navigated by certain text units.</p>\n<h3>Character units</h3>\n<p>Characters include text on the page, as well as block separators. The latter can be elements, such as <code>&lt;br&gt;</code> tags, or can be made up of the end point of one block and the start of another:</p>\n\n<div class=\"gist-oembed\"></div>\n<p>In this example, &#8220;<code>a</code>&#8220;, &#8220;<code>&lt;/div&gt;&lt;div&gt;</code>&#8221; and &#8220;<code>b</code>&#8221; would be character units. In character unit movements, to signify the units and objects, we introduced separators (as can be demonstrated by <code>CompareEndpointsByRange</code>).</p>\n<p>In EdgeHTML 15, we‚Äôve removed artificial separators between object boundaries:</p>\n\n<div class=\"gist-oembed\"></div>\n<p>In EdgeHTML 14, this would be read as &#8220;<code>b</code>&#8220;, &#8220;&#8221;, &#8220;<code>c</code>&#8221; ‚Äì note the empty character. Beginning in EdgeHTML 15, this is read as the following characters: &#8220;<code>b</code>&#8220;, &#8220;<code>c</code>&#8221;</p>\n<p>For object TextPattern APIs, such as <a href=\"https://msdn.microsoft.com/en-us/library/system.windows.automation.text.textpatternrange.getenclosingelement(v=vs.110).aspx\"><code>GetEnclosingElement</code></a> or <a href=\"https://msdn.microsoft.com/en-us/library/system.windows.automation.text.textpatternrange.getchildren(v=vs.110).aspx\"><code>GetChildren</code></a>, character units that span multiple elements (such as the <code>&lt;/div&gt;&lt;div&gt;</code> example above) are now treated as if they are entirely contained by the element containing the start of the character unit.</p>\n<h3>Word units</h3>\n<p>Word units are made up with individual characters and always include trailing word separators. They are consistent to characters in the behavior is object retrieval APIs. Including changes to the last unit in objects.</p>\n\n<div class=\"gist-oembed\"></div>\n<p>In EdgeHTML 14, this would be represented with the word units &#8220;&#8221;, &#8220;<code>link</code>&#8220;, &#8220;<code>\\n</code>&#8220;, and the corresponding enclosing elements for the units would have been &#8220;<code>&lt;li&gt;</code>&#8220;, &#8220;<code>&lt;a&gt;</code>&#8220;, &#8220;<code>&lt;li&gt;</code>&#8220;. In EdgeHTML 15, the enclosing element of the word unit &#8220;<code>link\\n</code>&#8221; would be the <code>&lt;li&gt;</code> element. Consistently with character units, words are no longer broken by object boundaries.</p>\n<h3>Format units</h3>\n<p>Format units are continuous blocks of content that have same set of UIA Format Attributes. Object boundaries also cause format units to break. Format units include only atomic children, like images and don‚Äôt span object boundary.</p>\n\n<div class=\"gist-oembed\"></div>\n<p>In this example &#8220;An <code>&lt;img&gt;</code>&#8220;, &#8220;<code>&lt;img&gt;</code>&#8221; and &#8220;<code> here</code>&#8221; would be format units. To preserve compatibility with existing clients, we continue to introduce empty format units between object edges (for example, adjacent links or table cells).</p>\n<h3>Line units</h3>\n<p>Line units represent visual lines as laid out on the screen by the browser engine. It‚Äôs important to note that line units do not necessarily start or end at character units, but do always contain at least one character unit. <a href=\"https://msdn.microsoft.com/en-us/library/system.windows.automation.text.textpatternrange.getchildren(v=vs.110).aspx\"><code>GetChildren</code></a> on a line unit will always return any inline objects (such as links) that are contained within the line.</p>\n\n<div class=\"gist-oembed\"></div>\n<p>In this example &#8220;<code>link</code>&#8220;, &#8220;<code> </code>&#8220;, &#8220;<code>link</code>&#8220;, &#8220;<code>&lt;/div&gt;&lt;div&gt;text&lt;/div&gt;</code>&#8220;. would be line units.</p>\n<h3>Paragraph units</h3>\n<p>Paragraph units include groups of words broken by block separators.</p>\n\n<div class=\"gist-oembed\"></div>\n<p>In this example &#8220;<code>&lt;/div&gt;&lt;p&gt;</code>&#8221; would be combined to a single block separator.</p>\n<p>Paragraphs are made up of sequences of words and have consistent behaviors with object APIs, such as <a href=\"https://msdn.microsoft.com/en-us/library/system.windows.automation.text.textpatternrange.getenclosingelement(v=vs.110).aspx\"><code>GetEnclosingElement</code></a> or <a href=\"https://msdn.microsoft.com/en-us/library/system.windows.automation.text.textpatternrange.getchildren(v=vs.110).aspx\"><code>GetChildren</code></a>.</p>\n<h3>Page units, Document units</h3>\n<p>In EdgeHTML page units are the same as document units and cover entire document content range.</p>\n<h2>Improved support for common web patterns</h2>\n<p>EdgeHTML 15 improves support for a number of common web patterns for accessibility. A few of these are described below.</p>\n<h3>Corrected name and description computation for referenced hidden elements</h3>\n<p>In a very common accessibility pattern, authors use <code>aria-labelledby</code>, <code>aria-describedby</code> refences to point to the elements used for name and description computation. Microsoft Edge now correctly supports referencing hidden (<code>visibility: hidden</code>, <code>display: none</code>) elements.</p>\n\n<div class=\"gist-oembed\"></div>\n<p>In this example the first element would now compute accessible name to &#8220;Hidden, but accessible name&#8221;</p>\n<h3>Introduced support for HTML <code>lang</code> attribute</h3>\n<p>EdgeHTML 15 now fully supports the HTML &#8220;<code>lang</code>&#8221; attribute, which is mapped to <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ee671662(v=vs.85).aspx\">UIA Culture attribute</a>. This allows assistive clients to correctly consume multi-language documents using UI Automation.</p>\n<h3>Images with empty alternative text are now mapped to the presentation role</h3>\n<p>EdgeHTML 15 now correctly maps images with an empty HTML &#8220;<code>alt</code>&#8221; attribute to the <code>presentation</code> role, per the W3C <a href=\"http://www.w3.org/TR/html-aam-1.0/\">HTML Accessibility API Mappings</a>. This is a common web pattern, and assistive technology users should notice less frequent stops on purely presentational images when using certain navigation and exploration modes in the screen readers.</p>\n<h2>Journey toward an even more accessible web platform</h2>\n<p>Finally, we have fixed a number of issues reported by members of the accessibility community, including:</p>\n<ul>\n<li>Fixed an issue resulting in double reading of controls with Narrator. As a result of the fix, we no longer compute accessible <code>description</code> to the same value as <code>name</code> for explicit ARIA roles and intrinsic controls.</li>\n<li>Improved Scroll Pattern support for improved the Narrator scroll experience on all web pages.</li>\n<li>Disabled Text Size support for the web platform on mobile, and enabled pinch to zoom support on all web pages.</li>\n<li>Improved reliability of UIA TextPattern operations as well as tree traversal, focus, and selection operations through UI Automation.</li>\n<li>Significantly improved performance of all operations using existing UI Automation APIs. You can expect interaction with web pages to be much more nimble and responsive.</li>\n</ul>\n<p>We&#8217;re passionate about the web working for everyone, regardless of ability, and are excited to share a much improved experience with assistive technology in the Windows 10 Creators Update and EdgeHTML 15. We welcome your feedback on these changes <a href=\"https://twitter.com/msedgedev\">at @MSEdgeDev on Twitter</a> or via <a href=\"https://issues.microsoftedge.com\">our open bug portal</a>, and look forward to sharing more improvements soon!</p>\n<p>‚Äì Bogdan Brinza, Program Management Lead, Microsoft Edge<br />\n‚Äì Rossen Atanassov, Software Development Lead, Microsoft Edge<br />\n‚Äì Peter Salas, Software Development Engineer, Microsoft Edge</p>\n<p>The post <a href=\"https://blogs.windows.com/msedgedev/2017/05/25/accessibility-improvements-edgehtml-15/\" rel=\"nofollow\">Accessibility improvements in EdgeHTML 15</a> appeared first on <a href=\"https://blogs.windows.com/msedgedev\" rel=\"nofollow\">Microsoft Edge Dev Blog</a>.</p>", "title": "Accessibility improvements in EdgeHTML 15", "author_name": "Microsoft Edge Team", "source_type": "rss", "comments_count": 3, "published": "2017-05-25T17:00:00", "link": "https://blogs.windows.com/msedgedev/2017/05/25/accessibility-improvements-edgehtml-15/", "source_link": "https://blogs.windows.com/msedgedev", "source_title": "Microsoft Edge Dev Blog"}, {"source_name": "2ality", "description": "<p>This blog post describes how module specifiers (the path-like IDs of modules) change with ECMAScript modules (ESM). There are a few subtle differences, compared to the familiar CommonJS module (CJS) style.</p>\n\n<div><a href=\"http://2ality.com/2017/05/es-module-specifiers.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/h3dR1dSf3II\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "Module specifiers: what‚Äôs new with ES modules?", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/05/es-module-specifiers.html", "author_link": "http://2ality.com/", "published": "2017-05-22T06:17:00", "source_title": "2ality feed"}, {"source_name": "EdgeBlog", "description": "<p>Last week, Microsoft welcomed thousands of developers from around the world to Build 2017, where we shared our vision for the future of dozens of products and services. Build featured a number of exciting sessions for developers building sites and apps with web technologies, including a peek at what&#8217;s coming to the web platform beginning [&#8230;]</p>\n<p>The post <a href=\"https://blogs.windows.com/msedgedev/2017/05/19/microsoft-edge-at-build-2017/\" rel=\"nofollow\">Microsoft Edge at Build 2017</a> appeared first on <a href=\"https://blogs.windows.com/msedgedev\" rel=\"nofollow\">Microsoft Edge Dev Blog</a>.</p>", "tags": "announcements,build,edgehtml,edgehtml 15,edgehtml 16,experimental platform features,mobile,new platform features,pc,performance,progressive enhancement,progressive web apps,tablet,web apps,browsers,edge,tech,web", "text": "<p>Last week, Microsoft welcomed thousands of developers from around the world to Build 2017, where we shared our vision for the future of dozens of products and services. Build featured a number of exciting sessions for developers building sites and apps with web technologies, including a peek at what&#8217;s coming to the web platform beginning with EdgeHTML 16 the Windows 10 Fall Creators Update.</p>\n<p>In this post, you&#8217;ll find a quick review of the web developer sessions at Build 2017. If you see something you&#8217;d like to learn more about, dive into the recording to get all the details!</p>\n<h2>What&#8217;s new and what&#8217;s next for the web on Windows</h2>\n<p>In this session, Kyle Pflug and Nadia Fortini take you on a whirlwind tour of what&#8217;s new in Microsoft Edge in EdgeHTML 15, and share a roadmap for our priorities in upcoming releases of Microsoft Edge.</p>\n<p style=\"text-align: center;\">\n\n</p>\n<p>You&#8217;ll learn about new features like <a href=\"https://aka.ms/w3c-payment-request\">Payment Request</a> for standardized checkout experiences, WebVR for immersive mixed reality experiences built with immersive web technologies, and dramatically improved responsiveness and battery life. We also cover upcoming APIs in development for future releases, including an updated CSS Grid implementation, Service Worker and other features that enable Progressive Web Apps, and much more.</p>\n<p><a href=\"https://winblogs.azureedge.net/win/2017/05/fluent_edge.png\"><img alt=\"Screen capture showing Fluent Design in Microsoft Edge. The use of materials like Acrylic allows elements of the background to influence the color and texture of the browser frame.\" class=\"aligncenter size-full wp-image-20794\" height=\"697\" src=\"https://winblogs.azureedge.net/win/2017/05/fluent_edge.png\" width=\"1231\" /></a></p>\n<p>This session also shows an early look at upcoming changes to the design and personality of Microsoft Edge, as the new <a href=\"http://fluent.microsoft.com/\">Fluent Design System</a> begins to make to the browser beginning with the Windows 10 Fall Creators Update. Fluent Design brings depth, motion, and personality to the controls and browser frame in Microsoft Edge, allowing elements of the page and background to influence the color of the browser window.</p>\n<h2>Progressive Web Apps on Windows</h2>\n<p>In this session, Aaron Gustafson introduces Progressive Web Apps, a new <a href=\"https://infrequently.org/2015/06/progressive-apps-escaping-tabs-without-losing-our-soul/\">vision for the future of web apps</a> enabled by groundbreaking technologies like <a href=\"https://infrequently.org/2015/06/progressive-apps-escaping-tabs-without-losing-our-soul/\">Service Worker</a>, which will be coming to preview builds of Microsoft Edge for developer testing this summer.</p>\n<p style=\"text-align: center;\">\n\n</p>\n<p>You&#8217;ll learn how Progressive Web Apps enable world-class, cross-platform, native-like apps, build on web technologies and hosted on your own server. PWAs can work offline, update content in the background even when the browser or the app is closed, and intercept network requests to update content from a cache when the network is unavailable.</p>\n<p>This session details how we will a first-class web app ecosystem on Windows by ingesting high-quality PWAs from across the internet, and making it easy for developers to participate in the Windows Store alongside native apps with no extra effort, using tools like Web App Manifests and <a href=\"https://pwabuilder.com\">PWABuilder</a>.</p>\n<h2>WebVR: Immersive Mixed Reality powered by web technologies</h2>\n<p>In this session, David Rousset and Etienne Margraff describe how EdgeHTML 15 on the Windows 10 Creators Update enables any web developer to build an immersive mixed reality experience with Microsoft Edge, Windows Mixed Reality, and the <a href=\"https://w3c.github.io/webvr/\">WebVR 1.1 API</a>.</p>\n<p style=\"text-align: center;\">\n\n</p>\n<p>Modern frameworks like <a href=\"http://doc.babylonjs.com/overviews/webvr_camera\">Babylon.js</a> and <a href=\"https://aframe.io/\">A-Frame</a> make it easy to get started building WebVR experiences using familiar web technologies. Developers can get started today even without a headset using the <a href=\"https://developer.microsoft.com/en-us/windows/mixed-reality/using_the_windows_mixed_reality_simulator\">Windows Mixed Reality Simulator</a>.</p>\n<h2>Better checkout experiences with the Payment Request API</h2>\n<p>In this session, Molly Dalton, Stan Change, and Jonathan Cutler provide an in-depth look at the new Payment Request API, which allows you to build standardized, cross-browser checkout experiences on the web and in apps. Payment Request dramatically simplifies checkout by leveraging a payment app &#8211; in this case, the browser &#8211; to store and provide payment and shipping details, so your customers can enjoy less friction and a more delightful user experience.</p>\n<p style=\"text-align: center;\">\n\n</p>\n<p>Payment Request works in EdgeHTML 15 as well as in UWP apps, apps packaged with the Desktop Bridge, and the Microsoft Bot Framework, allowing you to build a faster and easier checkout experience across a variety of devices and platforms.</p>\n<h2>What&#8217;s new in ChakraCore</h2>\n<p>In this session, Brian Terlson gives an overview of what&#8217;s new in Chakra &#8211; the open-source JavaScript engine that powers Microsoft Edge and Windows 10.</p>\n<p style=\"text-align: center;\">\n\n</p>\n<p>You&#8217;ll learn about the near-native performance enabled by experimental WebAssembly support in Microsoft Edge, and exciting new emerging tools like Time Travel Debugging. You&#8217;ll also learn about Chakra&#8217;s journey to other operating systems, and the work we&#8217;ve been doing with the Node.js core project to help solve key problems like providing a stable Node API for native module developers.</p>\n<h2>Get started today</h2>\n<p>Many of these new APIs &#8211; including WebVR 1.1, Payment Request, CSS Custom Properties, and more &#8211; are available and on by default in Microsoft Edge on the Windows 10 Creators Update, which is available now. To get started with experimental features like WebAssembly, you can simply navigate to about:flags in Microsoft Edge.</p>\n<p>To make it as easy as possible to get started, we&#8217;ve partnered with BrowserStack to provide <a href=\"https://aka.ms/edge-on-browserstack/\">instant, free testing of Microsoft Edge</a> from any device. You can test the latest stable and preview releases of Microsoft Edge, and even test localhost or using WebDriver.</p>\n<p>We look forward to sharing more about upcoming features soon as they make their way to the Windows Insider Program. In the meantime, check out the Build sessions, and let us know what you think!</p>\n<p>‚Äï <a href=\"https://twitter.com/kylealden\">Kyle Pflug</a>, Senior Program Manager, Microsoft Edge</p>\n<p>The post <a href=\"https://blogs.windows.com/msedgedev/2017/05/19/microsoft-edge-at-build-2017/\" rel=\"nofollow\">Microsoft Edge at Build 2017</a> appeared first on <a href=\"https://blogs.windows.com/msedgedev\" rel=\"nofollow\">Microsoft Edge Dev Blog</a>.</p>", "title": "Microsoft Edge at Build 2017", "author_name": "Kyle Pflug", "source_type": "rss", "comments_count": 3, "published": "2017-05-19T17:00:00", "link": "https://blogs.windows.com/msedgedev/2017/05/19/microsoft-edge-at-build-2017/", "source_link": "https://blogs.windows.com/msedgedev", "source_title": "Microsoft Edge Dev Blog"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "ChromiumBlog", "description": "<div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Posted by Rahul Roy-chowdhury, VP Product Management, Chrome </span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">What a difference a year makes. Last year at Google I/O, </span><a href=\"https://blog.chromium.org/2016/05/the-mobile-web-is-open-for-business.html\" style=\"text-decoration: none;\"><span style=\"background-color: transparent; color: #1155cc; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">we shared</span></a><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> that the mobile web was open for business. New technologies such as AMP and Progressive Web Apps (PWAs) were bringing new capabilities, better performance, and a streamlined workflow to the mobile web. </span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Fast forward one year later: more than two billion AMP pages have been created and \"PWA\" has proved to be far more than a buzzword‚Äîit‚Äôs now the way that many businesses around the world are building for mobile devices. For more details, </span><span style=\"background-color: white; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">take a look at the video from Google I/O on the latest </span><a href=\"https://youtu.be/_ssDaecATCM\" style=\"text-decoration: none;\"><span style=\"background-color: white; color: #1155cc; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">mobile web state of the union</span></a><span style=\"background-color: white; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">, or read below on how these technologies are making the modern mobile web mainstream.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Momentum</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span id=\"docs-internal-guid-1fcb5798-1ca1-5319-1d45-9251c1b2f536\"><span style=\"background-color: white; font-family: Arial; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;\">Summing up all the great </span><a href=\"https://developers.google.com/web/showcase\"><span style=\"background-color: white; color: #1155cc; font-family: Arial; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;\">success stories</span></a><span style=\"background-color: white; font-family: Arial; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;\"> from around the world in a single post is a tall order, but here are some highlights.</span></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span id=\"docs-internal-guid-1fcb5798-1ca0-e54a-a494-7b028a6556fb\"><span style=\"font-family: Arial; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;\">To improve the performance of Wego's mobile site, the company built AMP pages using <span id=\"docs-internal-guid-1fcb5798-1cb8-9647-3237-7e4aaba064d3\"><a href=\"https://www.ampproject.org/docs/guides/pwa-amp/amp-to-pwa\"><span style=\"color: #1155cc; font-size: 10pt; vertical-align: baseline;\">amp-install-serviceworker</span></a></span> to transition to a fast PWA experience. Average </span><span style=\"background-color: white; font-family: Arial; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;\">page load time decreased from 12 seconds to less than one second, and conversion rates increased by 95%. </span></span></div><div class=\"separator\" style=\"clear: both; text-align: center;\"></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">When Forbes rebuilt their mobile website as a PWA, they began by re-thinking what their experience could look like on a phone. </span><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Instead of minimally updating their underlying site, Forbes integrated PWA technologies to provide an immersive, app-like experience. They saw immediate improvements and engagement rates have more than doubled since launch.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><br /></span></div><div class=\"separator\" style=\"clear: both; text-align: center;\"></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: #1155cc; font-family: Arial; font-size: 10pt; font-style: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\"><a href=\"https://developers.google.com/web/showcase/2017/ola\" style=\"text-decoration: none;\">Ola</a></span><span style=\"background-color: white; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">, the leading cab aggregator in India, built a PWA and noticed that 20% of users who book using their PWA had previously uninstalled their app. By reducing the amount of storage space needed, the PWA allowed them to effectively re-engage with users that otherwise would have been lost.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span id=\"docs-internal-guid-1fcb5798-1cb1-a07f-3c3e-a9059cc6031b\"><span style=\"background-color: white; font-family: Arial; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;\">Another success story is </span><a href=\"https://developers.google.com/web/showcase/2017/twitter\"><span style=\"background-color: white; color: #1155cc; font-family: Arial; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;\">Twitter Lite</span></a><span style=\"background-color: white; font-family: Arial; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;\">, a PWA </span><span style=\"background-color: #fefefe; font-family: Arial; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;\">which minimizes data usage, is resilient on unreliable mobile networks, and is less than 1MB of space on a device. Twitter's new mobile experience is also optimized for speed, with up to 30% faster launch times as well as quicker navigation throughout the site. They've found that u</span><span style=\"background-color: white; font-family: Arial; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;\">sers are spending 2.7x more time on site, and as a result are seeing 76% more tweets on the new PWA than their previous mobile site. Twitter is seeing incredible re-engagement with 1 million sessions initiated a day from icons added to the Android homescreen</span><span style=\"background-color: white; color: #222222; font-family: Arial; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;\">.</span></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: #222222; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Polished Experiences</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Users expect a lot from their mobile devices, and we've added tons of APIs over the past year to meet that demand. The mobile web can support more use cases and get more done than ever before. A few highlights:</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><ol style=\"margin-bottom: 0pt; margin-top: 0pt;\"><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Improved Add to Homescreen</span></div></li></ol><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Earlier this year we unveiled </span><a href=\"https://blog.chromium.org/2017/02/integrating-progressive-web-apps-deeply.html\" style=\"text-decoration: none;\"><span style=\"background-color: transparent; color: #1155cc; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">Improved Add to Homescreen</span></a><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">, integrating PWAs much deeper into the Android operating system. Now, in addition to being displayed on the homescreen, PWAs are also displayed in the app launcher and Android settings alongside native apps, and can also open in response to users clicking links in Chrome or other apps.</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><br /></span></div><ol start=\"2\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Payments</span></div></li></ol><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Checkout can be a complicated process. To improve payment flows on the web, we launched a one-tap payment API called </span><a href=\"https://goo.gl/yWXhDq\" style=\"text-decoration: none;\"><span style=\"background-color: white; color: #1155cc; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">Payment Request</span></a><span style=\"background-color: white; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">. </span><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Using this API allows web apps to support credit cards and Google payment mechanisms such as Android Pay. We also just announced that it is now possible to integrate this API with </span><a href=\"https://goo.gl/A4BH49\" style=\"text-decoration: none;\"><span style=\"background-color: transparent; color: #1155cc; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">additional payment apps</span></a><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><br /></span></div><ol start=\"3\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Media Consumption</span></div></li></ol><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Over 70% of internet traffic is video. To allow great mobile web media experiences we have given the users more control over playback with the Media Session API, improved full screen playback with the Screen Orientation API, and we‚Äôre filling out features for offline with Background Fetch. To learn more, see our </span><a href=\"https://developers.google.com/web/fundamentals/media/mobile-web-video-playback\" style=\"text-decoration: none;\"><span style=\"background-color: transparent; color: #1155cc; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">mobile web media best practices</span></a><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> and see how the APIs can come together at our </span><a href=\"http://biograf-155113.appspot.com/\" style=\"text-decoration: none;\"><span style=\"background-color: transparent; color: #1155cc; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">PWA for Media demo</span></a><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Tooling</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">We‚Äôve also been working hard to improve and extend the set of tools that let you build engaging experiences on the web. </span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><a href=\"https://developers.google.com/web/tools/lighthouse/\" style=\"text-decoration: none;\"><span style=\"background-color: white; color: #1155cc; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">Lighthouse</span></a><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> is a new automated tool for measuring the quality of a web experience. It runs nearly 100 audits against your web app, checking everything from page performance, to byte efficiency, to accessibility, and gives you a summary score. New integration with Chrome's DevTools means you‚Äôll be able to run Lighthouse audits without leaving the browser.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><a href=\"https://www.polymer-project.org/2.0/start/\" style=\"text-decoration: none;\"><span style=\"background-color: transparent; color: #1155cc; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">Polymer 2.0</span></a><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> is the next major release of the Polymer library, re-built from the ground up to take advantage of the best new features of the modern web platform. This release uses new Web Component API‚Äôs that have shipped in Chrome and Safari. It‚Äôs completely modular and best of all - it‚Äôs now 10% faster and 80% smaller.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Chrome is committed to making sure that you can develop </span><span style=\"background-color: white; font-family: Arial; font-size: 13.3333px; white-space: pre-wrap;\">easily, engage with your users, and build a thriving business around the web. </span><span style=\"font-family: Arial; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;\">For the latest news, </span><a href=\"https://www.youtube.com/user/ChromeDevelopers?sub_confirmation=1\"><span style=\"background-color: white; color: #1155cc; font-family: Arial; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;\">subscribe</span></a><span style=\"color: #333333; font-family: Arial; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;\"> </span><span style=\"font-family: Arial; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;\">to our YouTube channel and follow us on Twitter </span><a href=\"https://twitter.com/chromiumdev\"><span style=\"color: #1155cc; font-family: Arial; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;\">@ChromiumDev</span></a><span style=\"font-family: Arial; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;\">.</span></div>", "title": "The Modern Mobile Web: State of the Union", "source_link": "http://blog.chromium.org/", "author_link": "https://plus.google.com/106190864297512596007", "author_name": "Chrome Blog", "source_type": "rss", "link": "http://blog.chromium.org/2017/05/the-modern-mobile-web-state-of-union.html", "published": "2017-05-18T18:01:00", "source_title": "Chromium Blog", "tags": "browsers,chromium,tech,web"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "ChromiumBlog", "description": "<span class=\"post-author\"><span id=\"docs-internal-guid-32c00318-1878-5e3b-ab17-e7c3ad7b1748\"></span></span><br /><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; font-family: Arial; font-size: 10pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Welcome to Google I/O 2017! Today at 4PM Pacific Daylight Time, </span><span style=\"background-color: transparent; font-family: Arial; font-size: 10pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Rahul Roy-chowdhury, VP Product Management for Chrome</span><span style=\"background-color: transparent; font-family: Arial; font-size: 10pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">, will be on stage at Google I/O discussing </span><a href=\"https://events.google.com/io/schedule/?section=may-17&amp;sid=aff68d97-f91f-4303-a1e4-c3549d59f907\" style=\"text-decoration: none;\"><span style=\"background-color: transparent; color: #1155cc; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">The Mobile Web: State of the Union</span></a><span style=\"background-color: transparent; font-family: Arial; font-size: 10pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">. </span><span style=\"background-color: white; font-family: Arial; font-size: 10pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Tune into the livestream below, and if you happen to be attending Google I/O, be sure to come to the Amphitheatre to see it live!</span></div><span class=\"post-author\"><br /></span><div class=\"separator\" style=\"clear: both; text-align: center;\"></div><span class=\"post-author\"><br /></span><span class=\"post-author\"><br /></span><span id=\"docs-internal-guid-32c00318-1878-8b90-eebc-34974c3faa0b\"><span style=\"font-family: Arial; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;\">Posted by Ryan Schoen, Product Manager</span></span>", "title": "Happening now: The Mobile Web State of the Union", "source_link": "http://blog.chromium.org/", "author_link": "https://plus.google.com/106190864297512596007", "author_name": "Chrome Blog", "source_type": "rss", "link": "http://blog.chromium.org/2017/05/happening-now-mobile-web-state-of-union.html", "published": "2017-05-17T22:58:00", "source_title": "Chromium Blog", "tags": "browsers,chromium,tech,web"}, {"picture": "//lh6.googleusercontent.com/-0grT98k644U/AAAAAAAAAAI/AAAAAAAAAME/LPkKwMg0oMQ/s512-c/photo.jpg", "source_name": "V8Blog", "description": "<div class=\"separator\" style=\"clear: both; text-align: center;\"></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://4.bp.blogspot.com/-euuGPd59YLI/WW8cZAehmOI/AAAAAAAACcw/UOkRoEr8Zec4Y0t9DhSwBiVALmqG76CsQCEwYBhgL/s1600/ignition.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"200\" src=\"https://4.bp.blogspot.com/-euuGPd59YLI/WW8cZAehmOI/AAAAAAAACcw/UOkRoEr8Zec4Y0t9DhSwBiVALmqG76CsQCEwYBhgL/s200/ignition.png\" width=\"200\" /></a><a href=\"https://4.bp.blogspot.com/-fMbVeVXWtKw/WW8cd9U40qI/AAAAAAAACc0/tXJwGx_efyQcPOCILjoHpM5fXY8eHM6DQCLcBGAs/s1600/turbofan.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"200\" src=\"https://4.bp.blogspot.com/-fMbVeVXWtKw/WW8cd9U40qI/AAAAAAAACc0/tXJwGx_efyQcPOCILjoHpM5fXY8eHM6DQCLcBGAs/s200/turbofan.png\" width=\"200\" /></a></div><br /><br />Today we are excited to announce the launch of a new JavaScript execution pipeline for V8 5.9 that will reach Chrome Stable in M59. With the new pipeline, we achieve big performance improvements and significant memory savings on real-world JavaScript applications. We‚Äôll discuss the numbers in more detail at the end of this post, but first let‚Äôs take a look at the pipeline itself.<br /><br />The new pipeline is built upon <a href=\"https://github.com/v8/v8/wiki/Interpreter\">Ignition</a>, V8‚Äôs interpreter, and <a href=\"https://github.com/v8/v8/wiki/TurboFan\">TurboFan</a>, V8‚Äôs newest optimizing compiler. These technologies <a href=\"https://v8project.blogspot.de/2015/07/digging-into-turbofan-jit.html\">should</a> <a href=\"https://v8project.blogspot.de/2016/08/firing-up-ignition-interpreter.html\">be</a> <a href=\"https://v8project.blogspot.de/2017/02/help-us-test-future-of-v8.html\">familiar</a> to those of you who have followed the V8 blog over the last few years, but the switch to the new pipeline marks a big new milestone for both.  <br /><br />For the first time, Ignition and TurboFan are used universally and exclusively for JavaScript execution in V8 5.9. Furthermore, starting with 5.9, Full-codegen and Crankshaft, the technologies that <a href=\"https://blog.chromium.org/2010/12/new-crankshaft-for-v8.html\">served V8 well since 2010</a>, are no longer used in V8 for JavaScript execution, since they no longer are able to keep pace with new JavaScript language features and the optimizations those features require. We plan to remove them completely very soon. That means that V8 will have an overall much simpler and more maintainable architecture going forward.<br /><br /><h2>A Long Journey</h2><br />The combined Ignition and TurboFan pipeline has been in development for almost 3¬Ω years. It represents the culmination of the collective insight that the V8 team has gleaned from measuring real-world JavaScript performance and carefully considering the shortcomings of Full-codegen and Crankshaft. It is a foundation with which we will be able to continue to optimize the entirety of the JavaScript language for years to come.  <br /><br />The TurboFan project originally started in late 2013 to address the shortcomings of Crankshaft. Crankshaft can only optimize a subset of the JavaScript language. For example, it was not designed to optimize JavaScript code using structured exception handling, i.e. code blocks demarcated by JavaScript‚Äôs <span>try</span>, <span>catch</span>, and <span>finally</span> keywords. It is difficult to add support for new language features in Crankshaft, since these features almost always require writing architecture-specific code for nine supported platforms. Furthermore, Crankshaft‚Äôs architecture is limited in the extent that it can generate optimal machine code. It can only squeeze so much performance out of JavaScript, despite requiring the V8 team to maintain more than ten thousand lines of code per chip architecture. <br /><br />TurboFan was designed from the beginning not only to optimize all of the language features found in the JavaScript standard at the time, ES5, but also all the future features planned for ES2015 and beyond. It introduces a layered compiler design that enables a clean separation between high-level and low-level compiler optimizations, making it easy to add new language features without modifying architecture-specific code. TurboFan adds an explicit instruction selection compilation phase that makes it possible to write far less architecture-specific code for each supported platform in the first place. With this new phase, architecture-specific code is written once and it rarely needs to be changed. These and other decisions lead to a more maintainable and extensible optimizing compiler for all of the architectures that V8 supports. <br /><br />The original motivation behind V8‚Äôs Ignition interpreter was to reduce memory consumption on mobile devices. Before Ignition, the code generated by V8‚Äôs Full-codegen baseline compiler typically occupied almost one third of the overall JavaScript heap in Chrome. That left less space for a web application‚Äôs actual data. When Ignition was enabled for Chrome M53 on Android devices with limited RAM, the memory footprint required for baseline, non-optimized JavaScript code shrank by a factor of nine on ARM64-based mobile devices. <br /><br />Later the V8 team took advantage of the fact that Ignition‚Äôs bytecode can be used to generate optimized machine code with TurboFan directly rather than having to re-compile from source code as Crankshaft did. Ignition‚Äôs bytecode provides a cleaner and less error-prone baseline execution model in V8, simplifying the deoptimization mechanism that is a key feature of V8‚Äôs <a href=\"https://en.wikipedia.org/wiki/Adaptive_optimization\">adaptive optimization</a>. Finally, since generating bytecode is faster than generating Full-codegen‚Äôs baseline compiled code, activating Ignition generally improves script startup times and in turn, web page loads. <br /><br />By coupling the design of Ignition and TurboFan closely, there are even more benefits to the overall architecture. For example, rather than writing Ignition‚Äôs high-performance bytecode handlers in hand-coded assembly, the V8 team instead uses TurboFan‚Äôs <a href=\"https://en.wikipedia.org/wiki/Intermediate_representation\">intermediate representation</a> to express the handlers‚Äô functionality and lets TurboFan do the optimization and final code generation for V8‚Äôs numerous supported platforms. This ensures Ignition performs well on all of V8‚Äôs supported chip architectures while simultaneously eliminating the burden of maintaining nine separate platform ports. <br /><br /><h2>Running the Numbers</h2><br />History aside, now let‚Äôs take a look at the new pipeline‚Äôs real-world performance and memory consumption. <br /><br />The V8 team continually monitors the performance of real-world use cases using the <a href=\"https://catapult.gsrc.io/telemetry\">Telemetry - Catapult</a> framework. <a href=\"https://v8project.blogspot.de/2016/12/how-v8-measures-real-world-performance.html\">Previously</a> in this blog we‚Äôve discussed why it‚Äôs so important to use the data from real-world tests to drive our performance optimization work and how we use <a href=\"https://github.com/chromium/web-page-replay\">WebPageReplay</a> together with Telemetry to do so. The switch to Ignition and TurboFan shows performance improvements in those real-world test cases. Specifically, the new pipeline results in significant speed-ups on user interaction story tests for well-known websites: <br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-cZH_R1DFF7I/WW8dNfQCpkI/AAAAAAAACc8/vGDD9oahzSQknhYUj15ce2kRmOyfQyb1gCLcBGAs/s1600/improvementsPerWebsite.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"240\" src=\"https://1.bp.blogspot.com/-cZH_R1DFF7I/WW8dNfQCpkI/AAAAAAAACc8/vGDD9oahzSQknhYUj15ce2kRmOyfQyb1gCLcBGAs/s640/improvementsPerWebsite.png\" width=\"640\" /></a></div><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"> </div><div style=\"text-align: center;\"><i>Reduction in time spent in V8 for user interaction benchmarks </i></div><div style=\"text-align: center;\"><br /></div>Although Speedometer is a synthetic benchmark, we‚Äôve previously uncovered that it does a better job of approximating the real-world workloads of modern JavaScript than other synthetic benchmarks. The switch to Ignition and TurboFan improves V8‚Äôs Speedometer score by 5%-10%, depending on platform and device.  <br /><br />The new pipeline also speeds up server-side JavaScript. <a href=\"https://github.com/acmeair/acmeair-nodejs\">AcmeAir</a>, a benchmark for Node.js that simulates the server backend implementation of a fictitious airline, runs more than 10% faster using V8 5.9. <br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-gDWWaYi0MdE/WW8dv1cdjBI/AAAAAAAACdA/s48LH0Fso9gAKNmSgvQUpEI8nz4d-V-_wCLcBGAs/s1600/benchmarkscores.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"394\" src=\"https://1.bp.blogspot.com/-gDWWaYi0MdE/WW8dv1cdjBI/AAAAAAAACdA/s48LH0Fso9gAKNmSgvQUpEI8nz4d-V-_wCLcBGAs/s640/benchmarkscores.png\" width=\"640\" /></a></div><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"></div><div style=\"text-align: center;\"><i>Improvements on Web and Node.js benchmarks</i></div><br />Ignition and TurboFan also reduce V8‚Äôs overall memory footprint. In Chrome M59, the new pipeline slims V8‚Äôs memory footprint on desktop and high-end mobile devices by 5-10%. This reduction is a result of bringing the Ignition memory savings that have been <a href=\"https://v8project.blogspot.de/2016/08/firing-up-ignition-interpreter.html\">previously covered</a> in this blog to all devices and platforms supported by V8.  <br /><br />These improvements are just the start. The new Ignition and TurboFan pipeline paves the way for further optimizations that will boost JavaScript performance and shrink V8‚Äôs footprint in both Chrome and in Node.js for years to come. We look forward to sharing those improvements with you as we roll them out to developers and users. Stay tuned.  <br /><br />Posted by the V8 team", "title": "Launching Ignition and TurboFan", "source_link": "http://v8project.blogspot.com/", "author_link": "https://plus.google.com/116464324413358956064", "author_name": "Daniel Clifford", "source_type": "rss", "link": "http://v8project.blogspot.com/2017/05/launching-ignition-and-turbofan.html", "published": "2017-05-15T17:18:00", "source_title": "V8 JavaScript Engine", "tags": "browsers,chromium,js,tech,web"}, {"source_name": "2ality", "description": "<p>This blog post shows how you can conditionally add elements inside Array literals and properties inside object literals.</p>\n\n<div><a href=\"http://2ality.com/2017/04/conditional-literal-entries.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/0s-8ocM-rSU\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "Conditionally adding entries inside Array and object literals", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/04/conditional-literal-entries.html", "author_link": "http://2ality.com/", "published": "2017-05-11T08:57:00", "source_title": "2ality feed"}, {"source_name": "2ality", "description": "<p>A proposed ‚Äúspec mode‚Äù for Babel makes transpiled ES modules more spec-compliant. That‚Äôs a crucial step in preparing for native ES modules. You‚Äôll also learn how ES modules and CommonJS modules will interoperate on Node.js and how far along ES module support is on browsers and Node.js.</p>\n\n<div><a href=\"http://2ality.com/2017/01/babel-esm-spec-mode.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/IotDCas7ln0\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "Making transpiled ES modules more spec-compliant", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/01/babel-esm-spec-mode.html", "author_link": "http://2ality.com/", "published": "2017-05-09T03:21:00", "source_title": "2ality feed"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "ChromiumBlog", "description": "<div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Security is critical to Chrome, and many features protect Chrome users as they browse the web. </span><a href=\"https://safebrowsing.google.com/\" style=\"text-decoration: none;\"><span>Google Safe Browsing</span></a><span> warns users away from websites known to be dangerous. Chrome‚Äôs </span><a href=\"https://www.google.com/googlebooks/chrome/big_26.html\" style=\"text-decoration: none;\"><span>sandbox</span></a><span> and multi-process architecture provide additional layers of defense by helping block malware installation and reducing the severity of vulnerabilities. In Chrome 56, we've added yet another layer of defense by fully isolating Chrome extension privileges from web pages. </span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Chrome has always kept extensions and web pages in different processes where possible, but sometimes extensions host web content in iframes. For example, an extension's options page may include social network buttons or ads. Until recently, these web iframes ran inside the extension's process. This is usually safe because security checks inside that process do not allow web iframes to use extension APIs. However, in rare cases malicious web iframes could exploit bugs to bypass these checks and use the same </span><a href=\"https://developer.chrome.com/extensions/api_index\" style=\"text-decoration: none;\"><span>privileged APIs</span></a><span> that are available to extensions, like </span><a href=\"https://developer.chrome.com/extensions/history\" style=\"text-decoration: none;\"><span>chrome.history</span></a><span>.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Chrome now uses </span><a href=\"http://www.chromium.org/developers/design-documents/oop-iframes\" style=\"text-decoration: none;\"><span>out-of-process iframes</span></a><span> to ensure that extension-hosted web iframes are never put into their parent extension process. Even if an extension's web iframe finds a Chrome bug and takes over its own web process, that process won't have access to extension APIs.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span><img height=\"347\" src=\"https://lh6.googleusercontent.com/xNGnFVZndH55aLLIG055aIxGDB1G7UGeYcPWzpbKWzWuU06w3cHc_OktskkNZDL2WhZnnJuikCQT0guh8UCQhZr3IhFGJwmA62RZCbRmjLNBSpJcwewbtjkPUuNtUbk9kBbM_kMQ\" width=\"624\" /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span><span style=\"font-size: 8pt; font-style: italic;\">With this launch, web iframes in extension pages now run in a separate process from the extension, adding an extra layer of protection to privileged APIs.</span></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Introducing out-of-process iframes will greatly strengthen Chrome's security model, though building them required a large change to Chrome's architecture affecting systems like painting, input events, and navigation. This launch is just the first phase of our </span><a href=\"http://www.chromium.org/developers/design-documents/site-isolation\" style=\"text-decoration: none;\"><span>Site Isolation</span></a><span> project, so stay tuned for even more security improvements that out-of-process iframes make possible.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><span id=\"docs-internal-guid-d1d003f6-d872-33a2-cfa6-617b5cf938aa\"></span><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Posted by Charlie Reis, Site Isolator</span></div>", "title": "Improving extension security with out-of-process iframes", "source_link": "http://blog.chromium.org/", "author_link": "https://plus.google.com/106190864297512596007", "author_name": "Chrome Blog", "source_type": "rss", "link": "http://blog.chromium.org/2017/05/improving-extension-security-with-out.html", "published": "2017-05-08T16:00:00", "source_title": "Chromium Blog", "tags": "browsers,chromium,tech,web"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "V8Blog", "description": "The team behind Atom, a text editor based on the Electron framework, recently published <a href=\"http://blog.atom.io/2017/04/18/improving-startup-time.html\">an article</a> detailing significant improvements to start-up time, owing big parts of the gains to the usage of V8's custom start-up snapshot. Awesome!<br /><br />Native <a href=\"https://electron.atom.io/\">Electron</a> apps, including Atom, leverage Chromium to display a GUI and Node.js as an execution environment, both of which respectively embed V8 to run JavaScript. This allows Electron apps to take advantage of V8 snapshots to quickly initialize a previously serialized heap for faster startup. Electron developers have even released <a href=\"https://github.com/atom/electron-link\">electron-link</a>, a convenience library for setting up this feature, which Atom heavily relies on for its performance optimizations.<br /><br />We <a href=\"https://v8project.blogspot.de/2015/09/custom-startup-snapshots.html\">announced</a> V8's support for custom start-up snapshot more than a year ago. With <span>v8::V8::CreateSnapshotDataBlob</span>, embedders can provide an additional script to customize a start-up snapshot. New contexts created from this snapshot are initialized as if the additional script has already been executed. As the Atom team has shown, using a custom start-up snapshot can significantly boost start-up performance.<br /><br />To quote the Atom article:<br /><blockquote class=\"tr_bq\">The tricky part of using this technology, however, is that the code is executed in a bare V8 context. In other words, it only allows us to run plain JavaScript code and does not provide access to native modules, Node/Electron APIs or DOM manipulation.</blockquote>To work around this restriction, electron-link goes great lengths to make sure native functions (backed by C++ functions) are not included in the snapshot, and are instead loaded lazily. V8's serializer simply does not know how to serialize these native functions. Instead, native functions are wrapped into helper functions that load them lazily at runtime.<br /><br />Since our original post about snapshots, the V8 team has continued developing the snapshot API and added many features and improvements. These features include support for serializing native functions. Provided that the backing C++ functions have been registered with V8, the serializer can now recognize and encode native functions for the deserializer to restore later. We‚Äôre happy to announce that the work-around in electron-link is <a href=\"https://github.com/atom/electron-link/issues/1\">no longer necessary</a>.<br /><br />One caveat remains: the serializer cannot directly capture state outside of V8, for example changes to the DOM in case of Atom. However, outside state directly attached to JavaScript objects via embedder fields (previously named \"internal fields\") can now be serialized and deserialized through a new callback API. With some work, this feature allows outside state to be put into the snapshot after all.<br /><br />Some other highlights include:<br /><br /><ul><li><span>FunctionTemplate</span> and <span>ObjectTemplate</span> objects can now be added and extracted from the snapshot, so that they do not have to be set up from scratch.</li><li>V8 can now run multiple scripts or apply any other modifications to the context before creating the snapshot, as opposed to only a single source string.</li><li>Multiple differently-configured contexts can now be included in the same start-up snapshot blob.</li></ul><div><br /></div>To make these features more accessible, we designed a new, more powerful API with <span>v8::SnapshotCreator</span>. The old API is now merely a wrapper around this underlying API. This is how <span>v8::V8::CreateSnapshotDataBlob</span> is implemented:<br /><pre><code>StartupData V8::CreateSnapshotDataBlob(const char* embedded_source) {<br />  StartupData result = {nullptr, 0};<br />  {<br />    SnapshotCreator snapshot_creator;<br />    // Obtain an isolate provided by SnapshotCreator.<br />    Isolate* isolate = snapshot_creator.GetIsolate();<br />    {<br />      HandleScope scope(isolate);<br />      // Create a new context and optionally run some script.<br />      Local context = Context::New(isolate);<br />      if (embedded_source != NULL &amp;&amp;<br />          !RunExtraCode(isolate, context, embedded_source, \"\")) {<br />        return result;<br />      }<br />      // Add the possibly customized context to the SnapshotCreator.<br />      snapshot_creator.SetDefaultContext(context);<br />    }<br />    // Use the SnapshotCreator to create the snapshot blob.<br />    result = snapshot_creator.CreateBlob(<br />        SnapshotCreator::FunctionCodeHandling::kClear);<br />  }<br />  return result;<br />}<br /></code><br /></pre>For more advanced code examples, take a look at these test cases:<br /><br /><ul><li><a href=\"https://github.com/v8/v8/blob/6b8f22bab3062f9c5d6bc5a0f8e178a04d32dcb6/test/cctest/test-serialize.cc#L2005\">How to include native functions</a></li><li><a href=\"https://github.com/v8/v8/blob/6b8f22bab3062f9c5d6bc5a0f8e178a04d32dcb6/test/cctest/test-serialize.cc#L2116\">Adding FunctionTemplate and ObjectTemplate and serializing embedder fields</a></li><li><a href=\"https://github.com/v8/v8/blob/6b8f22bab3062f9c5d6bc5a0f8e178a04d32dcb6/test/cctest/test-serialize.cc#L1878\">Multiple contexts</a></li></ul><div><br /></div>The new API is available in V8 version 5.7 and later. We hope that these new features will help embedders make even better use of custom start-up snapshot. If you have any questions, please reach out to our <a href=\"https://groups.google.com/d/forum/v8-users\">v8-users</a> mailing list.<br /><br />Posted by Yang Guo", "title": "Energizing Atom with V8's custom start-up snapshot", "source_link": "http://v8project.blogspot.com/", "author_link": "", "author_name": "Unknown", "source_type": "rss", "link": "http://v8project.blogspot.com/2017/05/energizing-atom-with-v8s-custom-start.html", "published": "2017-05-03T23:19:00", "source_title": "V8 JavaScript Engine", "tags": "browsers,chromium,js,tech,web"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "ChromiumBlog", "description": "<div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Unless otherwise noted, changes described below apply to the newest Chrome </span><a href=\"https://www.google.com/landing/chrome/beta/\" style=\"text-decoration: none;\"><span>Beta</span></a><span> channel release for Android, Chrome OS, Linux, Mac, and Windows.</span></div><h1 dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 6pt; margin-top: 20pt;\"><span>Headless Chromium</span></h1><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><a href=\"https://developers.google.com/web/updates/2017/04/headless-chrome\" style=\"text-decoration: none;\"><span>Headless Chromium</span></a><span> allows running Chromium in an </span><a href=\"https://chromium.googlesource.com/chromium/src/+/HEAD/headless/README.md\" style=\"text-decoration: none;\"><span>automated environment</span></a><span> without a user interface or peripherals. This enables use cases such as automating unit tests with&nbsp;</span><a href=\"http://www.seleniumhq.org/\" style=\"text-decoration: none;\"><span>Selenium</span></a><span> and converting a web page into a PDF. </span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><b id=\"docs-internal-guid-43839028-ca24-9e80-fd34-ca88545e8960\" style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Headless Chromium is powered by all the modern web platform features provided by Chromium and Blink. Support is now available on Mac and Linux, with a Windows implementation coming soon. </span></div><h1 dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 6pt; margin-top: 20pt;\"><span>Native notifications on macOS</span></h1><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Chrome has historically included its own notification system for web and extension developers to send notifications to users. In response to macOS introducing its own rich notification system, many users have asked for the two systems to be integrated. &nbsp;</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>In Chrome 59, when developers send notifications via the </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API/Using_the_Notifications_API\" style=\"text-decoration: none;\"><span>Notifications API</span></a><span> or </span><a href=\"https://developer.chrome.com/apps/notifications\" style=\"text-decoration: none;\"><span>chrome.notifications</span></a><span>, they will be shown directly by the macOS native notification system. This change improves the user experience, but some low-usage API features are now discouraged since they result in a degraded experience on macOS, as documented in the </span><a href=\"https://developers.google.com/web/updates/2017/04/native-mac-os-notifications\" style=\"text-decoration: none;\"><span>migration guide</span></a><span>.</span></div><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><img alt=\"TMPNOTIF.png\" src=\"https://lh3.googleusercontent.com/QxSKjOr7WVkpAYbVlmwm5Hm2LVhsM0_U9FkYP592A5JSqyLuobJCoVf7AbPntB6N3xaLy-Vdpd525_Euo_iDSeHNPDnCeZS9zbrFlfdCIaWxjN_u5xll4eoUUv0QZ_q47IU3MOad\" width=\"624\" /></span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span>Chrome notifications before and after integration with the native notification system.</span></div><b style=\"font-weight: normal;\"><br /></b><br /><h1 dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 6pt; margin-top: 20pt;\"><span>Service worker navigation preload</span></h1><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><a href=\"https://w3c.github.io/ServiceWorker/\" style=\"text-decoration: none;\"><span>Service Worker</span></a><span> </span><a href=\"https://developers.google.com/web/updates/2017/02/navigation-preload\" style=\"text-decoration: none;\"><span>navigation preload</span></a><span> API enables the browser to </span><a href=\"https://www.youtube.com/watch?v=icv_DpQLryE\" style=\"text-decoration: none;\"><span>preload navigation requests</span></a><span> while a service worker is starting up. These requests are started before executing the fetch event handler in the service worker intercepting the target URL. This gives the worker access to the </span><span>preload</span><span> response inside the fetch event handler, allowing the service worker to handle the navigation with minimal delay. </span></div><h1 dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 6pt; margin-top: 20pt;\"><span>Other features in this release</span></h1><ul style=\"margin-bottom: 0pt; margin-top: 0pt;\"><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;\"><span>Developers can now use </span><a href=\"https://html.spec.whatwg.org/multipage/embedded-content.html#dom-mediaerror-message\" style=\"text-decoration: none;\"><span>MediaError.message</span></a><span> to obtain greater detail about a </span><span>MediaError</span><span> produced by </span><span>&lt;audio&gt;</span><span> or </span><span>&lt;video&gt;</span><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><a href=\"https://streams.spec.whatwg.org/#ws-intro\" style=\"text-decoration: none;\"><span>WritableStreams</span></a><span> are now available as part of the </span><a href=\"https://streams.spec.whatwg.org/\" style=\"text-decoration: none;\"><span>Streams API</span></a><span> for processing streams of data, while providing a standard abstraction for writing streaming data to a sink with built-in </span><a href=\"https://streams.spec.whatwg.org/#backpressure\" style=\"text-decoration: none;\"><span>backpressure</span></a><span> and queuing. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><a href=\"https://streams.spec.whatwg.org/\" style=\"text-decoration: none;\"><span>Streams API</span></a><span> has been expanded with the ability to pipe between </span><a href=\"https://developer.mozilla.org/en-US/docs/ReadableStream\" style=\"text-decoration: none;\"><span>ReadableStreams</span></a><span> and</span><a href=\"https://streams.spec.whatwg.org/#ws-intro\" style=\"text-decoration: none;\"><span> </span><span>WritableStreams</span></a><span> via the </span><a href=\"https://streams.spec.whatwg.org/#rs-pipe-to\" style=\"text-decoration: none;\"><span>pipeTo()</span></a><span> and </span><a href=\"https://streams.spec.whatwg.org/#rs-pipe-through\" style=\"text-decoration: none;\"><span>pipeThrough()</span></a><span> methods, allowing easier consumption of streaming data.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Developers can now use the </span><a href=\"https://developers.google.com/web/updates/2017/04/getinstalledrelatedapps\" style=\"text-decoration: none;\"><span>getInstalledRelatedApps</span></a><span> function to smartly consolidate push notifications between related web and native apps by suggesting when and on which platform to offer them.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><a href=\"https://developers.google.com/web/updates/2016/12/imagecapture\" style=\"text-decoration: none;\"><span>Image Capture API</span></a><span> now allows </span><a href=\"https://github.com/w3c/mediacapture-image/blob/gh-pages/implementation-status.md\" style=\"text-decoration: none;\"><span>sites</span></a><span> to take higher resolution images than before, providing full control over camera settings such as zoom, ISO, and white balance.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>To provide enhanced privacy, CSS stylesheets can now specify their own </span><a href=\"https://www.w3.org/TR/referrer-policy/\" style=\"text-decoration: none;\"><span>referrer policy</span></a><span> via the HTTP header, rather than always inheriting the referrer policy of the document that originally referenced it.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>To avoid over-prompting users, Chrome will now </span><a href=\"https://www.chromestatus.com/feature/6443143280984064\" style=\"text-decoration: none;\"><span>temporarily</span></a><span> stop an origin from requesting a permission following the third dismissal of that permission request.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Touch_events\" style=\"text-decoration: none;\"><span>Touch events</span></a><span> are now aligned to </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\" style=\"text-decoration: none;\"><span>requestAnimationFrame</span></a><span>, ensuring that input is processed as part of the document lifecycle and creating a more efficient and adaptive input response.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The new </span><a href=\"https://w3c.github.io/webappsec-csp/#directive-worker-src\" style=\"text-decoration: none;\"><span>worker-src</span></a><span> Content Security Policy directive restricts which URLs may be loaded as a </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Worker\" style=\"text-decoration: none;\"><span>Worker</span></a><span>, </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker\" style=\"text-decoration: none;\"><span>SharedWorker</span></a><span>, or </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker\" style=\"text-decoration: none;\"><span>ServiceWorker</span></a><span>. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><span><span style=\"background-color: white; color: #212121; font-family: sans-serif; font-size: 13px; white-space: normal;\">The&nbsp;</span><a href=\"https://w3c.github.io/presentation-api/\" style=\"background-color: white; color: #7e57c2; font-family: sans-serif; font-size: 13px; white-space: normal;\" target=\"_blank\">Presentation Receiver API</a><span style=\"background-color: white; color: #212121; font-family: sans-serif; font-size: 13px; white-space: normal;\">&nbsp;is now available,&nbsp;enabling a web page to be&nbsp;</span><a href=\"https://googlechrome.github.io/samples/presentation-api/\" style=\"background-color: white; color: #7e57c2; font-family: sans-serif; font-size: 13px; white-space: normal;\" target=\"_blank\">presented</a><span style=\"background-color: white; color: #212121; font-family: sans-serif; font-size: 13px; white-space: normal;\">&nbsp;and developers to interact with the presenting web page.</span></span></li></ul><h1 dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 6pt; margin-top: 20pt;\"><span>Deprecations and interoperability improvements</span></h1><ul style=\"margin-bottom: 0pt; margin-top: 0pt;\"><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><span>&lt;dialog&gt;</span><span> element has changed from </span><span>display: inline</span><span> to </span><span>block</span><span> by default to better align with the </span><a href=\"https://html.spec.whatwg.org/multipage/rendering.html#flow-content-3\" style=\"text-decoration: none;\"><span>spec</span></a><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Following </span><a href=\"https://github.com/w3c/csswg-drafts/commit/2078b46218f7462735bb0b5107c9a3e84fb4c4b1\" style=\"text-decoration: none;\"><span>removal</span></a><span> from the </span><a href=\"https://www.w3.org/TR/css3-mediaqueries/\" style=\"text-decoration: none;\"><span>Media Queries</span></a><span> spec, support for </span><span>hover: on-demand</span><span> and </span><span>any-hover: on-demand</span><span> media queries have been removed. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>To better align with spec and help avoid race conditions, </span><a href=\"https://webaudio.github.io/web-audio-api/#widl-BaseAudioContext-decodeAudioData-Promise-AudioBuffer--ArrayBuffer-audioData-DecodeSuccessCallback-successCallback-DecodeErrorCallback-errorCallback\" style=\"text-decoration: none;\"><span>decodeAudioData</span></a><span> now detaches the given </span><span>ArrayBuffer</span><span> before decoding, removing all content from the object and making it unable to be reused or examined. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>To increase security, Chrome no longers supports requesting notification permission over HTTP. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><span>-internal-media-controls-cast-button</span><span> CSS selector has been removed in favor of the </span><a href=\"https://w3c.github.io/remote-playback/\" style=\"text-decoration: none;\"><span>Remote Playback API</span></a><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><span>-internal-media-controls-text-track-list*</span><span> CSS selectors have been removed in favor of custom-built video controls. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><span>SVGTests.requiredFeatures</span><span> attribute has been deprecated following its removal from the </span><a href=\"https://github.com/w3c/svgwg/commit/9a30d01f6410dc516c5f874d71e957230a3448cd\" style=\"text-decoration: none;\"><span>spec</span></a><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>initDeviceMotionEvent()</span><span> and </span><span>initDeviceOrientationEvent()</span><span> were removed in favor of </span><a href=\"http://deviceorientationevent/\" style=\"text-decoration: none;\"><span>DeviceOrientationEvent()</span></a><span> and &nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent\" style=\"text-decoration: none;\"><span>DeviceMotionEvent()</span></a><span>, following a spec trend of moving away from initialization functions and toward constructors. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>To preserve consistency across browsers, the </span><span>sample</span><span> property will now be included in a </span><a href=\"https://w3c.github.io/webappsec-csp/#deprecated-serialize-violation\" style=\"text-decoration: none;\"><span>violation</span></a><span> report (and associated </span><a href=\"https://w3c.github.io/webappsec-csp/#violation-events\" style=\"text-decoration: none;\"><span>SecurityPolicyViolationEvent</span></a><span> object) if a </span><span>report-sample</span><span> expression is present in the violated directive.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>To increase security, Chrome will now block requests for subresources that contain embedded credentials, and instead handle them as network errors. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>To increase security, Chrome will now block requests from HTTP/HTTPS documents to </span><span>ftp:</span><span> URLs. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>To preserve consistency across browsers, injecting JavaScript via AppleScript is longer supported in Chrome for Mac.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The ability to call </span><span>Notification.requestPermission()</span><span> from non-main frames has been deprecated to align the requirements for notification permission with requirements for push notifications, and ease friction for developers. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Support for Shared Dictionary Compression (SDCH) has been </span><a href=\"https://groups.google.com/a/chromium.org/forum/#!searchin/blink-dev/SDCH%7Csort:relevance/blink-dev/nQl0ORHy7sw/HNpR96sqAgAJ\" style=\"text-decoration: none;\"><span>disabled</span></a><span> until a stable API has been standardized.</span></div></li></ul><br /><span>Posted by Sami Kyostila, Headless Honcho</span>", "title": "Chrome 59 Beta: Headless Chromium, native notifications on macOS, and service worker navigation preload", "source_link": "http://blog.chromium.org/", "author_link": "https://plus.google.com/106190864297512596007", "author_name": "Chrome Blog", "source_type": "rss", "link": "http://blog.chromium.org/2017/05/chrome-59-beta-headless-chromium-native.html", "published": "2017-05-02T17:34:00", "source_title": "Chromium Blog", "tags": "browsers,chromium,tech,web"}, {"source_name": "2ality", "description": "<p>In this blog post, we look at the operation <code>flatMap</code>, which is similar to the Array method <code>map()</code>, but more versatile.</p>\n\n<div><a href=\"http://2ality.com/2017/04/flatmap.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/Wjo_dWeUdbc\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "Functional pattern: flatMap", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/04/flatmap.html", "author_link": "http://2ality.com/", "published": "2017-05-01T10:17:00", "source_title": "2ality feed"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "ChromiumBlog", "description": "In January, we <a href=\"https://security.googleblog.com/2016/09/moving-towards-more-secure-web.html\">began our quest</a> to improve how Chrome communicates the connection security of HTTP pages. Chrome now marks HTTP pages as ‚ÄúNot secure‚Äù if they have password or credit card fields. Beginning in October 2017, Chrome will show the ‚ÄúNot secure‚Äù warning in two additional situations: when users enter data on an HTTP page, and on all HTTP pages visited in <a href=\"https://support.google.com/chromebook/answer/95464?co=GENIE.Platform%3DDesktop&amp;hl=en\">Incognito mode</a>. <br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://4.bp.blogspot.com/-oL-YUq4Yhk8/WRswkQ1Pf6I/AAAAAAAATcE/jFL-dN_6ljkptLkm0xL-rhJ1CyIftq3GQCLcB/s1600/form-and-incognito-http-bad-verbose.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"240\" src=\"https://4.bp.blogspot.com/-oL-YUq4Yhk8/WRswkQ1Pf6I/AAAAAAAATcE/jFL-dN_6ljkptLkm0xL-rhJ1CyIftq3GQCLcB/s1600/form-and-incognito-http-bad-verbose.png\" width=\"640\" /></a></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><i>Treatment of HTTP pages in Chrome 62</i></div><br /><a href=\"https://www.chromium.org/Home/chromium-security/marking-http-as-non-secure\">Our plan</a> to label HTTP sites as non-secure is taking place in gradual steps, based on increasingly broad criteria. Since the <a href=\"https://security.googleblog.com/2016/09/moving-towards-more-secure-web.html\">change in Chrome 56</a>, there has been a 23% reduction in the fraction of navigations to HTTP pages with password or credit card forms on desktop, and we‚Äôre ready to take the next steps.<br /><br />Passwords and credit cards are not the only types of data that should be private. Any type of data that users type into websites should not be accessible to others on the network, so starting in version 62 Chrome will show the ‚ÄúNot secure‚Äù warning when users type data into HTTP sites.  <br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://4.bp.blogspot.com/-1L99l3pdGag/WRswkUSBnaI/AAAAAAAATcI/0BvkZzQKFa4cFDQhedMe6wbWz2zPDcpSACLcB/s1600/http-search.gif\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"234\" src=\"https://4.bp.blogspot.com/-1L99l3pdGag/WRswkUSBnaI/AAAAAAAATcI/0BvkZzQKFa4cFDQhedMe6wbWz2zPDcpSACLcB/s1600/http-search.gif\" width=\"320\" /></a></div><i></i><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><i>Treatment of HTTP pages with user-entered data in Chrome 62</i></div><br />When users browse Chrome with Incognito mode, they likely have increased expectations of privacy. However, HTTP browsing is not private to others on the network, so in version 62 Chrome will also warn users when visiting an HTTP page in Incognito mode.<br /><br />Eventually, we plan to show the ‚ÄúNot secure‚Äù warning for <b>all</b> HTTP pages, even outside Incognito mode. We will publish updates as we approach future releases, but don‚Äôt wait to get started moving to HTTPS! HTTPS is <a href=\"https://www.youtube.com/watch?v=e6DUrH56g14\">easier and cheaper than ever before</a>, and it enables both the best performance the web offers and powerful new features that are too sensitive for HTTP. Check out our <a href=\"https://developers.google.com/web/fundamentals/security/encrypt-in-transit/?hl=en\">set-up guides</a> to get started.<br /><br /><i>Posted by Emily Schechter, Chrome Security Team</i>", "title": "Next steps toward more connection security", "source_link": "http://blog.chromium.org/", "author_link": "https://plus.google.com/106190864297512596007", "author_name": "Chrome Blog", "source_type": "rss", "link": "http://blog.chromium.org/2017/04/next-steps-toward-more-connection.html", "published": "2017-04-27T17:17:00", "source_title": "Chromium Blog", "tags": "browsers,chromium,tech,web"}, {"picture": "//lh6.googleusercontent.com/-9zSEBEYfwaU/AAAAAAAAAAI/AAAAAAAAB9A/QYm9SICrReI/s512-c/photo.jpg", "source_name": "V8Blog", "description": "<span id=\"docs-internal-guid-266a9375-af5d-9dd0-2053-29390dd2e493\"></span><br /><i>Every six weeks, we create a new branch of V8 as part of our <a href=\"https://github.com/v8/v8/wiki/Release%20Process\">release process</a>. Each version is branched from V8‚Äôs git master immediately before a Chrome Beta milestone. Today we‚Äôre pleased to announce our newest branch, <a href=\"https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/5.9\">V8 version 5.9</a>, which will be in beta until it is released in coordination with Chrome 59 Stable in several weeks. V8 5.9 is filled with all sorts of developer-facing goodies. We‚Äôd like to give you a preview of some of the highlights in anticipation of the release.</i><br /><div><br /><h2>Ignition+Turbofan launched</h2>V8 5.9 is going to be the first version with Ignition+Turbofan enabled by default. In general, this switch should lead to lower memory consumption and faster startup for web application across the board, and we don‚Äôt expect stability or performance issues because the new pipeline has already undergone significant testing. However, <a href=\"https://bugs.chromium.org/p/v8/issues/entry?template=Bug%20report%20for%20the%20new%20pipeline\">give us a call</a> in case your code suddenly starts to significantly regress in performance.<br /><div><br />A dedicated blog post will delve deeper into this topic soon.<br /><br /><h2>WebAssembly TrapIf support on all platforms</h2>The <a href=\"https://chromium.googlesource.com/v8/v8/+/98fa962e5f342878109c26fd7190573082ac3abe\">TrapIf support</a> significantly reduced the time spent compiling code (~30 %).</div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://4.bp.blogspot.com/--X_EhZWIiVE/WQHjRSWAnuI/AAAAAAAACRE/PU7r3QZWvjMdBucKtXCu8rQ7_ha98TZ0gCLcB/s1600/chart.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"394\" src=\"https://4.bp.blogspot.com/--X_EhZWIiVE/WQHjRSWAnuI/AAAAAAAACRE/PU7r3QZWvjMdBucKtXCu8rQ7_ha98TZ0gCLcB/s640/chart.png\" width=\"640\" /></a></div><div><br /></div><h2>V8 API</h2>Please check out our <a href=\"http://bit.ly/v8-api-changes\">summary of API changes</a>. This document is regularly updated a few weeks after each major release. <br /><br />Developers with an <a href=\"https://github.com/v8/v8/wiki/Using%20Git\">active V8 checkout</a> can use '<span>git checkout -b 5.9 -t branch-heads/5.9</span>' to experiment with the new features in V8 5.9. Alternatively you can <a href=\"https://www.google.com/chrome/browser/beta.html\">subscribe to Chrome's Beta channel</a> and try the new features out yourself soon.<br /><div><br />Posted by the V8 team</div></div>", "title": "V8 Release 5.9", "source_link": "http://v8project.blogspot.com/", "author_link": "https://plus.google.com/112105245188441507084", "author_name": "Michael Hablich", "source_type": "rss", "link": "http://v8project.blogspot.com/2017/04/v8-release-59.html", "published": "2017-04-27T12:28:00", "source_title": "V8 JavaScript Engine", "tags": "browsers,chromium,js,tech,web"}, {"source_name": "2ality", "description": "<p>The new setup for the 2ality blog was literally years in the making: First, I experimented with various approaches. Then fine-tuning took a while, too. In this blog post I explain the details.</p>\n\n<div><a href=\"http://2ality.com/2017/03/static-site-generation.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/45ibgV2Kh8k\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "The new 2ality blog setup: statically generated via isomorphic React, hosted on Amazon S3", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/03/static-site-generation.html", "author_link": "http://2ality.com/", "published": "2017-04-22T21:43:00", "source_title": "2ality feed"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "ChromiumBlog", "description": "<div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>The V8 JavaScript engine is a cornerstone of fast browsing in Chrome. Over the course of the past year, the V8 team has developed a new method for measuring performance against snapshots of real web pages. Using insights from real-world measurements, the V8 team improved the speed of the average page load in Chrome by 10-20% over the course of the past year.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Historically, JavaScript engines such as V8 used benchmarks like Octane to improve the ‚Äúpeak‚Äù performance of JavaScript, or the performance of CPU-intensive script in </span><a href=\"https://en.wikipedia.org/wiki/Hot_spot_(computer_programming)\" style=\"text-decoration: none;\"><span>hot loops</span></a><span>. At the beginning of last year, the V8 team started to measure performance with higher fidelity by instrumenting snapshots of popular web pages such as Reddit, Twitter, Facebook, and Wikipedia. This analysis revealed that while peak performance benefits certain types of large web applications, browsing typical websites relies more on ‚Äústartup‚Äù performance, or the speed it takes to start running script. Using insights gleaned from this real-world performance data, the V8 team implemented optimizations which improved mean page load between Chrome 49 and Chrome 56 by 10-20%, depending on CPU architecture.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>The web page snapshots also enabled analysis of the differences between various benchmarks and real web workloads. Although no benchmark can be a representative proxy for all sites, the </span><a href=\"http://browserbench.org/Speedometer/\" style=\"text-decoration: none;\"><span>Speedometer benchmark</span></a><span> is an approximation of many sites due to its inclusion of real web frameworks including React, Angular, Ember, and jQuery. This similarity can be seen in the startup optimizations above, which also yielded a 25-35% improvement in Chrome‚Äôs Speedometer score. Conversely, comparing page snapshots to Octane revealed that Octane was a poor approximation of most websites. Given the </span><a href=\"https://arewefastyet.com/#machine=29&amp;view=breakdown&amp;suite=octane\" style=\"text-decoration: none;\"><span>plateau of Octane scores across web browsers</span></a><span> and the over-optimization of peak performance, we decided to </span><a href=\"https://v8project.blogspot.com/2017/04/retiring-octane.html\" style=\"text-decoration: none;\"><span>retire</span></a><span> the benchmark as a general-purpose measure of real-world JavaScript performance.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><img height=\"284\" src=\"https://lh3.googleusercontent.com/jKkzIw-KViX-5TzyXy64YhJ6hR1wR71g9XuDX-2uI7IoTT9lnkAJvUdm04TA0BafidGZMu6uGANzSyiGrcqmfQ2NteMXOGo5oZZffcQDosGhf4N3ivWNfyjQrmU9Ls4SMVhcp_eN\" width=\"624\" /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span>V8 performance optimizations improved Chrome's Speedometer score by 25-35% over the past year</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Going forward, we plan to ship more JavaScript performance improvements for new patterns of script appearing on the web, including modern libraries, </span><a href=\"http://stateofjs.com/2016/frontend/\" style=\"text-decoration: none;\"><span>frameworks</span></a><span>, and ES2015+ </span><a href=\"https://v8project.blogspot.com/2017/02/high-performance-es2015-and-beyond.html\" style=\"text-decoration: none;\"><span>language features</span></a><span>. By measuring real-world websites rather than traditional benchmarks, we can better optimize JavaScript patterns that matter most to users and developers. Stay tuned for updates about our new engine architecture, designed for real-world performance.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><span id=\"docs-internal-guid-dd272a52-636f-a81b-4644-51dd999319b1\"></span><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Posted by Seth Thompson, V8 Track Commentator</span></div></div>", "title": "Real-world JavaScript performance", "source_link": "http://blog.chromium.org/", "author_link": "https://plus.google.com/106190864297512596007", "author_name": "Chrome Blog", "source_type": "rss", "link": "http://blog.chromium.org/2017/04/real-world-javascript-performance.html", "published": "2017-04-12T18:40:00", "source_title": "Chromium Blog", "tags": "browsers,chromium,tech,web"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "V8Blog", "description": "<h2>The genesis of Octane</h2>The history of JavaScript benchmarks is a story of constant evolution. As the web expanded from simple documents to dynamic client-side applications, new JavaScript benchmarks were created to measure workloads that became important for new use cases. This constant change has given individual benchmarks finite lifespans. As web browser and virtual machine (VM) implementations begin to over-optimize for specific test cases, benchmarks themselves cease to become effective proxies for their original use cases. One of the first JavaScript benchmarks, <a href=\"https://webkit.org/perf/sunspider/sunspider.html\">SunSpider</a>, provided early incentives for shipping fast optimizing compilers. However, as VM engineers uncovered the <a href=\"https://blog.mozilla.org/nnethercote/2014/06/16/a-browser-benchmarking-manifesto/\">limitations of microbenchmarks</a> and found new ways to <a href=\"http://benediktmeurer.de/2016/12/16/the-truth-about-traditional-javascript-benchmarks/#the-notorious-sunspider-examples\">optimize</a> <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=787601\">around</a> SunSpider‚Äôs <a href=\"https://bugs.webkit.org/show_bug.cgi?id=63864\">limitations</a>, the browser community <a href=\"https://trac.webkit.org/changeset/187526/webkit\">retired</a> SunSpider as a recommended benchmark.<br /><br />Designed to mitigate some of the weaknesses of early microbenchmarks, the <a href=\"https://developers.google.com/octane/\">Octane benchmark suite</a> was first released in 2012. It evolved from an earlier set of simple <a href=\"http://www.netchain.com/Tools/v8/\">V8 test cases</a> and became a common benchmark for general web performance. Octane consists of 17 different tests, which were designed to cover a variety of different workloads, ranging from Martin Richards‚Äô kernel simulation test to a version of <a href=\"http://www.typescriptlang.org/\">Microsoft‚Äôs TypeScript compiler</a> compiling itself. The contents of Octane represented the prevailing wisdom around measuring JavaScript performance at the time of its creation.<br /><br /><h2>Diminishing returns and over-optimization</h2>In the first few years after its release, Octane provided a unique value to the JavaScript VM ecosystem. It allowed engines, including V8, to optimize their performance for a class of applications that stressed peak performance. These CPU-intensive workloads were initially underserviced by VM implementations. Octane helped engine developers deliver optimizations that allowed computationally-heavy applications to reach speeds that made JavaScript a viable alternative to C++ or Java. In addition, Octane drove improvements in garbage collection which helped web browsers avoid long or unpredictable pauses.<br /><br />By 2015, however, most JavaScript implementations had implemented the compiler optimizations needed to achieve high scores on Octane. Striving for even higher benchmark scores on Octane translated into increasingly-marginal improvements in the performance of real web pages. Investigations into the execution profile of running <a href=\"https://v8project.blogspot.com/2016/12/how-v8-measures-real-world-performance.html\">Octane versus loading common websites</a> (such as Facebook, Twitter, or Wikipedia) revealed that the benchmark doesn‚Äôt exercise V8‚Äôs <a href=\"https://medium.com/dev-channel/javascript-start-up-performance-69200f43b201#.7v8b4jylg\">parser</a> or the browser <a href=\"https://medium.com/reloading/toward-sustainable-loading-4760957ee46f#.muk9kzxmb\">loading stack</a> the way real-world code does. Moreover, the style of Octane‚Äôs JavaScript doesn‚Äôt match the idioms and patterns employed by most modern frameworks and libraries (not to mention transpiled code or newer ES2015+ language features). This means that using Octane to measure V8 performance didn‚Äôt capture important use cases for the modern web, such as loading frameworks quickly, supporting large applications with new patterns of state management, or ensuring that ES2015+ features <a href=\"https://v8project.blogspot.com/2017/02/high-performance-es2015-and-beyond.html\">are as fast as their ES5 equivalents</a>.<br /><br />In addition, we began to notice that JavaScript optimizations which eked out higher Octane scores often had a detrimental effect on real-world scenarios. Octane encourages aggressive inlining to minimize the overhead of function calls, but inlining strategies that are tailored to Octane have led to regressions from increased compilation costs and higher memory usage in real-world use cases. Even when an optimization may be genuinely useful in the real-world, as is the case with <a href=\"http://dl.acm.org/citation.cfm?id=2754181\">dynamic pretenuring</a>, chasing higher Octane scores can result in developing overly-specific heuristics which have little effect or even degrade performance in more generic cases. We found that Octane-derived pretenuring heuristics led to performance degradations in <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=3665\">modern frameworks such as Ember</a>. The `instanceof` operator was another example of an optimization tailored to a narrow set of Octane-specific cases that led to <a href=\"https://github.com/nodejs/node/issues/9634\">significant regressions in Node.js applications</a>.<br /><br />Another problem is that over time, small bugs in Octane become a target for optimizations themselves. For example, in the Box2DWeb benchmark, taking advantage of <a href=\"http://crrev.com/1355113002\">a bug</a> where two objects were compared using the `&lt;` and `&gt;=` operators gave a ~15% performance boost on Octane. Unfortunately, this optimization had no effect in the real world and complicates more general types of comparison optimizations. Octane sometimes even negatively penalizes real-world optimizations: engineers working on other VMs <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1162272\">have noticed</a> that Octane seems to penalize lazy parsing, a technique that helps most real websites load faster given the amount of dead code frequently found in the wild.<br /><br /><h2>Beyond Octane and other synthetic benchmarks</h2>These examples are just some of the many optimizations which increased Octane scores to the detriment of running real websites. Unfortunately, similar issues exist in other static or synthetic benchmarks, including Kraken and JetStream. Simply put, such benchmarks are insufficient methods of measuring real-world speed and create incentives for VM engineers to over-optimize narrow use cases and under-optimize generic cases, slowing down JavaScript code in the wild.<br /><br />Given the plateau in scores across most JS VMs and the increasing conflict between optimizing for specific Octane benchmarks rather than implementing speedups for a broader range of real-world code, we believe that it is time to retire Octane as a recommended benchmark.<br /><br />Octane enabled the JS ecosystem to make large gains in computationally-expensive JavaScript. The next frontier, however, is improving the performance of <a href=\"https://v8project.blogspot.de/2016/12/how-v8-measures-real-world-performance.html\">real web pages</a>, modern libraries, <a href=\"http://stateofjs.com/2016/frontend/\">frameworks</a>, ES2015+ <a href=\"https://v8project.blogspot.com/2017/02/high-performance-es2015-and-beyond.html\">language features</a>, new patterns of <a href=\"http://redux.js.org/\">state management</a>, <a href=\"https://facebook.github.io/immutable-js/\">immutable object allocation</a>, and <a href=\"https://webpack.github.io/\">module</a> <a href=\"http://browserify.org/\">bundling</a>. Since V8 runs in many environments, including server side in Node.js, we are also investing time in understanding real-world Node applications and measuring server-side JavaScript performance through workloads such as <a href=\"https://github.com/acmeair/acmeair-nodejs\">AcmeAir</a>.<br /><br />Check back here for more posts about <a href=\"https://v8project.blogspot.de/2016/12/how-v8-measures-real-world-performance.html\">improvements in our measurement methodology</a> and <a href=\"https://v8project.blogspot.com/2016/10/fall-cleaning-optimizing-v8-memory.html\">new workloads</a> that better represent real-world performance. We are excited to continue pursuing the performance that matters most to users and developers!<br /><br />Posted by the V8 team", "title": "Retiring Octane", "source_link": "http://v8project.blogspot.com/", "author_link": "", "author_name": "Unknown", "source_type": "rss", "link": "http://v8project.blogspot.com/2017/04/retiring-octane.html", "published": "2017-04-12T17:49:00", "source_title": "V8 JavaScript Engine", "tags": "browsers,chromium,js,tech,web"}, {"source_name": "2ality", "description": "<p><a href=\"https://github.com/tootsuite/mastodon\">Mastodon</a> is like Twitter, but federated and based on open protocols. This blog post explains what that means and what it is like to use Mastodon. It also gives tips for using it.</p>\n\n<div><a href=\"http://2ality.com/2017/04/mastodon.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/v9Wfe0tXnZI\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "Mastodon: like Twitter, but open and federated", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/04/mastodon.html", "author_link": "http://2ality.com/", "published": "2017-04-12T10:50:00", "source_title": "2ality feed"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "ChromiumBlog", "description": "<div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>One of the strengths of the web is progressive loading, which means that there is no install step and users can start consuming content almost immediately while the site keeps loading. But progressive loading can also result in annoyances, such as an unexpected page jump when offscreen content loads and pushes down what‚Äôs currently on the screen. This can be even worse on mobile devices, since smaller screens mean more content is offscreen and page jumps are more likely.</span><br /><span><br /></span></div><span id=\"docs-internal-guid-d83be5ab-5c31-5bc4-8b97-484496c250cd\"><br /></span><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Since its early days, Chrome has taken a stand against bad or abusive content. For instance, </span><a href=\"https://www.google.com/intl/en/chrome/browser/features.html#security\" style=\"text-decoration: none;\"><span>Safe Browsing</span></a><span> warns users before they visit malicious websites, and </span><a href=\"https://chrome.googleblog.com/2014/01/everyone-can-now-track-down-noisy-tabs.html\" style=\"text-decoration: none;\"><span>visual indicators on tabs</span></a><span> allow our users to quickly track down the source of unexpected noise. Similar to other features designed to protect our users from bad experiences, starting in version 56 Chrome prevents these unexpected page jumps with a new feature called scroll anchoring. This feature works by locking the scroll position on an on-screen element to keep our users in the same spot even as offscreen content continues to load.</span></div></div><b style=\"font-weight: normal;\"><br /></b><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><a href=\"https://youtu.be/c6PmTmFB-h4\" style=\"text-decoration: none;\"><span></span></a></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span>Side by side comparison </span><span>of a web page with scroll anchoring disabled (left) and enabled (right).</span></div><b style=\"font-weight: normal;\"><br /></b><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Due to the expressiveness of the web, there might be some content for which scroll anchoring is either unwanted or misbehaving. For this reason, this feature ships alongside the </span><a href=\"https://wicg.github.io/ScrollAnchoring/#exclusion-api\" style=\"text-decoration: none;\"><span>‚Äùoverflow-anchor‚Äù CSS property</span></a><span> to override the functionality. To further minimize potential issues, scroll anchoring is disabled on complex interactive layouts via </span><a href=\"https://wicg.github.io/ScrollAnchoring/#suppression-trigger\" style=\"text-decoration: none;\"><span>suppression triggers</span></a><span>, and on back/forward navigations to allow for scroll restoration.</span></div><span id=\"docs-internal-guid-d83be5ab-5c31-8c19-6abd-583aa6691109\"><br /></span><br /><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Today, scroll anchoring is preventing about three page jumps per page-view, but with your help it could be even better. Get involved by participating in the </span><a href=\"https://github.com/WICG/ScrollAnchoring\" style=\"text-decoration: none;\"><span>scroll anchoring Web Platform Incubator Community Group</span></a><span>, submitting feedback via </span><a href=\"http://g.co/reportbadreflow\" style=\"text-decoration: none;\"><span>g.co/reportbadreflow</span></a><span>, and designing your websites or services with a no-reflow mindset.</span><br /><span><br /></span></div></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: left;\"><span>Posted by Steve Kobes, ‚ÄúThe Unbouncer‚Äù</span></div><br />", "title": "Scroll anchoring for web developers", "source_link": "http://blog.chromium.org/", "author_link": "https://plus.google.com/106190864297512596007", "author_name": "Chrome Blog", "source_type": "rss", "link": "http://blog.chromium.org/2017/04/scroll-anchoring-for-web-developers.html", "published": "2017-04-11T15:00:00", "source_title": "Chromium Blog", "tags": "browsers,chromium,tech,web"}, {"source_name": "2ality", "description": "<p>The ECMAScript proposal ‚Äú<a href=\"https://github.com/tc39/ecmascript_sharedmem\">Shared memory and atomics</a>‚Äù by Lars T. Hansen has reached stage 4 this week and will be part of ECMAScript 2017. It introduces a new constructor <code>SharedArrayBuffer</code> and a namespace object <code>Atomics</code> with helper functions. This blog post explains the details.</p>\n\n<div><a href=\"http://2ality.com/2017/01/shared-array-buffer.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/G9cCqrZEkYw\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "ES proposal: Shared memory and atomics", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/01/shared-array-buffer.html", "author_link": "http://2ality.com/", "published": "2017-04-06T11:54:00", "source_title": "2ality feed"}, {"source_name": "2ality", "description": "<p>In this blog post, we explore how arbitrary ASCII text can be encoded as Unicode clock faces:</p>\n<pre><code class=\"language-repl\">&gt; clocksToPlain('üïîüïòüïñüïïüïñüïúüïñüïúüïñüïüüïíüïë')\n'Hello!'\n</code></pre>\n<p>I‚Äôm explaining ideas by <a href=\"https://twitter.com/maggiepint/status/841900962939842560\">Maggie Pint</a> and <a href=\"https://twitter.com/FakeUnicode/status/841901807504891905\">@FakeUnicode</a>.</p>\n\n<div><a href=\"http://2ality.com/2017/03/text-as-clocks.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/_C46schFD1c\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "Exercise: text as Unicode clock faces", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/03/text-as-clocks.html", "author_link": "http://2ality.com/", "published": "2017-04-06T11:46:00", "source_title": "2ality feed"}, {"source_name": "2ality", "description": "<p>Even without ES modules, ES6 is a joy to use in Node.js. Two ES6 features eliminate some of the redundancy of CommonJS syntax.</p>\n\n<div><a href=\"http://2ality.com/2017/03/es6-commonjs.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/9OEc7drvNEw\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "Two ES6 features that help with CommonJS modules", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/03/es6-commonjs.html", "author_link": "http://2ality.com/", "published": "2017-03-26T21:15:00", "source_title": "2ality feed"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "ChromiumBlog", "description": "<div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Unless otherwise noted, changes described below apply to the newest Chrome </span><a href=\"https://www.google.com/landing/chrome/beta/\" style=\"text-decoration: none;\"><span>Beta</span></a><span> channel release for Android, Chrome OS, Linux, Mac, and Windows.</span></div><h1 dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 6pt; margin-top: 20pt;\"><span>IndexedDB 2.0</span></h1><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><a href=\"https://hacks.mozilla.org/2016/10/whats-new-in-indexeddb-2-0/\" style=\"text-decoration: none;\"><span>IndexedDB 2.0</span></a><span> standard is now fully supported in Chrome, making it simpler to work with large data sets in the browser. IDB 2.0 features new schema management, bulk action methods, and more standardized handling of failures.</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><b id=\"docs-internal-guid-27abe6e8-f1de-07f0-68fa-7097348c6e59\" style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The structure of a site‚Äôs database has large performance impacts and can be difficult to change. To simplify updates, </span><a href=\"https://w3c.github.io/IndexedDB/#dom-idbobjectstore-name\" style=\"text-decoration: none;\"><span>object stores</span></a><span> and </span><a href=\"https://w3c.github.io/IndexedDB/#index-construct\" style=\"text-decoration: none;\"><span>indexes</span></a><span> can now be renamed in-place after a refactoring. Sites can also use more natural keys without worrying about a performance penalty thanks to </span><a href=\"https://w3c.github.io/IndexedDB/#key-construct\" style=\"text-decoration: none;\"><span>binary keys</span></a><span>, which allow compact representations for custom keys.</span></div><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Data retrieval is easier with the </span><a href=\"https://w3c.github.io/IndexedDB/#dom-idbobjectstore-getkey\" style=\"text-decoration: none;\"><span>getKey()</span></a><span> and </span><a href=\"https://w3c.github.io/IndexedDB/#dom-idbobjectstore-openkeycursor\" style=\"text-decoration: none;\"><span>openKeyCursor()</span></a><span> methods, which also provide better performance when only a database key is needed. The new </span><a href=\"https://w3c.github.io/IndexedDB/#dom-idbcursor-continueprimarykey\" style=\"text-decoration: none;\"><span>continuePrimaryKey()</span></a><span> cursor method makes it easier to divide large data access across transactions and page loads without worrying about duplicate primary keys. The </span><a href=\"https://w3c.github.io/IndexedDB/#dom-idbobjectstore-getall\" style=\"text-decoration: none;\"><span>getAll()</span></a><span> and </span><a href=\"https://w3c.github.io/IndexedDB/#dom-idbobjectstore-getallkeys\" style=\"text-decoration: none;\"><span>getAllKeys()</span></a><span> methods allow bulk recovery of entire datasets without the need for a cursor.</span></div><h1 dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 6pt; margin-top: 20pt;\"><span>An improvement to </span><span>iframe</span><span> navigation</span></h1><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Third-party content, such as advertising, that automatically redirects the page can annoy users and create security issues. Because of this, developers are able to put third-party content inside sandboxed </span><span style=\"background-color: transparent; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">iframes</span><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> to prevent this behavior. However, in some cases this type of content needs to navigate the top-level page when clicked, like a standard advertisement.</span></div><span id=\"docs-internal-guid-e165d685-f26a-cca7-1215-5fbfcffbf945\"><br /><span style=\"font-family: Arial; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;\">To address this, Chrome 58 now supports the new </span><span>iframe</span><span style=\"font-family: Arial; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;\"> sandbox keyword </span><a href=\"https://html.spec.whatwg.org/multipage/browsers.html#attr-iframe-sandbox-allow-top-navigation-by-user-activation\" style=\"text-decoration: none;\"><span>allow-top-navigation-by-user-activation</span></a><span style=\"font-family: Arial; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;\">. This keyword gives sandboxed </span><span>iframes</span><span style=\"font-family: Arial; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;\"> the ability to navigate the top-level page when triggered by user interaction, while still blocking auto-redirects.</span></span></div><h1 dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 6pt; margin-top: 20pt;\"><span>Immersive full screen for PWAs </span></h1><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>When </span><a href=\"https://developers.google.com/web/progressive-web-apps/\" style=\"text-decoration: none;\"><span>Progressive Web Apps</span></a><span> (PWAs) are launched from the Android Home screen, they launch in a standalone app-like mode that hides the </span><a href=\"https://www.chromium.org/user-experience/omnibox\" style=\"text-decoration: none;\"><span>omnibox</span></a><span>. This helps create an engaging user experience, and frees up screen space for content. However, for even more immersive experiences like games, video players, or other rich content, other mobile UI elements such as </span><a href=\"https://developer.android.com/design/handhelds/index.html#system-bars\" style=\"text-decoration: none;\"><span>the system bars</span></a><span> can still be a distraction.</span></div><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Now PWAs can provide a fully immersive experience by setting </span><span>display: fullscreen</span><span> in their </span><a href=\"https://developers.google.com/web/fundamentals/engage-and-retain/web-app-manifest/\" style=\"text-decoration: none;\"><span>web app manifest</span></a><span>, which hides non-app UI when the site is launched from the home screen.</span></div><b style=\"font-weight: normal;\"><br /></b><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://4.bp.blogspot.com/-hj6-vayhlGs/WNFg_rp3OsI/AAAAAAAAAy4/jNnAIwFvsZMRmLmd2VHU-69gE40iy6G0wCLcB/s1600/Screen%2BShot%2B2017-03-21%2Bat%2B5.20.36%2BPM.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" src=\"https://4.bp.blogspot.com/-hj6-vayhlGs/WNFg_rp3OsI/AAAAAAAAAy4/jNnAIwFvsZMRmLmd2VHU-69gE40iy6G0wCLcB/s640/Screen%2BShot%2B2017-03-21%2Bat%2B5.20.36%2BPM.png\" width=\"640\" /></a></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span> &nbsp;&nbsp;&nbsp;&nbsp;</span><span> &nbsp;&nbsp;&nbsp;&nbsp;</span><span>A PWA launched from the home screen (left), launched from the home screen in </span><span>standalone</span><span> mode (middle), and launched from the home screen in </span><span>fullscreen</span><span> mode (right).</span></div><h1 dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 6pt; margin-top: 20pt;\"><span>Other features in this release</span></h1><ul style=\"margin-bottom: 0pt; margin-top: 0pt;\"><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Worker\" style=\"text-decoration: none;\"><span>Workers</span></a><span> and </span><a href=\"https://developer.mozilla.org/en/docs/Web/API/SharedWorker\" style=\"text-decoration: none;\"><span>SharedWorkers</span></a><span> can now be created using </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\" style=\"text-decoration: none;\"><span>data:</span></a><span> URLs, making development with Workers more secure by giving them an </span><a href=\"https://html.spec.whatwg.org/multipage/browsers.html#concept-origin-opaque\" style=\"text-decoration: none;\"><span>opaque origin</span></a><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><a href=\"https://w3c.github.io/pointerevents/extension.html\" style=\"text-decoration: none;\"><span>PointerEvents.getCoalescedEvents()</span></a><span> allows developers to access all input events since the last time a </span><span>PointerEvent</span><span> was delivered, making it easier for drawing apps to create smoother curves using a precise history of points.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Developers can now </span><a href=\"https://googlechrome.github.io/samples/media/controlslist.html\" style=\"text-decoration: none;\"><span>customize</span></a><span> Chrome‚Äôs native media controls such as the </span><span>download</span><span>, </span><span>fullscreen</span><span> and </span><span>remoteplayback</span><span> buttons using the new </span><a href=\"https://github.com/WICG/controls-list/blob/gh-pages/explainer.md\" style=\"text-decoration: none;\"><span>ControlsList API</span></a><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>On Chrome for Android, sites installed using the </span><a href=\"https://blog.chromium.org/2017/02/integrating-progressive-web-apps-deeply.html\" style=\"text-decoration: none;\"><span>improved Add to Homescreen flow</span></a><span> will be allowed to autoplay audio and video served from origins included in the manifest‚Äôs scope without restrictions.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>On Chrome for Android, videos using the </span><span>autoplay</span><span> attribute will be paused when offscreen and resumed when back in view to preserve consistency across browsers.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Sites can now </span><a href=\"https://googlechrome.github.io/samples/media/color-gamut-media-query.html\" style=\"text-decoration: none;\"><span>access</span></a><span> the approximate range of colors supported by Chrome and output devices using the </span><span>color-gamut</span><span> Media Query.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Instead of manually resetting multiple layout properties like </span><span>float</span><span> and </span><span>clear</span><span>, sites can now add a </span><a href=\"https://codepen.io/rachelandrew/pen/RKgevX\" style=\"text-decoration: none;\"><span>new block-formatting context</span></a><span> using </span><span>display: flow-root</span><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>To improve JavaScript parsing time, </span><span>SVGPoint</span><span>, </span><span>SVGRect</span><span>, and </span><span>SVGMatrix</span><span> have been transferred to </span><a href=\"https://hacks.mozilla.org/2014/03/introducing-the-getboxquads-api/\" style=\"text-decoration: none;\"><span>new interfaces</span></a><span> outside of </span><a href=\"https://www.w3.org/TR/geometry-1/\" style=\"text-decoration: none;\"><span>Geometry</span></a><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Using </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Selection/removeRange\" style=\"text-decoration: none;\"><span>removeRange()</span></a><span>, a new </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Selection_API\" style=\"text-decoration: none;\"><span>Selection API</span></a><span> function, developers can now programmatically remove a specified text </span><span>Range</span><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><a href=\"https://w3c.github.io/pointerevents/#dom-pointerevent-tangentialpressure\" style=\"text-decoration: none;\"><span>PointerEvent.tangentialPressure</span></a><span> and </span><a href=\"https://w3c.github.io/pointerevents/#dom-pointerevent-twist\" style=\"text-decoration: none;\"><span>PointerEvent.twist</span></a><span> attributes are now supported on Chrome for Mac to provide more information to stylus devices and painting apps.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>To simplify developer experience, trailing commas are now </span><a href=\"https://github.com/tc39/proposal-trailing-function-commas\" style=\"text-decoration: none;\"><span>allowed</span></a><span> in JavaScript for formal parameter and argument lists.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The WebAudio API‚Äôs new </span><a href=\"http://webaudio.github.io/web-audio-api/#idl-def-AudioContextPlaybackCategory\" style=\"text-decoration: none;\"><span>playback</span></a><span> </span><a href=\"https://webaudio.github.io/web-audio-api/#BaseAudioContext\" style=\"text-decoration: none;\"><span>AudioContextLatencyCategory</span></a><span> enables the developer to easily make conscious tradeoffs between latency, power, and CPU efficiency.</span></div></li></ul><h1 dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 6pt; margin-top: 20pt;\"><span>Deprecations and interoperability improvements</span></h1><ul style=\"margin-bottom: 0pt; margin-top: 0pt;\"><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Apple-interchange-newline</span><span>, </span><span>Apple-converted-space</span><span>, </span><span>Apple-paste-as-quotation</span><span>, </span><span>Apple-style-span</span><span>, and </span><span>Apple-tab-span</span><span> have been deprecated as they are non-standard CSS classes.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><a href=\"https://msdn.microsoft.com/en-us/library/ms534711(v=vs.85).aspx\" style=\"text-decoration: none;\"><span>usemap</span></a><span> attributes now use case-sensitive matching rather than </span><a href=\"https://w3c.github.io/html/infrastructure.html#compatibility-caseless\" style=\"text-decoration: none;\"><span>compatibility caseless</span></a><span> to better align with spec. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Sites must now use HTTPS when requesting notification permissions or creating non-persistent local notifications with the </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API\" style=\"text-decoration: none;\"><span>Notifications API</span></a><span>, in accordance with Chrome's </span><a href=\"https://sites.google.com/a/chromium.org/dev/Home/chromium-security/deprecating-powerful-features-on-insecure-origins\" style=\"text-decoration: none;\"><span>policy</span></a><span> around powerful features.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>To better align with spec, </span><a href=\"https://dom.spec.whatwg.org/#dom-event-cancelbubble\" style=\"text-decoration: none;\"><span>cancelBubble</span></a><span> is now considered an alias to </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation\" style=\"text-decoration: none;\"><span>stopPropagation()</span></a><span> when set to true, and does not do anything when set to false.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><a href=\"https://w3c.github.io/webvtt/#the-vttregion-interface\" style=\"text-decoration: none;\"><span>VTTRegion</span></a><span> interface functions, </span><span>addRegion()</span><span> and </span><span>removeRegion()</span><span>, have been removed from the </span><a href=\"https://w3c.github.io/webvtt/\" style=\"text-decoration: none;\"><span>WebVTT</span></a><span> spec and are therefore being removed from Chrome.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Top-level navigations to </span><span>data:</span><span> URLs have been deprecated to further protect users from spoofing and phishing attempts. &nbsp;</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>An instance of </span><span>HTMLEmbedElement</span><span> or </span><span>HTMLObjectElement</span><span> can no longer be called as a function, since the legacy caller has been removed.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Pre-standard ChaCha20-Poly1305 ciphers have been removed following the standardization of these algorithms at the </span><a href=\"https://www.ietf.org/about/\" style=\"text-decoration: none;\"><span>IETF</span></a><span> as </span><a href=\"https://tools.ietf.org/html/rfc7539\" style=\"text-decoration: none;\"><span>RFC 7539</span></a><span> and </span><a href=\"https://tools.ietf.org/html/rfc7905\" style=\"text-decoration: none;\"><span>RFC 7905</span></a><span>, and the subsequent shipping of the standard versions in Chrome 41. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>To improve interoperability, </span><span>Selection.addRange()</span><span> now ignores an additional range if it overlaps with an existing range, rather than merging the two ranges. &nbsp;</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Encrypted Media Extensions transmitted over non-sec</span><span>ure origins has been deprecated per Chrome's </span><a href=\"https://sites.google.com/a/chromium.org/dev/Home/chromium-security/deprecating-powerful-features-on-insecure-origins\" style=\"text-decoration: none;\"><span>policy</span></a><span> around powerful features and in compliance with the spec.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><a href=\"https://webaudio.github.io/web-audio-api/#AudioBuffer\" style=\"text-decoration: none;\"><span>AudioBuffer</span></a><span> constructor now accepts the </span><a href=\"https://webaudio.github.io/web-audio-api/#widl-AudioBufferOptions-sampleRate\" style=\"text-decoration: none;\"><span>sampleRate</span></a><span> member of an </span><a href=\"https://webaudio.github.io/web-audio-api/#idl-def-AudioBufferOptions\" style=\"text-decoration: none;\"><span>AudioBufferOptions</span></a><span> dictionary instead of a </span><span>context</span><span> argument, simplifying the interface and emphasizing that </span><a href=\"https://webaudio.github.io/web-audio-api/#AudioBuffer\" style=\"text-decoration: none;\"><span>AudioBuffers</span></a><span> can be shared between </span><a href=\"https://webaudio.github.io/web-audio-api/#idl-def-AudioContext\" style=\"text-decoration: none;\"><span>AudioContexts</span></a><span>. &nbsp;</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The synchronous </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FileReaderSync\" style=\"text-decoration: none;\"><span>FileReaderSync API</span></a><span> has been deprecated in service workers, as the service worker spec requires all types of synchronous requests to be initiated outside of a service worker. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><a href=\"https://developer.mozilla.org/en/docs/Web/HTML/Element/abbr\" style=\"text-decoration: none;\"><span>abbr</span></a><span> and </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/acronym\" style=\"text-decoration: none;\"><span>acronym</span></a><span> elements now have a dotted underline by default to align with the HTML standard.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The motion-path</span><span>, </span><span>motion-offset</span><span>, and </span><span>motion-rotation</span><span> CSS properties have been removed in favor of the new versions: </span><span>offset-path</span><span>, </span><span>offset-distance</span><span>, </span><span>offset-rotate</span><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>When accessing </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Selection_API\" style=\"text-decoration: none;\"><span>Selection API</span></a><span> properties like </span><span>selectionDirection</span><span>, </span><span>selectionStart</span><span>, and </span><span>selectionEnd</span><span>, Chrome will now return </span><span>null</span><span> when it would have thrown an </span><span>InvalidStateError</span><span> </span><span>DOMException</span><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Rather than silently clamping offset values that were too large, the </span><a href=\"https://www.w3.org/TR/selection-api/#selection-interface\" style=\"text-decoration: none;\"><span>Selection API‚Äôs</span></a><span> </span><span>setBaseAndExtent()</span><span> now throws an </span><span>IndexSizeError</span><span> </span><span>DOMException</span><span> to better align with spec.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Rather than silently failing for </span><span>DocumentType</span><span> node inputs, the </span><a href=\"https://www.w3.org/TR/selection-api/#selection-interface\" style=\"text-decoration: none;\"><span>Selection API‚Äôs</span></a><span> </span><span>setBaseAndExtent()</span><span>, </span><span>extend()</span><span>, and </span><span>collapse()</span><span> now throw </span><span>InvalidNodeTypeError</span><span> </span><span>DOMException</span><span> to better align with spec. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>To better align with spec, </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Selection/getRangeAt\" style=\"text-decoration: none;\"><span>getRangeAt()</span></a><span> now always returns a new </span><span>Range</span><span> with position normalization.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><span>AudioSourceNode</span><span> interface has been removed as it was not part of the WebAudio spec.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><span>webkitdropzone</span><span> attribute has been removed as it was not widely adopted.</span></div></li></ul><br /><span>Posted by Victor Costan, IndexedDB Interloper</span>", "title": "Chrome 58 Beta: IndexedDB 2.0, an improvement to iframe navigation, and immersive full screen for PWAs", "source_link": "http://blog.chromium.org/", "author_link": "https://plus.google.com/106190864297512596007", "author_name": "Chrome Blog", "source_type": "rss", "link": "http://blog.chromium.org/2017/03/chrome-58-beta-indexeddb-20_21.html", "published": "2017-03-21T18:25:00", "source_title": "Chromium Blog", "tags": "browsers,chromium,tech,web"}, {"picture": "//lh6.googleusercontent.com/-9zSEBEYfwaU/AAAAAAAAAAI/AAAAAAAAB9A/QYm9SICrReI/s512-c/photo.jpg", "source_name": "V8Blog", "description": "<div style=\"text-align: justify;\"><i>Every six weeks, we create a new branch of V8 as part of our <a href=\"https://github.com/v8/v8/wiki/Release%20Process\">release process</a>. Each version is branched from V8‚Äôs git master immediately before a Chrome Beta milestone. Today we‚Äôre pleased to announce our newest branch, <a href=\"https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/5.8\">V8 version 5.8</a>, which will be in beta until it is released in coordination with Chrome 58 Stable in several weeks. V8 5.8 is filled with all sorts of developer-facing goodies. We‚Äôd like to give you a preview of some of the highlights in anticipation of the release.</i></div><br /><h2>Arbitrary heap sizes</h2>Historically the V8 heap limit was conveniently set to fit the signed 32-bit integer range with some margin. Over time this convenience lead to sloppy code in V8 that mixed types of different bit widths, effectively breaking the ability to increase the limit. In 5.8 we enabled the use of arbitrary heap sizes. See the <a href=\"https://v8project.blogspot.de/2017/02/one-small-step-for-chrome-one-giant.html\">dedicated blog post</a> for more information.<br /><br /><div><h2>Startup performance</h2>In 5.8 the work towards incrementally reducing the time spent in V8 during startup was continued. Reductions in the time spent compiling and parsing code, as well as optimizations in the IC system yielded ~5 % improvements on our <a href=\"https://v8project.blogspot.de/2016/12/how-v8-measures-real-world-performance.html\">real-world startup workloads</a>.</div><div><br /></div><div><h2>V8 API</h2>Please check out our <a href=\"http://bit.ly/v8-api-changes\">summary of API changes</a>. This document is regularly updated a few weeks after each major release. <br /><br />Developers with an <a href=\"https://github.com/v8/v8/wiki/Using%20Git\">active V8 checkout</a> can use 'git checkout -b 5.8 -t branch-heads/5.8' to experiment with the new features in V8 5.8. Alternatively you can <a href=\"https://www.google.com/chrome/browser/beta.html\">subscribe to Chrome's Beta channel</a> and try the new features out yourself soon.</div><div><br />Posted by the V8 team</div>", "title": "V8 Release 5.8", "source_link": "http://v8project.blogspot.com/", "author_link": "https://plus.google.com/112105245188441507084", "author_name": "Michael Hablich", "source_type": "rss", "link": "http://v8project.blogspot.com/2017/03/v8-release-58.html", "published": "2017-03-20T14:23:00", "source_title": "V8 JavaScript Engine", "tags": "browsers,chromium,js,tech,web"}, {"source_name": "2ality", "description": "<p>The ECMAScript proposal ‚Äú<a href=\"https://github.com/tc39/proposal-dynamic-import\"><code>import()</code></a>‚Äù by Domenic Denicola is currently at stage 3. It enables dynamic loading of ECMAScript modules and is explained in this blog post.</p>\n\n<div><a href=\"http://2ality.com/2017/01/import-operator.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/GDTVJFbmxTk\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "ES proposal: <code>import()</code> ‚Äì dynamically importing ES modules", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/01/import-operator.html", "author_link": "http://2ality.com/", "published": "2017-03-17T00:17:00", "source_title": "2ality feed"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "ChromiumBlog", "description": "<div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span id=\"docs-internal-guid-0aabed2f-d832-3ec9-53f5-4d52ee74120b\"><span>The </span><a href=\"https://www.khronos.org/webgl/\"><span>WebGL</span></a><span> JavaScript API exposes hardware-accelerated 3D graphics to the web. Chrome 56 brings support for </span><a href=\"https://www.khronos.org/registry/webgl/specs/latest/2.0/\"><span>WebGL 2.0</span></a><span>, a major upgrade to the API which unlocks a variety of new graphics features and advanced rendering techniques. WebGL 2.0 is currently available for Chrome users with modern graphics hardware on Windows, macOS, and Linux, and is coming soon to Android.</span></span></div><b id=\"docs-internal-guid-0aabed2f-d81b-68c3-75ce-dd75072e2bb5\" style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><img alt=\"Screen Shot 2017-03-15 at 3.12.13 PM.png\" height=\"372\" src=\"https://lh6.googleusercontent.com/lTXHisnl6BIGBSQ9GuAbXlx3rxfyAzSM8fcbD5CdCkxeXwp7jQRRQGFGSGxa5AklJ-11sZc2Wco3rBqLycxRN7S1ccumUkLJ0-k8aOmBTkGl5fCKUe9NZlL2NWtibqIr_pKoZT-L\" width=\"624\" /></span></div><div style=\"text-align: center;\"><span>WebGL 2.0 Transform Feedback demo (</span><a href=\"http://toji.github.io/webgl2-particles-2/\"><span>live link</span></a><span>, </span><a href=\"https://github.com/toji/webgl2-particles-2\"><span>Github repository</span></a><span>)</span></div><br /><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>WebGL 1.0 </span><a href=\"https://chrome.googleblog.com/2011/02/dash-of-speed-3d-and-apps.html\" style=\"text-decoration: none;\"><span>first launched in Chrome 6 years ago</span></a><span> and gave web developers the ability to create immersive plugin-free graphics experiences, from </span><a href=\"https://www.thinkwithgoogle.com/articles/tech-behind-nike-phenomenal-shot.html\" style=\"text-decoration: none;\"><span>remixing World Cup plays in real-time</span></a><span> to visualizing a </span><a href=\"https://www.nytimes.com/interactive/2015/01/09/sports/the-dawn-wall-el-capitan.html\" style=\"text-decoration: none;\"><span>rock climbing route in a news article</span></a><span>. WebGL 2.0 makes it even easier to build 3D web applications, with faster real-time rendering, new types of textures and shaders, and reduced video memory consumption. &nbsp;Techniques including deferred shading, tone mapping, volumetric effects, and particle effects can now be efficiently implemented. The new APIs also bring WebGL up to feature parity with </span><a href=\"https://www.khronos.org/registry/OpenGL-Refpages/es3.0/\" style=\"text-decoration: none;\"><span>OpenGL ES 3.0</span></a><span>, a graphics platform commonly used in mobile games.  </span></div><b id=\"docs-internal-guid-0aabed2f-d81a-c7c8-cb43-b582e646af43\" style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>In addition to new rendering capabilities, WebGL 2.0 also introduces a substantially expanded </span><a href=\"https://www.khronos.org/registry/webgl/sdk/tests/webgl-conformance-tests.html\" style=\"text-decoration: none;\"><span>conformance test suite</span></a><span> with over 340,000 test cases to help ensure that different web browsers offer compatible graphics platforms. Chrome passes 100% of these test cases across multiple GPU vendors on every desktop platform, ensuring that its WebGL 2.0 implementation is stable and consistent.  </span></div><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>To get started using WebGL 2.0, check out the </span><a href=\"https://github.com/WebGLSamples/WebGL2Samples\" style=\"text-decoration: none;\"><span>WebGL 2.0 Samples Pack</span></a><span>, which contains small self-contained examples of most new API features. You can also see WebGL 2.0 in action in </span><span><a href=\"https://playcanv.as/e/p/44MRmJRU/\" style=\"text-decoration: none;\">After the Flood</a></span><span><sup>1</sup>, an interactive demo by PlayCanvas, created </span><a href=\"https://hacks.mozilla.org/2017/01/webgl-2-lands-in-firefox/\" style=\"text-decoration: none;\"><span>in conjunction with Mozilla</span></a><span>. Finally, check back here for more news about future graphics features, such as OpenGL ES 3.1 support and explorations into a lower-level web graphics API supporting the new explicit graphics interfaces like </span><a href=\"https://www.khronos.org/vulkan/\" style=\"text-decoration: none;\"><span>Vulkan</span></a><span>, </span><a href=\"https://developer.apple.com/metal/\" style=\"text-decoration: none;\"><span>Metal</span></a><span>, and </span><a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/dn899228(v=vs.85).aspx\" style=\"text-decoration: none;\"><span>DirectX 12</span></a><span>.</span></div><br /><br /><span>Posted by Zhenyao Mo, Software Engineer</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span id=\"docs-internal-guid-0aabed2f-d81a-f721-7c10-ba2895ede22a\"><span>[1] If this demo or other WebGL 2.0 content doesn‚Äôt run on your machine, you may need to update your graphics hardware or driver.</span></span></div>", "title": "Faster 3D rendering with WebGL 2.0", "source_link": "http://blog.chromium.org/", "author_link": "https://plus.google.com/106190864297512596007", "author_name": "Chrome Blog", "source_type": "rss", "link": "http://blog.chromium.org/2017/03/faster-3d-rendering-with-webgl-20.html", "published": "2017-03-16T17:44:00", "source_title": "Chromium Blog", "tags": "browsers,chromium,tech,web"}, {"source_name": "2ality", "description": "<p>I‚Äôll soon migrate 2ality to a different hosting solution. This blog post tells you what you need to know.</p>\n\n<div><a href=\"http://2ality.com/2017/03/2ality-redesign.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/7R4TkQEGDMw\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "Coming up: a redesign of 2ality", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/03/2ality-redesign.html", "author_link": "http://2ality.com/", "published": "2017-03-16T01:04:00", "source_title": "2ality feed"}, {"source_name": "2ality", "description": "<p>In this blog post I present Communicating Sequential Processes (CSP) and how they can be used as an alternative to async generators. In the process, we will also take a look at the ECMAScript proposal that async generators are a part of: ‚Äú<a href=\"http://2ality.com/2016/10/asynchronous-iteration.html\">asynchronous iteration</a>‚Äù</p>\n\n<div><a href=\"http://2ality.com/2017/03/csp-vs-async-generators.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/8vvGtDKSUgo\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "Communicating Sequential Processes: an alternative to async generators", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/03/csp-vs-async-generators.html", "author_link": "http://2ality.com/", "published": "2017-03-16T01:01:00", "source_title": "2ality feed"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "ChromiumBlog", "description": "<div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Efficient power usage is an important aspect of speed, one of </span><a href=\"https://www.chromium.org/developers/core-principles\" style=\"text-decoration: none;\"><span>Chrome‚Äôs key pillars</span></a><span>. To prolong battery life, Chrome should minimize power impact from things users can‚Äôt see. This includes background tabs, &nbsp;which consume a third of Chrome's power usage on desktop. Starting in version 57, Chrome will throttle individual background tabs by limiting the timer fire rate for background tabs using excessive power.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><b id=\"docs-internal-guid-fb257634-cd27-65b3-6824-48b8fa8f1181\" style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Chrome has focused on improving the user experience by throttling tab performance </span><a href=\"https://blog.chromium.org/2011/03/getting-smoother-animated-web-content.html\" style=\"text-decoration: none;\"><span>for many years</span></a><span>. Like many browsers, Chrome has limited timers in the background to only run once per second. </span><a href=\"https://developers.google.com/web/updates/2017/03/background_tabs\" style=\"text-decoration: none;\"><span>Via the new throttling policy</span></a><span>, Chrome 57 will delay timers to limit average CPU load to 1% of a core if an application uses too much CPU in background. Tabs playing audio or maintaining real-time connections like WebSockets or WebRTC won‚Äôt be affected. </span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>We've found that this throttling mechanism leads to 25% fewer busy background tabs. </span><a href=\"https://docs.google.com/document/d/18_sX-KGRaHcV3xe5Xk_l6NNwXoxm-23IOepgMx4OlE4/edit#\" style=\"text-decoration: none;\"><span>In the long-term</span></a><span>, the ideal is for background tabs to be fully suspended and instead rely on new APIs for service workers to do work in the background. Chrome will continue to take steps in this direction to prolong users' battery life, while still enabling all the same experiences developers can build today.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><br /><span>Posted by Alexander Timin, Software Engineer and Power Saver</span>", "title": "Reducing power consumption for background tabs", "source_link": "http://blog.chromium.org/", "author_link": "https://plus.google.com/106190864297512596007", "author_name": "Chrome Blog", "source_type": "rss", "link": "http://blog.chromium.org/2017/03/reducing-power-consumption-for.html", "published": "2017-03-14T15:00:00", "source_title": "Chromium Blog", "tags": "browsers,chromium,tech,web"}, {"source_name": "2ality", "description": "<p><a href=\"https://github.com/babel/babel-preset-env/\"><code>babel-preset-env</code></a> is a new preset that lets you specify an environment and automatically enables the necessary plugins.</p>\n\n<div><a href=\"http://2ality.com/2017/02/babel-preset-env.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/VkkVq-Bd2gs\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "<code>babel-preset-env</code>: a preset that configures Babel for you", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/02/babel-preset-env.html", "author_link": "http://2ality.com/", "published": "2017-03-03T22:35:00", "source_title": "2ality feed"}, {"picture": "//lh3.googleusercontent.com/-di-UybBsz7k/AAAAAAAAAAI/AAAAAAAAAC8/l5ReptOnR-o/s512-c/photo.jpg", "source_name": "V8Blog", "description": "For-in is a widely used language feature present in many frameworks. Despite its ubiquity, it is one of the more obscure language constructs from an implementation perspective. V8 went to great lengths to make this feature as fast as possible. Over the course of the past year,  for-in became fully spec compliant and up to 3 times faster, depending on the context.<br /><br />Many popular websites rely heavily on for-in and benefit from its optimization. For example, in early 2016 Facebook spent roughly 7% of its total JavaScript time during startup in the implementation of for-in itself. On Wikipedia this number was even higher at around 8%. By improving the performance of certain slow cases, Chrome 51 significantly improved the performance on these two websites:<br /><div><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://3.bp.blogspot.com/-ljiPlGh-JXQ/WLbfVn1oYPI/AAAAAAAABHk/vIEbr0Afy208IYOxtlxoUvFsJNslVipmACLcB/s1600/image03.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"108\" src=\"https://3.bp.blogspot.com/-ljiPlGh-JXQ/WLbfVn1oYPI/AAAAAAAABHk/vIEbr0Afy208IYOxtlxoUvFsJNslVipmACLcB/s640/image03.png\" width=\"640\" /></a></div><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://3.bp.blogspot.com/-lKL9s4lDtBs/WLbfWNJhjlI/AAAAAAAABHo/qBVLIwLIqo43I9hUdgSmB1sLFfLmVqV7wCLcB/s1600/image04.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"106\" src=\"https://3.bp.blogspot.com/-lKL9s4lDtBs/WLbfWNJhjlI/AAAAAAAABHo/qBVLIwLIqo43I9hUdgSmB1sLFfLmVqV7wCLcB/s640/image04.png\" width=\"640\" /></a></div><div><b style=\"font-weight: normal;\"><br /></b><br />Facebook and Wikipedia both improved their total script time by 4% due to various for-in improvements. Note that during the same period,  the rest of V8 also got faster, which yielded a total scripting improvement of more than 4%.<br /><br />In the rest of this blog post we will explain how we managed to speed up this core language feature and fix a long-standing spec violation at the same time.<br /><br /><h2></h2><h2>The Spec</h2><i><b>TL;DR;</b> The for-in iteration semantics are fuzzy for performance reasons.</i><br /><br />When we look at the <a href=\"https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements\">spec-text of for-in, it‚Äôs written in an unexpectedly fuzzy way</a>,which is observable across different implementations. Let's look at an example when iterating over a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a> object with the proper traps set.<br /><pre><code class=\"javascript\">let proxy = new Proxy({a:1, b:1},{<br /> getPrototypeOf(target) {<br /> console.log(\"getPrototypeOf\");<br /> return null;<br />},<br />ownKeys(target) {<br /> console.log(\"ownKeys\");<br /> return Reflect.ownKeys(target);<br />},<br />getOwnPropertyDescriptor(target, prop) {<br /> console.log(\"getOwnPropertyDescriptor name=\" + prop);<br /> return Reflect.getOwnPropertyDescriptor(target, prop);<br />}<br />});<br /></code></pre><br />In V8/Chrome 56 you get the following output:<br /><pre><code class=\"javascript\">ownKeys<br />getPrototypeOf<br />getOwnPropertyDescriptor name=a<br />a<br />getOwnPropertyDescriptor name=b<br />b<br /></code></pre><br />In contrast, you will see a different order of statements for the same snippet in Firefox 51:<br /><pre><code class=\"javascript\">ownKeys <br />getOwnPropertyDescriptor name=a <br />getOwnPropertyDescriptor name=b <br />getPrototypeOf <br />a <br />b<br /></code></pre><br /><div>Both browsers respect the spec, but for once the spec does not enforce an explicit order of instructions. To understand these loop holes properly, let's have a look at the spec text:<br /><blockquote class=\"tr_bq\">EnumerateObjectProperties ( O )<br />When the abstract operation EnumerateObjectProperties is called with argument O, the following steps are taken:<br /><ol><li>Assert: Type(O) is Object.&nbsp;</li><li>Return an Iterator object (25.1.1.2) whose next method iterates over all the String-valued keys of enumerable properties of O. The iterator object is never directly accessible to ECMAScript code. The mechanics and order of enumerating the properties is not specified but must conform to the rules specified below.&nbsp;</li></ol></blockquote>Now, usually spec instructions are precise in what exact steps are required. But in this case they refer to a simple list of prose, and even the order of execution is left to implementers. Typically, the reason for this is that such parts of the spec were written after the fact where JavaScript engines already had different implementations. The spec tries to tie the loose ends by providing the following instructions:<br /><ol type=\"a\"><li>The iterator's throw and return methods are null and are never invoked.&nbsp;</li><li>The iterator's next method processes object properties to determine whether the property key should be returned as an iterator value.&nbsp;</li><li>Returned property keys do not include keys that are Symbols.&nbsp;</li><li>Properties of the target object may be deleted during enumeration.&nbsp;</li><li>A property that is deleted before it is processed by the iterator's next method is ignored. If new properties are added to the target object during enumeration, the newly added properties are not guaranteed to be processed in the active enumeration.&nbsp;</li><li>A property name will be returned by the iterator's next method at most once in any enumeration.&nbsp;</li><li>Enumerating the properties of the target object includes enumerating properties of its prototype, and the prototype of the prototype, and so on, recursively; but a property of a prototype is not processed if it has the same name as a property that has already been processed by the iterator's next method.&nbsp;</li><li>The values of [[Enumerable]] attributes are not considered when determining if a property of a prototype object has already been processed.&nbsp;</li><li>The enumerable property names of prototype objects must be obtained by invoking EnumerateObjectProperties passing the prototype object as the argument.&nbsp;</li><li>EnumerateObjectProperties must obtain the own property keys of the target object by calling its [[OwnPropertyKeys]] internal method.&nbsp;</li></ol>These steps sound tedious, however the specification also contains an example implementation which is explicit and much more readable:<br /><pre><code class=\"javascript\">function* EnumerateObjectProperties(obj) {<br />  const visited = new Set();<br />  for (const key of Reflect.ownKeys(obj)) {<br />    if (typeof key === \"symbol\") continue;<br />    const desc = Reflect.getOwnPropertyDescriptor(obj, key);<br />    if (desc &amp;&amp; !visited.has(key)) {<br />      visited.add(key);<br />      if (desc.enumerable) yield key;<br />    }<br />  }<br />  const proto = Reflect.getPrototypeOf(obj);<br />  if (proto === null) return;<br />  for (const protoKey of EnumerateObjectProperties(proto)) {<br />    if (!visited.has(protoKey)) yield protoKey;<br />  }<br />}<br /></code></pre><br />Now that you've made it this far, you might have noticed from the previous example that V8 does not exactly follow the spec example implementation. As a start, the example for-in generator works incrementally, while V8 collects all keys upfront - mostly for performance reasons. This is perfectly fine, and in fact the spec text explicitly states that the order of operations A - J is not defined. Nevertheless, as you will find out later in this post, there are some corner cases where V8 did not fully respect the specification until 2016.<br /><br /><h2>The Enum Cache</h2>The example implementation of the for-in generator follows an incremental pattern of collecting and yielding keys. In V8 the property keys are collected in a first step and only then used in the iteration phase. For V8 this makes a few things easier. To understand why, we need to have a look at the object model.<br /><br />A simple object such as <span>{a:\"value a\", b:\"value b\", c:\"value c\"}</span> can have various internal representations in V8 as we will show in a detailed follow-up post on properties. This means that depending on what type of properties we have‚Äîin-object, fast or slow‚Äîthe actual property names are stored in different places. This makes collecting enumerable keys a non-trivial undertaking.<br /><br />V8 keeps track of the object's structure by means of a hidden class or so-called Map. Objects with the same Map have the same structure. Additionally each Map has a shared data-structure, the descriptor array, which contains details about each property, such as where the properties are stored on the object, the property name, and details such as enumerability.<br /><br />Let‚Äôs for a moment assume that our JavaScript object has reached its final shape and no more properties will be added or removed. In this case we could use the descriptor array as a source for the keys. This works if there are only enumerable properties. To avoid the overhead of filtering out non-enumerable properties each time V8 uses a separate EnumCache accessible via the Map's descriptor array.</div><div><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://3.bp.blogspot.com/-JBJZOWQDYjk/WLbffnuDnsI/AAAAAAAABHw/XxJYBSpzxuI5fdmYsyZag7R6wnLZ5HLFgCLcB/s1600/image00.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"102\" src=\"https://3.bp.blogspot.com/-JBJZOWQDYjk/WLbffnuDnsI/AAAAAAAABHw/XxJYBSpzxuI5fdmYsyZag7R6wnLZ5HLFgCLcB/s640/image00.png\" width=\"640\" /></a></div><br />Given that V8 expects that slow dictionary objects frequently change, (i.e. through addition and removal of properties), there is no descriptor array for slow objects with dictionary properties. Hence, V8 does not provide an EnumCache for slow properties. Similar assumptions hold for indexed properties, and as such they are excluded from the EnumCache as well.<br /><br />Let‚Äôs summarize the important facts: <br /><ul><li>Maps are used to keep track of object shapes.&nbsp;</li><li>Descriptor arrays store information about properties (name, configurability, visibility).&nbsp;</li><li>Descriptor arrays can be shared between Maps.&nbsp;</li><li>Each descriptor array can have an EnumCache listing only the enumerable named keys, not indexed property names.</li></ul><div><br /></div><h2>The Mechanics of For-In</h2>Now you know partially how Maps work and how the EnumCache relates to the descriptor array.  V8 executes JavaScript via Ignition, a bytecode interpreter, and TurboFan, the optimizing compiler, which both deal with for-in in similar ways. For simplicity we will use a pseudo-C++ style to explain how for-in is implemented internally:<br /><br /><pre><code class=\"cpp\">// For-In Prepare:<br />FixedArray* keys = nullptr;<br />Map* original_map = object-&gt;map();<br />if (original_map-&gt;HasEnumCache()) {<br />  if (object-&gt;HasNoElements()) {<br />    keys = original_map-&gt;GetCachedEnumKeys();<br />  } else {<br />    keys = object-&gt;GetCachedEnumKeysWithElements();<br />  }<br />} else {<br />  keys = object-&gt;GetEnumKeys();<br />}<br /><br />// For-In Body:<br />for (size_t i = 0; i &lt; keys-&gt;length(); i++) {<br />  // For-In Next:<br />  String* key = keys[i];<br />  if (!object-&gt;HasProperty(key) continue;<br />  EVALUATE_FOR_IN_BODY();<br />}<br /></code></pre><br />For-in can be separated into three main steps: <br /><ol><li>Preparing the keys to iterate over,&nbsp;</li><li>Getting the next key,&nbsp;</li><li>Evaluating the for-in body.&nbsp;</li></ol><br />The ‚Äúprepare‚Äù-step is the most complex out of these three and this is the place where the EnumCache comes into play. In the example above you can see that V8 directly uses the EnumCache if it exists and if there are no elements (integer indexed properties) on the object (and its prototype). For the case where there are indexed property names, V8 jumps to a runtime function implemented in C++ which prepends them to the existing enum cache, as illustrated by the following example:<br /><br /><pre><code class=\"cpp\">FixedArray* JSObject::GetCachedEnumKeysWithElements() {<br />  FixedArray* keys = object-&gt;map()-&gt;GetCachedEnumKeys();<br />  return object-&gt;GetElementsAccessor()-&gt;PrependElementIndices(object, keys);<br />}<br /><br />FixedArray* Map::GetCachedEnumKeys() {<br />  // Get the enumerable property keys from a possibly shared enum cache<br />  FixedArray* keys_cache = descriptors()-&gt;enum_cache()-&gt;keys_cache();<br />  if (enum_length() == keys_cache-&gt;length()) return keys_cache;<br />  return keys_cache-&gt;CopyUpTo(enum_length());<br />}<br /><br />FixedArray* FastElementsAccessor::PrependElementIndices(<br />      JSObject* object, FixedArray* property_keys) {<br />  Assert(object-&gt;HasFastElements());<br />  FixedArray* elements = object-&gt;elements();<br />  int nof_indices = CountElements(elements)<br />  FixedArray* result = FixedArray::Allocate(property_keys-&gt;length() + nof_indices);<br />  int insertion_index = 0;<br />  for (int i = 0; i &lt; elements-&gt;length(); i++) {<br />    if (!HasElement(elements, i)) continue;<br />    result[insertion_index++] = String::FromInt(i);<br />  }<br />  // Insert property keys at the end.<br />  property_keys-&gt;CopyTo(result, nof_indices - 1);<br />  return result;<br />}<br /></code></pre><br />In the case where no existing EnumCache was found we jump again to C++ and follow the initially presented spec steps:<br /><br /><pre><code class=\"cpp\">FixedArray* JSObject::GetEnumKeys() {<br />  // Get the receiver‚Äôs enum keys.<br />  FixedArray* keys = this-&gt;GetOwnEnumKeys();<br />  // Walk up the prototype chain.<br />  for (JSObject* object : GetPrototypeIterator()) {<br />     // Append non-duplicate keys to the list.<br />     keys = keys-&gt;UnionOfKeys(object-&gt;GetOwnEnumKeys());<br />  }<br />  return keys;<br />}<br /><br />FixedArray* JSObject::GetOwnEnumKeys() {<br />  FixedArray* keys;<br />  if (this-&gt;HasEnumCache()) {<br />    keys = this-&gt;map()-&gt;GetCachedEnumKeys();<br />  } else {<br />    keys = this-&gt;GetEnumPropertyKeys();<br />  }<br />  if (this-&gt;HasFastProperties()) this-&gt;map()-&gt;FillEnumCache(keys);<br />  return object-&gt;GetElementsAccessor()-&gt;PrependElementIndices(object, keys);<br />}<br /><br /><br />FixedArray* FixedArray::UnionOfKeys(FixedArray* other) {<br />  int length = this-&gt;length();<br />  FixedArray* result = FixedArray::Allocate(length + other-&gt;length());<br />  this-&gt;CopyTo(result, 0);<br />  int insertion_index = length;<br />  for (int i = 0; i &lt; other-&gt;length(); i++) {<br />    String* key = other-&gt;get(i);<br />    if (other-&gt;IndexOf(key) == -1) {<br />      result-&gt;set(insertion_index, key);<br />      insertion_index++;<br />    }<br />  }<br />  result-&gt;Shrink(insertion_index);<br />  return result;<br />}<br /></code></pre><br />This simplified C++ code corresponds to the implementation in V8 until early 2016 when we started to look at the <span>UnionOfKeys</span> method. If you look closely you notice that we used a naive algorithm to exclude duplicates from the list which might yield bad performance if we have many keys on the prototype chain. This is how we decided to pursue the optimizations in following section.<br /><br /><h2>Problems with For-In</h2>As we already hinted in the previous section, the <span>UnionOfKeys</span> method has bad worst-case performance. It was based on the valid assumption that most objects have fast properties and thus will benefit from an EnumCache. The second assumption is that there are only few enumerable properties on the prototype chain limiting the time spent in finding duplicates. However, if the object has slow dictionary properties and many keys on the prototype chain, <span>UnionOfKeys</span> becomes a bottleneck as we have to collect the enumerable property names each time we enter for-in.<br /><br />Next to performance issues, there was another problem with the existing algorithm in that it‚Äôs not spec compliant. V8 got the following example wrong for many years:<br /><pre><code class=\"javascript\">var o = { <br />  __proto__ : {b: 3},<br />  a: 1 <br />};<br />Object.defineProperty(o, ‚Äúb‚Äù, {});<br /><br />for (var k in o) print(k);<br /></code></pre>Output:<br /><pre><code class=\"javascript\"> \"a\"<br /> \"b\"<br /></code></pre>Perhaps counterintuitively this should just print out ‚Äúa‚Äù instead of ‚Äúa‚Äù and ‚Äúb‚Äù. If you recall the spec text at the beginning of this post, steps G and J imply that non-enumerable properties on the receiver shadow properties on the prototype chain.<br /><br />To make things more complicated, ES6 introduced the <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">proxy</a> object. This broke a lot of assumptions of the V8 code. To implement for-in in a spec-compliant manner, we have to trigger the following 5 out of a total of 13 different proxy traps.<b style=\"font-weight: normal;\"><br /></b><br /><br /><div dir=\"ltr\" style=\"margin-left: 0pt;\"><table style=\"border-collapse: collapse; border: none;\"><colgroup><col width=\"217\" /><col width=\"259\" /></colgroup><tbody><tr style=\"height: 0pt;\"><td style=\"border-bottom: solid #9e9e9e 0.5pt; border-left: solid #9e9e9e 0pt; border-right: solid #9e9e9e 0pt; border-top: solid #9e9e9e 0pt; padding: 2.16pt 2.16pt 2.16pt 2.16pt; vertical-align: middle;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Internal Method</span></div></td><td style=\"border-bottom: solid #9e9e9e 0.5pt; border-left: solid #9e9e9e 0pt; border-right: solid #9e9e9e 0pt; border-top: solid #9e9e9e 0pt; padding: 2.16pt 2.16pt 2.16pt 2.16pt; vertical-align: middle;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Handler Method</span></div></td></tr><tr style=\"height: 0pt;\"><td style=\"border-bottom: solid #9e9e9e 0pt; border-left: solid #9e9e9e 0pt; border-right: solid #9e9e9e 0pt; border-top: solid #9e9e9e 0.5pt; padding: 2.16pt 2.16pt 2.16pt 2.16pt; vertical-align: middle;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">[[GetPrototypeOf]]</span></div></td><td style=\"border-bottom: solid #9e9e9e 0pt; border-left: solid #9e9e9e 0pt; border-right: solid #9e9e9e 0pt; border-top: solid #9e9e9e 0.5pt; padding: 2.16pt 2.16pt 2.16pt 2.16pt; vertical-align: middle;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">getPrototypeOf</span></div></td></tr><tr style=\"height: 0pt;\"><td style=\"border-bottom: solid #9e9e9e 0pt; border-left: solid #9e9e9e 0pt; border-right: solid #9e9e9e 0pt; border-top: solid #9e9e9e 0pt; padding: 2.16pt 2.16pt 2.16pt 2.16pt; vertical-align: middle;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">[[GetOwnProperty]]</span></div></td><td style=\"border-bottom: solid #9e9e9e 0pt; border-left: solid #9e9e9e 0pt; border-right: solid #9e9e9e 0pt; border-top: solid #9e9e9e 0pt; padding: 2.16pt 2.16pt 2.16pt 2.16pt; vertical-align: middle;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">getOwnPropertyDescriptor</span></div></td></tr><tr style=\"height: 0pt;\"><td style=\"border-bottom: solid #9e9e9e 0pt; border-left: solid #9e9e9e 0pt; border-right: solid #9e9e9e 0pt; border-top: solid #9e9e9e 0pt; padding: 2.16pt 2.16pt 2.16pt 2.16pt; vertical-align: middle;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">[[HasProperty]]</span></div></td><td style=\"border-bottom: solid #9e9e9e 0pt; border-left: solid #9e9e9e 0pt; border-right: solid #9e9e9e 0pt; border-top: solid #9e9e9e 0pt; padding: 2.16pt 2.16pt 2.16pt 2.16pt; vertical-align: middle;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">has</span></div></td></tr><tr style=\"height: 0pt;\"><td style=\"border-bottom: solid #9e9e9e 0pt; border-left: solid #9e9e9e 0pt; border-right: solid #9e9e9e 0pt; border-top: solid #9e9e9e 0pt; padding: 2.16pt 2.16pt 2.16pt 2.16pt; vertical-align: middle;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">[[Get]]</span></div></td><td style=\"border-bottom: solid #9e9e9e 0pt; border-left: solid #9e9e9e 0pt; border-right: solid #9e9e9e 0pt; border-top: solid #9e9e9e 0pt; padding: 2.16pt 2.16pt 2.16pt 2.16pt; vertical-align: middle;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">get</span></div></td></tr><tr style=\"height: 9pt;\"><td style=\"border-bottom: solid #9e9e9e 0pt; border-left: solid #9e9e9e 0pt; border-right: solid #9e9e9e 0pt; border-top: solid #9e9e9e 0pt; padding: 2.16pt 2.16pt 2.16pt 2.16pt; vertical-align: middle;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">[[OwnPropertyKeys]]</span></div></td><td style=\"border-bottom: solid #9e9e9e 0pt; border-left: solid #9e9e9e 0pt; border-right: solid #9e9e9e 0pt; border-top: solid #9e9e9e 0pt; padding: 2.16pt 2.16pt 2.16pt 2.16pt; vertical-align: middle;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">ownKeys</span></div></td></tr></tbody></table></div><br />This required a duplicate version of the original <span>GetEnumKeys</span> code which tried to follow the spec example implementation more closely. ES6 Proxies and lack of handling shadowing properties were the core motivation for us to refactor how we extract all the keys for for-in in early 2016.<br /><br /><h2>The KeyAccumulator</h2>We introduced a separate helper class, the KeyAccumulator, which dealt with the complexities of collecting the keys for for-in. With growth of the ES6 spec, new features like <span>Object.keys</span> or <span>Reflect.ownKeys</span> required their own slightly modified version of collecting keys. By having a single configurable place we could improve the performance of for-in and avoid duplicated code.<br /><br />The KeyAccumulator consists of a fast part that only supports a limited set of actions but is able to complete them very efficiently. The slow accumulator supports all the complex cases, like ES6 Proxies.<br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://4.bp.blogspot.com/-q7LzVOQ9mTY/WLbfejLwCdI/AAAAAAAABHs/RYxEbzQFrYcUo7JVviRGuxXYa2xGIGU1gCEw/s1600/image05.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"98\" src=\"https://4.bp.blogspot.com/-q7LzVOQ9mTY/WLbfejLwCdI/AAAAAAAABHs/RYxEbzQFrYcUo7JVviRGuxXYa2xGIGU1gCEw/s640/image05.png\" width=\"640\" /></a></div><br />In order to properly filter out shadowing properties we have to maintain a separate list of non-enumerable properties that we have seen so far. For performance reasons we only do this after we figure out that there are enumerable properties on the prototype chain of an object.<br /><br /><h2>Performance Improvements</h2>With the KeyAccumulator in place, a few more patterns became feasible to optimize. The first one was to avoid the nested loop of the original <span>UnionOfKeys</span> method which caused slow corner cases. In a second step we performed more detailed pre-checks to make use of existing EnumCaches and avoid unnecessary copy steps.<br /><br />To illustrate that the spec-compliant implementation is faster, let‚Äôs have a look at the following four different objects:<span><br /></span><br /><pre><code class=\"javascript\">var fastProperties = {<br />    __proto__ : null,<br />    ‚Äúproperty 1‚Äù : 1,<br />    ‚Ä¶<br />    ‚Äúproperty 10‚Äù : n<br />}<br /><br />var fastPropertiesWithPrototype = {<br />    ‚Äúproperty 1‚Äù : 1,<br />    ‚Ä¶<br />    ‚Äúproperty 10‚Äù : n<br />}<br /><br />var slowProperties = {<br />    __proto__ : null,<br />   ‚Äúdummy‚Äù: null,<br />    ‚Äúproperty 1‚Äù : 1,<br />    ‚Ä¶<br />    ‚Äúproperty 10‚Äù : n<br />}<br />delete slowProperties[‚Äúdummy‚Äù]<br /><br />var elements = {<br />    __proto__: null,<br /><br />    ‚Äú1‚Äù : 1,<br />    ‚Ä¶<br />    ‚Äú10‚Äù : n<br />}<br /></code></pre><br /><ul><li>The <span>fastProperties</span> object has standard fast properties.&nbsp;</li><li>The <span>fastPropertiesWithPrototype</span> object has additional non-enumerable properties on the prototype chain by using the Object.prototype.&nbsp;</li><li>The <span>slowProperties</span> object has slow dictionary properties.&nbsp;</li><li>The <span>elements</span> object has only indexed properties.&nbsp;</li></ul><br />The following graph compares the original performance of running a for-in loop a million times in a tight loop without the help of our optimizing compiler.</div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://3.bp.blogspot.com/-TQL0G5ShrJY/WLbfVdJZ1aI/AAAAAAAABHc/FxSIorOd_hAvbNIeEOV2illDf8F9nAGwQCEw/s1600/image02.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"234\" src=\"https://3.bp.blogspot.com/-TQL0G5ShrJY/WLbfVdJZ1aI/AAAAAAAABHc/FxSIorOd_hAvbNIeEOV2illDf8F9nAGwQCEw/s640/image02.png\" width=\"640\" /></a></div><div><br />As we've outlined in the introduction, these improvements became very visible on Facebook and Wikipedia in particular.&nbsp;</div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-lKL9s4lDtBs/WLbfWNJhjlI/AAAAAAAABHo/zcFOrspFJWY3YVmkTFgrhQ_NE9pQavsBQCEw/s1600/image04.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"106\" src=\"https://1.bp.blogspot.com/-lKL9s4lDtBs/WLbfWNJhjlI/AAAAAAAABHo/zcFOrspFJWY3YVmkTFgrhQ_NE9pQavsBQCEw/s640/image04.png\" width=\"640\" /></a></div><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://2.bp.blogspot.com/-ljiPlGh-JXQ/WLbfVn1oYPI/AAAAAAAABHk/3VQDW5-IvJ4IAoi6xf5wSONO5p-Dj1BoQCEw/s1600/image03.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"108\" src=\"https://2.bp.blogspot.com/-ljiPlGh-JXQ/WLbfVn1oYPI/AAAAAAAABHk/3VQDW5-IvJ4IAoi6xf5wSONO5p-Dj1BoQCEw/s640/image03.png\" width=\"640\" /></a></div><div><br /></div><div><br />Besides the initial improvements available in Chrome 51, a second performance tweak yielded another significant improvement. The following graph shows our tracking data of the total time spent in scripting during startup on a Facebook page. The selected range around V8 revision 37937 corresponds to an additional 4% performance improvement!</div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://2.bp.blogspot.com/-2WTJTNMf55I/WLbfVb8eY1I/AAAAAAAABHg/aPtQeGBJouI2Y5xjTq2ZrJdhrKH83OenACEw/s1600/image01.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"170\" src=\"https://2.bp.blogspot.com/-2WTJTNMf55I/WLbfVb8eY1I/AAAAAAAABHg/aPtQeGBJouI2Y5xjTq2ZrJdhrKH83OenACEw/s640/image01.png\" width=\"640\" /></a></div><div><br /></div><div>To underline the importance of improving for-in we can rely on the data from a tool we built back in 2016 that allows us to extract V8 measurements over a set of websites. The following table shows the relative time spent in V8 C++ entry points (runtime functions and builtins) for Chrome 49 over a set of roughly <a href=\"https://v8project.blogspot.de/2016/12/how-v8-measures-real-world-performance.html\">25 representative real-world websites</a>.<br /><br /><div dir=\"ltr\" style=\"margin-left: 0pt;\"><table style=\"border-collapse: collapse; border: none;\"><colgroup><col width=\"62\" /><col width=\"242\" /><col width=\"71\" /></colgroup><tbody><tr style=\"height: 0pt;\"><td style=\"border-bottom: solid #000000 0.5pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Position</span></div></td><td style=\"border-bottom: solid #000000 0.5pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Name</span></div></td><td style=\"border-bottom: solid #000000 0.5pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Total Time</span></div></td></tr><tr style=\"height: 0pt;\"><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0.5pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">1</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0.5pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">CreateObjectLiteral</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0.5pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">1.10%</span></div></td></tr><tr style=\"height: 0pt;\"><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">2</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">NewObject</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">0.90%</span></div></td></tr><tr style=\"height: 0pt;\"><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">3</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">KeyedGetProperty</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">0.70%</span></div></td></tr><tr style=\"height: 0pt;\"><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">4</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">GetProperty</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">0.60%</span></div></td></tr><tr style=\"height: 0pt;\"><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">5</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">ForInEnumerate</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">0.60%</span></div></td></tr><tr style=\"height: 0pt;\"><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">6</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">SetProperty</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">0.50%</span></div></td></tr><tr style=\"height: 0pt;\"><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">7</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">StringReplaceGlobalRegExpWithString</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">0.30%</span></div></td></tr><tr style=\"height: 0pt;\"><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">8</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">HandleApiCallConstruct</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">0.30%</span></div></td></tr><tr style=\"height: 0pt;\"><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">9</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">RegExpExec</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">0.30%</span></div></td></tr><tr style=\"height: 0pt;\"><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">10</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">ObjectProtoToString</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">0.30%</span></div></td></tr><tr style=\"height: 0pt;\"><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">11</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">ArrayPush</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">0.20%</span></div></td></tr><tr style=\"height: 0pt;\"><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">12</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">NewClosure</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">0.20%</span></div></td></tr><tr style=\"height: 0pt;\"><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">13</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">NewClosure_Tenured</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">0.20%</span></div></td></tr><tr style=\"height: 0pt;\"><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">14</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">ObjectDefineProperty</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">0.20%</span></div></td></tr><tr style=\"height: 0pt;\"><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">15</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">HasProperty</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">0.20%</span></div></td></tr><tr style=\"height: 0pt;\"><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">16</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">StringSplit</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">0.20%</span></div></td></tr><tr style=\"height: 0pt;\"><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">17</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">ForInFilter</span></div></td><td style=\"border-bottom: solid #000000 0pt; border-left: solid #000000 0pt; border-right: solid #000000 0pt; border-top: solid #000000 0pt; padding: 2pt 2pt 2pt 2pt; vertical-align: bottom;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: right;\"><span style=\"background-color: transparent; color: #666666; font-family: inherit; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">0.10%</span></div></td></tr></tbody></table></div><br />The most important for-in helpers are at position 5 and 17, accounting for an average of 0.7% percent of the total time spent in scripting on a website. In Chrome 57 ForInEnumerate has dropped to 0.2% of the total time and ForInFilter is below the measuring threshold due to a fast path written in assembler.<br /><br />Posted by Camillo Bruni,&nbsp;<a href=\"http://twitter.com/camillobruni\">@camillobruni</a></div></div></div>", "title": "Fast For-In in V8", "source_link": "http://v8project.blogspot.com/", "author_link": "https://plus.google.com/115597567207091386344", "author_name": "Camillo Bruni", "source_type": "rss", "link": "http://v8project.blogspot.com/2017/03/fast-for-in-in-v8.html", "published": "2017-03-01T16:03:00", "source_title": "V8 JavaScript Engine", "tags": "browsers,chromium,js,tech,web"}, {"picture": "//lh6.googleusercontent.com/-9zSEBEYfwaU/AAAAAAAAAAI/AAAAAAAAB9A/QYm9SICrReI/s512-c/photo.jpg", "source_name": "V8Blog", "description": "<div class=\"separator\" style=\"clear: both; text-align: center;\"></div><div class=\"separator\" style=\"clear: both; text-align: center;\"></div><div class=\"separator\" style=\"clear: both; text-align: center;\"></div>Over the last couple of months the V8 team focused on bringing the performance of newly added <a href=\"http://www.ecma-international.org/ecma-262/6.0/\">ES2015</a> and other even more recent JavaScript features on par with their transpiled <a href=\"http://www.ecma-international.org/ecma-262/5.1/\">ES5</a> counterparts.<br /><br /><h2>Motivation</h2>Before we go into the details of the various improvements, we should first consider why performance of ES2015+ features matter despite the widespread usage of <a href=\"http://babeljs.io/\">Babel</a> in modern web development:<br /><ol><li>First of all there are new ES2015 features that are only polyfilled on demand, for example the <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"><span>Object.assign</span></a> builtin. When Babel transpiles <a href=\"https://github.com/sebmarkbage/ecmascript-rest-spread\">object spread properties</a> (which are heavily used by many <a href=\"https://facebook.github.io/react\">React</a> and <a href=\"http://redux.js.org/\">Redux</a> applications), it relies on <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"><span>Object.assign</span></a> instead of an ES5 equivalent if the VM supports it.</li><li>Polyfilling ES2015 features typically increases code size, which contributes significantly to the current <a href=\"https://channel9.msdn.com/Blogs/msedgedev/nolanlaw-web-perf-crisis\">web performance crisis</a>, especially on mobile devices common in emerging markets. So the cost of just delivering, parsing and compiling the code can be fairly high, even before you get to the actual execution cost.</li><li>And last but not least, the client side JavaScript is only one of the environments that relies on the V8 engine. There‚Äôs also <a href=\"https://nodejs.org/\">Node.js</a> for server side applications and tools, where developers don‚Äôt need to transpile to ES5 code, but can directly use the features supported by the <a href=\"https://nodejs.org/en/download/releases/\">relevant V8 version</a> in the target Node.js release.</li></ol>Let‚Äôs consider the following code snippet from the <a href=\"http://redux.js.org/docs/recipes/UsingObjectSpreadOperator.html\">Redux documentation</a>:<br /><br /><pre><code class=\"javascript\"><br />function todoApp(state = initialState, action) {<br />  switch (action.type) {<br />    case SET_VISIBILITY_FILTER:<br />      return { ...state, visibilityFilter: action.filter }<br />    default:<br />      return state<br />  }<br />}<br /></code></pre><br />There are two things in that code that demand transpilation: the default parameter for <span>state</span> and the spreading of <span>state</span> into the object literal. Babel generates the following ES5 code:<br /><br /><pre><code class=\"javascript\"><br />\"use strict\";<br /><br />var _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };<br /><br />function todoApp() {<br />  var state = arguments.length &gt; 0 &amp;&amp; arguments[0] !== undefined ? arguments[0] : initialState;<br />  var action = arguments[1];<br /><br />  switch (action.type) {<br />    case SET_VISIBILITY_FILTER:<br />      return _extends({}, state, { visibilityFilter: action.filter });<br />    default:<br />      return state;<br />  }<br />}<br /></code></pre><br />Now imagine that <span><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\">Object.assign</a> </span>is orders of magnitude slower than the polyfilled _extends generated by Babel. In that case upgrading from a browser that doesn‚Äôt support <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"><span>Object.assign</span></a> to an ES2015 capable version of the browser would be a serious performance regression and probably hinder adoption of ES2015 in the wild.<br /><br />This example also highlights another important drawback of transpilation: The generated code that is shipped to the user is usually considerably bigger than the ES2015+ code that the developer initially wrote. In the example above, the original code is 203 characters (176 bytes gzipped) whereas the generated code is 588 characters (367 bytes gzipped). That‚Äôs already a factor of two increase in size. Let‚Äôs look at another example from the <a href=\"https://github.com/tc39/proposal-async-iteration\">Async Iterators for JavaScript</a> proposal:<br /><br /><pre><code class=\"javascript\"><br />async function* readLines(path) {<br />  let file = await fileOpen(path);<br /><br />  try {<br />    while (!file.EOF) {<br />      yield await file.readLine();<br />    }<br />  } finally {<br />    await file.close();<br />  }<br />}<br /></code></pre><br />Babel translates these 187 characters (150 bytes gzipped) into a whopping 2987 characters (971 bytes gzipped) of ES5 code, not even counting the <a href=\"https://babeljs.io/docs/plugins/transform-regenerator/\">regenerator runtime</a> that is required as an additional dependency:<br /><br /><pre><code class=\"javascript\"><br />\"use strict\";<br /><br />var _asyncGenerator = function () { function AwaitValue(value) { this.value = value; } function AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; if (value instanceof AwaitValue) { Promise.resolve(value.value).then(function (arg) { resume(\"next\", arg); }, function (arg) { resume(\"throw\", arg); }); } else { settle(result.done ? \"return\" : \"normal\", result.value); } } catch (err) { settle(\"throw\", err); } } function settle(type, value) { switch (type) { case \"return\": front.resolve({ value: value, done: true }); break; case \"throw\": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== \"function\") { this.return = undefined; } } if (typeof Symbol === \"function\" &amp;&amp; Symbol.asyncIterator) { AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; } AsyncGenerator.prototype.next = function (arg) { return this._invoke(\"next\", arg); }; AsyncGenerator.prototype.throw = function (arg) { return this._invoke(\"throw\", arg); }; AsyncGenerator.prototype.return = function (arg) { return this._invoke(\"return\", arg); }; return { wrap: function wrap(fn) { return function () { return new AsyncGenerator(fn.apply(this, arguments)); }; }, await: function await(value) { return new AwaitValue(value); } }; }();<br /><br />var readLines = function () {<br />  var _ref = _asyncGenerator.wrap(regeneratorRuntime.mark(function _callee(path) {<br />    var file;<br />    return regeneratorRuntime.wrap(function _callee$(_context) {<br />      while (1) {<br />        switch (_context.prev = _context.next) {<br />          case 0:<br />            _context.next = 2;<br />            return _asyncGenerator.await(fileOpen(path));<br /><br />          case 2:<br />            file = _context.sent;<br />            _context.prev = 3;<br /><br />          case 4:<br />            if (file.EOF) {<br />              _context.next = 11;<br />              break;<br />            }<br /><br />            _context.next = 7;<br />            return _asyncGenerator.await(file.readLine());<br /><br />          case 7:<br />            _context.next = 9;<br />            return _context.sent;<br /><br />          case 9:<br />            _context.next = 4;<br />            break;<br /><br />          case 11:<br />            _context.prev = 11;<br />            _context.next = 14;<br />            return _asyncGenerator.await(file.close());<br /><br />          case 14:<br />            return _context.finish(11);<br /><br />          case 15:<br />          case \"end\":<br />            return _context.stop();<br />        }<br />      }<br />    }, _callee, this, [[3,, 11, 15]]);<br />  }));<br /><br />  return function readLines(_x) {<br />    return _ref.apply(this, arguments);<br />  };<br />}();<br /></code></pre><br />This is a <b>650%</b> increase in size (the generic _asyncGenerator function might be shareable depending on how you bundle your code, so you can amortize some of that cost across multiple uses of async iterators). We don‚Äôt think it‚Äôs viable to ship only code transpiled to ES5 long-term, as the increase in size will not only affect download time/cost, but will also add additional overhead to parsing and compilation. If we really want to drastically improve page load and snappiness of modern web applications, especially on mobile devices, we have to encourage developers to not only use ES2015+ when writing code, but also to ship that instead of transpiling to ES5. Only deliver fully transpiled bundles to legacy browsers that don‚Äôt support ES2015. For VM implementors, this vision means we need to support ES2015+ features natively <b>and</b> provide reasonable performance.<br /><br /><h2>Measurement methodology</h2>As described above, absolute performance of ES2015+ features is not really an issue at this point. Instead the highest priority currently is to ensure that performance of ES2015+ features is on par with their naive ES5 and even more importantly, with the version generated by Babel. Conveniently there was already a project called <a href=\"https://github.com/kpdecker/six-speed\">six-speed</a> by <a href=\"http://www.incaseofstairs.com/\">Kevin Decker</a>, that accomplishes more or less exactly what we needed: a performance comparison of ES2015 features vs. naive ES5 vs. code generated by transpilers.<br /><div><br /></div><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://2.bp.blogspot.com/-oQK51xOJU5k/WKbteAHZxeI/AAAAAAAAB68/GK28AXxHP6YpQnY8y0Bfoj5g79i8VI4xwCLcB/s1600/sixspeed.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"348\" src=\"https://2.bp.blogspot.com/-oQK51xOJU5k/WKbteAHZxeI/AAAAAAAAB68/GK28AXxHP6YpQnY8y0Bfoj5g79i8VI4xwCLcB/s400/sixspeed.png\" width=\"400\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Six-Speed benchmark</td></tr></tbody></table><div><br /><br />So we decided to take that as the basis for our initial ES2015+ performance work. We <a href=\"https://fhinkel.github.io/six-speed/\">forked it</a> and added a couple of benchmarks. We focused on the most serious regressions first, i.e. line items where slowdown from naive ES5 to recommended ES2015+ version was above 2x, because our fundamental assumption is that the naive ES5 version will be at least as fast as the somewhat spec-compliant version that Babel generates.</div><br /><h2>A modern architecture for a modern language</h2>In the past V8‚Äôs had difficulties optimizing the kind of language features that are found in ES2015+. For example, it never became feasible to add exception handling (i.e. <span>try/catch/finally</span>) support to Crankshaft, V8‚Äôs classic optimizing compiler. This meant V8‚Äôs ability to optimize an ES6 feature like <span>for...of</span>, which essentially has an implicit <span>finally</span> clause, was limited. Crankshaft‚Äôs limitations and the overall complexity of adding new language features to full-codegen, V8‚Äôs baseline compiler, made it inherently difficult to ensure new ES features were added and optimized in V8 as quickly as they were standardized.<br /><br />Fortunately, Ignition and TurboFan (<a href=\"https://v8project.blogspot.co.uk/2017/02/help-us-test-future-of-v8.html\">V8‚Äôs new interpreter and compiler pipeline</a>), were designed to support the entire JavaScript language from the beginning, including advanced control flow, exception handling, and most recently <span>for...of</span> and destructuring from ES2015. The tight integration of the architecture of Ignition and TurboFan make it possible to quickly add new features and to optimize them fast and incrementally. <br /><br />Many of the improvements we achieved for modern language features were only feasible with the new Ignition/Turbofan pipeline. Ignition and TurboFan proved especially critical to optimizing generators and async functions. Generators had long been supported by V8, but were not optimizable due to control flow limitations in Crankshaft. Async functions are essentially sugar on top of generators, so they fall into the same category.  The new compiler pipeline leverages Ignition to make sense of the AST and generate bytecodes which de-sugar complex generator control flow into simpler local-control flow bytecodes. TurboFan can more easily optimize the resulting bytecodes since it doesn‚Äôt need to know anything specific about generator control flow, just how to save and restore a function‚Äôs state on yields.<br /><br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://3.bp.blogspot.com/-rn1bLeoDx3c/WKbukk42TAI/AAAAAAAAB7E/nM9PuEE3x0MRA1F53awp-W7gqXlXQVqVgCEw/s1600/javascriptToTF.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"348\" src=\"https://3.bp.blogspot.com/-rn1bLeoDx3c/WKbukk42TAI/AAAAAAAAB7E/nM9PuEE3x0MRA1F53awp-W7gqXlXQVqVgCEw/s640/javascriptToTF.png\" width=\"640\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">How JavaScript generators are represented in Ignition and TurboFan</td></tr></tbody></table><br /><h2>State of the union</h2>Our short-term goal was to reach less than 2x slowdown on average as soon as possible. We started by looking at the worst test first, and from Chrome M54 to Chrome M58 (Canary) we managed to reduce the number of tests with slowdown above 2x from 16 to 8, and at the same time reduce the worst slowdown from 19x in M54 to just 6x in M58 (Canary). We also significantly reduced the average and median slowdown during that period:<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://4.bp.blogspot.com/-YW48VvQtz5A/WKbvxoqBvNI/AAAAAAAAB7Q/Fm5Hyl1-QwAfPf1IcPUbOoJww3iyKV6PACEw/s1600/slowdown.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"395\" src=\"https://4.bp.blogspot.com/-YW48VvQtz5A/WKbvxoqBvNI/AAAAAAAAB7Q/Fm5Hyl1-QwAfPf1IcPUbOoJww3iyKV6PACEw/s640/slowdown.png\" width=\"640\" /></a></div><br />You can see a clear trend towards parity of ES2015+ and ES5. On average we improved performance relative to ES5 by over 47%. Here are some highlights that we addressed since M54.<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://2.bp.blogspot.com/-OXTXWasp-v0/WKdhLF-QLbI/AAAAAAAAB8A/jhbR0f6gqYMuuttpNUBjru5jxetFQh80QCLcB/s1600/perfcomparison.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"446\" src=\"https://2.bp.blogspot.com/-OXTXWasp-v0/WKdhLF-QLbI/AAAAAAAAB8A/jhbR0f6gqYMuuttpNUBjru5jxetFQh80QCLcB/s640/perfcomparison.png\" width=\"640\" /></a></div><br />Most notably we improved performance of new language constructs that are based on iteration, like the spread operator, destructuring and <span>for...of</span> loops. For example, using array destructuring<br /><br /><pre><code class=\"javascript\"><br />function fn() {<br />  var [c] = data;<br />  return c;<br />}<br /></code></pre><br />is now as fast as the naive ES5 version<br /><br /><pre><code class=\"javascript\"><br />function fn() {<br />  var c = data[0];<br />  return c;<br />}<br /></code></pre><br />and a lot faster (and shorter) than the Babel generated code:<br /><br /><pre><code class=\"javascript\"><br />\"use strict\";<br /><br />var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i &amp;&amp; _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n &amp;&amp; _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();<br /><br />function fn() {<br />  var _data = data,<br />      _data2 = _slicedToArray(_data, 1),<br />      c = _data2[0];<br /><br />  return c;<br />}<br /></code></pre><br />You can check out the&nbsp;<a href=\"https://docs.google.com/presentation/d/1wiiZeRQp8-sXDB9xXBUAGbaQaWJC84M5RNxRyQuTmhk\">High-Speed ES2015</a> talk we gave at the last <a href=\"http://www.mnug.de/\">Munich NodeJS User Group</a> meetup for additional details:<br /><br /> <br /><br />We are committed to continue improving the performance of ES2015+ features. In case you are interested in the nitty-gritty details please have a look at V8's <a href=\"https://docs.google.com/document/d/1EA9EbfnydAmmU_lM8R_uEMQ-U_v4l9zulePSBkeYWmY\">ES2015 and beyond performance plan</a>.<br /><br />Posted by Benedikt Meurer <a href=\"https://twitter.com/bmeurer\">@bmeurer</a>, EcmaScript Performance Engineer", "title": "High-performance ES2015 and beyond", "source_link": "http://v8project.blogspot.com/", "author_link": "https://plus.google.com/112105245188441507084", "author_name": "Michael Hablich", "source_type": "rss", "link": "http://v8project.blogspot.com/2017/02/high-performance-es2015-and-beyond.html", "published": "2017-02-17T16:35:00", "source_title": "V8 JavaScript Engine", "tags": "browsers,chromium,js,tech,web"}, {"picture": "//lh6.googleusercontent.com/-9zSEBEYfwaU/AAAAAAAAAAI/AAAAAAAAB9A/QYm9SICrReI/s512-c/photo.jpg", "source_name": "V8Blog", "description": "The V8 team is currently working on a new default compiler pipeline that will help us bring future speedups to <a href=\"https://v8project.blogspot.com/2016/12/how-v8-measures-real-world-performance.html\">real-world JavaScript</a>. You can preview the new pipeline in Chrome Canary today to help us verify that there are no surprises when we roll out the new configuration for all Chrome channels.<br /><br />The new compiler pipeline uses the <a href=\"http://v8project.blogspot.de/2016/08/firing-up-ignition-interpreter.html\">Ignition interpreter</a> and <a href=\"https://github.com/v8/v8/wiki/TurboFan\">Turbofan compiler</a> to execute all JavaScript (in place of the classic pipeline which consisted of the FullCodegen and Crankshaft compilers). A random subset of Chrome Canary and Chrome Developer channel users are already testing the new configuration. However, anyone can opt-in to the new pipeline (or revert to the old one) by flipping a flag in about:flags.<br /><br />You can help test the new pipeline by opting-in and using it with Chrome on your favorite web sites. If you are a web developer, please test your web applications with the new compiler pipeline. If you notice a regression in stability, correctness, or performance, please <a href=\"https://bugs.chromium.org/p/v8/issues/entry?template=Bug%20report%20for%20the%20new%20pipeline\">report the issue to the V8 bug tracker</a>.<br /><br /><h2>How to enable the new pipeline</h2><h3>In Chrome 58</h3><ol><li>Install the latest <a href=\"https://www.google.com/chrome/browser/beta.html\" target=\"_blank\">Beta</a></li><li>Open URL \"about:flags\" in Chrome</li><li>Search for \"<b>Experimental JavaScript Compilation Pipeline</b>\" and set it to \"<b>Enabled</b>\"</li></ol><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://4.bp.blogspot.com/-Xhp4nWXPxWs/WKNhtVSC3kI/AAAAAAAAB5g/cTNj0Zv4vfY6_k86-fQUO-vngfifRe10ACLcB/s1600/enablenewpipeline.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"130\" src=\"https://4.bp.blogspot.com/-Xhp4nWXPxWs/WKNhtVSC3kI/AAAAAAAAB5g/cTNj0Zv4vfY6_k86-fQUO-vngfifRe10ACLcB/s640/enablenewpipeline.png\" width=\"640\" /></a></div><div><br /><h3>In Chrome 59.0.3056 and above</h3></div><div><ol><li>Install the latest Canary <a href=\"https://www.google.com/chrome/browser/canary.html\" target=\"_blank\">Canary</a> or <a href=\"https://www.google.com/chrome/browser/desktop/index.html?extra=devchannel\" target=\"_blank\">Dev</a></li><li>Open URL \"about:flags\" in Chrome</li><li>Search for \"<b>Classic JavaScript Compilation Pipeline</b>\" and set it to \"<b>Disabled</b>\"</li></ol><div class=\"separator\" style=\"clear: both; text-align: center;\"></div><div><div class=\"separator\" style=\"clear: both; text-align: center;\"></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://2.bp.blogspot.com/-yS2UjNBJS_I/WN1ekUF_QkI/AAAAAAAACHk/KI8ffi9gSu8cgtvE03ImRA9QHE5F-CUuACLcB/s1600/U2odG4Tf68E%2B%25281%2529.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"50\" src=\"https://2.bp.blogspot.com/-yS2UjNBJS_I/WN1ekUF_QkI/AAAAAAAACHk/KI8ffi9gSu8cgtvE03ImRA9QHE5F-CUuACLcB/s640/U2odG4Tf68E%2B%25281%2529.png\" width=\"640\" /></a></div><br />The standard value is \"<b>Default</b>\", which means that either the new <b>or</b> the classic pipeline is active depending on the A/B test configuration.</div></div><h2>How to report problems</h2>Please let us know if your browsing experience changes significantly when using the new pipeline over the default pipeline. If you are a web developer, please test the performance of the new pipeline on your (mobile) web application to see how it is affected. If you discover that your web application is behaving strange (or tests are failing), please let us know:<br /><ol><li>Ensure that you have correctly enabled the new pipeline as outlined in the previous section.</li><li><a href=\"https://bugs.chromium.org/p/v8/issues/entry?template=Bug%20report%20for%20the%20new%20pipeline\">Create a bug on V8's bug tracker</a>.</li><li>Attach sample code which we can use to reproduce the problem.</li></ol><div>Posted by Daniel Clifford <a href=\"https://twitter.com/expatdanno\">@expatdanno</a>, Original Munich V8 Brewer</div>", "title": "Help us test the future of V8!", "source_link": "http://v8project.blogspot.com/", "author_link": "https://plus.google.com/112105245188441507084", "author_name": "Michael Hablich", "source_type": "rss", "link": "http://v8project.blogspot.com/2017/02/help-us-test-future-of-v8.html", "published": "2017-02-14T20:25:00", "source_title": "V8 JavaScript Engine", "tags": "browsers,chromium,js,tech,web"}, {"picture": "//lh6.googleusercontent.com/-9zSEBEYfwaU/AAAAAAAAAAI/AAAAAAAAB9A/QYm9SICrReI/s512-c/photo.jpg", "source_name": "V8Blog", "description": "V8 has a hard limit on its heap size. This serves as a safeguard against applications with memory leaks. When an application reaches this hard limit, V8 does a series of last resort garbage collections. If the garbage collections do not help to free memory V8 stops execution and reports an out-of-memory failure. Without the hard limit a memory leaking application could use up all system memory hurting the performance of other applications.<br /><br />Ironically, this safeguard mechanism makes investigation of memory leaks harder for JavaScript developers. The application can run out of memory before the developer manages to inspect the heap in DevTools. Moreover the DevTools process itself can run out memory because it uses an ordinary V8 instance. For example, taking a heap snapshot of <a href=\"https://ulan.github.io/misc/heap-snapshot-demo.html\">this demo</a> will abort execution due to out-of-memory on the current stable Chrome.<br /><br />Historically the V8 heap limit was conveniently set to fit the signed 32-bit integer range with some margin. Over time this convenience lead to sloppy code in V8 that mixed types of different bit widths, effectively breaking the ability to increase the limit. Recently we cleaned up the garbage collector code, enabling the use of larger heap sizes. DevTools already makes use of this feature and taking a heap snapshot in the previously mentioned demo works as expected in the latest Chrome Canary.<br /><br /><div>We also added a feature in DevTools to pause the application when it is close to running out of memory. This feature is useful to investigate bugs that cause the application to allocate a lot of memory in a short period of time. When running <a href=\"https://ulan.github.io/misc/oom.html\">this demo</a> with the latest Chrome Canary, DevTools pauses the application before the out-of-memory failure and increases the heap limit, giving the user a chance to inspect the heap, evaluate expressions on the console to free memory and then resume execution for further debugging.</div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://3.bp.blogspot.com/-9-7tt9jWZWk/WJyGswyYJTI/AAAAAAAAB28/izzFFlS5d-Mr9bhgi9_maTnVyHAYN-cBwCLcB/s1600/Screen%2BShot%2B2017-02-03%2Bat%2B6.39.54%2BPM.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"392\" src=\"https://3.bp.blogspot.com/-9-7tt9jWZWk/WJyGswyYJTI/AAAAAAAAB28/izzFFlS5d-Mr9bhgi9_maTnVyHAYN-cBwCLcB/s640/Screen%2BShot%2B2017-02-03%2Bat%2B6.39.54%2BPM.png\" width=\"640\" /></a></div><div class=\"separator\" style=\"clear: both; text-align: center;\"></div><div><br /></div>V8 embedders can increase the heap limit using the <a href=\"https://codesearch.chromium.org/chromium/src/v8/include/v8.h?q=set_max_old_space_size\">set_max_old_space_size</a> function of the ResourceConstraints API. But watch out, some phases in the garbage collector have a linear dependency on the heap size. Garbage collection pauses may increase with larger heaps.<br /><br />Posted by guardians of heap Ulan Degenbaev, Hannes Payer, Michael Lippautz and DevTools master Alexey Kozyatinskiy.", "title": "One small step for Chrome, one giant heap for V8", "source_link": "http://v8project.blogspot.com/", "author_link": "https://plus.google.com/112105245188441507084", "author_name": "Michael Hablich", "source_type": "rss", "link": "http://v8project.blogspot.com/2017/02/one-small-step-for-chrome-one-giant.html", "published": "2017-02-09T18:40:00", "source_title": "V8 JavaScript Engine", "tags": "browsers,chromium,js,tech,web"}, {"picture": "//lh6.googleusercontent.com/-9zSEBEYfwaU/AAAAAAAAAAI/AAAAAAAAB9A/QYm9SICrReI/s512-c/photo.jpg", "source_name": "V8Blog", "description": "<span id=\"docs-internal-guid-2d0a722f-14d8-3591-e796-709395310056\"></span><br /><i></i><br /><div style=\"text-align: justify;\"><i><i>Every six weeks, we create a new branch of V8 as part of our <a href=\"https://github.com/v8/v8/wiki/Release%20Process\">release process</a>. Each version is branched from V8‚Äôs git master immediately before a Chrome Beta milestone. Today we‚Äôre pleased to announce our newest branch, <a href=\"https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/5.7\">V8 version 5.7</a>, which will be in beta until it is released in coordination with Chrome 57 Stable in several weeks. V8 5.7 is filled with all sorts of developer-facing goodies. We‚Äôd like to give you a preview of some of the highlights in anticipation of the release.</i></i></div><i></i><br /><div><br /></div><div><h2>Performance improvements</h2><h3>Native async functions as fast as promises</h3></div>Async functions are now approximately as fast as the same code written with promises. The execution performance of async functions quadrupled according to our <a href=\"https://codereview.chromium.org/2577393002\">microbenchmarks</a>. During the same period, overall promise performance also doubled.<br /><div><br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://3.bp.blogspot.com/-ulpC2fPhSHA/WJjLVhrqgiI/AAAAAAAAB1w/ds592RTlDL8JeHE_tiUTguf4piYRUuCtgCLcB/s1600/asyncimprovements.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"394\" src=\"https://3.bp.blogspot.com/-ulpC2fPhSHA/WJjLVhrqgiI/AAAAAAAAB1w/ds592RTlDL8JeHE_tiUTguf4piYRUuCtgCLcB/s640/asyncimprovements.png\" width=\"640\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Async performance improvements in V8 on Linux x64</td></tr></tbody></table><br /><h3>Continued ES2015 improvements</h3>V8 continues to make ES2015 language features faster so that developers use new features without incurring performance costs. The spread operator, destructuring and generators are now <a href=\"https://fhinkel.github.io/six-speed/\">approximately as fast as their naive ES5 equivalents</a>.<br /><div><br /><h3>RegExp 15 % faster</h3>Migrating RegExp functions from a self-hosted JavaScript implementation to one that hooks into TurboFan‚Äôs code generation architecture has yielded ~15 % faster overall RegExp performance. More details can be found in <a href=\"http://v8project.blogspot.de/2017/01/speeding-up-v8-regular-expressions.html\">the dedicated blog post</a>.</div><div><br /><h2>New library features</h2>Several recent additions to the ECMAScript standard library are included in this release. Two String methods, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\">padStart </a>and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd\">padEnd</a>, provide helpful string formatting features, while <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts\">Intl.DateTimeFormat.prototype.formatToParts</a> gives authors the ability to customize their date/time formatting in a locale-aware manner.</div><div><br /><h2>WebAssembly enabled</h2>Chrome 57 (which includes V8 5.7) will be the first release to enable WebAssembly by default. For more details, see the getting started documents on <a href=\"http://webassembly.org/\" target=\"_blank\">webassembly.org</a> and the API documentation on <a href=\"https://developer.mozilla.org/en-US/docs/WebAssembly/API\" target=\"_blank\">MDN</a>.&nbsp;</div><div><br /><h2>V8 API additions</h2>Please check out our <a href=\"http://bit.ly/v8-api-changes\">summary of API changes</a>. This document is regularly updated a few weeks after each major release. <br />Developers with an <a href=\"https://github.com/v8/v8/wiki/Using%20Git\">active V8 checkout</a> can use 'git checkout -b 5.7 -t branch-heads/5.7' to experiment with the new features in V8 5.7. Alternatively you can <a href=\"https://www.google.com/chrome/browser/beta.html\">subscribe to Chrome's Beta channel</a> and try the new features out yourself soon.<br /><br /><h3>PromiseHook</h3>This C++ API allows users to implement profiling code that traces through the lifecycle of promises. This enables Node‚Äôs upcoming <a href=\"https://github.com/nodejs/node-eps/pull/18\">AsyncHook API</a> which lets you build <a href=\"https://docs.google.com/document/d/1tlQ0R6wQFGqCS5KeIw0ddoLbaSYx6aU7vyXOkv-wvlM/edit\">async context propagation</a>. <br /><br />The PromiseHook API provides four lifecycle hooks - init, resolve, before and after -- init hook is run when a new promise is created, the resolve hook is run when a promise is resolved, the pre &amp; post hooks are run right before and after a <a href=\"https://tc39.github.io/ecma262/#sec-promisereactionjob\"><span>PromiseReactionJob</span></a>. For more information please checkout the <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=4643&amp;can=2&amp;q=4643&amp;colspec=ID%20Type%20Status%20Priority%20Owner%20Summary%20HW%20OS%20Area%20Stars\">tracking issue</a> and <a href=\"https://docs.google.com/document/d/1rda3yKGHimKIhg5YeoAmCOtyURgsbTH_qaYR79FELlk/edit\">design document</a>.<br /><br />Posted by the V8 team</div></div>", "title": "V8 Release 5.7", "source_link": "http://v8project.blogspot.com/", "author_link": "https://plus.google.com/112105245188441507084", "author_name": "Michael Hablich", "source_type": "rss", "link": "http://v8project.blogspot.com/2017/02/v8-release-57.html", "published": "2017-02-06T19:33:00", "source_title": "V8 JavaScript Engine", "tags": "browsers,chromium,js,tech,web"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "ChromiumBlog", "description": "<div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Unless otherwise noted, changes described below apply to the newest Chrome </span><a href=\"https://www.google.com/landing/chrome/beta/\" style=\"text-decoration: none;\"><span>Beta</span></a><span> channel release for Android, Chrome OS, Linux, Mac, and Windows.</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>CSS Grid Layout</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Sites are increasingly being accessed on screens of all sizes, from large LCD TVs to tiny watch faces. Historically, supporting all of these screen sizes required complex combinations of markup and CSS, making code hard to maintain. </span><span>To give developers more granular control over how elements grow and shrink to fit the current screen size,</span><span> </span><a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Grids\" style=\"text-decoration: none;\"><span>CSS Grid Layout</span></a><span> is </span><a href=\"https://developers.google.com/web/updates/2017/01/css-grid\" style=\"text-decoration: none;\"><span>now available</span></a><span>. </span></div><b id=\"docs-internal-guid-ee2d84d1-0081-5d0a-9cc2-305cd2960532\" style=\"font-weight: normal;\"><br /></b><b style=\"font-weight: normal;\"><br /></b><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>CSS Grid supports a two-dimensional grid-based layout system, optimized for responsive user interface design. Elements within the grid can be specified to span multiple columns or rows. Elements positioned in a CSS grid can also be named, making layout code easier to understand. </span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span><img alt=\"Screenshot 2017-01-25 20.06.19.png\" height=\"254\" src=\"https://lh3.googleusercontent.com/y6XkFGNVdw2jtHl59yMiU6tsRofuQ0I8mBQRDkpaUIGgQUL5Tr80sOKroi6a4kEPEdutk9h7D-28PiITAMwZRX7xRx50BT1fWN4vR0R_yLieaETHfZFpbOw_ftiCCsAX4DKO_W-r\" width=\"255\" /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span><span style=\"font-size: x-small;\">CSS Grid allows developers to arbitrarily place elements on a grid with full control over element flow, sizing behavior and responsiveness. </span></span></div><h1 dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 6pt; margin-top: 20pt;\"><span>Improved Add to Home screen</span></h1><div><span><br /></span></div><div><span><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.8px; font-weight: normal; white-space: normal;\"><i>Update (2017/03/09): Improved Add to Home screen is now planned to launch in Chrome 58.</i></span></span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span><span>Since early versions of Chrome for Android, users have been able to add sites to their Home screen for fast and convenient access. This feature adds the icons using </span><a href=\"https://developer.android.com/guide/topics/ui/shortcuts.html\" style=\"text-decoration: none;\"><span>Android shortcuts</span></a><span>, which means that web apps don‚Äôt show up throughout Android in the same way as installed native apps.</span></div><b style=\"font-weight: normal;\"><br /></b><b style=\"font-weight: normal;\"><br /></b><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>In this release, when a user adds a </span><a href=\"https://developers.google.com/web/progressive-web-apps/\" style=\"text-decoration: none;\"><span>Progressive Web App</span></a><span> to their Home screen, Chrome will integrate it into Android in a </span><a href=\"https://blog.chromium.org/2017/02/integrating-progressive-web-apps-deeply.html\" style=\"text-decoration: none;\"><span>much deeper way</span></a><span>. For example, Progressive Web Apps will now appear in the app drawer section of the launcher and in Android Settings, and will be able to receive incoming intents from other apps. Long presses on their notifications will also reveal the normal Android notification management controls rather than the notification management controls for Chrome.</span></div><h1 dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 6pt; margin-top: 20pt;\"><span>Media Session API</span></h1><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Media consumption is one of the most common uses for the mobile web. In Chrome for Android, developers can customize the lock screen UI and notifications with media content using the new </span><a href=\"https://developers.google.com/web/updates/2017/02/media-session\" style=\"text-decoration: none;\"><span>Media Session API</span></a><span>. By providing metadata to the browser about the content being played, developers can create rich lock screen messaging that includes information such as title, artist, album name, and artwork. Additionally , the site is now able to respond to user actions taken on the notification itself, such as seeking or skipping. </span></div><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span><img alt=\"media-session-tldr-with-cc.png\" height=\"297\" src=\"https://lh4.googleusercontent.com/48A_VJgfKBgrHwOpYTZcmQLZn780BbBkoDMn9sFfXmpjKtgsGc3H_frhB4KssRYyWROOg97C1NGKWmbsbKAaNG0xR7dK3Z5LERuJLvR0-16uv7WVoWn8_DpS_VbfteEDOwRdwehd\" width=\"624\" /></span></div><h1 dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 6pt; margin-top: 20pt;\"><span>Other features in this release</span></h1><ul style=\"margin-bottom: 0pt; margin-top: 0pt;\"><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><span><span>The<span class=\"m_-5861088107076748824inbox-inbox-Apple-converted-space\">&nbsp;</span></span><a class=\"m_-5861088107076748824gmail_msg\" href=\"https://developer.mozilla.org/en-US/docs/WebAssembly\" style=\"background-color: white; color: #1155cc; font-family: arial, sans-serif; font-size: 12.8px; white-space: normal;\" target=\"_blank\">WebAssembly API</a><span>&nbsp;has been enabled by default, allowing developers to&nbsp;<a href=\"http://webassembly.org/demo/\" style=\"color: #1155cc;\" target=\"_blank\">run near-native code</a>&nbsp;in the browser without a plugin.</span></span></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>When a video enters fullscreen on an Android device, Chrome now automatically locks the screen orientation according to the aspect ratio of the video.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Sites using continuous </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\" style=\"text-decoration: none;\"><span>setTimeout()</span></a><span> will now be </span><a href=\"https://github.com/WICG/interventions/issues/9\" style=\"text-decoration: none;\"><span>throttled</span></a><span> when using loops to drive out-of-view frame animations, improving performance for users.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\" style=\"text-decoration: none;\"><span>Fetch API</span></a><span> </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Response\" style=\"text-decoration: none;\"><span>Response</span></a><span> class now supports the </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Response/redirected\" style=\"text-decoration: none;\"><span>.redirected</span></a><span> attribute to help web developers avoid untrustworthy responses and reduce the risk of </span><a href=\"https://cwe.mitre.org/data/definitions/601.html\" style=\"text-decoration: none;\"><span>open redirectors</span></a><span>. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The new </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\" style=\"text-decoration: none;\"><span>padStart</span></a><span> and </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd\" style=\"text-decoration: none;\"><span>padEnd</span></a><span> formatting tools enable </span><a href=\"http://www.2ality.com/2015/11/string-padding.html\" style=\"text-decoration: none;\"><span>text padding</span></a><span>, facilitating tasks like aligning console output or printing numbers with a fixed number of digits.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><a href=\"https://www.chromestatus.com/feature/5734842339688448\" style=\"text-decoration: none;\"><span>Service Worker Navigation Preload</span></a><span> is now available as an Origin Trial, allowing developers to parallelize the network request for the main resource alongside service worker startup.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The Payment Request API can be made available inside an </span><span>iframe</span><span> by adding the </span><a href=\"https://developers.google.com/web/updates/2017/01/payment-request-updates\" style=\"text-decoration: none;\"><span>allowpaymentrequest</span></a><span> attribute.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><a href=\"https://developers.google.com/web/updates/2017/01/payment-request-updates#paymentmethoddata_supports_basic-card\" style=\"text-decoration: none;\"><span>PaymentMethodData</span></a><span> now supports </span><a href=\"https://w3c.github.io/webpayments-methods-card/\" style=\"text-decoration: none;\"><span>basic-card</span></a><span>, so developers can refer to all card types with a single method identifier, rather than individual data types. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>To simplify the migration from HTTP to HTTPS, stored credentials for HTTP forms are now transferred to the HTTPS version of the site, and the Credential Management API now supports filling credentials from matching subdomains.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><a href=\"https://www.chromestatus.com/feature/5720917787279360\" style=\"text-decoration: none;\"><span>caret-color</span></a><span> property enables developers to specify the color of the text input cursor.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>To preserve </span><a href=\"https://w3c.github.io/pointerevents/#extensions-to-the-globaleventhandlers-interface\" style=\"text-decoration: none;\"><span>consistency</span></a><span> with other </span><span>on&lt;event&gt;</span><span> attributes, </span><span>ongotpointercapture</span><span> and </span><span>onlostpointercapture</span><span> are now part of the </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers\" style=\"text-decoration: none;\"><span>GlobalEventHandlers</span></a><span> mixin. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Support is now available for </span><span>text-decoration-skip: ink</span><span> to make underlines skip </span><a href=\"https://drott.github.io/underline.mp4\" style=\"text-decoration: none;\"><span>descenders</span></a><span>, the portion of letters that extend below the text's baseline.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>New </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration\" style=\"text-decoration: none;\"><span>text-decoration</span></a><span> properties are now available, allowing developers to specify visual effects such as line color and style.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/PresentationRequest\" style=\"text-decoration: none;\"><span>PresentationRequest</span></a><span> constructor has been modified to accept multiple URLs via a </span><span>sequence&lt;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMString\" style=\"text-decoration: none;\"><span>DOMString</span></a><span>&gt;</span><span>, in addition to the existing constructor that takes a single URL.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The new </span><a href=\"https://webaudio.github.io/web-audio-api/#widl-AudioContext-getOutputTimestamp-AudioTimestamp\" style=\"text-decoration: none;\"><span>AudioContext.getOutputTimestamp()</span></a><span> method enables developers to synchronize </span><span>DOMHighResTimeStamp</span><span> and </span><span>AudioContext.currentTime</span><span> values.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>AudioBufferSourceNode</span><span>, </span><span>OscillatorNode</span><span>, and </span><span>ConstantSourceNode</span><span> now inherit from </span><a href=\"https://webaudio.github.io/web-audio-api/#AudioScheduledSourceNode\" style=\"text-decoration: none;\"><span>AudioScheduledSourceNode</span></a><span>, consolidating functionality. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The new </span><a href=\"https://webaudio.github.io/web-audio-api/#widl-AudioParam-cancelAndHoldAtTime-AudioParam-double-cancelTime\" style=\"text-decoration: none;\"><span>cancelAndHoldAtTime</span></a><span> function cancels future </span><span>AudioParam</span><span> events with times greater than or equal to </span><span>cancelTime</span><span>, allowing developers to preserve the value of the scheduled time in a direct way.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Developers can now construct WebAudio-specific events such as </span><a href=\"https://webaudio.github.io/web-audio-api/#OfflineAudioCompletionEvent\" style=\"text-decoration: none;\"><span>OfflineAudioCompletionEvent</span></a><span> and </span><a href=\"https://webaudio.github.io/web-audio-api/#the-audioprocessingevent-interface---deprecated\" style=\"text-decoration: none;\"><span>AudioProcessEvent</span></a><span>. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>To increase user security, Chrome's </span><a href=\"https://msdn.microsoft.com/en-us/library/dd565647(v=vs.85).aspx\" style=\"text-decoration: none;\"><span>XSS Auditor</span></a><span> now blocks entire suspicious pages by default, rather than selectively filtering out the suspected reflected XSS on the page.</span></div></li></ul><h1 dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 6pt; margin-top: 20pt;\"><span>Deprecations and interoperability improvements</span></h1><ul style=\"margin-bottom: 0pt; margin-top: 0pt;\"><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Support for the </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/keygen\" style=\"text-decoration: none;\"><span>&lt;keygen&gt;</span></a><span> </span><span>element has been removed, causing it to no longer display any controls nor submit form element data</span><span>, to align with other browsers. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>As </span><a href=\"https://security.googleblog.com/2016/11/sha-1-certificates-in-chrome.html\" style=\"text-decoration: none;\"><span>previously announced</span></a><span>, locally-trusted SHA-1 certificates will now result in a certificate error page unless the </span><a href=\"https://www.chromium.org/administrators/policy-list-3#EnableSha1ForLocalAnchors\" style=\"text-decoration: none;\"><span>EnableSha1ForLocalAnchors</span></a><span> enterprise policy has been set.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>fieldset.elements</span><span> now returns an </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection\" style=\"text-decoration: none;\"><span>HTMLCollection</span></a><span> instead of an </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection\" style=\"text-decoration: none;\"><span>HTMLFormControlsCollection</span></a><span> to better align with </span><a href=\"https://html.spec.whatwg.org/multipage/forms.html#dom-fieldset-elements\" style=\"text-decoration: none;\"><span>spec</span></a><span>.</span></div></li></ul><ul style=\"margin-bottom: 0pt; margin-top: 0pt;\"><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><span>&lt;cursor&gt;</span><span> element has been removed, but but cursor icons can still be set via the </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" style=\"text-decoration: none;\"><span>cursor</span></a><span> CSS property.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>A legacy caller has been removed from </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement\" style=\"text-decoration: none;\"><span>HTMLEmbedElement</span></a><span> and </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement\" style=\"text-decoration: none;\"><span>HTMLObjectElement</span></a><span>, so the interfaces will now throw exceptions rather than having their instances called as functions. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><a href=\"https://msdn.microsoft.com/en-us/library/ms534711(v=vs.85).aspx\" style=\"text-decoration: none;\"><span>usemap</span></a><span> attribute now requires case-sensitive matching.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>All </span><span>-webkit-</span><span> prefixed </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\" style=\"text-decoration: none;\"><span>IndexedDB</span></a><span> global aliases have been removed, after their deprecation in M38. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Custom message events and events created by </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Client/postMessage\" style=\"text-decoration: none;\"><span>client.postMessage(message, transfer)</span></a><span> </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Client/postMessage\" style=\"text-decoration: none;\"><span>i</span></a><span>n</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Client/postMessage\" style=\"text-decoration: none;\"><span> </span></a><span>a</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Client/postMessage\" style=\"text-decoration: none;\"><span> </span></a><span>s</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Client/postMessage\" style=\"text-decoration: none;\"><span>e</span></a><span>r</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Client/postMessage\" style=\"text-decoration: none;\"><span>v</span></a><span>i</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Client/postMessage\" style=\"text-decoration: none;\"><span>c</span></a><span>e</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Client/postMessage\" style=\"text-decoration: none;\"><span> </span></a><span>w</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Client/postMessage\" style=\"text-decoration: none;\"><span>o</span></a><span>r</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Client/postMessage\" style=\"text-decoration: none;\"><span>k</span></a><span>e</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Client/postMessage\" style=\"text-decoration: none;\"><span>r</span></a><span> will now use </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent\" style=\"text-decoration: none;\"><span>MessageEvent</span></a><span> instead of </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerMessageEvent\" style=\"text-decoration: none;\"><span>ServiceWorkerMessageEvent</span></a><span>, following the HTML </span><span>MessageEvent</span><span> </span><a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=659074\" style=\"text-decoration: none;\"><span>spec extension</span></a><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Support for </span><span>webkitClearResourceTimings()</span><span>, </span><span>webkitSetResourceTimingBufferSize()</span><span>, and </span><span>onwebkitresourcetimingbufferfull</span><span> has been removed from the </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance\" style=\"text-decoration: none;\"><span>Performance</span></a><span> interface, in favor of </span><span>clearResourceTimings()</span><span>, </span><span>setResourceTimingBufferSize()</span><span>, and </span><span>onresourcetimingbufferfull</span><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>The following </span><span>-internal</span><span> CSS selectors are being deprecated: </span><a href=\"https://www.chromestatus.com/feature/5734009183141888\" style=\"text-decoration: none;\"><span>-internal-media-controls-cast-button</span></a><span>, </span><a href=\"https://www.chromestatus.com/feature/5714245488476160\" style=\"text-decoration: none;\"><span>-internal-media-controls-overlay-cast-button</span></a><span>, and all of the </span><a href=\"https://www.chromestatus.com/feature/5661431349379072\" style=\"text-decoration: none;\"><span>-internal-media-controls-text-track-list</span></a><span> </span><span>selectors.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Support for the obsolete API </span><span>webkitCancelRequestAnimationFrame</span><span> has been removed in favor of </span><span>cancelAnimationFrame</span><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>On Android, </span><span>wordWrap: break-word</span><span> and </span><span>-webkit-line-break: after-white-space</span><span> will no longer be set on </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable\" style=\"text-decoration: none;\"><span>contenteditable</span></a><span> containers by default, to preserve consistency between browsers.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><span>webkit</span><span> prefix has been removed from </span><span>AudioContext</span><span> and </span><span>OfflineAudioContext</span><span>.</span></div></li></ul><br /><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Posted by Xi Han, Home Screen Heroine</span></div>", "title": "Chrome 57 Beta: CSS Grid Layout, Improved Add to Home screen, Media Session API", "source_link": "http://blog.chromium.org/", "author_link": "https://plus.google.com/106190864297512596007", "author_name": "Chrome Blog", "source_type": "rss", "link": "http://blog.chromium.org/2017/02/chrome-57-beta-css-grid-layout-improved.html", "published": "2017-02-02T20:34:00", "source_title": "Chromium Blog", "tags": "browsers,chromium,tech,web"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "ChromiumBlog", "description": "<div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">In 2015, we </span><a href=\"https://blog.chromium.org/2015/03/chrome-42-beta-push-notifications_12.html\" style=\"text-decoration: none;\"><span style=\"background-color: transparent; color: #1155cc; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">added a new feature</span></a><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> to Chrome for Android that allows developers to prompt users to add their site to the Home screen for fast and convenient access. That feature uses an </span><a href=\"https://developer.android.com/guide/topics/ui/shortcuts.html\" style=\"text-decoration: none;\"><span style=\"background-color: transparent; color: #1155cc; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">Android shortcut</span></a><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">, which means that web apps don‚Äôt show up throughout Android in the same way as installed native apps. For example, many developers have asked for their web app to show up in the app drawer section of the launcher. These differences can be confusing for users and prevent the experience from feeling as cohesive as it could.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><b id=\"docs-internal-guid-60180b4a-002f-caca-cd1b-1d3a0d2333a8\" style=\"font-weight: normal;\"><br /></b></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">In the next few weeks we‚Äôll be rolling out a </span><a href=\"https://developers.google.com/web/updates/2017/02/improved-add-to-home-screen\" style=\"text-decoration: none;\"><span style=\"background-color: transparent; color: #1155cc; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">new version of this experience</span></a><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> in Chrome beta. With this new version, once a user adds a </span><a href=\"http://developers.google.com/web/progressive-web-apps/\" style=\"text-decoration: none;\"><span style=\"background-color: transparent; color: #1155cc; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">Progressive Web App</span></a><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> to their Home screen, Chrome will integrate it into Android in a much deeper way than before. For example, Progressive Web Apps will now appear in the app drawer section of the launcher and in Android Settings, and will be able to receive incoming intents from other apps. Long presses on their notifications will also reveal the normal Android notification management controls rather than the notification management controls for Chrome.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><b style=\"font-weight: normal;\"><br /></b></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><b style=\"font-weight: normal;\"><br /></b></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span id=\"docs-internal-guid-60180b4a-0043-42cf-78e4-56d080f12d40\"><span style=\"font-family: Arial; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;\"><img height=\"351\" src=\"https://lh5.googleusercontent.com/b-KVQX3-1_sH4aH4MXbelYTkWg8m5aDlgH-bXff3iPveJtsqHP5qXP4MWy7B0aTd9akJJsayjp2eI70_FDnC7SOswCIqm7KdUKMOJbrEw9_-8xGuMgXawxJvzf9VUk7cWi9kaT4Z\" width=\"624\" /></span></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><b style=\"font-weight: normal;\"><br /></b></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><b style=\"font-weight: normal;\"><br /></b></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">This new Add to Home screen feature is one more step in our journey to empower developers to build the best possible experience for their users, and we are committed to ensuring the same mechanisms for installing Progressive Web Apps are available to all browsers on Android.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: Arial; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /><span style=\"font-family: Arial; font-size: 10pt; vertical-align: baseline; white-space: pre-wrap;\">Posted by <span id=\"docs-internal-guid-60180b4a-006f-98bd-94ae-58d7490fd289\"><span style=\"font-size: 10pt; vertical-align: baseline;\">Yaron Friedman</span></span>, Add to Home screen aficionado</span></div>", "title": "Integrating Progressive Web Apps deeply into Android", "source_link": "http://blog.chromium.org/", "author_link": "https://plus.google.com/106190864297512596007", "author_name": "Chrome Blog", "source_type": "rss", "link": "http://blog.chromium.org/2017/02/integrating-progressive-web-apps-deeply.html", "published": "2017-02-02T20:07:00", "source_title": "Chromium Blog", "tags": "browsers,chromium,tech,web"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "ChromiumBlog", "description": "<div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Historically, the code for Chrome for iOS was kept separate from the rest of the Chromium project due to the additional complexity required for the platform. After years of careful refactoring, all of this code is rejoining Chromium and being moved into the </span><a href=\"https://chromium.googlesource.com/chromium/src.git/+/master/ios/\" style=\"text-decoration: none;\"><span>open-source repository</span></a><span>.</span></div><b id=\"docs-internal-guid-173077fa-ef8e-14b4-745c-f4370981d1d6\" style=\"font-weight: normal;\"><br /></b><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Due to constraints of the iOS platform, all browsers must be built on top of the </span><a href=\"https://webkit.org/\" style=\"text-decoration: none;\"><span>WebKit</span></a><span> rendering engine. For Chromium, this means supporting both WebKit as well as </span><a href=\"https://www.chromium.org/blink\" style=\"text-decoration: none;\"><span>Blink</span></a><span>, Chrome's rendering engine for other platforms. That created some extra complexities which we wanted to avoid placing in the Chromium code base. </span></div><b style=\"font-weight: normal;\"><br /></b><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Given Chrome's commitment to open-source code, we've spent a lot of time over the past several years making the changes required to upstream the code for Chrome for iOS into Chromium. Today, that upstreaming is complete, and developers can </span><a href=\"https://chromium.googlesource.com/chromium/src/+/master/docs/ios_build_instructions.md\" style=\"text-decoration: none;\"><span>compile</span></a><span> the iOS version of Chromium like they can for other versions of Chromium. Development speed is also faster now that all of the tests for Chrome for iOS are available to the entire Chromium community and automatically run any time that code is checked in.</span></div><b style=\"font-weight: normal;\"><br /></b><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>We value the open source community and all of our contributors, and we're glad that Chrome for iOS can finally join in. </span></div><br /><br /><span>Posted by Rohit Rao, Upstream Angler </span>", "title": "Open-sourcing Chrome on iOS!", "source_link": "http://blog.chromium.org/", "author_link": "https://plus.google.com/106190864297512596007", "author_name": "Chrome Blog", "source_type": "rss", "link": "http://blog.chromium.org/2017/01/open-sourcing-chrome-on-ios.html", "published": "2017-01-31T17:59:00", "source_title": "Chromium Blog", "tags": "browsers,chromium,tech,web"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "ChromiumBlog", "description": "<div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Speed is one of Chrome‚Äôs four core principles, enabling web developers to provide users with faster, more engaging web experiences. While many components in the browser contribute to overall speed, the rendering pipeline is primarily responsible for ensuring websites display at 60 frames per second (fps), which feels fast and responsive to users. Over the last few months we‚Äôve rolled out several performance improvements to Chrome‚Äôs rendering pipeline, making it even smarter about the work it completes. Chrome now more intelligently skips redundant tasks, chooses optimal rendering algorithms, and better utilizes system hardware, causing websites to load faster, run smoother, and use less power.</span></div><b id=\"docs-internal-guid-750b5f6e-ec8c-5a06-b1e1-110ec3030035\" style=\"font-weight: normal;\"><br /></b><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>In order to display content at 60fps, Chrome has only </span><a href=\"https://developers.google.com/web/fundamentals/performance/rendering/\" style=\"text-decoration: none;\"><span>16ms to render each frame</span></a><span>, including JavaScript execution, style, layout, painting, and pushing the resulting pixels to the user‚Äôs screen. Of that 16ms time budget, the less Chrome uses, the more time web developers have to run scripts, load content, and delight their users. Many of our recent improvements to the rendering pipeline focus on reducing the per-frame workload, rather than simply improving Chrome‚Äôs raw speed.</span></div><b style=\"font-weight: normal;\"><br /></b><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>For example, when Chrome is preparing to paint pixels to the screen, it must first identify which elements on the page need to be redrawn and which can be copied from the previous frame‚Äôs cache. On highly dynamic pages with frequent DOM changes, this performance cost can add up quickly. To simplify this task, Chrome now tracks the draw commands generated for each element and can identify visually non-overlapping subsets. If one of these subsets hasn‚Äôt been modified, the entire block can be copied directly from the cache without any additional work. This optimization reduces the time it takes to paint a new frame to the screen by up to 35%.</span></div><b style=\"font-weight: normal;\"><br /></b><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Chrome also groups the pixels into tiles to enable smaller and faster updates to the screen. Previously, Chrome would redraw any of these tiles that had been modified by a DOM update, but this is only optimal if the majority of a tile‚Äôs area needs to be redrawn. If only a few pixels have changed, it‚Äôs faster to </span><a href=\"https://software.intel.com/en-us/articles/native-one-copy-texture-uploads-for-chrome-os-on-intel-architecture-enabled-by-default\" style=\"text-decoration: none;\"><span>copy the entire tile</span></a><span> from the previous frame and then update the new pixels. Chrome can now intelligently choose the redraw pipeline that will be faster, reducing tile redraw time by up to 40%.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span> &nbsp;</span><span><img alt=\"test.gif\" height=\"227\" src=\"https://lh4.googleusercontent.com/AsQBXEzhTXwF4HanHvPXbid4MRZK_w_X4F8endqk-jzhSotFxq2qtLB1aspz0yNajIP7Tfx9fJ01NCe_Prby1DKkPIpK-ahk6bbylpD9MpCFrIHHhdW0kn12mzCkmQkQOGzJ-J12\" width=\"455\" /></span><span> &nbsp;</span></div><div style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span id=\"docs-internal-guid-750b5f6e-ec8d-6f65-f9bb-def6534fd927\"></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span>Any update to the screen, such as the input cursor blinking, would previously require the whole tile to be re-rendered (left). When only a few pixels have changed, Chrome can now redraw only the modified region (right).</span></div><b style=\"font-weight: normal;\"><br /></b><b style=\"font-weight: normal;\"><br /></b><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>In addition to intelligently optimizing its workload, Chrome is now better at choosing how it completes that work given the underlying hardware. While video and canvas elements have been </span><a href=\"https://blog.chromium.org/2012/02/gpu-accelerating-2d-canvas-and-enabling.html\" style=\"text-decoration: none;\"><span>GPU accelerated for a long time</span></a><span>, Chrome is constantly getting better at utilizing the GPU for more challenging rendering tasks. On Android, Mac, and Windows, Chrome now better utilizes GPU acceleration for complex site content rendering. This improves animation performance, input latency, and scroll smoothness for modern SVG and HTML5 pages.</span></div><b style=\"font-weight: normal;\"><br /></b><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>There are many different dimensions to speed, and we‚Äôre committed to continually improving Chrome‚Äôs performance and enabling developers to optimize their user experience to hit 60fps. The rendering pipeline is only one piece of the puzzle, and we‚Äôve got a lot more coming. Stay tuned as we continue taking deep dives into performance and steadily make the web faster and more responsive for all Chrome users.</span></div><br /><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Posted by Chris Harrelson, Painting Professional</span></div>", "title": "Performance improvements in Chrome's rendering pipeline", "source_link": "http://blog.chromium.org/", "author_link": "https://plus.google.com/106190864297512596007", "author_name": "Chrome Blog", "source_type": "rss", "link": "http://blog.chromium.org/2017/01/performance-improvements-in-chromes.html", "published": "2017-01-30T18:05:00", "source_title": "Chromium Blog", "tags": "browsers,chromium,tech,web"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "ChromiumBlog", "description": "<div dir=\"ltr\"><span>Reload has </span><a href=\"http://www.viola.org/viola/vw/help_motif.html\" style=\"text-decoration: none;\"><span>long been</span></a><span> a staple feature of web browsers and kept its original behavior throughout the years, despite the changing landscape of web platform innovations, connectivity, and content consumption patterns. When reloading a page, browsers will check with the web server if cached resources are still usable, a process known as validation. This typically results in </span><a href=\"http://httparchive.org/interesting.php#reqTotal\" style=\"text-decoration: none;\"><span>hundreds of network requests per page</span></a><span> issued to </span><a href=\"http://httparchive.org/trends.php#numDomains&amp;maxDomainReqs\" style=\"text-decoration: none;\"><span>dozens of domains</span></a><span>. On mobile devices, the </span><a href=\"https://developers.google.com/speed/docs/insights/mobile#adapting-to-high-latency-mobile-networks\" style=\"text-decoration: none;\"><span>high latency</span></a><span> and transient nature of mobile connections mean that this behavior can produce serious performance issues. In the latest version of Chrome, changes to page reload behavior produce reloads that are 28% faster and result in 60% fewer validation requests.</span><span><br class=\"kix-line-break\" /></span><span><br class=\"kix-line-break\" /></span><span>Users typically reload either because a page is broken or the content seems stale. The existing reload behavior usually solves broken pages, but stale content is inefficiently addressed by a regular reload, especially on mobile. This feature was originally designed in times when broken pages were quite common, so it was reasonable to address both use cases at once. However, this original concern has now become far less relevant as the quality of web pages has increased. To improve the stale content use case, Chrome now has a simplified reload behavior to only validate the main resource and continue with a regular page load. This new behavior maximizes the reuse of cached resources and results in lower latency, power consumption, and data usage.</span><br /><span><br /></span><span><br /></span><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"></div><br /><span>Despite being a relatively minor change, the new behavior makes reloads up to 28% faster and consume less bandwidth and power. Furthermore, Facebook contacted us with data showing that Chrome was sending validation requests at three times the rate of other browsers. </span><span>Thanks to the new reload behavior and some related changes, Facebook now reports </span><a href=\"https://code.facebook.com/posts/557147474482256\" style=\"background-color: white; color: #1155cc; font-family: arial; font-size: 13.3333px; white-space: pre-wrap;\">28% faster page reloads and 60% less validation requests</a>&nbsp;<span>from Chrome. </span><br /><span><br /></span><span>We hope this faster reload will come in handy whenever you want to get the latest content on your favorite website or quickly recover from a flaky connection in the subway. </span><br /><span><br /></span><span>Posted by Takashi Toyoshima, ‚ÄúReloader Sensei‚Äù</span></div>", "title": "Reload, reloaded: faster and leaner page reloads", "source_link": "http://blog.chromium.org/", "author_link": "https://plus.google.com/106190864297512596007", "author_name": "Chrome Blog", "source_type": "rss", "link": "http://blog.chromium.org/2017/01/reload-reloaded-faster-and-leaner-page_26.html", "published": "2017-01-26T16:00:00", "source_title": "Chromium Blog", "tags": "browsers,chromium,tech,web"}, {"source_name": "2ality", "description": "<p>Occasionally, you want Web Workers to communicate with each other. Doing so is not obvious as most Web Worker examples are about communicating between the main thread and a Web Worker. There, one uses <code>postMessage()</code> to send messages directly to the Worker. Alas, that doesn‚Äôt work for communicating between two Workers, because you can‚Äôt pass references to Workers around.</p>\n\n<div><a href=\"http://2ality.com/2017/01/messagechannel.html\">[Read rest of post]</a></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/2ality/~4/2PpA8TBUqAA\" width=\"1\" />", "tags": "js,tech,web", "source_link": "http://2ality.com/", "title": "Communicating between Web Workers via <code>MessageChannel</code>", "author_name": "Dr. Axel Rauschmayer", "source_type": "rss", "link": "http://2ality.com/2017/01/messagechannel.html", "author_link": "http://2ality.com/", "published": "2017-01-15T14:58:00", "source_title": "2ality feed"}, {"picture": "//lh5.googleusercontent.com/-QUOESSoy_ag/AAAAAAAAAAI/AAAAAAAAAF4/sE35VCSvf-E/s512-c/photo.jpg", "source_name": "V8Blog", "description": "This blog post covers V8's recent migration of RegExp's built-in functions from a self-hosted JavaScript implementation to one that hooks straight into our new code generation architecture based on <a href=\"http://v8project.blogspot.de/2016/12/v8-release-56.html\">TurboFan</a>.<br /><br />V8‚Äôs RegExp implementation is built on top of <a href=\"https://blog.chromium.org/2009/02/irregexp-google-chromes-new-regexp.html\">Irregexp</a>, which is widely considered to be one of the fastest RegExp engines. While the engine itself encapsulates the low-level logic to perform pattern matching against strings, functions on the RegExp prototype such as <span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\">RegExp.prototype.exec</a></span> do the additional work required to expose its functionality to the user.<br /><br />Historically, various components of V8 have been implemented in JavaScript. Until recently, <span>regexp.js</span> has been one of them, hosting the implementation of the RegExp constructor, all of its properties as well as its prototype‚Äôs properties.<br /><br />Unfortunately this approach has disadvantages, including unpredictable performance and expensive transitions to the C++ runtime for low-level functionality. The recent addition of built-in subclassing in ES6 (allowing JavaScript developers to provide their own customized RegExp implementation) has resulted in a further RegExp performance penalty, even if the RegExp built-in is not subclassed. These regressions could not be be fully addressed in the self-hosted JavaScript implementation.<br /><br />We therefore decided to migrate the RegExp implementation away from JavaScript. &nbsp;However, preserving performance turned out to be more difficult than expected. An initial migration to a full C++ implementation was significantly slower, reaching only around 70% of the original implementation‚Äôs performance. &nbsp;After some investigation, we found several causes:<br /><br /><ul><li><span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\">RegExp.prototype.exec</a></span> contains a couple of extremely performance-sensitive areas, most notably including the transition to the underlying RegExp engine, and construction of the RegExp result with its associated substring calls. For these, the JavaScript implementation relied on highly optimized pieces of code called 'stubs', written either in native assembly language or by hooking directly into the optimizing compiler pipeline. It is not possible to access these stubs from C++, and their runtime equivalents are significantly slower.</li><li>Accesses to properties such as RegExp's lastIndex can be expensive, possibly requiring lookups by name and traversal of the prototype chain. V8's optimizing compiler can often automatically replace such accesses with more efficient operations, while these cases would need to be handled explicitly in C++.</li><li>In C++, references to JavaScript objects must be wrapped in so-called Handles in order to cooperate with garbage collection. Handle management produces further overhead in comparison to the plain JavaScript implementation.</li></ul><br /><div><div>Our new design for the RegExp migration is based on the <a href=\"https://codesearch.chromium.org/chromium/src/v8/src/code-stub-assembler.h?q=codestubassembler&amp;sq=package:chromium&amp;dr=C&amp;l=52\">CodeStubAssembler</a>, a mechanism that allows V8 developers to write platform-independent code which will later be translated into fast, platform-specific code by the same backend that is also used for the new optimizing compiler TurboFan. Using the CodeStubAssembler allows us to address all shortcomings of the initial C++ implementation. Stubs (such as the entry-point into the RegExp engine) can easily be called from the CodeStubAssembler. While fast property accesses still need to be explicitly implemented on so-called fast paths, such accesses are extremely efficient in the CodeStubAssembler. Handles simply do not exist outside of C++. And since the implementation now operates at a very low level, we can take further shortcuts such as skipping expensive result construction when it is not needed.</div><div><br /></div><div>Results have been very positive. Our score on <a href=\"https://github.com/chromium/octane/blob/master/regexp.js\">a substantial RegExp workload</a> has improved by 15%, more than regaining our recent subclassing-related performance losses. Microbenchmarks (Figure 1) show improvements across the board, from 7% for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><span>RegExp.prototype.exec</span></a>, up to 102% for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split\"><span>RegExp.prototype[@@split]</span></a>.</div></div><div><br /></div><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://1.bp.blogspot.com/-dH8dNzoefIQ/WHNkQkb9MsI/AAAAAAAAAeE/rZAWgU9_oP4fUGBsHABa2QGI7CARo86NwCLcB/s1600/micros.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"360\" src=\"https://1.bp.blogspot.com/-dH8dNzoefIQ/WHNkQkb9MsI/AAAAAAAAAeE/rZAWgU9_oP4fUGBsHABa2QGI7CARo86NwCLcB/s640/micros.png\" width=\"640\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Figure 1: RegExp speedup broken down by function.</td></tr></tbody></table><div>So how can you, as a JavaScript developer, ensure that your RegExps are fast? If you are not interested in hooking into RegExp internals, make sure that neither the RegExp instance, nor its prototype is modified in order to get the best performance:</div><pre><code class=\"javascript\">var re = /./g;<br />re.exec(''); &nbsp;// Fast path.<br />re.new_property = 'slow';<br />RegExp.prototype.new_property = 'also slow';<br />re.exec(''); &nbsp;// Slow path.<br /></code></pre><div>And while RegExp subclassing may be quite useful at times, be aware that subclassed RegExp instances require more generic handling and thus take the slow path:</div><pre><code class=\"javascript\">class SlowRegExp extends RegExp {}<br />new SlowRegExp(\".\", \"g\").exec(''); &nbsp;// Slow path.<br /></code></pre><div>The full RegExp migration will be available in V8 5.7.</div><div><br /></div><div>Posted by Jakob Gruber, Regular Software Engineer</div>", "title": "Speeding up V8 Regular Expressions", "source_link": "http://v8project.blogspot.com/", "author_link": "https://plus.google.com/113299105863960995711", "author_name": "Jakob Gruber", "source_type": "rss", "link": "http://v8project.blogspot.com/2017/01/speeding-up-v8-regular-expressions.html", "published": "2017-01-10T15:06:00", "source_title": "V8 JavaScript Engine", "tags": "browsers,chromium,js,tech,web"}, {"source_name": "PerformanceCalendar", "description": "In 2003, to normalize a setClass function across browsers, I created my first JavaScript library. It checked for support of the standard document.getElementById, gracefully degraded to check for the non-standard document.all, and used UA sniffing to check for old Netscape. I used it to do only one thing: change class names. It was ugly, but [&#8230;]", "tags": "javascript,culture,perf,performance,tech,web", "text": "<p>In 2003, to normalize a <code>setClass</code> function across browsers, I created <a href=\"http://estelleweyl.com/portfolio/dhtml.htm\">my first JavaScript library</a>. It checked for support of the standard <code>document.getElementById</code>, gracefully degraded to check for the non-standard <code>document.all</code>, and used UA sniffing to check for old Netscape. I used it to do only one thing: change class names. It was ugly, but necessary. By today&#8217;s standards, at 885 bytes unminified, it was also tiny. Popular libraries and frameworks are much larger as they are written to be more robust than mine, but what is their impact on performance?</p>\n<p>While we&#8217;ve focused a great deal of effort in minimizing the time to download assets, and some sites have improved first render by becoming isomorphic, in general there hasn&#8217;t been enough attention paid to the performance of client-side JavaScript, which can have terrible performance consequences. For most websites, It is generally <a href=\"http://www.onebigfluke.com/2015/01/experimentally-verified-why-client-side.html\">faster to generate content server-side</a>. When a site spends more time processing scripts than downloading them before painting meaningful content to the page, we have to ask ourselves, &#8220;are dependencies worth it?&#8221; </p>\n<p>Libraries enable &#8220;code once, work everywhere.&#8221;  Normalizing event listening methods <code>addEventListener</code> and <code>attachEvent</code> was a common requirement and a big reason why jQuery was so quickly adopted. jQuery, currently at 252 KiB unminified (32 KiB minified and compressed), includes <code>addClass</code>, <code>removeClass</code> and <code>toggleClass</code>, and pretty much everything else you may need, as well as many features that aren&#8217;t needed. As many learn to use a library before or instead of learning vanilla JavaScript, libraries are often also used for things the browser now does natively. For example, if your only need is a <code>toggleClass</code> or similar function, a library isn&#8217;t needed as <a href=\"http://caniuse.com/#search=classlist\">classList</a> is natively supported in all modern browsers. </p>\n<p>With the ubiquity of standards supporting evergreen browsers, there&#8217;s less of a need to normalize. While you would think this would lead to fewer dependencies, script bloat has not subsided. Quite the contrary. The average website makes <a href=\"http://httparchive.org/trends.php#bytesJS&amp;reqJS\">24 JavaScript requests</a> to download an average of 420 KiB of JavaScript &#8211; which includes both dependencies and 3rd-party scripts. As developers, we include libraries and frameworks to help us code: increasingly not because we need to, but rather because we want to. Most of use frameworks and libraries to make our own lives easier, but there are many who add them because they want to learn how to use them rather than out of actual site or application requirements. </p>\n<p>While frameworks and plugins can provide for faster, optimized, readable code, with function chaining, implicit iteration behavior, and other nice-to-haves, they&#8217;re not always beneficial or necessary. We should be focused on the user experience, not the developer experience. Think of libraries as scaffolding: they can help you quickly prototype and even build your application, but you don&#8217;t leave unnecessary scaffolding in place when the building, bridge or application is complete: you remove what you don&#8217;t need. Why are we sending unused functions with each request? Why are we creating web components which replicate the features of a native element, with or without a simple event handler, that are often only used once? Libraries, frameworks, and other dependencies should never be included out of laziness or for resume padding. </p>\n<p>Using a framework or library to simplify a coding job means every site visitor will have to wait for that dependency to download. Every additional plugin contributes to bloat. In 2010, when we started keeping records about web app sizes, the average website was around 700 KiB, the size of ReactJS (145 KiB minified and compressed). ReactJS is now a starting point for many sites. That&#8217;s a lot of bytes! Does is it benefit the user? Or was it included to benefit the developer either in terms of time saved or in terms of added professional experience? What are the costs associated of including each dependency? It&#8217;s not just bloat that&#8217;s an issue, but also relying on 3rd-party dependencies that can be points of failure. For example, keeping <a href=\"https://www.npmjs.com/package/left-pad\">left-pad</a> as an external dependency caused major issues with React, Babel and many, many web applications when a similar, basic function could have been rolled into a site&#8217;s script without <a href=\"http://www.haneycodes.net/npm-left-pad-have-we-forgotten-how-to-program/\">breaking the web</a>!</p>\n<p>Today the average size of a web site or application is around 2.5MB, with 403 KiB of generally minified scripts (versus 118 KiB of scripts, both minified and not, in 2010). 403 KiB may not seem that bad, being only 16% of the bloat of a modern web application. Indeed, optimizing images and other media continue to be the &#8220;low-hanging fruit&#8221; of web application bandwidth consumption. However, it&#8217;s not just the download time of application assets that matters. Performance isn&#8217;t just about download time: it&#8217;s about time to interactive and sustaining 60 frames per second (fps). When you have a site that is fully built client-side, the download time may be reasonable, but 60 fps may become a pipe dream. </p>\n<p>When a site is built client-side, the content needs to be dynamically created ‚Äì the JavaScript needs to be parsed and executed, the HTML needs to be parsed and rendered. </p>\n<p>Here is a screenshot of the timeline (and the waterfall view later on) of a single-page application (SPA) which renders a fairly simple form with 55,000 lines of JavaScript. It shows a 0.3 fps frame rate and a 3+s DOMContentLoaded event, neither of which is a good user experience.</p>\n<p><a href=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/image_0.png\"><img alt=\"image_0\" src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/image_0.png\" width=\"650\" /></a></p>\n<p>The <a href=\"https://www.webpagetest.org/result/160919_P2_3G9/1/details/#waterfall_view_step1\">single-page app</a>(SPA) is just over 1MB, 56.5% of which is JavaScript (most sites&#8217; bandwidth is a majority images or other media), with 91% of processing time spent on scripting, versus 4% on layout. </p>\n<p>The HTML request is small. Over fast 3G, it only takes 18ms to download the 2.6 KiB HTML file, after a TTFB of 1424ms, which includes the DNS lookup, redirection to HTTPS, SSL negotiation (this is an area that can definitely be improved). The problem is, the HTML draws only one empty DOM node to the page: the body contains only an empty div with an ID to create a hook for content created client-side. It calls a few scripts that, in turn, create all the content for this client-side application, with the main components of the site downloading in 8,204 ms. While the CSS puts the background image on the body element at the 6.92 s first paint, the rest of the application doesn&#8217;t render until DOM Content Loaded at the 13.62 s mark: it takes more than 5 seconds after the content creating assets are downloaded for the client-side script to render the content to the page. </p>\n<p>It takes over 2 seconds to parse the JavaScript and HTML, during which time nothing is drawn to the screen. This delay is followed by a 3.3s frame &#8211; as in 0.3 fps when we&#8217;re aiming for 60 fps ‚Äì that includes a 3.12s <code>DOMContentLoaded</code> event. Yes, you read that correctly: a <code>DOMContentLoaded</code> event that lasts longer than three seconds. </p>\n<p>We get a beautiful pink bar in our waterfall timeline &#8212; a sight we never want to see.</p>\n<p><a href=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/image_1.png\"><img alt=\"image_1\" src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/image_1.png\" width=\"650\" /></a></p>\n<p>During this time the CPU is at capacity, the main thread is occupied, and 1 to 2MB of garbage gets collected at regular intervals. </p>\n<p>I did a <a href=\"https://www.webpagetest.org/result/161129_99_AG4/\">second run of WebPageTest</a> to confirm the results. In this second run, the main JavaScript is requested 1.282 s after the initial request for the app is made, taking 2.525 s to download 256 KiB of content. That&#8217;s not exactly good, even for 3G, and is the area where most web performance services focus their efforts. The initial HTML, and all the CSS and JavaScript for the single page application downloaded within 6 seconds (5963 ms), mainly because the CSS was super slow to download. This needs to improve, and can improved be easily with web performance best practices, but is not the point of this post. My main issue with this site is what hasn&#8217;t happened yet:  at six seconds, after the relevant resources have already been downloaded, the screen is <em>STILL</em> blank. It remains blank for two full seconds after the CSS and JavaScript are downloaded. It remains blank until the start of DOM Content Loaded, which itself lasts over two seconds as the JavaScript is parsed and executed. The start render is at 8.077 s, and the first meaningful paint ‚Äì the background only ‚Äì is at 8.7 seconds. </p>\n<p>With cached assets, the browsers still spends 4.24 seconds processing script. The content, generated client-side, doesn&#8217;t get painted to the page for 5.7 seconds. The time it takes to render the cached view is longer than I would expect such a site to take to deliver everything from the server and render the first view!</p>\n<p><a href=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/image_2.png\"><img alt=\"image_2\" src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/image_2.png\" width=\"650\" /></a></p>\n<p>Companies can spend hundred of developer hours and hundreds of thousands of dollars making download time faster, within the recommended 1 to 2 seconds. However, if they aren&#8217;t focusing on the time it takes to parse and execute client-side site-generating scripts, they are not going to improve user experience.  </p>\n<p>No matter how optimized the download speed gets, when you have 55,000 lines of JavaScript, like this single page application, it&#8217;s going to take too long while to parse and execute. There is no reason to include as many dependencies as this site includes for what is, in reality, a fairly simple form. The front-end functionality of such a simple form can be coded in under 1,000 lines of JavaScript, and less than 1,000 lines of CSS. Using semantic HTML, the functionality can be recreated in a few days without a framework and without any dependencies. </p>\n<p>Good engineering involves finding simple solutions to sometimes complex problems. Repurposing code may make development easier, but ease of development is not the end goal.</p>\n<p>Developers need to continue to learn to code before they learn to include frameworks. I am not saying developers should reinvent the wheel for each project, but 55,000 lines of JavaScript and six seconds to render a form you can replicate in under 1,000 lines of JavaScript?  </p>\n<p>Sometimes you really do need a framework, and a 3-second <code>DOMContentLoaded</code> event may be faster than a server-side render, but this is something you need to weigh. While rendering data with a thousand reuses of a single template is likely a <a href=\"http://www.onebigfluke.com/2015/01/experimentally-verified-why-client-side.html\">good use case for client-side rendering</a>, in the case of a three-field form, the cost associated with client-side rendering is too high. In general, however, you should only require your users to download functions that are actually needed for your application to work. An unnecessary, extended delay due to parsing unnecessary JavaScript is unnecessary, frustrating, and bad for business.</p>", "title": "You don‚Äôt need a framework for that", "author_name": "stoyan", "source_type": "rss", "link": "https://calendar.perfplanet.com/2016/you-dont-need-a-framework-for-that/", "source_link": "https://calendar.perfplanet.com", "source_title": "Performance Calendar", "published": "2016-12-31T17:57:00"}, {"source_name": "PerformanceCalendar", "description": "As mobile growth accelerates, the value of single-minded viewport optimization has diminished. The way you approach web page optimization requires a reboot. No one disputes the importance of viewport metrics like Speed Index or First Contentful Paint. Each provide meaningful benchmarks for web devs to determine progress in web optimization initiatives. In fact, it&#8217;s rare [&#8230;]", "tags": "design,perf,tech,web", "text": "<p>As mobile growth accelerates, the value of single-minded viewport optimization has diminished. The way you approach web page optimization requires a reboot.</p>\n<p>No one disputes the importance of viewport metrics like <a href=\"https://sites.google.com/a/webpagetest.org/docs/using-webpagetest/metrics/speed-index\">Speed Index</a> or <a href=\"https://github.com/WICG/paint-timing/blob/master/README.md\">First Contentful Paint</a>. Each provide meaningful benchmarks for web devs to determine progress in web optimization initiatives. In fact, it&#8217;s rare to find articles on this topic that don&#8217;t utilize these metrics.</p>\n<p>But as mobile continues to explode (<a href=\"http://www.comscore.com/Insights/Press-Releases/2016/12/Eleven-Consecutive-Billion-Dollar-Days-of-Online-Desktop-Spending-from-Thanksgiving-through-Cyber-Week-Mark-the-Longest-Streak-Ever\">it&#8217;s now the driving force</a>), we have come to rely more and more on these viewport metrics and have thrown anything not in the viewport to the wayside. Which begs the question: Do we need to prioritize, and focus on the load performance of content beneath the fold? Is it really not important?</p>\n<h2>Real user behavior (on mobile)</h2>\n<p>This question has been on my mind for most of 2016. While nearly everyone I spoke with at different companies or conferences, like Velocity NY, admitted load performance below the fold was nowhere on their roadmap and definitely not a priority, my intuition and common sense told me something altogether different.</p>\n<p>When browsing a page on a mobile device, I don&#8217;t wait for it to be fully ready to start attempting to use it. Much of the content I want to engage with is often below the fold. Whether an ecommerce product page or a WordPress blog, scrolling begins well before the content above the fold is ready.</p>\n<p>Disappointingly, nearly all published research I could scavenge regarding user&#8217;s scroll behavior or where they spend their time is measured solely on desktop. Thankfully, I did find one source which includes mobile device data <a href=\"http://time.com/12933/what-you-think-you-know-about-the-web-is-wrong/\">published</a> by <a href=\"http://blog.chartbeat.com/2013/08/12/scroll-behavior-across-the-web/\">Chartbeat</a>. Here&#8217;s the lowdown: <strong>Over 25% of users scroll before your page can even load, and then spend 66% of their attention below the fold</strong>.</p>\n<p>So if it&#8217;s not only common sense, but there&#8217;s data to back it up, why is &#8220;below the fold&#8221; performance ignored? Why the disconnect?</p>\n<p>The answer is pretty simple: we&#8217;ve limited our perspective because the available tools and metrics are based on the initial viewport (aka the content above the fold). You can see where I&#8217;m going with this: our own tools and metrics have blinded us to benchmark our sites to viewport performance.</p>\n<p>The result? We&#8217;re not optimizing for humans&#8230; but rather, for machines.</p>\n<h2>Asking the wrong question</h2>\n<p>The question is no longer, &#8220;Should we focus above or below the fold?&#8221;, but instead, &#8220;How can we concentrate on optimizing a user&#8217;s (a human) journey to our page?&#8221;</p>\n<p>But how exactly do we do that? To answer that question I analyzed several successful performant sites and discovered there are two or three key steps in a user&#8217;s &#8220;page load&#8221; journey to highlight. In my research, Amazon came out on top, so I&#8217;ll use their product pages on a mobile device with a 3G network connection as my guide.</p>\n<p>There are three steps in a user&#8217;s &#8220;page load&#8221; journey.</p>\n<h1>Step one: Confirming the user&#8217;s destination</h2>\n<p><img alt=\"amazon-load-1\" class=\"aligncenter size-large wp-image-2109\" height=\"1000\" src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/amazon-load-1-1.png\" width=\"375\" /></p>\n<p><em>Fig 1: at around 1 second</em></p>\n<p>Amazon starts by loading only the name of the product and its image. Their goal is not to load every important item (notice there is no buy button yet), but to load just enough to give the user confirmation they have arrived at the correct destination.</p>\n<p>Why is this important? When you tap a link, ever notice your anxiety levels can increase a little? You start wondering: did my connection die; did I fat finger that link; maybe my phone missed my tap. It&#8217;s because of this &#8220;anxiety&#8221; we need to give users feedback they are on the right page and everything is ok ASAP.</p>\n<h2>Step two: Allow users to accomplish their initial goals</h2>\n<p><img alt=\"amazon-load-2\" class=\"aligncenter size-large wp-image-2107\" height=\"1000\" src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/amazon-load-2.png\" width=\"375\" /></p>\n<p><em>Fig 2: at around 1.5 seconds</em></p>\n<p>Amazon now loads just enough content for users to accomplish their initial goal(s): being able to buy the product or add it to a wish list to buy later. Because of this, Amazon has loaded all the pricing information and the respective buttons. The &#8220;trade in&#8221;, &#8220;new &amp; used&#8221;, social buttons etc&#8230; will be loaded later.</p>\n<h3>Step three: Load remaining content in order of its importance</h3>\n<p>Everything now continues to load on the page, starting with the product description and reviews, in order of its importance until fully loaded. Amazon doesn&#8217;t even bother loading the footer until later.</p>\n<p><img alt=\"amazon-load-3\" class=\" size-large wp-image-2108\" height=\"2048\" src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/amazon-load-3.png\" /></p>\n<p><em>Fig 3: at about 3.5 seconds</em></p>\n<h2>Getting started with user journey optimization</h2>\n<p>Thinking about optimizing for a user&#8217;s &#8220;load journey&#8221; may be a big shift for some. And it&#8217;s understandable; we&#8217;ve been optimizing with only the fold in mind for years. So what&#8217;s the best way to get started? Here are the four steps I&#8217;ve found helpful:</p>\n<ol>\n<li>First, identify which key elements on your page give confirmation to the user they aren&#8217;t lost. For Amazon&#8217;s product page, it was the headline and product image. On a blog, it may be the heading of the post and your logo. Start a prioritized list with these elements at the top.</li>\n<li>Second, start thinking about your users: What are the different goals they&#8217;re trying to achieve? What are they looking for on your page? Make a list of these goals and choose what your team believes (or data shows if you have it) are the top three. And make sure everyone is in agreement.</li>\n<li>Of these goals you&#8217;ve chosen, identify the required key elements and add them to the list you started in #1.</li>\n<li>Add any remaining elements to the list</li>\n</ol>\n<p>Now, not only are you and your team on the same page with which elements are important‚Äîregardless if they are above or below the fold‚Äîyou have a prioritized list of elements to watch out for and where to spend your time optimizing.</p>\n<h2>TL;DR / Conclusion</h2>\n<ol>\n<li>Instead of focusing on the fold, we need to focus on our users and in particular, optimizing a user&#8217;s journey to our page. And since a lot of important elements are located below the fold (e.g., Amazon&#8217;s buy button), we need to be &#8220;fold agnostic&#8221;.</li>\n<li>We need better metrics and tools to help assist us in both measuring and seeing below the fold.</li>\n</ol>", "title": "The viewport doesn‚Äôt matter anymore", "author_name": "stoyan", "source_type": "rss", "link": "https://calendar.perfplanet.com/2016/the-viewport-doesnt-matter-anymore/", "source_link": "https://calendar.perfplanet.com", "source_title": "Performance Calendar", "published": "2016-12-30T02:45:00"}, {"source_name": "PerformanceCalendar", "description": "... because 24++ awesome articles on web performance is not enough!", "tags": "perf,performance,tech,web", "text": "<p>2016 was great for this little performance calendar. We were so lucky to have excellent contributions and, once again, went over the 24 article count expected of the &#8220;advent&#8221; format. What&#8217;s more, the articles arrived on time, even in advance, and it was clear we have more than enough to fill the 24 slots. So we could be picky. I had to say no to a couple of articles for being overly salesy. And we could afford say no to republications. I mean all authors are free to republish their articles on their blogs or elsewhere (the content is all theirs!) but I wouldn&#8217;t knowingly repost an article that was already out there.</p>\n<p>However in the spirit of <a href=\"http://rejectjs.org/\">JSconf&#8217;s rejects</a>, I wanted to give a shout out to these &#8220;rejects&#8221; (used here with the best possible meaning of the word and with all the love in the world). Again I&#8217;m grateful and humbled by the work of the authors.</p>\n<p>So here goes.</p>\n<h2>Static site implosion with Brotli and Gzip</h2>\n<p><img src=\"https://calendar.perfplanet.com/photos/thadee.jpg\" width=\"260\" /></p>\n<p>Thadee Trompetter (<a href=\"https://twitter.com/trompetski\">@trompetski</a>) is a front-end developer and DevOps engineer at <a href=\"https://www.voorhoede.nl/\">De Voorhoede</a>. He wrote an awesome piece called <a href=\"https://www.voorhoede.nl/en/blog/static-site-implosion-with-brotli-and-gzip/\">&#8220;Static site implosion with Brotli and Gzip&#8221;</a>. Kind of like a recipe for a Brotli broth: mix one part pre-compressed static files with one part level 4 on-the-fly compression. Then&#8230; serve fast!</p>\n<h2>Using R to check website performance</h2>\n<p><img alt=\"craig\" src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/craig-768x1024.jpg\" width=\"260\" /></p>\n<p><a href=\"http://www.craigfrancis.co.uk/\">Craig Francis</a> (<a href=\"https://twitter.com/craigfrancis\">@craigfrancis</a>) is a Director of Code Poets Ltd, specialising in the creation of websites and systems that support small to medium sized businesses in the UK, with a focus on Performance, Security, and Accessibility. His article was about how to use R for perf stats. You can read it and explore the various code snippets linked from it <a href=\"https://github.com/craigfrancis/r-stats/blob/master/docs/intro.md\">right here on githib</a>.</p>\n<h2>Reinventing Performance Testing</h2>\n<p><img alt=\"alex\" src=\"https://calendar.perfplanet.com/photos/alex.jpg\" width=\"260\" /></p>\n<p><a href=\"https://calendar.perfplanet.com/2011/how-response-times-impact-business/\">One</a> <a href=\"https://calendar.perfplanet.com/2012/performance-see-the-whole-picture/\">long</a> <a href=\"https://calendar.perfplanet.com/2013/different-aspects-of-performance/\">time</a> <a href=\"https://calendar.perfplanet.com/2015/new-dimensions-of-load-testing/\">calendar</a> <a href=\"https://calendar.perfplanet.com/2014/different-angles-of-web-performance/\">contributor</a>, <a href=\"http://alexanderpodelko.com/blog\">Alex Podelko</a> (<a href=\"http://twitter.com/apodelko\">@apodelko</a>) is a performance engineer and architect, currently a Consulting Member of Technical Staff at Oracle, responsible for performance testing and optimization of Enterprise Performance Management and Business Intelligence (a.k.a. Hyperion) products. He has a series of 6 blog posts on <a href=\"http://alexanderpodelko.com/blog/2016/10/06/reinventing-performance-testing-introduction/\">reinventing perf testing</a>. </p>\n<h2>Front-End Performance Checklist 2017</h2>\n<p><img alt=\"vitaly\" class=\"aligncenter size-full wp-image-2103\" height=\"180\" src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/vitaly.jpg\" width=\"180\" /></p>\n<p>Last but not least, <a href=\"https://www.smashingmagazine.com/author/vitaly-friedman/\">Vitaly Friedman</a> (<a href=\"http://www.twitter.com/smashingmag\">@smashingmag</a>) He&#8217;s a writer, speaker, author and editor-in-chief of Smashing Magazine. He runs <a href=\"https://www.smashingmagazine.com/smashing-workshops/\">responsive Web design workshops</a>, webinars and loves solving complex UX, front-end and performance problems in large companies.</p>\n<p>He posted a sort of perf TODO on Facebook and I challenged him to expand with a paragraph on each item so we can post to the calendar. The result is this monster of an article, a 33-point doc for all of us to tick off called <a href=\"https://www.smashingmagazine.com/2016/12/front-end-performance-checklist-2017-pdf-pages/\">Front-End Performance Checklist 2017</a>.</p>\n<h2>Thanks!</h2>\n<p>And have a happy perf-y new 2017!</p>", "title": "Bonus Calendar content", "author_name": "stoyan", "source_type": "rss", "link": "https://calendar.perfplanet.com/2016/bonus-content/", "source_link": "https://calendar.perfplanet.com", "source_title": "Performance Calendar", "published": "2016-12-29T06:14:00"}, {"source_name": "PerformanceCalendar", "description": "An instantly loading, self-rewriting application using ServiceWorker. It is like server rendering inside your browser.", "tags": "javascript,perf,performance,tech,web", "text": "<blockquote><p>An instantly loading, self-rewriting application using ServiceWorker. It is like server rendering inside your browser.</p></blockquote>\n<p>Important links:</p>\n<ul>\n<li>Instant TodoMVC <a href=\"https://instant-todo.herokuapp.com/\">demo</a> (please use Chrome browser for now), <a href=\"https://github.com/bahmutov/instant-vdom-todo\">source</a></li>\n<li>Uses <a href=\"https://github.com/bahmutov/bottle-service\">bottle-service</a> library to implement self-rewriting</li>\n</ul>\n<h2 id=\"the_problem\">The problem</h2>\n<p>Open your favorite web application, even a simple <a href=\"http://todomvc.com/\">TodoMVC</a> web application. Let it load. Change some data, for example add a new item to the list. Now reload the page. What happens? The page goes blank, then some initial markup appears. Then all of the sudden, everything shifts &#8211; the application&#8217;s code took over, rewriting the page&#8217;s tree structure, forcing the browser to render the loaded data. Here is one example: the screen recording of Angular2 TodoMVC application where I add items and reload the page.</p>\n<div class=\"wp-video\" style=\"width: 650px;\"><!--[if lt IE 9]><script>document.createElement('video');</script><![endif]-->\n<video class=\"wp-video-shortcode\" controls=\"controls\" height=\"360\" id=\"video-2096-1\" preload=\"metadata\" width=\"650\"><source src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/angular2-todomvc.webm?_=1\" type=\"video/webm\" /><a href=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/angular2-todomvc.webm\">https://calendar.perfplanet.com/wp-content/uploads/2016/12/angular2-todomvc.webm</a></video></div>\n<p>&nbsp;</p>\n<p>Before someone starts Angular-bashing, here is the screen recording of a React application, showing exactly the same problem:</p>\n<div class=\"wp-video\" style=\"width: 650px;\"><video class=\"wp-video-shortcode\" controls=\"controls\" height=\"360\" id=\"video-2096-2\" preload=\"metadata\" width=\"650\"><source src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/react-todomvc.webm?_=2\" type=\"video/webm\" /><a href=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/react-todomvc.webm\">https://calendar.perfplanet.com/wp-content/uploads/2016/12/react-todomvc.webm</a></video></div>\n<p>&nbsp;</p>\n<p>The <a href=\"http://todomvc.com/examples/vanillajs/\">vanilla JavaScript</a> implementation has a better experience in my view, because only part of the page is updated (the items list), while the top stays static:</p>\n<div class=\"wp-video\" style=\"width: 650px;\"><video class=\"wp-video-shortcode\" controls=\"controls\" height=\"360\" id=\"video-2096-3\" preload=\"metadata\" width=\"650\"><source src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/vanillajs-todomvc.webm?_=3\" type=\"video/webm\" /><a href=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/vanillajs-todomvc.webm\">https://calendar.perfplanet.com/wp-content/uploads/2016/12/vanillajs-todomvc.webm</a></video></div>\n<p>&nbsp;</p>\n<p>Every application in the list suffers from the same problem &#8211; during the page reload there is a time gap between the initial page load and the application rendering the &#8220;right&#8221; HTML. Some libraries are faster (<a href=\"http://todomvc.com/examples/mithril/#/\">Mithril</a> is great!), some are slower, but none approaches the server-side rendering for smooth user experience.</p>\n<p>In server-side rendering, the page is rendered in the complete form on the server, thus when it arrives the user sees the right layout instantly.  For example, see <a href=\"https://todomvc-express.gleb-demos.com/\">https://todomvc-express.gleb-demos.com/</a> &#8211; this server-rendered page appears instantly as a single entity.</p>\n<p>The question I want to answer is:</p>\n<blockquote><p>\n  Can we recreate the same &#8220;instant&#8221; page loading experience in our web application without the server-side rendering?\n</p></blockquote>\n<h2 id=\"instant_web_applications\">Instant web applications</h2>\n<p>Before we proceed, here is a screen recording of my TodoMVC implementation. You can try the live demo at <a href=\"https://instant-todo.herokuapp.com/\">instant-todo.herokuapp.com</a>. There is no server, but it does require a modern <a href=\"http://caniuse.com/#feat=serviceworkers\">browser supporting ServiceWorkers</a></p>\n<div class=\"wp-video\" style=\"width: 650px;\"><video class=\"wp-video-shortcode\" controls=\"controls\" height=\"360\" id=\"video-2096-4\" preload=\"metadata\" width=\"650\"><source src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/instant-todo.webm?_=4\" type=\"video/webm\" /><a href=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/instant-todo.webm\">https://calendar.perfplanet.com/wp-content/uploads/2016/12/instant-todo.webm</a></video></div>\n<p>&nbsp;</p>\n<p>Several important points</p>\n<ul>\n<li>I delay the web application bootstrap on purpose (there is even a popup message when the web application takes over)</li>\n<li>The page shows absolutely no flicker during load. Only some small CSS effects (like check marks) appear once the web application takes over.</li>\n<li>The state (the todo items) is stored in the <code>localStorage</code>, while the snapshot of the last rendered HTML is stored inside the ServiceWorker.</li>\n<li>Every time the state changes, and the application has rendered itself, it sends the command to the ServiceWorker to store the serialized HTML text. Thus the browser has  the correct page to load next time.</li>\n<li>When the browser requests the page again on reload, the ServiceWorker <em>updates the fetched page</em>  with the HTML text.</li>\n</ul>\n<p>This &#8220;instant&#8221; technology is called <a href=\"https://github.com/bahmutov/bottle-service\">bottle-service</a>; it is web framework-agnostic and should work with any library: Vue, Angular, React, etc. The communication with the ServiceWorker part only has 1 API method, called <code>refill</code>. The application should call <code>refill</code> <em>after</em> the page has been rendered to save the snapshot.</p>\n<p>Here is the application code that runs on every change to the data, you can see the full source in <a href=\"https://github.com/bahmutov/instant-vdom-todo/blob/master/src/app.js#L41\">src/app.js</a></p>\n<pre>\nfunction renderApp() { ... }\nfunction saveApp() {\n  // save the data\n  localStorage.setItem(todosStorageLabel, JSON.stringify(Todos.items))\n  setTimeout(function () {\n    // application has renderd itself\n    // web application controls element &lt;div id=\"app\"&gt;\n    // save the DOM snapshot\n    bottleService.refill(appLabel, 'app')\n  }, 0);\n}\n// on each user action\nrenderApp()\nsaveApp()\n</pre>\n<p>The method <code>refill()</code> is very simple &#8211; it just grabs the rendered HTML and sends it to the service worker to be stored. See its full code in <a href=\"https://github.com/bahmutov/bottle-service/blob/master/src/bottle.js#L77\">bottle.js</a></p>\n<pre>\nfunction refill (applicationName, id) {\n  var el = document.getElementById(id)\n  var html = el.innerHTML\n  send({\n    cmd: 'refill',\n    html: html,\n    name: applicationName,\n    id: id\n  })\n}\n</pre>\n<p>Let us look how the page&#8217;s source is updated during the reload. This is the code inside the <a href=\"https://github.com/bahmutov/bottle-service/blob/master/src/bottle-service.js#L45\">bottle-service service worker</a>. Assume that HTML snapshot has been sent from the app at some point using <code>bottleService.refill()</code> and is available</p>\n<pre>\nself.addEventListener('fetch', function (event) {\n  // ignore everything but the request to fetch the index.html\n  event.respondWith(\n    fetch(event.request)\n      .then(function (response) {\n        // we have fetched the page from the server\n        var copy = response.clone()\n        // in order to rewrite the response we need to clone it\n        return copy.text().then(function (html) {\n          // find div with give id \"app\"\n          // replace with HTML snapshot\n          var updatedHtml = update(html, ...)\n          var responseOptions = {\n            status: 200,\n            headers: {\n              'Content-Type': 'text/html charset=UTF-8'\n            }\n          }\n          return new Response(updatedHtml, responseOptions)\n        })\n      })\n  )\n})\n</pre>\n<p>You can even play with the <code>bottle-service</code> features using the demo at <a href=\"https://glebbahmutov.com/bottle-service/\">glebbahmutov.com/bottle-service/</a> where you can create new DOM nodes, print the HTML cached inside the ServiceWorker and clear the cached HTML.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>In a sense, we have removed the need to render the application server-side (with its problems, framework compatibility, etc) and instead are using the best page rendering engine &#8211; the browser itself. Every time the state changes, the application needs to store both the state and the rendered HTML snapshot. The state can be stored inside the page, even inside the <code>localStorage</code>, while the HTML snapshot is sent to the ServiceWorker code where it will be available on page reload.</p>\n<p>During page load, the ServiceWorker code is responsible for inserting the HTML snapshot into the fetched page, producing the complete page that the browser will see and render. Then the web application can take over. Of course, there is a delay between the page load and the instant it becomes it fully responsive application &#8211; but at least this is better than hiding the page behind the loading screens, or sudden violent page layout shifts.</p>", "title": "Instant Web Applications", "author_name": "stoyan", "source_type": "rss", "link": "https://calendar.perfplanet.com/2016/instant-web-applications/", "source_link": "https://calendar.perfplanet.com", "source_title": "Performance Calendar", "published": "2016-12-28T20:38:00"}, {"source_name": "PerformanceCalendar", "description": "tl;dr: Progressive images render faster on HTTP2, thus increasing perceived performance. Take control of progressive JPEG&#8217;s scan layers to show meaningful image content with only 25% of image data sent. Use HTTP2 Server Push for progressive JPEG scan layers to maximize rendering performance for key images. We Have An Image Problem Images make the world [&#8230;]", "tags": "images,perf,tech,web", "text": "<p style=\"background: #eee;\"><small><strong>tl;dr:</strong> Progressive images render faster on HTTP2, thus increasing perceived performance. Take control of progressive JPEG&#8217;s scan layers to show meaningful image content with only 25% of image data sent. Use HTTP2 Server Push for progressive JPEG scan layers to maximize rendering performance for key images.</small></p>\n<h2>We Have An Image Problem</h2>\n<p><a href=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/engage-enrage-encourage_compressed.jpg\"><img alt=\"Engaging, enraging and encouraging images\" class=\"alignleft size-medium\" height=\"169\" src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/engage-enrage-encourage_compressed.jpg\" style=\"padding-right: 10px;\" width=\"300\" /></a> Images make the world go round: they engage, enrage &#038; encourage us. The web as we know it depends on images. This comes at a price: <a href=\"http://httparchive.org/interesting.php#bytesperpage\">images make up ~65% of average total bytes per page</a> and have a <a href=\"http://httparchive.org/interesting.php#onLoad\">high correlation to page load time</a> as well as <a href=\"http://httparchive.org/interesting.php#SpeedIndex\">the Speed Index</a>. They also <a href=\"http://httparchive.org/trends.php#bytesImg&#038;reqImg\">grow by ~200kb year after year</a>. In short, images are heavy and make things slow.</p>\n<h2>Get Compressin&#8217;!</h2>\n<p><a href=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/httparchive-201605-images-overview.png\"><img alt=\"HTTP Archive Statistics\" class=\"alignleft size-medium\" height=\"169\" src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/httparchive-201605-images-overview.png\" style=\"padding-right: 10px;\" width=\"300\" /></a> The best way to counter negative effects of loading image assets is image compression: using tools such as <a href=\"https://kornel.ski/\">Kornel Lesi≈Ñski</a>&#8216;s <a href=\"https://imageoptim.com/\">ImageOptim</a>, which utilizes great libraries like <a href=\"https://github.com/mozilla/mozjpeg\">mozjpeg</a> and <a href=\"https://pngquant.org/\">pngquant</a>, we can reduce image byte size without sacrificing visual quality. And thanks to libraries such as <a href=\"https://github.com/pornel/dssim/\">DSSIM</a> we can ensure good visual quality testing different compression levels.</p>\n<p>The bad news is that even after reducing image byte size <a href=\"https://www.youtube.com/watch?v=j5sRzAOt4nE\">by an average ~29% per image</a> using above tools <a href=\"https://calendar.perfplanet.com/2015/immaculate-imagery-with-lazy-pictures-bpg/\">and even making use of other image formats such as WebP</a>, images are still likely to be the single largest asset type on any given website &#8211; closely followed by JavaScript. We need a way to deliver these crucial components for emotional engagement faster.</p>\n<h2>Enter Multiplexing</h2>\n<p><a href=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/http2-resource-prioritization.png\"><img alt=\"HTTP2 Multiplexing Diagram\" class=\"alignleft size-medium\" height=\"169\" src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/http2-resource-prioritization.png\" style=\"padding-right: 10px;\" width=\"300\" /></a> Part of the solution comes from a popular area of the performance conundrum: HTTP2. One of its main benefits is &#8220;Multiplexing&#8221;: the ability to handle multiple requests and responses at the same time, all using the same TCP connection.</p>\n<p>With Multiplexing, website assets load faster. Depending on site architecture, you can also prioritize resources inside a multiplexed connection: flagging assets such as critical CSS with high priority in HTTP2 will make them load sooner. On top of this, pushing not yet requested but crucial assets via HTTP2 Server Push can create a super fast perceived performance, when applied correctly. More on this later.</p>\n<p><a href=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/http1-vs-http2-webpagetest-wpt-waterfall-difference.png\"><img alt=\"HTTP2 Waterfall demo on WebPagetest\" class=\"alignleft size-medium\" height=\"169\" src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/http1-vs-http2-webpagetest-wpt-waterfall-difference.png\" style=\"padding-right: 10px;\" width=\"300\" /></a> Multiplexing has a curious side-effect when it comes to image loading: certain kinds of images load significantly faster in terms of perceived performance because initial image information can be downloaded in parallel via HTTP2 Multiplexing. Progressive JPEGs and interlaced PNGs benefit from this.</p>\n<h2 style=\"clear: both;\">Progressive All The Things</h2>\n<p><img alt=\"Baseline sequential image loading example\" class=\"alignleft size-medium\" height=\"169\" src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/baseline-sequential-jpeg-loading-animation.gif\" style=\"padding-right: 10px;\" width=\"300\" /></p>\n<p><img alt=\"Progressive JPEG image loading example\" class=\"alignright size-medium\" height=\"169\" src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/progressive-jpeg-loading-animation.gif\" width=\"300\" /></p>\n<p>Progressive and interlaced images are like layer cake: they contain information not in a single stream that renders images from top left to bottom right, but as a stack of layers, each improving on information already shipped in earlier layers. Each individual layer is more lightweight in terms of byte size than the final image.</p>\n<p>Since browsers loading website assets via HTTP2 Multiplexing will initiate almost all image downloads simultaneously, the initial, lightweight layers of progressive and interlaced images start rendering much more quickly than sequentially encoded images. Sequentially encoded images render in a windowblind manner: line by line until all image information has been shipped.</p>\n<p><a href=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/pJPEG-on-SPDY-John-Melor-Google.png\"><img alt=\"John Mellor's SPDY test demo\" class=\"alignleft size-medium\" height=\"169\" src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/pJPEG-on-SPDY-John-Melor-Google.png\" style=\"padding-right: 10px;\" width=\"300\" /></a> That perceived performance and the Speed Index benefit from delivering progressive JPEG scan layers via HTTP2 Multiplexing was already observed <a href=\"https://yoavweiss.github.io/respimg-blinkon-presentation/#/71/2\">by Google&#8217;s John Mellor in 2012.</a> He was experimenting with the <a href=\"https://www.chromium.org/spdy\">SPDY</a> protocol, a precursor to HTTP2. Today, we can improve on this discovery to make progressive images appear even faster:</p>\n<h2 style=\"clear: both;\">Take The Power Back! Or: The Scans File</h2>\n<p><a href=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/progressive-jpeg-ALL-scan-levels-rhine-river.jpg\"><img alt=\"Demo of 10 scan layers\" class=\"alignleft size-medium\" height=\"169\" src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/progressive-jpeg-ALL-scan-levels-rhine-river.jpg\" style=\"padding-right: 10px;\" width=\"300\" /></a> Progressively encoded JPEGs contain ten scan layers by default. That means ten iterative layers of image information build on each other to deliver the final visual quality of the image. The first visible scan layer of a progressive JPEG is always highly pixelated and often black &#038; white because it saves on color channel information. If you want to check out how each scan layer looks, <a href=\"http://encode.ru/threads/1800-JSK-JPEG-Scan-Killer-progressive-JPEG-explained-in-slowmo\">use Fr√©d√©ric Kayser&#8217;s &#8220;jsk&#8221; tool to split a progressive JPEG into its individual scan layers</a>.</p>\n<p>Why ten layers? That&#8217;s the default setting inside all common JPEG encoders. It&#8217;s a compromise between byte size per scan layer, visual quality and helping the JPEG encoder achieve smaller total image file sizes <a href=\"https://en.wikipedia.org/wiki/JPEG#Entropy_coding\">during Huffman table optimizations</a>.</p>\n<p><a href=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/progressive-jpeg-scan-level-wizard-file-script-default-highlights-commented.png\"><img alt=\"Default scan layers script\" class=\"alignleft size-medium\" height=\"169\" src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/progressive-jpeg-scan-level-wizard-file-script-default-highlights-commented.png\" style=\"padding-right: 10px;\" width=\"300\" /></a> Unlike PNGs, which use a fixed method <a href=\"https://en.wikipedia.org/wiki/Adam7_algorithm\">called Adam7 encoding</a> to create interlaced layers, we can supplement JPEG encoders with custom directives for scan layer creation: the &#8220;-scans&#8221; flag for JPEG encoders. You can use it like this with mozjpeg: &#8220;cjpeg -quality 75 -scans customscans.txt -outfile output.jpg input.jpg&#8221;. Now the JPEG encoder accepts <a href=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/scans.txt\">a plaintext file containing your custom commands for scan layer creation</a>.</p>\n<p>Each line in the scans file defines a new scan layer. They contain multiple parts of information on color channel, matrix index and lossiness.</p>\n<p>The three channels are brightness (&#8216;Y&#8217;), blue (&#8216;Cb&#8217;) and red (&#8216;Cr&#8217;), which respectively have the numbers 0,1 &#038; 2 in the scans file. The matrix index in the scan file goes from 0 to 63, covering a 64-pixel block. (JPEG encoding has a native 8&#215;8 block setting.)</p>\n<h2>Getting Creative</h2>\n<p><a href=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/optimized-progressive-jpeg-scan-levels-wizard-file-script-annotated.png\"><img alt=\"Custom scan layers script\" class=\"alignleft size-medium\" height=\"169\" src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/optimized-progressive-jpeg-scan-levels-wizard-file-script-annotated.png\" style=\"padding-right: 10px;\" width=\"300\" /></a> Our goal is to show meaningful image contents sooner while enabling browsers to lay out the site speedily. Our initial scan layer should therefore be lean but meaningful, followed by an as steep increase in perceived visual quality as possible.</p>\n<p>The custom scans file displayed here ensures a first scan layer with appropriate colors. At the second scan layer, we already have a highly acceptable preview. Scan layers three and four deliver the necessary color information: the red channel before blue channel since it is likely that red color information is more important to improve visuals, e.g. when showing faces. After the fourth scan layer, the image looks complete and the final fifth scan layer improves only fine high frequency details. These improvements are reflected in an ~6% better Speed Index, reflecting the perceived performance.</p>\n<p><a href=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/http2-pJPEG-vs-opJPEG-table-timing-wpt-webpagetest-results-annotated.png\"><img alt=\"WebPagetest results\" class=\"alignleft size-medium\" height=\"169\" src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/http2-pJPEG-vs-opJPEG-table-timing-wpt-webpagetest-results-annotated.png\" style=\"padding-right: 10px;\" width=\"300\" /></a></p>\n<p><a href=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/http2-pJPEG-vs-opJPEG-wpt-webpagetest-results-visual-progress.png\"><img alt=\"Progressive JPEG image loading example\" class=\"alignright size-medium\" height=\"169\" src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/http2-pJPEG-vs-opJPEG-wpt-webpagetest-results-visual-progress.png\" width=\"300\" /></a></p>\n<p>The above scans script is only one example of what is possible when customizing progressive JPEG encoding: using the same approach, you could recreate <a href=\"http://www.guypo.com/introducing-lqip-low-quality-image-placeholders/\">Guy Podjarny&#8217;s LQIP technique</a> within progressive JPEGs <a href=\"http://cloudinary.com/blog/progressive_jpegs_and_green_martians\">as shown by Jon Sneyers</a>.</p>\n<h2>Push! Push! Push!</h2>\n<p>HTTP2 offers another tool we may use for even faster delivery of image contents: Server Push. <a href=\"https://www.shimmercat.com/\">In supporting HTTP2-enabled web servers</a>, it is possible to flag individual scan layers of progressive JPEGs with high priority and making the server push those scan layers into <a href=\"https://calendar.perfplanet.com/2016/a-tale-of-four-caches/\">the client browsers&#8217; Push cache</a> even before the request for the respective image is initiated. Browsers then can lay out the page and render initial scan layers with the performance of a warmed cache, making users perceive the site&#8217;s images as rendering exceptionally fast.  </p>\n<p>Check out <a href=\"https://calendar.perfplanet.com/2016/http2-push-the-details/\">this brilliant article in this year&#8217;s Performance Advent Calendar</a> to find out more about HTTP2 Server Push.</p>\n<p><a href=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/wpt-webpagetest-4way-comparison-ServerPush-HTTP2-Sequential-vs-pJPEG-vs-OpJPEG-vs-ServerPush-tables-Firefox.png\"><img alt=\"WebPagetest results\" class=\"alignleft size-medium\" height=\"169\" src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/wpt-webpagetest-4way-comparison-ServerPush-HTTP2-Sequential-vs-pJPEG-vs-OpJPEG-vs-ServerPush-tables-Firefox.png\" style=\"padding-right: 10px;\" width=\"300\" /></a></p>\n<p><a href=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/wpt-webpagetest-4way-comparison-ServerPush-HTTP2-Sequential-vs-pJPEG-vs-OpJPEG-vs-ServerPush-Visual-Progress-Graph-Firefox.png\"><img alt=\"Progressive JPEG image loading example\" class=\"alignright size-medium\" height=\"169\" src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/wpt-webpagetest-4way-comparison-ServerPush-HTTP2-Sequential-vs-pJPEG-vs-OpJPEG-vs-ServerPush-Visual-Progress-Graph-Firefox.png\" width=\"300\" /></a></p>\n<p>This technique should only be used strategically: find out which images are crucial for creating user engagement on your page, e.g. an emotion-evoking hero image or a product overview image, and only apply Server Push to the initial scan layers of those JPEG images. This will enable you to increase user engagement and thus successful conversions without harming overall site asset downloads.</p>\n<h2>Takeaways</h2>\n<ul>\n<li>Multiple progressive or interlaced images render faster on HTTP2 thanks to Multiplexing</li>\n<li>Taking control of progressive JPEG creation may give users a better visual experience</li>\n<li>HTTP2 Server Push can increase perceived performance for important images</li>\n</ul>\n<p style=\"background: #eee;\"><small><strong>Credits: </strong>Thanks to <a href=\"http://finding-marbles.com/\">Corinna Baldauf</a> for proof &amp; editing. Thanks to <a href=\"http://twitter.com/colinbendell\">Colin Bendell</a> and <a href=\"https://blog.yoav.ws/\">Yoav Weiss</a> for inspiration &amp; support.</small></p>", "title": "Even Faster Images using HTTP2 and Progressive JPEGs", "author_name": "editor", "source_type": "rss", "link": "https://calendar.perfplanet.com/2016/even-faster-images-using-http2-and-progressive-jpegs/", "source_link": "https://calendar.perfplanet.com", "source_title": "Performance Calendar", "published": "2016-12-27T17:47:00"}, {"source_name": "PerformanceCalendar", "description": "PNG is a popular format for icons, sprites, logos, screenshots, and many others. Creating PNG images is fairly easy, but what do we need to do if we want to get the smallest file possible without any perceptible loss of quality? In this context, we define an image as a two-dimensional array of color values, [&#8230;]", "tags": "compression,images,perf,tech,web", "text": "<p>PNG is a popular format for icons, sprites, logos, screenshots, and many others. Creating PNG images is fairly easy, but what do we need to do if we want to get the smallest file possible without any perceptible loss of quality?</p>\n<p>In this context, we define an image as a two-dimensional array of color values, where every color is represented with its red, green, blue, and alpha component. If each color component is a byte (8 bits), then every individual color will consume 4 bytes. A 100&#215;100 image thus requires the space of 40,000 bytes. PNG format can reduce the storage consumption by identifying a group of similar colors and encoding them using shorthand codes. This is, of course, well-known as a form of <em>data compression</em>. Assuming there are repeated patterns here and there, a file representing 100&#215;100 image in PNG format will likely have the size less than 40,000 bytes.</p>\n<h2>Color quantization</h2>\n<p>At the end of the day, the colors in the image will appear on a screen in a form of pixels. As your user is looking at the screen (and thereby also the image), do you think they thoroughly inspect the pixel one by one, looking for a missing color? If that is not the case, then the first question that you shall ask yourself is, do you need every single possible color in that image? If the answer to that question is <em>yes</em>, then skip to the next section. But if the answer is <em>no</em>, then you can evaluate whether you would sacrifice a few colors to save some significant space.</p>\n<p>Fortunately, there is an easy way to do that: <em>quantizing</em> the colors. Instead of all 16 millions of RGB combinations, you can restrict the image to have a certain maximum number of distinct colors. A fantastic tool that can do that is <a href=\"https://pngquant.org\">pngquant</a> from <a href=\"https://twitter.com/kornelski\">@kornelski</a>. Once it is installed (on macOS with Homebrew: <code>brew install pngquant</code>, Nix users: <code>nix-env -I pngquant</code>, with Debian/Ubuntu: <code>apt-get install pnquant</code>), it is rather straightforward to use. Here is an example:</p>\n<pre>pngquant 64 --speed 1 image.png</pre>\n<p>The above command quantizes the color in <code>image.png</code> into just 64 colors. The option <code>--speed 1</code> is used to favor the best quantization even if the process is slightly slower (by two seconds at most). The output, the image with the quantized colors, is called <code>image-fs8.png</code>. Of course, since colors are sacrificed in the name of storage, this type of optimization is rather <em>lossy</em>, i.e. the quantized version is slightly different (but hopefully not noticeable) from the original.</p>\n<p>Let us assume that you write an article on leadership and management and that you have to include a simple organization chart as follows:</p>\n<p><img alt=\"orgchart\" class=\"aligncenter size-full wp-image-2092\" height=\"200\" src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/orgchart.png\" width=\"400\" /></p>\n<p>Saved as PNG, the above image (400&#215;200 pixels) results in a file with the size of 6,664 bytes.</p>\n<p>There are 782 distinct colors in the image. If you choose to quantize the image to only up to 64 colors, it will look like this:</p>\n<p><img alt=\"orgchart-fs8\" height=\"200\" src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/orgchart-fs8.png\" width=\"400\" /></p>\n<p>Meanwhile, the file size decreases dramatically to only 2,952 bytes. That is even less than half of the original!</p>\n<p>(Note from the <a href=\"https://twitter.com/stoyanstefanov\">editor</a>: 2,736 bytes actually, after running through ImageOptim out of habit)</p>\n<p>An avid Photoshop user might compare both images by placing them in layers and then look for color differences. For the rest of us, the quantized version of the organization chart is visually just as good as the original one.</p>\n<p>Imagine how many bytes do not need to travel over the network if your article becomes very popular. The saving could be significant!</p>\n<h2>Better compression</h2>\n<p>Regardless whether you choose to quantize the colors or not, there is a highly recommended step before distributing PNG images to the world: use a better compression. Unlike the previous step, this optimization is completely <a href=\"https://en.wikipedia.org/wiki/Lossless_compression\">lossless</a>, i.e. the output has the same exact colors as the original.</p>\n<p>A perfect tool to do this <a href=\"https://en.wikipedia.org/wiki/Zopfli\">Zopfli</a>, a better compressor for Google that is still compatible with <a href=\"https://tools.ietf.org/html/rfc1951\">DEFLATE</a>, a compression method used by PNG. Just like pngquant, Zopfli is also relatively easy to obtain (on macOS with Homebrew: <code>brew install zopfli</code>, with Debian/Ubuntu: <code>apt-get install zopfli</code>, Nix users: <code>nix-env -I zopfli</code>).</p>\n<p>Using Zopfli is amazingly easy and fun:</p>\n<pre>zopflipng input.png output.png</pre>\n<p>With the previous example, the quantized organization chart image, Zopfli still manages to shrink the PNG file even further, from 2,952 bytes to 2,625 bytes. Granted, the saving is not much, but since it practically costs almost nothing to run Zopfli, there is no reason to skip it!</p>\n<p>Please be advised that Zopfli currently removes various metadata from the PNG image. Thus, if your image has a color profile, it may be gone after going through Zopfli and that may have an impact on the visual representation. Do not forget to compare the output vs the original and exercise your judgement.</p>\n<p>Your mileage may vary, but there is no harm in trying out pngquant and zopfli. Even better, if you know these tools are working out for you, do not forget to incorporate then as part of your build pipeline in the continuous integration/deployment system. This is a simple step on your end and yet it can benefit every single visitor to your web site.</p>\n<p>Let us save the planet, one PNG image at a time.</p>", "title": "Squeezing PNG Images", "author_name": "stoyan", "source_type": "rss", "link": "https://calendar.perfplanet.com/2016/squeezing-png-images/", "source_link": "https://calendar.perfplanet.com", "source_title": "Performance Calendar", "published": "2016-12-26T18:00:00"}, {"source_name": "PerformanceCalendar", "description": "Nowadays it is not uncommon to publish your site on the root domain (aka &#8216;naked domain&#8217; or &#8216;domain apex&#8217;). Instead of using www.awesomesite.com you go for awesomesite.com. Looks good, right? Yeah. Running the whole site through a CDN is also the modern thing to do and can help give your users an excellent experience. The [&#8230;]", "tags": "cdn,perf,tech,web", "text": "<p>Nowadays it is not uncommon to publish your site on the root domain (aka &#8216;naked domain&#8217; or &#8216;domain apex&#8217;). Instead of using <code>www.awesomesite.com</code> you go for <code>awesomesite.com</code>. Looks good, right? Yeah.</p>\n<p>Running the whole site through a CDN is also the modern thing to do and can help give your users an excellent experience. The CDN will give you an endpoint to point to in DNS and now you run into a roadblock: you can&#8217;t use a CNAME on the root domain (per <a href=\"https://tools.ietf.org/html/rfc2181\">RFC2181</a>). Now what?</p>\n<p>Luckily for you, there are DNS providers that have a solution, usually called <code>ANAME</code> or <code>ALIAS</code>, allowing you to point to the CDN endpoint on the root domain. <!-- The 'magic' in these solutions is that the DNS provider resolves the CDN endpoint on their nameservers and then responds to the ISP or open resolver with an A record.  --></p>\n<p><a href=\"https://ns1.com/articles/cname-alias-and-linked-records\">NS1</a>, <a href=\"http://www.dnsmadeeasy.com/services/anamerecords/\">DNS Made Easy</a>, <a href=\"https://constellix.com/dns/aname/\">Constellix</a>, <a href=\"https://support.dnsimple.com/articles/alias-record/\">DNSimple</a>, <a href=\"http://dyn.com/managed-dns/alias/\">Dyn</a> and <a href=\"https://blog.cloudflare.com/introducing-cname-flattening-rfc-compliant-cnames-at-a-domains-root/\">Cloudflare</a> have this <code>ANAME</code>/<code>ALIAS</code> solution.  <a href=\"http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-cloudfront-distribution.html\">AWS Route 53</a> has it too, but you can only use it with their own CDN (Cloudfront).</p>\n<p>So you pick one of these DNS providers, set things up and be done with it, right? Not so fast.</p>\n<h2>The problem</h2>\n<p>The <code>ANAME</code>/<code>ALIAS</code> is resolved by your DNS provider&#8217;s nameserver instead of by a recursive resolver (ISP, Google Public DNS, OpenDNS or other) and this may lead to end users being routed to a far-away CDN node and consequently getting a poor experience.</p>\n<h3>Let&#8217;s take a look at how ANAME/ALIAS resolution works:</h3>\n<p>Imagine Thailand is an important market for your company, <code>awesomesite.com</code>. Logically, you work with a CDN that has a POP in Thailand.  Your authoritative DNS provider has POPs in Hong Kong and Singapore, but not in Thailand.</p>\n<p>The DNS server of an ISP in Thailand sends a query for <code>awesomesite.com</code> to your DNS provider and that query is routed to their Hong Kong POP. The authority&#8217;s nameserver in Hong Kong now resolves the ANAME/ALIAS, by sending a query to the CDN&#8217;s DNS server.</p>\n<p>You can probably guess what happens: the CDN&#8217;s DNS server sees a query coming in from Hong Kong and it hands out the IPs for the CDN POP in Hong Kong. As a result, people in Thailand visiting <code>awesomesite.com</code> get the content from the CDN in Hong Kong (100 ms RTT) instead of from Thailand (30 ms RTT).</p>\n<p>So far, this is just theory. Let&#8217;s see this in action in the real world!</p>\n<p><a href=\"http://www.swiftserve.com/en/\">SwiftServe CDN</a> has POPs in Thailand (TH) and Hong Kong (HK).  NS1 has POPs in Asia, including in HK and SG, but not in TH. For this test, I set up our domain <code>startrender.com</code> in NS1, pointing to the SwiftServe endpoint (<code>edge.conversant.swiftserve.com</code>) with an ALIAS record on the root domain and with a normal CNAME on <code>www.startrender.com</code>.</p>\n<p>What happens for users in HK and TH on Google Public DNS and OpenDNS? Both open resolvers support <a href=\"https://tools.ietf.org/html/draft-ietf-dnsop-edns-client-subnet-03\">EDNS-Client-Subnet</a> which means they send part of the client IP in the query to the CDN&#8217;s DNS server, so that server can make a more informed decision and hand out the IP addresses for the best POP.</p>\n<p>We use our free tool <a href=\"https://pulse.turbobytes.com/\">TurboBytes Pulse</a> (DNS, HTTP and Traceroute diagnostics from 80+ machines around the globe) to first see what the IPs are of the SwiftServe POPs (<a href=\"https://pulse.turbobytes.com/results/58593761ecbe407b4f00716d/\">link</a>). We need this later as a reference.</p>\n<p>Next, we run tests on the Pulse agents located in HK and TH to find out what happens in both cases: <code>www.startrender.com</code> (CNAME) and <code>startrender.com</code> (ALIAS). Guess what? </p>\n<table width=\"100%\">\n<thead>\n<th>Domain</th>\n<th>User location</th>\n<th>CDN POP location</th>\n</thead>\n<tbody>\n<tr>\n<td>www.startrender.com</td>\n<td>HK</td>\n<td>HK</td>\n</tr>\n<tr>\n<td>www.startrender.com</td>\n<td>TH</td>\n<td>TH</td>\n</tr>\n<tr>\n<td>startrender.com</td>\n<td>HK</td>\n<td>SG</td>\n</tr>\n<tr>\n<td>startrender.com</td>\n<td>TH</td>\n<td>GB</td>\n</tr>\n</tbody>\n</table>\n<p>As the table shows, using <a href=\"https://pulse.turbobytes.com/results/585d2d23ecbe407b4f008ca8/\">Google Public DNS</a> and <a href=\"https://pulse.turbobytes.com/results/585d2d54ecbe407b4f008cab/\">OpenDNS</a> from HK and TH, <code>www.startrender.com</code> resolves to the desired CDN POPs. However, for <code>startrender.com</code>, users on <a href=\"https://pulse.turbobytes.com/results/585936efecbe407b4f007169/\">Google Public DNS</a> and <a href=\"https://pulse.turbobytes.com/results/58593829ecbe407b4f00716e/\">OpenDNS</a> in HK will end up hitting the SwiftServe POP in SG (not so bad) and users on those resolvers in TH are routed to the SwiftServe POP in London (ugh!)</p>\n<p>The impact of this problem really depends on where your users are and where the POPs of your DNS and CDN providers are. If you only care about US, you&#8217;re probably in the clear. Asia, LATAM, Middle-East, Russia? Assume this problem exists for you.</p>\n<p>Any solutions to this problem? Yes!</p>\n<h2>Solution A: DNS providers do a better job</h2>\n<p>The authoritative DNS provider for your domain should be smarter when resolving the ANAME/ALIAS from their nameservers, by &#8216;doing the EDNS-Client-Subnet thing&#8217;: send part of the IP address of the originating query source in its query to the CDN&#8217;s DNS server.</p>\n<p>If your authoritative DNS provider received the query from OpenDNS or Google Public DNS, it should pass along the client IP address subnet. If the query came from an ISP resolver, the authority server should send the /24 subnet of that resolver&#8217;s IP in the query to the CDN&#8217;s DNS server.</p>\n<p>I&#8217;m quite sure NS1, DNS Made Easy/Constellix and DNS Simple don&#8217;t send EDNS-Client-Subnet queries when resolving <code>ANAME</code>/<code>ALIAS</code>. I don&#8217;t know why these DNS providers don&#8217;t do this. Maybe it&#8217;s because this would require caching much more responses, as responses can now be different for different recursive/client IP subnets.</p>\n<h2>Solution B: get integrated authoritative DNS and CDN</h2>\n<p>AWS, Akamai and CDNetworks are companies that operate a global CDN <em>and</em> provide authoritative DNS services.\tThey can be smart and have their authoritative DNS and CDN work together, meaning the auth DNS always knows what the best CDN IPs are for whatever query comes in. Bye bye root domain problem.</p>\n<p>\t<!-- awesomesite.com => d28nqx80pet1gg.cloudfront.net. => 54.192.129.62\n\tawesomesite.com => 54.192.129.62 --></p>\n<p><a href=\"http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-cloudfront-distribution.html\">AWS Route 53/Cloudfront</a> is doing this smart thing today. Akamai and CDNetworks: I&#8217;m not sure but likely.</p>\n<p>\tNote: <a href=\"https://www.fastly.com/\">Fastly</a> and <a href=\"https://ns1.com/\">NS1</a> have a special integration so that&#8217;s an option too.</p>\n<h2>Solution C: use an Anycast CDN</h2>\n<p>\n\t<a href=\"https://www.highwinds.com/\">Highwinds</a>. <a href=\"http://cdn.tatacommunications.com/\">TATA</a>. <a href=\"https://www.cachefly.com/\">CacheFly</a>. <a href=\"https://www.maxcdn.com/\">MaxCDN</a> (without their Flex POPs). <a href=\"https://www.cachefly.com/\">Cloudflare</a>. These are CDNs that use <a href=\"https://en.wikipedia.org/wiki/Anycast\">Anycast</a> for routing users to the best POP. All POPs globally have the same IP address and users are &#8216;magically&#8217; routed to the POP that is closest from a network topology perspective (shortest network path). For example, <code>www.cloudflare.com</code> points to <code>198.41.{214,215}.162</code> (<a href=\"https://pulse.turbobytes.com/results/585d17b7ecbe407b4f008c13/\">everywhere</a>)</p>\n<p>Since all POPs have the same IP address, the root domain problem does not exist.</p>\n<p>Note: <a href=\"https://docs.fastly.com/guides/basic-configuration/using-fastly-with-apex-domains\">Fastly</a> does not use Anycast for most customers, but can provide Anycast IP addresses if you must use their service on the root domain.</p>\n<p>Note: EdgeCast (now <a href=\"https://www.verizondigitalmedia.com/\">Verizon Digital Media Services</a>) uses Anycast too but per region (Americas, EMEA, APAC) so there still is a chance, although small, of suboptimal routing.</p>", "title": "Root domain on a CDN? Don‚Äôt expect optimal performance.", "author_name": "stoyan", "source_type": "rss", "link": "https://calendar.perfplanet.com/2016/root-domain-cdn-performance/", "source_link": "https://calendar.perfplanet.com", "source_title": "Performance Calendar", "published": "2016-12-25T00:16:00"}, {"source_name": "PerformanceCalendar", "description": "One request. One journey. There comes a time when you need to fulfill your destiny and find a matching resource.", "tags": "http,perf,tech,web", "text": "</p>\n<h1>A Tale of Four Caches</h1>\n<p>There&#8217;s a lot of talk these days about browser caches in relation to <a href=\"https://www.smashingmagazine.com/2016/02/preload-what-is-it-good-for/\">preload</a>, <a href=\"https://blog.yoav.ws/being_pushy/\">HTTP/2 push</a> and <a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/service-workers\">Service workers</a>, but also a lot of confusion.</p>\n<p>So, I&#8217;d like to tell you a story about one request&#8217;s journey to fulfill its destiny and find a matching resource.</p>\n<p><aside>The following story is based on Chromium&#8217;s terms and concepts, but other browsers are not inherently different.</aside>\n</p>\n<h2>Questy&#8217;s Journey</h2>\n<p>Questy was a request. It was created inside the rendering engine (also called &#8220;renderer&#8221; to keep things shorter), with one burning desire: to find a resource that would make its existence complete and to live together happily ever after, at least until the current document is detached when the tab is closed.</p>\n<p><figure>\n    <source type=\"image/webp\" /><img />\n    <figcaption>Questy, dreaming of its resource</figcaption></figure>\n</p>\n<p>So Questy started its journey in its pursuit for happiness. But where would it find a resource that would be just the right one for it?</p>\n<p>The closest place to look for one was at the&#8230;</p>\n<h2>Memory Cache</h2>\n<p>The Memory Cache had a large container full of resources. It contained all the resources that the renderer fetched as part of the current document and kept during the document&#8217;s lifetime. That means that if the resource Questy is looking for was already fetched elsewhere in the current document, that resource will be found in the Memory Cache.</p>\n<p>But a name like &#8220;the short term memory cache&#8221; might have been more appropriate: the memory cache keeps resources around only until the end of their navigation, and in some cases, even less then that.</p>\n<p><figure>\n    <source type=\"image/webp\" /><img />\n    <figcaption>The short term memory cache and its container</figcaption></figure>\n</p>\n<p>There are many potential reasons why the resource Questy is looking for was already fetched.</p>\n<p>The <a href=\"https://calendar.perfplanet.com/2013/big-bad-preloader/\">preloader</a> is probably the biggest one. If Questy was created as a result of a DOM node creation by the HTML parser, there&#8217;s a good chance that the resource it needs was already fetched earlier on, during the HTML tokenization phase by the preloader.</p>\n<p>Explicit <a href=\"https://www.smashingmagazine.com/2016/02/preload-what-is-it-good-for/\">preload</a> directives (<code>&lt;link rel=preload&gt;</code>) is another big case where the preloaded resources are stored in the Memory Cache.</p>\n<p>Otherwise, it&#8217;s also possible that a previous DOM node or CSS rule triggered a fetch for the same resource. For example, a page can contain multiple <code>&lt;img&gt;</code> elements all with the same <code>src</code> attribute, which fetch only a single resource. The mechanism enabling those multiple elements to fetch only a single resource is the Memory Cache.</p>\n<p>But, the Memory Cache would not give requests a matching resource that easily. Obviously, in order for a request and a resource to match, they must have matching URLs. But, that&#8217;s not sufficient. They must also have a matching resource type (so a resource fetched as a script cannot match a request for an image), CORS mode and a few other characteristics.</p>\n<p><source type=\"image/webp\" /><img />\n</p>\n<p><aside>The matching characteristics for requests from the Memory Cache are not well-defined in specifications, and therefore may slightly vary between browser implementations. Bleh.</aside>\n</p>\n<p>One thing that Memory Cache doesn&#8217;t care about is HTTP semantics. If the resource stored in it has <code>max-age=0</code> or <code>no-cache</code> <code>Cache-Control</code> headers, that&#8217;s not something that Memory Cache cares about. Since it&#8217;s allowing the reuse of the resource in the current navigation, HTTP semantics are not that important here.</p>\n<p><source type=\"image/webp\" /><img />\n</p>\n<p>The only exception to that is <code>no-store</code> directives which the memory cache does respect in certain situations (for example, when the resource is reused by a separate node).</p>\n<p>So, Questy went ahead and asked the Memory Cache for a matching resource. Alas, one was not to be found.</p>\n<p>Questy did not give up. It got past the Resource Timing and DevTools network registration point, where it registered as a request looking for a resource (which meant it will now show up in DevTools as well as in resource timing, assuming it will find its resource eventually).</p>\n<p>After that administrative part was done, it relentlessly continued towards the&#8230;</p>\n<h2>Service Worker Cache</h2>\n<p>Unlike the Memory Cache, the <a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/service-workers\">Service Worker</a> doesn&#8217;t follow any conventional rules. It is, in a way, unpredictable, only abiding to what their master, the Web developer, tells them.</p>\n<p><figure>\n    <source type=\"image/webp\" /><img />\n    <figcaption>A hard-working service worker</figcaption></figure>\n</p>\n<p>First of all, it only exists if a Service Worker was installed by the page. And since its logic is defined by the Web developer using JavaScript, rather than built into the browser, Questy had no idea if it would find a resource for it, and even if it would, would that resource be everything it dreamed of? Would it be a matching resource, stored in its cache? Or just a crafted response, created by the twisted logic of the Service Worker&#8217;s master?</p>\n<p>No one can tell. Since Service Workers are given their own logic, matching requests and potential resources, wrapped in a Response object, can be done any way they see fit.</p>\n<p>Service Worker has a cache API, which enables it to keep resources around. One major difference between it and the Memory Cache is that it is persistent. Resources stored in that cache are kept around, even if the tab closes or the browser restarted. One case where they get evicted from the cache if the developer explicitly evicts them (using <code>cache.delete(resource)</code>). Another case happens if the browser runs out of storage space, and in that case, the <em>entire</em> Service Worker cache gets nuked, along with all other origin storage, such as indexedDB, localStorage, etc. That way, the Service Worker can know that the resources in that cache are in sync among themselves and with other origin storage.</p>\n<p>The Service Worker is responsible for a certain scope, which at most, is limited to a single host. Service Workers can therefore only serve responses to requests requested from a document inside that scope.</p>\n<p>Questy went up to the Service Worker and asked it if it has a resource for it. But the Service Worker had never seen that resource coming from that scope before and therefore had no corresponding resource to give Questy. So Service Worker sent Questy to carry on (using a <code>fetch()</code> call), and continue searching for a resource in the treacherous lands of the network stack.</p>\n<p>And once in the network stack, the best place to look for a resource was the&#8230;</p>\n<h2>HTTP Cache</h2>\n<p>The HTTP cache (also sometimes called &#8220;Disk cache&#8221; among its friends) is  quite different from the caches Questy seen before it. </p>\n<p>On the one hand, it is persistent, allowing resources to be reused between sessions and even across sites. If a resource was cached by one site, there&#8217;s no problem for the HTTP cache to allow its reuse by other sites.</p>\n<p>At the same time, the HTTP cache abides to HTTP semantics (the name kinda gives that part away). It will happily serve resources that it considers &#8220;fresh&#8221; (based on caching lifetime, indicated by their response&#8217;s caching headers), revalidate resources that need <a href=\"https://www.mnot.net/cache_docs/#VALIDATE\">revalidation</a>, and refuse to store resources that it shouldn&#8217;t store.</p>\n<p><figure>\n    <source type=\"image/webp\" /><img />\n    <figcaption>An overly strict HTTP cache</figcaption></figure>\n</p>\n<p>Since it&#8217;s a persistent cache, it also needs to evict resources, but unlike the Service Worker cache, resources can be evicted one by one, whenever the cache feels like it needs the space to store more important or more popular resources.</p>\n<p>The HTTP cache has a memory based component, where resource matching is being done for requests coming in. But if it actually finds a matching resource, it needs to fetch the resource contents from disk, which can be an expensive operation.</p>\n<p><aside>We mentioned before that the HTTP Cache respects HTTP semantics. That&#8217;s almost entirely true. There is one exception to that, when the HTTP cache stores resources for a limited amount of time. Browsers have the ability to prefetch resources for the next navigation. That can be done with explicit hints (<code>&lt;link rel=prefetch&gt;</code> or with the browser&#8217;s internal heuristics. Those prefetched resources need to be kept around until next navigation, even if they are not cacheable. So when such a prefetched resource arrives at the HTTP cache, it is cached (and served without revalidation) for a period of 5 minutes.</aside>\n</p>\n<p>The HTTP cache seemed rather strict, but Questy built up the courage to ask it if it has a matching resource for it. The response was negative :/</p>\n<p>It will have to continue on towards the network. The journey over the network is scary and unpredictable, but Questy knew that it must find its resource no matter what. So it carried on. It found a corresponding HTTP/2 session, and was well on its way to be sent over the network, when suddenly it saw the&#8230;</p>\n<h2>Push &#8220;Cache&#8221;</h2>\n<p>The Push cache (better described as the &#8220;unclaimed push streams container&#8221;, but that&#8217;s less catchy as names go) is where HTTP/2 push resources are stored. They are stored as part of an HTTP/2 session, which has several implications.</p>\n<p><figure>\n    <source type=\"image/webp\" /><img />\n    <figcaption>The unclaimed push stream container AKA the push cache</figcaption></figure>\n</p>\n<p>The container is in no-way persistent. If the session is terminated, all the resources which weren&#8217;t claimed (i.e. were not matched with a request for them) are gone. If a resource is fetched using a different HTTP/2 session, it <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=669515\">won&#8217;t get matched</a>. On top of that, resources are kept around in the push cache container only for a limited amount of time. (~5 minutes in Chromium-based browsers)</p>\n<p>The push cache matches a request to a resource according to its URL, as well as its various request headers, but it does not apply strict HTTP semantics.</p>\n<p><aside>The push cache is also not well-defined in specs and implementations may vary between browsers, operating systems and other HTTP/2 clients.</aside>\n</p>\n<p>Questy had little faith, but still it asked the push cache if it has a matching resource. And to its surprise, it did!! Questy adopted the resource (which meant it removed the HTTP/2 stream from the unclaimed container) and was happy as a clam. Now it can start making its way back to the renderer with its resource.</p>\n<p>On their way back, they went across the HTTP cache, which stopped them along the way to take a copy of the resource and store it in case future requests would need it.</p>\n<p>Once they made it out of the net stack and back in Service Worker land, the Service Worker also stored a copy of the resource in its cache, before sending both back to the renderer.</p>\n<p>And finally, once they got back to the renderer, Memory Cache kept a reference of the resource (rather than a copy), that it can use to assign the same resource to future requests in that same navigation session that may need it.</p>\n<p><source type=\"image/webp\" /><img />\n</p>\n<p>And they lived happily ever after, until the document got detached and both got to meet the Garbage Collector.</p>\n<p><source type=\"image/webp\" /><img />\n</p>\n<p>But that&#8217;s a story for another day.</p>\n<h2>Takeaways</h2>\n<p>So, what can we learn from Questy&#8217;s journey?</p>\n<ul>\n<li>Different requests can get matched by resources in different caches of the browser.</li>\n<li>The cache from which the request got matched can have an impact on the way this request is represented in DevTools and Resource Timing.</li>\n<li>Pushed resources are not stored persistently unless their stream got adopted by a request.</li>\n<li>Non-cacheable preloaded resources won&#8217;t be around for the next navigation. That&#8217;s one of the major differences between preload and prefetch.</li>\n<li>There are many underspecified areas here where observable behavior may differ between browser implementations. We need to fix that.</li>\n</ul>\n<p>All in all, if you&#8217;re using preload, H2 push, Service Worker or other advanced techniques when trying to speed up your site, you may notice a few cases where the internal cache implementation is showing. Being aware of these internal caches and how they operate might help you to better understand what is going on and hopefully help to avoid unnecessary frustrations.</p>\n<blockquote><p>Thanks to Tim Kadlec and Jake Archibald for reviewing an early version of this article. And huge thanks to Yaara Weiss for this article&#8217;s illustrations and for being an awesome kid in general.</p></blockquote>", "title": "A Tale of Four Caches", "author_name": "stoyan", "source_type": "rss", "link": "https://calendar.perfplanet.com/2016/a-tale-of-four-caches/", "source_link": "https://calendar.perfplanet.com", "source_title": "Performance Calendar", "published": "2016-12-24T00:12:00"}, {"source_name": "PerformanceCalendar", "description": "Two years ago I wrote about Leveraging Browser Storage for a Faster Web. The gist of the technique is to persist AJAX payloads in either localStorage or IndexDB so future network requests can be avoided. The overall mechanism allows you to control data life spans and purge stale data. By avoiding excess network requests the [&#8230;]", "tags": "javascript,perf,tech,web", "text": "<p>Two years ago I wrote about <a href=\"https://calendar.perfplanet.com/2014/leverage-browser-storage-for-a-faster-web/\">Leveraging Browser Storage for a Faster Web</a>. The gist of the technique is to persist AJAX payloads in either <code>localStorage</code> or <code>IndexDB</code> so future network requests can be avoided. The overall mechanism allows you to control data life spans and purge stale data. By avoiding excess network requests the customer enjoys a must faster loading and reacting application. You also avoid excess bandwidth costs for you and your customer, plus your servers are less taxed. Everyone wins.</p>\n<p>\n<img alt=\"API Logic With Caching\" src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/love/api-logic-with-caching-526x824.gif\" width=\"650\" />\n</p>\n<p>I adopted this technique many years ago to help with mobile user experiences and as a way to skirt around the limitations of the appCache specification and improve overall performance. By persisting data and application assets in browser storage you gain granular control over content caching. AppCache, while a good start, makes content management hard. appCache does not include advance caching logic. Instead appCache is a rather &#8216;flat&#8217; specification where you either cache and asset or don&#8217;t. appCache offers no control over dynamic assets, nor the ability to purge stale cache.</p>\n<p>Today we have a new ally when it comes to HTTP request caching and offline capabilities, Service Workers. The web community has known appCache was not a great solution to managing offline applications, Service Workers are a second take to solve an important problem. This time we got the specification right by making the solution extensible, yet manageable. Instead of having a &#8216;hidden&#8217; cache, developers can access a rich Cache API available within service workers. With some simple feature detection you can use either the browser storage cache solution I described two years ago or the new Service Worker solution. </p>\n<p>This is approach applies progressive enhancement concepts, enabling caching for browsers that may not have implemented service workers yet. Over time the legacy caching technique will naturally fade away.</p>\n<h2 id=\"what-is-a-service-worker\">What is a Service Worker?</h2>\n<p>A Service Worker is a new browser platform API, nearing standards recommendation status. All the browser vendors have either shipped working implementations, are working on implementations or expressed support for the standard. If a customer&#8217;s browser does not support Service Workers you can feature detect and fall back to an alternative solution for your problem set.</p>\n<pre>\nif ('serviceWorker' in navigator) {\n  navigator.serviceWorker.register('/sw.js').then(function(registration) {\n    //do something here\n  });\n} else {\n  //implement legacy caching logic\n}\n</pre>\n<p>Service Workers operate on a background thread, freeing the main UI thread from any work load needed by the Service Worker. Because Service Workers operate in the background they can perform many tasks browsers have not been able to offer, like native push notifications. Service Workers are designed to be an extensible API, serving as a &#8216;spine&#8217; for current and future APIs to be added. Today, service workers feature attraction is a combination of the Fetch and Cache APIs. Together they empower developers to granularly control their application&#8217;s network requests.</p>\n<h2 id=\"how-caching-works-in-a-service-worker\">How Caching Works in a Service Worker</h2>\n<p>Before diving into the details of service worker caching its worth a quick exploration of the service worker ecosystem. Before a browser can implement service worker it must support the Fetch API. Fetch is a modern replacement for the traditional AJAX mechanism we know and love over the past decade or so. Fetch is more streamlined, based on Promises and designed from scratch to better meet today&#8217;s coding and performance expectations.</p>\n<p>As Fetch relates to service workers there is a &#8216;fetch&#8217; event a service worker can subscribe. When a service worker subscribes to a fetch event it can intercept all network requests. Subscribing to the fetch event is done by by adding a callback to the fetch event using the addEventListener function just like you would to regular DOM events.</p>\n<pre>\nself.addEventListener('fetch', function (event) {\n  // intercept fetch request \n  // (any request from the UI thread for a file or API) \n  // and return from cache or get from server &amp; cache it\n  event.respondWith(\n    caches.match(event.request).then(function (resp) {\n      return resp || fetchAsset(event);\n    })\n  );\n});\n</pre>\n<p>Examining the example code you no doubt see the self object and are wondering what &#8216;self&#8217; references. Within a service worker you can access the worker&#8217;s context or object using the implied self object. You can think about it in terms of an automatic &#8216;this&#8217; variable.</p>\n<p>The fetch event passes a single object parameter, represented by the event variable. By calling the event object&#8217;s respondWith function you can execute a function and its return value is bubbled back through the fetch event handler. In essence you are intercepting a network request and controlling how the browser responds. This is a very powerful action, giving you complete control over any network requests. This includes AJAX or direct file requests, like an image element loading a src image.</p>\n<p>Inside the example respondWith function the code exercises the caches match function. Again we see a &#8216;global&#8217; variable, caches. This is an object that abstracts access to cached content. In this case network requests requests and responses. Notice I did not say files, but request &amp; responses. When a response is cached the entire request transaction object is stored, not just the file or payload. This can later serve a valuable purpose by giving us access to the URL and headers.</p>\n<p>In the example above all caches are tested using the matches function. Because the caches match function returns a promise you can return a matching response or pass the request along to retrieve from the server. In the example the code performs a simple coalesce, if the resp object exists, return the cached version. Otherwise fetch the asset from the server.</p>\n<p>Before continuing with the caching pipeline, we should explore the Cache API. In the code above caches is referenced. The Cache API allows you to create multiple, named caches. This can be useful if you need to segment cached items. For example images, JSON or API data and other application assets in siloed caches. You have the flexibility to apply different caching and parsing logic to each request type. You are free to cache everything in a single cache, it is completely up to you.</p>\n<p>The cache matches function examines all caches to see if there is an object that matches the request object&#8217;s pattern, which would be the url. You are not limited to querying all caches at once. You can reference a specific cache by name and call the matches function. This could prove beneficial if your caches persisted larger amounts of data or you have many caches. Your mileage may vary across platforms and devices, which is why you should always test your solutions.</p>\n<p>If you need to fetch the asset from the server you need logic in place to cache the response. This being done in the fetchAsset function.</p>\n<pre>\nfunction fetchAsset(event) {\n  if (event.request) {\n    return fetch(event.request).then(function (response) {\n      cacheRequest(productImages, event, response.clone());\n      return response;\n    }).catch(function (exc) {\n      console.error(\"failed fetching \", event.request.url, \" : \", exc);\n    });\n  }\n}\n</pre>\n<p>The function is designed expecting to be called from the fetch event callback, thus the event object is the expected parameter type. The function performs a quick check for the existence of the request object. If satisfied it then performs a fetch call, just as you might have done in your application&#8217;s run-time code. When the fetch returns the response is then cached. In this example the cacheRequest function is called, passing a cache name, the event object and a clone of the response object.</p>\n<p>I want to point out the need to clone the response. If the response object was directly cached the object would in essence be swallowed by the caching process and could not be returned to the initiator. This would result in an exception or at best a very poor user experience. The response object contains a clone function, taking care of creating a new response object just like the original response object.</p>\n<p>Before caching a response you need to open a specific cache. In the example the target cache is based on the name passed to the cacheRequest function. When the cache opens you can then put the response in the cache. In the following example you see you need to supply a key and a value. The key is the request object, while the value is the response. </p>\n<pre>\nfunction cacheRequest(cacheName, event, response) {\n  caches.open(cacheName)\n    .then(function (cache) {\n      cache.put(event.request, response);\n    })\n    .catch(function (e) {\n      console.log(\"error: \", event.request);\n    });\n}\n</pre>\n<p>In the caching technique I described two years ago it assumed localStorage, or at least was designed to work within some limitations due to localStorage. This is where my previous solution is not as robust because localStorage limits keys and values to strings. In order to persist the key as a request object you would need to stringify the object. Which should work in theory, I am sure some problems would reveal themselves. Let&#8217;s not visit that possibility since the Cache API a nicer solution today.</p>\n<p>At this point the service worker has either retrieved the response from cache or retrieved it from the server and cached the response. Either way the fetch event handler returned the requested response. Your application can now continue on its merry way.</p>\n<h2 id=\"benefits-of-a-client-cached-responses\">Benefits of a Client Cached Responses</h2>\n<p>I hope the reality of caching responses in the browser excites everyone because it offers many tangible user experience benefits. As wise people have stated, &#8216;the fastest request is the one that is never made&#8217;. By intercepting all calls to the server and returning local files you are dramatically reducing time to load those files and data in your application. Of course an initial request will always need to be made, this is a necessary evil.</p>\n<p>The obvious benefit is the ability for your application to load and respond faster to customers. However another benefit of the service worker and client-side caching is the ability to work offline. Working offline has long been one of the top feature requests consumers and businesses alike. But it is more important then handling true offline situations.</p>\n<p>\n<img alt=\"downasaur\" src=\"https://calendar.perfplanet.com/wp-content/uploads/2016/12/love/downasaur.png\" /></p>\n<p>How often are you on your mobile device and see you have connectivity bars, only to be frustrated by a site that either wont open or takes for ever to open? Chances are you encounter this scenario often. You are not alone, your customers do too. We have come to affectionately call this experience Lie-Fi. This is where your device tells you it is connected to a network and possibly the Internet, but in reality it is not connected. The problem lies beyond the scope of this article, but typically resides in the way cellular data networks operate. What is important is service worker caching gives you an opportunity for your application to still function in the absence of any network connectivity. </p>\n<p>Of course your application&#8217;s personality is an important consideration to the offline experience. Let&#8217;s take this year&#8217;s most popular application, Pokemon Go. A fun game to play, but how often were you frustrated by a non-responsive experience or had to restart the application due to network issues? If you are like me more than you care to admit. Unfortunately for Niantic, Pokemon Go does require good connectivity to play effectively. However, a service worker gives you a fighting chance to provide a better user experience to the end user. The user wont be able to find freshly spawned Pokemon, since those come from the server.</p>\n<p>Having granular control over how assets are retrieved as well as cached gives you an opportunity to log requests locally and possible set request timeouts to shorter or longer periods as needed. So maybe when a customer is experiencing Lie-Fi you can pass along a kind message alerting them to the situation and offer some sort of alternative.</p>", "title": "Using Service Workers and Cache to Take Web Performance to a New Level", "author_name": "stoyan", "source_type": "rss", "link": "https://calendar.perfplanet.com/2016/service-workers-cache-web-performance-new-level/", "source_link": "https://calendar.perfplanet.com", "source_title": "Performance Calendar", "published": "2016-12-23T21:52:00"}, {"source_name": "PerformanceCalendar", "description": "As soon as you want to industrialize your work (think Continuous Integration), you need a private WPT instance.", "tags": "perf,tech,tools,web", "text": "<p>WebPageTest (WPT) is <em>THE</em> webperf tool for every engineer working in the webperf field. Public instances are very useful for single tests but as soon as you want to industrialize your work (think Continuous Integration on webperf), you need a private instance.</p>\n<p>Back to 2014, <a href=\"https://sites.google.com/a/webpagetest.org/docs/private-instances\">installing the Windows test machines</a> usually resulted in at least several hours of work and a bunch of questions about how to get the configuration working. There has been a huge step forward with the creation of an AMI for Amazon EC2. Patrick Meenan introduced <a href=\"https://calendar.perfplanet.com/2014/webpagetest-private-instances-in-five-minutes/\">the installation on Amazon Web Service</a> in the Perf Calendar of 2014.</p>\n<p>However, if you want to run your private instance on your own machine or on a location not covered by Amazon Web Services, it was pretty hard, especially if you came from Linux. We will cover in this article two ways to automate your private instance installation on Windows Server 2012.</p>\n<h2 id=\"using_the_salt_stack_automation_tool\">Using the Salt Stack automation tool</h2>\n<p><a href=\"https://github.com/Linuturk\">Justin Phelps</a> did a great job on a <a href=\"https://github.com/Linuturk/webpagetest\">Salt script</a> that allows to automate that installation.</p>\n<p>Of course, with this option, the main requirement is using Salt Stack, with a Salt Master, and that could be a big barrier. However, if you already work with Salt, you will be able to install your agents automatically and very quickly.</p>\n<p>You can watch his presentation here, during  <a href=\"https://www.youtube.com/watch?v=BWlCoXFdWmU\">SaltConf15</a>.</p>\n<h2 id=\"using_a_powershell_standalone_script\">Using a PowerShell standalone script</h2>\n<p>At <a href=\"http://www.fasterize.com/\">Fasterize</a>, even if quite everything is fully automated, we don&#8217;t use SaltStack. So we&#8217;ve written a <a href=\"https://github.com/fasterize/webpagetest-installation/\">PowerShell script</a> to do this install and we decided to opensource it. Our script is heavily based on the work done by Justin.</p>\n<p>Starting is easy, you just have to download the script file on your Windows machine and edit the different settings on top of the file:</p>\n<pre>\n[String]$wpt_password = \"p@ssword\",\n[String]$wpt_url = \"http://www.webpagetest.com/\",\n[String]$wpt_location = \"wpt_location\",\n[String]$wpt_key = \"wpt_key\",\n[String]$windows_licenceKey = \"XXXXX-XXXXX-XXXXX-XXXXX-XXXXX\"\n</pre>\n<p>Once it&#8217;s done, you can execute the script as an administrator, it will perform the <a href=\"https://github.com/fasterize/webpagetest-installation/blob/master/deploy-WebpagetestAgent.ps1#L335...L361\">following actions for you</a>:</p>\n<ol>\n<li>prepare the machine (set the windows license, set the DNS resolver, &#8230;)</li>\n<li>create the user that will launch WebPageTest</li>\n<li>download the WebPageTest folder from Github</li>\n<li>configure WebPageTest</li>\n<li>install DummyNet network driver (used to emulate network conditions)</li>\n<li>schedule WebPageTest at  start up</li>\n</ol>\n<p>We appreciate any contributions on this project to make it more flexible and more robust.</p>\n<p>Happy testing!</p>", "title": "Automation of your own WebPageTest Private Instances", "author_name": "stoyan", "source_type": "rss", "link": "https://calendar.perfplanet.com/2016/automation-of-your-own-webpagetest-private-instances/", "source_link": "https://calendar.perfplanet.com", "source_title": "Performance Calendar", "published": "2016-12-22T18:54:00"}, {"picture": "//lh6.googleusercontent.com/-9zSEBEYfwaU/AAAAAAAAAAI/AAAAAAAAB9A/QYm9SICrReI/s512-c/photo.jpg", "source_name": "V8Blog", "description": "Over the last year the V8 team has developed a new methodology to measure and understand real-world JavaScript performance. We‚Äôve used the insights that we gleaned from it to change how the V8 team makes JavaScript faster. Our new real-world focus represents a significant shift from our traditional performance focus. We‚Äôre confident that as we continue to apply this methodology in 2017, it will significantly improve users‚Äô and developers‚Äô ability to rely on predictable performance from V8 for real-world JavaScript in both Chrome and Node.js.<br /><br />The old adage ‚Äúwhat gets measured gets improved‚Äù is particularly true in the world of JavaScript virtual machine (VM) development. Choosing the right metrics to guide performance optimization is one of the most important things a VM team can do over time. The following timeline roughly illustrates how JavaScript benchmarking has evolved since the initial release of V8:<br /><br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://2.bp.blogspot.com/-4_PDyKh5nm0/WFqFFdR_SuI/AAAAAAAABx4/mbILTtElhWM5Atgz0XRpXlNPW0owpeEtwCLcB/s1600/evolution_of_benchmarks.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"320\" src=\"https://2.bp.blogspot.com/-4_PDyKh5nm0/WFqFFdR_SuI/AAAAAAAABx4/mbILTtElhWM5Atgz0XRpXlNPW0owpeEtwCLcB/s640/evolution_of_benchmarks.png\" width=\"640\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Evolution of JavaScript benchmarks.</td></tr></tbody></table><br />Historically, V8 and other JavaScript engines have measured performance using synthetic benchmarks. Initially, VM developers used microbenchmarks like <a href=\"https://webkit.org/perf/sunspider/sunspider.html\" target=\"_blank\">SunSpider</a> and <a href=\"http://krakenbenchmark.mozilla.org/\" target=\"_blank\">Kraken</a>. As the browser market matured a second benchmarking era began, during which they used larger but nevertheless synthetic test suites such as <a href=\"http://chromium.github.io/octane/\" target=\"_blank\">Octane</a> and <a href=\"http://browserbench.org/JetStream/\" target=\"_blank\">JetStream</a>.<br /><br />Microbenchmarks and static test suites have a few benefits: they‚Äôre easy to bootstrap, simple to understand, and able to run in any browser, making comparative analysis easy. But this convenience comes with a number of downsides. Because they include a limited number of test cases, it is difficult to design benchmarks which accurately reflect the characteristics of the web at large. Moreover, benchmarks are usually updated infrequently; thus, they tend to have a hard time keeping up with new trends and patterns of JavaScript development in the wild. Finally, over the years VM authors explored every nook and cranny of the traditional benchmarks, and in the process they discovered and took advantage of opportunities to improve benchmark scores by shuffling around or even skipping externally unobservable work during benchmark execution. This kind of benchmark-score-driven improvement and over-optimizing for benchmarks doesn‚Äôt always provide much user- or developer-facing benefit, and history has shown that over the long-term it‚Äôs very difficult to make an ‚Äúungameable‚Äù synthetic benchmark.<br /><div><br /></div><h2>Measuring real websites: WebPageReplay &amp; Runtime Call Stats</h2>Given an intuition that we were only seeing one part of the performance story with traditional static benchmarks, the V8 team set out to measure real-world performance by benchmarking the loading of actual websites. We wanted to measure use cases that reflected how end users actually browsed the web, so we decided to derive performance metrics from websites like Twitter, Facebook, and Google Maps. Using a piece of Chrome infrastructure called <a href=\"https://github.com/chromium/web-page-replay\" target=\"_blank\">WebPageReplay</a> we were able to record and replay page loads deterministically.<br /><br />In tandem, we developed a tool called Runtime Call Stats which allowed us to profile how different JavaScript code stressed different V8 components. For the first time, we had the ability not only to test V8 changes easily against real websites, but to fully understand how and why V8 performed differently under different workloads.<br /><br />We now monitor changes against a test suite of approximately 25 websites in order to guide V8 optimization. In addition to the aforementioned websites and others from the Alexa Top 100, we selected sites which were implemented using common frameworks (React, Polymer, Angular, Ember, and more), sites from a variety of different geographic locales, and sites or libraries whose development teams have collaborated with us, such as Wikipedia, Reddit, Twitter, and Webpack. We believe these 25 sites are representative of the web at large and that performance improvements to these sites will be directly reflected in similar speedups for sites being written today by JavaScript developers.<br /><br />For an in-depth presentation about the development of our test suite of websites and Runtime Call Stats, see the <a href=\"https://www.youtube.com/watch?v=xCx4uC7mn6Y\" target=\"_blank\">BlinkOn 6 presentation on real-world performance</a>. You can even <a href=\"https://docs.google.com/presentation/d/1Lq2DD28CGa7bxawVH_2OcmyiTiBn74dvC6vn2essroY/edit\" target=\"_blank\">run the Runtime Call Stats tool yourself</a>.<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"></div><br /><h2>Making a real difference</h2>Analyzing these new, real-world performance metrics and comparing them to traditional benchmarks with Runtime Call Stats has also given us more insight into how various workloads stress V8 in different ways.<br /><br />From these measurements, we discovered that Octane performance was actually a poor proxy for performance on the majority of our 25 tested websites. You can see in the chart below: Octane‚Äôs color bar distribution is very different than any other workload, especially those for the real-world websites. When running Octane, V8‚Äôs bottleneck is often the execution of JavaScript code. However, most real-world websites instead stress V8‚Äôs parser and compiler. We realized that optimizations made for Octane often lacked impact on real-world web pages, and in some cases these <a href=\"http://benediktmeurer.de/2016/12/16/the-truth-about-traditional-javascript-benchmarks/#a-closer-look-at-octane\" target=\"_blank\">optimizations made real-world websites slower</a>.<br /><br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://2.bp.blogspot.com/-T6jYRcJVf94/WFqHAbRLVFI/AAAAAAAAByE/5go6iT2g02os4MtY4xs_4pV80aV_V33HACLcB/s1600/startup_distribution.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"378\" src=\"https://2.bp.blogspot.com/-T6jYRcJVf94/WFqHAbRLVFI/AAAAAAAAByE/5go6iT2g02os4MtY4xs_4pV80aV_V33HACLcB/s640/startup_distribution.png\" width=\"640\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Distribution of time running all of Octane, running the line-items of Speedometer and loading websites from our test suite on Chrome M57.</td></tr></tbody></table><br />We also discovered that another benchmark was actually a better proxy for real websites. <a href=\"http://browserbench.org/Speedometer/\" target=\"_blank\">Speedometer</a>, a WebKit benchmark that includes applications written in React, Angular, Ember, and other frameworks, demonstrated a very similar runtime profile to the 25 sites. Although no benchmark matches the fidelity of real web pages, we believe Speedometer does a better job of approximating the real-world workloads of modern JavaScript on the web than Octane.<br /><br /><h2>Bottom line: A faster V8 for all</h2>Over the course of the past year, the real-world website test suite and our Runtime Call Stats tool has allowed us to deliver V8 performance optimizations that speed up page loads across the board by an average of 10-20%. Given the historical focus on optimizing page load across Chrome, a double-digit improvement to the metric in 2016 is a significant achievement. The same optimizations also improved our score on Speedometer by 20-30%.<br /><br />These performance improvements should be reflected in other sites written by web developers using modern frameworks and similar patterns of JavaScript. Our improvements to builtins such as Object.create and <a href=\"http://benediktmeurer.de/2015/12/25/a-new-approach-to-function-prototype-bind/\" target=\"_blank\">Function.prototype.bind</a>, optimizations around the object factory pattern, work on V8‚Äôs <a href=\"https://en.wikipedia.org/wiki/Inline_caching\" target=\"_blank\">inline caches</a>, and ongoing parser improvements are intended to be generally applicable improvements to underlooked areas of JavaScript used by all developers, not just the representative sites we track.<br /><br />We plan to expand our usage of real websites to guide V8 performance work. Stay tuned for more insights about benchmarks and script performance.<br /><br />Posted by the V8 team", "title": "How V8 measures real-world performance", "source_link": "http://v8project.blogspot.com/", "author_link": "https://plus.google.com/112105245188441507084", "author_name": "Michael Hablich", "source_type": "rss", "link": "http://v8project.blogspot.com/2016/12/how-v8-measures-real-world-performance.html", "published": "2016-12-21T16:02:00", "source_title": "V8 JavaScript Engine", "tags": "browsers,chromium,js,tech,web"}, {"picture": "//lh5.googleusercontent.com/-ADzStvYhfvA/AAAAAAAAAAI/AAAAAAAAACU/SUC0MyaiHUE/s512-c/photo.jpg", "source_name": "V8Blog", "description": "<em>Node's popularity has been growing steadily over the last few years, and we have been working to make Node better. This blog post highlights some of the recent efforts in V8 and DevTools.</em><br /><em><br /></em><br /><h2>Debug Node.js in DevTools</h2>You can now <a href=\"https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27#.knjnbsp6t\">debug Node applications using the Chrome</a><a href=\"https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27#.knjnbsp6t\"> developer tools</a>. The Chrome DevTools Team moved the source code that implements the debugging protocol from Chromium to V8, thereby making it easier for Node Core to stay up to date with the debugger sources and dependencies. Other browser vendors and IDEs use the Chrome debugging protocol as well, collectively improving the developer experience when working with Node.<br /><br /><h2>ES6 Speed-ups</h2>We are working hard on making V8 faster than ever. <a href=\"http://v8project.blogspot.de/2016/12/v8-release-56.html\">A lot of our </a><a href=\"http://v8project.blogspot.de/2016/12/v8-release-56.html\">recent </a><a href=\"http://v8project.blogspot.de/2016/12/v8-release-56.html\">performance work centers around </a><a href=\"http://v8project.blogspot.de/2016/12/v8-release-56.html\">ES6</a><a href=\"http://v8project.blogspot.de/2016/12/v8-release-56.html\"> features</a>, including promises, generators, destructors, and rest/spread operators. Because the versions of V8 in Node 6.2 and onwards fully support ES6, Node developers can use new language features \"natively\", without polyfills. This means that Node developers are often the first to benefit from ES6 performance improvements. Similarly, they are often the first to recognize performance regressions. Thanks to an attentive Node community, we discovered and fixed a number of regressions, including performance issues with <a href=\"https://github.com/nodejs/node/issues/9634\">instanceof</a><a href=\"https://github.com/nodejs/node/issues/9634\">,</a> <a href=\"https://github.com/nodejs/node/issues/9006\">buffer.length</a>, <a href=\"https://github.com/nodejs/node/pull/9643\">long argument lists</a>, and <a href=\"https://github.com/nodejs/node/issues/9729\">let/const</a>.    <br /><br /><h2>Fixes for Node.js vm module and REPL coming</h2>The <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/vm.html\">vm module</a> has had <a href=\"https://github.com/nodejs/node/issues/6283\">some long standing limitations</a>. In order to address these issues properly, we have extended the V8 API to implement more intuitive behavior. We are excited to announce that the vm module improvements are one of the projects we‚Äôre supporting as mentors in <a href=\"https://nodejs.org/en/foundation/outreachy/\">Outreachy for the Node Foundation</a>. We hope to see additional progress on this project and others in the near future. <br /><br /><h2>Async/await</h2>With async functions, you can drastically simplify asynchronous code by rewriting program flow by awaiting promises sequentially. Async/await will land in Node <a href=\"https://github.com/nodejs/node/pull/9618\">with the next V8 update</a>. Our recent work on improving the performance of promises and generators has helped make async functions fast. On a related note, we are also working on providing <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=4643\">promise hooks</a>, a set of introspection APIs needed for the <a href=\"https://github.com/nodejs/node-eps/pull/18\">Node </a><a href=\"https://github.com/nodejs/node-eps/pull/18\">Async</a><a href=\"https://github.com/nodejs/node-eps/pull/18\">Hook</a><a href=\"https://github.com/nodejs/node-eps/pull/18\"> API</a>. <br /><br /><h2>Want to try Bleeding Edge Node.js?</h2>If you‚Äôre excited to test the newest V8 features in Node and don‚Äôt mind using bleeding edge, unstable software, you can try out our integration branch <a href=\"https://github.com/v8/node/tree/vee-eight-lkgr\">here</a>. <a href=\"https://build.chromium.org/p/client.v8.fyi/builders/V8%20-%20node.js%20integration\">V8 is continuously integrated into Node</a> before V8 hits Node master, so we can catch issues early. Be warned though, this is more experimental than Node master.  <br /><br />Posted by Franziska Hinkelmann, Node Monkey Patcher", "title": "V8 ‚ù§Ô∏è Node.js", "source_link": "http://v8project.blogspot.com/", "author_link": "https://plus.google.com/116713283748910059509", "author_name": "Franziska Hinkelmann", "source_type": "rss", "link": "http://v8project.blogspot.com/2016/12/v8-nodejs.html", "published": "2016-12-15T17:03:00", "source_title": "V8 JavaScript Engine", "tags": "browsers,chromium,js,tech,web"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "ChromiumBlog", "description": "<div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 10pt; margin-top: 0pt;\"><span style=\"background-color: white; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Virtual Reality (VR) is rapidly growing in popularity, and now it's coming to the web. The power of the web is that it can allow VR to work across browsers and hardware, accessible via a single click. This enables VR developers to broadly reach users across multiple types of headsets with a single web app. Here‚Äôs how to get started.</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 10pt; margin-top: 0pt;\"><span style=\"background-color: white; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Chrome 56 for Android is now available in beta, and web developers can sign up for an </span><a href=\"https://github.com/jpchase/OriginTrials/blob/gh-pages/developer-guide.md\" style=\"text-decoration: none;\"><span style=\"background-color: white; color: #1155cc; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">Origin Trial</span></a><span style=\"background-color: white; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> which enables the </span><a href=\"https://w3c.github.io/webvr/archive/prerelease/1.1/\" style=\"text-decoration: none;\"><span style=\"background-color: white; color: #1155cc; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">WebVR API</span></a><span style=\"background-color: white; color: #333333; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> and </span><a href=\"https://w3c.github.io/gamepad/extensions.html\" style=\"text-decoration: none;\"><span style=\"background-color: white; color: #1155cc; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">GamePad API extensions</span></a><span style=\"background-color: white; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">. The WebVR API provides access to the input and output capabilities of virtual reality devices such as Daydream View. It also provides access to the user‚Äôs position and orientation, so that web apps can render a stereoscopic 3D scene to the headset's display. The Gamepad API extensions provide access to input from motion controllers, such as the Daydream controller, and enables natural interactions in VR.</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 10pt; margin-top: 0pt;\"><span style=\"background-color: white; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Origin Trials allow a developer to temporarily enable the feature for all Chrome users visiting their website. The WebVR API is still evolving and will undergo further changes based on developer feedback before being enabled by default for all pages. WebVR will be extended to desktop platforms and Google Cardboard in a future Chrome release, and several performance improvements are coming in Chrome 57.</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 10pt; margin-top: 0pt;\"><span style=\"background-color: white; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">To learn how to get started and build your first WebVR web app, visit the </span><a href=\"https://developers.google.com/web/fundamentals/vr/\" style=\"text-decoration: none;\"><span style=\"background-color: white; color: #1155cc; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">WebVR developer site </span></a><span style=\"background-color: white; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">for tutorials and samples. Join the conversation by </span><a href=\"https://github.com/w3c/webvr\" style=\"text-decoration: none;\"><span style=\"background-color: white; color: #1155cc; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">giving feedback on the API </span></a><span style=\"background-color: white; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">or </span><a href=\"https://bugs.chromium.org/p/chromium/issues/entry?components=Blink%3EWebVR\" style=\"text-decoration: none;\"><span style=\"background-color: white; color: #1155cc; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">the Chrome implementation </span></a><span style=\"background-color: white; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">and joining the </span><a href=\"http://webvr-slack.herokuapp.com/\" style=\"text-decoration: none;\"><span style=\"background-color: white; color: #1155cc; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">WebVR Slack channel</span></a><span style=\"background-color: white; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">. </span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 10pt; margin-top: 0pt;\"><span id=\"docs-internal-guid-3b82f140-fa04-300e-2603-db4d41f7ca2f\"><span style=\"background-color: white; color: #212121; font-family: Arial; font-size: 13.3333px; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\">Posted by Brandon Jones, Virtual Reality Plumber</span></span></div>", "title": "Introducing the WebVR API in Chrome for Android", "source_link": "http://blog.chromium.org/", "author_link": "https://plus.google.com/106190864297512596007", "author_name": "Chrome Blog", "source_type": "rss", "link": "http://blog.chromium.org/2016/12/introducing-webvr-api-in-chrome-for.html", "published": "2016-12-13T21:09:00", "source_title": "Chromium Blog", "tags": "browsers,chromium,tech,web"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "ChromiumBlog", "description": "<div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 10pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Four months ago we </span><a href=\"https://blog.google/products/chrome/flash-and-chrome/\" style=\"text-decoration: none;\"><span style=\"background-color: white; color: #1155cc; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">announced</span></a><span style=\"background-color: white; color: black; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> that we‚Äôd be moving to HTML5 By Default to offer a safer, more power-efficient experience. As a </span><a href=\"https://groups.google.com/a/chromium.org/forum/#!topic/chromium-dev/0wWoRRhTA_E%5B1-25%5D\" style=\"text-decoration: none;\"><span style=\"background-color: white; color: #1155cc; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">reminder</span></a><span style=\"background-color: white; color: black; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">, this change disables Adobe Flash Player unless there‚Äôs a user indication that they want Flash content on specific sites, and eventually all websites will require the user‚Äôs permission to run Flash. To ensure a smooth transition, not all users and sites will be affected immediately. HTML5 by Default and the associated user prompts will be introduced gradually as follows.</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 10pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">The feature will be rolled out to users over a few months. HTML5 By Default will be enabled for 1% of users of Chrome 55 Stable in the next few days. The feature is also enabled for 50% of Chrome 56 beta users. With Chrome 56 stable in February, we plan to enable it for all users.</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 10pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Starting in January users will be prompted to run Flash on a site-by-site basis for sites that they have never visited before. We want to avoid over-prompting users, so over time we‚Äôll tighten this restriction using </span><a href=\"https://www.chromium.org/developers/design-documents/site-engagement\" style=\"text-decoration: none;\"><span style=\"background-color: white; color: #1155cc; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">Site Engagement Index</span></a><span style=\"background-color: white; color: black; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">, a heuristic for how much a user interacts with a site based on their browsing activity. In October all sites will require user permission to run Flash.</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 10pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">More details, including specific Site Engagement Index thresholds, are available on the </span><a href=\"https://sites.google.com/a/chromium.org/dev/flash-roadmap#TOC-HTML5-By-Default-Target:-Chrome-55---Dec-2016-\" style=\"text-decoration: none;\"><span style=\"background-color: white; color: #1155cc; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">Flash Roadmap Page</span></a><span style=\"background-color: white; color: black; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">. Developers can find </span><a href=\"https://sites.google.com/a/chromium.org/dev/flash-roadmap#TOC-Developer-Recommendations\" style=\"text-decoration: none;\"><span style=\"background-color: white; color: #1155cc; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">recommendations</span></a><span style=\"background-color: white; color: black; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> on how to test their Flash sites there as well. As sites transition from Flash to HTML5, this change will no longer affect them and the entire web will become faster, more secure and power-efficient. </span></div><span id=\"docs-internal-guid-a99bd121-e4d9-ac90-35ea-342d312ba76b\"><span style=\"background-color: white; font-family: Arial; font-size: 13.3333px; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\">Posted by Eric Deily, wrangler of the Default</span></span>", "title": "Roll-out plan for HTML5 by Default", "source_link": "http://blog.chromium.org/", "author_link": "https://plus.google.com/106190864297512596007", "author_name": "Chrome Blog", "source_type": "rss", "link": "http://blog.chromium.org/2016/12/roll-out-plan-for-html5-by-default.html", "published": "2016-12-09T19:59:00", "source_title": "Chromium Blog", "tags": "browsers,chromium,tech,web"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "ChromiumBlog", "description": "<div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Unless otherwise noted, changes described below apply to the newest Chrome </span><span><a href=\"https://www.google.com/intl/en/chrome/browser/beta.html\">Beta</a></span><span> channel release for Android, Chrome OS, Linux, Mac, and Windows.</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>‚ÄúNot Secure‚Äù warning for HTTP password and credit card pages</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>To help users browse safely, Chrome indicates connection security with an icon in the address bar. Historically, Chrome has not explicitly labelled HTTP connections as non-secure. Starting in version 56, Chrome will </span><a href=\"https://security.googleblog.com/2016/09/moving-towards-more-secure-web.html\"><span>mark </span><span>HTTP pages</span></a><span> that collect passwords or credit cards as non-secure, as part of a long-term plan to mark all HTTP sites as non-secure. The feature will roll out gradually over the next few weeks. </span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>To avoid being labeled insecure, sites should </span><a href=\"https://developers.google.com/web/updates/2016/10/avoid-not-secure-warn\" style=\"text-decoration: none;\"><span>secure their traffic with HTTPS</span></a><span> and follow </span><a href=\"https://developers.google.com/web/fundamentals/security/encrypt-in-transit/why-https\" style=\"text-decoration: none;\"><span>general security guidelines</span></a><span>. </span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span><img height=\"36\" src=\"https://lh5.googleusercontent.com/zCfrVysJgGHjFbkzzehrgITVpd_MowiAcwGCROmHzBQCAEb_lUSP05PaTTHCQIrsMRMYSwP_WsePcnR5NQk2w8q2k1tklYjlytGI33WTOp1gaXT4lKpCz5el0SAsqie3-1qRvwRn\" width=\"447\" /></span></div><div style=\"text-align: center;\"><span id=\"docs-internal-guid-66e1c0d9-dfe4-78c8-b055-6798d941f29b\"><span>Chrome ‚ÄòNot Secure‚Äô warning appearing in the URL bar for a site with an HTTP connection &nbsp;</span></span></div><div style=\"text-align: center;\"><span><br /></span></div><div style=\"text-align: left;\"><span>Web Bluetooth</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Sites can now interact with Bluetooth Low Energy (BLE) devices using the </span><a href=\"https://webbluetoothcg.github.io/web-bluetooth/\" style=\"text-decoration: none;\"><span>Web Bluetooth API</span></a><span> </span><a href=\"https://webbluetoothcg.github.io/web-bluetooth/\" style=\"text-decoration: none;\"><span>o</span></a><span>n</span><a href=\"https://webbluetoothcg.github.io/web-bluetooth/\" style=\"text-decoration: none;\"><span> </span></a><span>A</span><a href=\"https://webbluetoothcg.github.io/web-bluetooth/\" style=\"text-decoration: none;\"><span>n</span></a><span>d</span><a href=\"https://webbluetoothcg.github.io/web-bluetooth/\" style=\"text-decoration: none;\"><span>r</span></a><span>o</span><a href=\"https://webbluetoothcg.github.io/web-bluetooth/\" style=\"text-decoration: none;\"><span>i</span></a><span>d</span><a href=\"https://webbluetoothcg.github.io/web-bluetooth/\" style=\"text-decoration: none;\"><span>,</span></a><span> </span><a href=\"https://webbluetoothcg.github.io/web-bluetooth/\" style=\"text-decoration: none;\"><span>C</span></a><span>h</span><a href=\"https://webbluetoothcg.github.io/web-bluetooth/\" style=\"text-decoration: none;\"><span>r</span></a><span>o</span><a href=\"https://webbluetoothcg.github.io/web-bluetooth/\" style=\"text-decoration: none;\"><span>m</span></a><span>e</span><a href=\"https://webbluetoothcg.github.io/web-bluetooth/\" style=\"text-decoration: none;\"><span> </span></a><span>O</span><a href=\"https://webbluetoothcg.github.io/web-bluetooth/\" style=\"text-decoration: none;\"><span>S</span></a><span>,</span><a href=\"https://webbluetoothcg.github.io/web-bluetooth/\" style=\"text-decoration: none;\"><span> </span></a><span>a</span><a href=\"https://webbluetoothcg.github.io/web-bluetooth/\" style=\"text-decoration: none;\"><span>n</span></a><span>d</span><a href=\"https://webbluetoothcg.github.io/web-bluetooth/\" style=\"text-decoration: none;\"><span> </span></a><span>Mac. </span><span>The Web Bluetooth API uses the </span><a href=\"https://www.bluetooth.com/specifications/generic-attributes-overview\" style=\"text-decoration: none;\"><span>GATT protocol</span></a><span>, which enables web developers to </span><a href=\"https://developers.google.com/web/updates/2015/07/interact-with-ble-devices-on-the-web\" style=\"text-decoration: none;\"><span>connect to bluetooth devices</span></a><span> such as </span><a href=\"https://github.com/WebBluetoothCG/demos\" style=\"text-decoration: none;\"><span>printers and LED displays</span></a><span> with just a few lines of JavaScript. Web Bluetooth can also be combined with </span><a href=\"http://physical-web.org/\" style=\"text-decoration: none;\"><span>Physical Web</span></a><span> beacons to discover and control nearby devices. To get started, check out these </span><a href=\"https://googlechrome.github.io/samples/web-bluetooth/index.html\" style=\"text-decoration: none;\"><span>samples</span></a><span> and </span><a href=\"https://github.com/WebBluetoothCG/demos\" style=\"text-decoration: none;\"><span>demos</span></a><span> on GitHub. &nbsp;</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span> </span><span><img alt=\"heart.gif\" height=\"296\" src=\"https://lh6.googleusercontent.com/w_2HkDOLMeLROm2qTfCHNKrpiH-CNH91AlpTvLaznyUpjquDE49R9h9GZvrB2G72xIUliZylwwWctFE2tHaIR82qTvL3JvxRiYvobU3Qvn0o5h5qZhww15QmAFyjx5ybFP6lq6IU\" width=\"166\" /></span></div><div style=\"text-align: center;\"><span id=\"docs-internal-guid-89384583-dfe8-2ad7-ac15-0ae9a98feee8\"><span>An Android device connecting to a BLE-enabled heart rate monitor via the web (</span><a href=\"https://github.com/WebBluetoothCG/demos/tree/gh-pages/heart-rate-sensor\"><span>source</span></a><span>)</span></span></div><div style=\"text-align: center;\"><span><br /></span></div><div style=\"text-align: left;\"><span>CSS position: sticky</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Chrome now supports CSS </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/position#Sticky_positioning\" style=\"text-decoration: none;\"><span>position: sticky</span></a><span>, a new way to position elements. A </span><span>position: sticky</span><span> element is relatively-positioned, but becomes </span><span>position: fixed</span><span> after the user reaches a certain scroll position.</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span><img height=\"288\" src=\"https://lh3.googleusercontent.com/kWt3P4WrpXWt_osElJn1F39V2cu0kC5vfA4cyQFewCYm1bJNw1anQ2IilQt7s0bKOhE_Zho3J8v10qyvdKMhkmRCHabttVe6UnqwsOH5k3v9TzN-bOtHn3RKuRqe2Bxcb97jKRBz\" width=\"476\" /></span></div><div style=\"text-align: center;\"><span id=\"docs-internal-guid-b934eee7-dfe9-11ad-5c98-25448ac28124\"></span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Previously, building content headers that scrolled normally until sticking to the top of the viewport required listening to scroll events and switching an element‚Äôs position from </span><span>relative</span><span> to </span><span>fixed</span><span> at a specified threshold. This solution was difficult to synchronize, resulting in small visual jumps. Now, users can achieve the desired effect by simply positioning their elements as </span><a href=\"https://developers.google.com/web/updates/2016/12/position-sticky\" style=\"text-decoration: none;\"><span>sticky</span></a><span>.</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Other features in this release</span></div><ul style=\"margin-bottom: 0pt; margin-top: 0pt;\"><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The new </span><a href=\"https://w3c.github.io/remote-playback/\" style=\"text-decoration: none;\"><span>Remote Playback API</span></a><span> on Android</span><span> enables sites to initiate and control playback of an </span><span>HTMLMediaElement</span><span> </span><span>on smart TVs and speakers</span><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><a href=\"https://w3c.github.io/webvr/\" style=\"text-decoration: none;\"><span>WebVR API</span></a><span> is available on Android as an </span><a href=\"https://github.com/jpchase/OriginTrials/blob/gh-pages/developer-guide.md\" style=\"text-decoration: none;\"><span>origin trial</span></a><span>, allowing developers to create virtual reality experiences on the web.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><a href=\"https://www.khronos.org/registry/webgl/specs/latest/2.0/\" style=\"text-decoration: none;\"><span>WebGL 2.0 API</span></a><span> is enabled by default on desktop platforms, providing </span><a href=\"https://www.khronos.org/opengles/\" style=\"text-decoration: none;\"><span>OpenGL ES 3.0</span></a><span> level rendering capabilities via the </span><span>&lt;canvas&gt;</span><span> element.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Support for Adobe Flash will no longer be advertised in </span><span>navigator.plugins</span><span> and </span><span>navigator.mimetypes</span><span> if the user has not </span><a href=\"https://sites.google.com/a/chromium.org/dev/flash-roadmap#TOC-HTML5-By-Default-Target:-Chrome-55---Dec-2016-\" style=\"text-decoration: none;\"><span>substantially interacted</span></a><span> with a site, though users can re-enable Flash experiences on a per-site basis.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Sites can now experiment with </span><a href=\"https://developers.google.com/web/updates/2016/12/imagecapture\" style=\"text-decoration: none;\"><span>taking photos and configuring camera settings like zoom</span></a><span> using the </span><a href=\"https://developers.google.com/web/updates/2016/12/imagecapture\" style=\"text-decoration: none;\"><span>Image Capture</span></a><span> </span><a href=\"https://github.com/jpchase/OriginTrials/blob/gh-pages/developer-guide.md\" style=\"text-decoration: none;\"><span>origin trial</span></a><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>When content changes above the viewport, Chrome now automatically adjusts the </span><a href=\"https://github.com/WICG/ScrollAnchoring/blob/master/explainer.md\" style=\"text-decoration: none;\"><span>scroll position</span></a><span> to keep content in the viewport fixed unless the CSS </span><span>overflow-anchor</span><span> property is set.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API\" style=\"text-decoration: none;\"><span>Notifications API</span></a><span> now allows sites to </span><a href=\"http://imgur.com/a/sUd6e\" style=\"text-decoration: none;\"><span>include an image in notifications</span></a><span> by setting the </span><span>image</span><span> property.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span id=\"docs-internal-guid-66e1c0d9-e003-557f-c2e5-9946a7e3af4c\"><span style=\"font-size: 13.3333px; vertical-align: baseline; white-space: pre-wrap;\">The </span><a href=\"https://developers.google.com/web/fundamentals/discovery-and-monetization/payment-request/\"><span style=\"color: #1155cc; font-size: 13.3333px; vertical-align: baseline; white-space: pre-wrap;\">PaymentRequest API</span></a><span style=\"font-size: 13.3333px; vertical-align: baseline; white-space: pre-wrap;\"> has a variety of </span><a href=\"https://docs.google.com/document/d/1I8ha1ySrPWhx80EB4CVPmThkD4ILFM017AfOA5gEFg4/edit#\"><span style=\"color: #1155cc; font-size: 13.3333px; vertical-align: baseline; white-space: pre-wrap;\">new features</span></a><span style=\"font-size: 13.3333px; vertical-align: baseline; white-space: pre-wrap;\"> including </span><span>requestPayerName</span><span style=\"font-size: 13.3333px; vertical-align: baseline; white-space: pre-wrap;\"> and JSON serialization.</span></span></div></li></ul><ul style=\"margin-bottom: 0pt; margin-top: 0pt;\"><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Showing and hiding the URL bar on mobile no longer </span><a href=\"https://github.com/bokand/URLBarSizing\" style=\"text-decoration: none;\"><span>resizes</span></a><span> the initial containing block or elements sized with viewport units such as </span><span>vh</span><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Text input elements such as </span><span>&lt;input type=\"text\"&gt;</span><span> now have spell-checking enabled by default on Android devices with at least 512 MB of memory and a system dictionary.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The generic font family used to fit content within the UI has been standardized and renamed as </span><span>system-ui</span><span> on all platforms. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The new </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\" style=\"text-decoration: none;\"><span>Referrer-Policy HTTP</span></a><span> header allows sites to forward site traffic by URL without leaking the user‚Äôs session identifier or other private information.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/isComposing\" style=\"text-decoration: none;\"><span>KeyboardEvent.isComposing()</span></a><span> allows sites to </span><a href=\"https://cdn.rawgit.com/w3c/uievents/gh-pages/tools/key-event-viewer.html\" style=\"text-decoration: none;\"><span>determine</span></a><span> if the user is typing based on recent </span><span>KeyboardEvents</span><span>, without monitoring keyboard events directly.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Chrome for Android now sets the default </span><span>preload</span><span> attribute for videos to </span><span>metadata</span><span> on cellular connections, showing a preview image and time information to match other mobile browsers.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Chrome now supports </span><a href=\"https://github.com/tlswg/tls13-spec\" style=\"text-decoration: none;\"><span>TLS 1.3</span></a><span> and includes 1-RTT based on </span><a href=\"https://tools.ietf.org/html/draft-ietf-tls-tls13-18\" style=\"text-decoration: none;\"><span>draft-18</span></a><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Sites can use </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmapRenderingContext\" style=\"text-decoration: none;\"><span>ImageBitmapRenderingContext</span></a><span> to reduce memory consumption and compositing overhead by rendering pixel data in the form of an </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap\" style=\"text-decoration: none;\"><span>ImageBitmap</span></a><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Sites can respond to pinch gestures using the </span><span>pinch-zoom</span><span> CSS </span><span>touch-action</span><span> property.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><a href=\"https://webaudio.github.io/web-audio-api/#ConstantSourceNode\" style=\"text-decoration: none;\"><span>ConstantSourceNode</span></a><span> is a new audio source node that produces a constant output mixed with an </span><span>AudioParam</span><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span id=\"docs-internal-guid-66e1c0d9-f5a8-a776-35d1-b09290ad5ab2\"><span>Two Web Audio </span><a href=\"https://webaudio.github.io/web-audio-api/#the-channelsplitternode-interface\" style=\"text-decoration: none;\"><span>ChannelSplitterNode</span><span> Interface</span></a><span> attributes are now read-only: </span><span>channelCount</span><span>, which is defined by </span><span>numberOfOutputs</span><span> in </span><a href=\"https://webaudio.github.io/web-audio-api/#widl-BaseAudioContext-createChannelSplitter-ChannelSplitterNode-unsigned-long-numberOfOutputs\" style=\"text-decoration: none;\"><span>createChannelSplitter()</span></a><span>, and </span><span>channelCountMode</span><span>, which is set to explicit.</span></span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><a href=\"https://webaudio.github.io/web-audio-api/#widl-PannerNode-rolloffFactor\" style=\"text-decoration: none;\"><span>PannerNode.rolloffFactor</span></a><span> now clamps to the nominal range of a </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/PannerNode\" style=\"text-decoration: none;\"><span>PannerNode‚Äôs</span></a><span> distance model to describe the volume reduction rate as the source moves away from the listener. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span id=\"docs-internal-guid-66e1c0d9-f5a9-dfe3-a4ad-9f3da95e1aef\"><span>window.prompt()</span><span> will no longer focus its parent tab if the page is not currently in the foreground, and the dialog will be automatically dismissed.</span></span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>To match behavior on Windows, Chrome Extensions can now override default search, startup, and homepage settings on Mac with the Chrome </span><a href=\"https://developer.chrome.com/extensions/settings_override\" style=\"text-decoration: none;\"><span>Settings Overrides API</span></a><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><span>Support for </span><a href=\"https://en.wikipedia.org/wiki/FLAC\" style=\"font-family: Arial; font-size: 13.3333px; text-decoration: none;\"><span style=\"color: #1155cc; font-size: 13.3333px; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">FLAC</span></a><span> is enabled within the FLAC and </span><a href=\"https://xiph.org/flac/ogg_mapping.html\" style=\"font-family: Arial; font-size: 13.3333px; text-decoration: none;\"><span style=\"color: #1155cc; font-size: 13.3333px; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">Ogg</span></a><span> containers for the </span><span>&lt;audio&gt;</span><span> tag and </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/decodeAudioData\" style=\"font-family: Arial; font-size: 13.3333px; text-decoration: none;\"><span>decodeAudioData()</span></a><span>.</span></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><span><span id=\"docs-internal-guid-66e1c0d9-f5a8-0e23-c729-308d6f784fdc\"><a href=\"http://opus-codec.org/\" style=\"text-decoration: none;\"><span>OPUS</span></a><span> can now be used with </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/decodeAudioData\" style=\"text-decoration: none;\"><span>decodeAudioData()</span></a><span>, expanding the variety of audio codecs supported by the </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API\" style=\"text-decoration: none;\"><span>WebAudio API</span></a><span>.</span></span></span></li></ul><div><br /></div><div><span id=\"docs-internal-guid-bec322e9-dfed-0746-5bd1-1a94db11bade\"><span>Deprecations and interoperability improvements</span></span></div><ul style=\"margin-bottom: 0pt; margin-top: 0pt;\"><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The WebAudio API no longer includes the deprecated Doppler API, including </span><span>speedOfSound</span><span>, </span><span>dopplerFactor</span><span>, and </span><span>setVelocity</span><span>. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>To improve standards conformance, </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/RTCPeerConnection#RTCConfiguration_dictionary\" style=\"text-decoration: none;\"><span>RTCPeerConnection</span></a><span> now accepts </span><span>iceTransportPolicy</span><span> as an </span><span>RTCConfiguration</span><span> parameter as well as </span><span>iceTransports</span><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\" style=\"text-decoration: none;\"><span>RTCPeerConnection</span></a><span> is now available without a webkit prefix, though </span><span>webkitRTCPeerConnection</span><span> still remains.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Non-whitespace unicode control characters will now be rendered according to the </span><a href=\"https://drafts.csswg.org/css-text/#white-space-processing\" style=\"text-decoration: none;\"><span>specification</span></a><span>, rather than being ignored. </span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The </span><span>reflected-xss</span><span> directive has been removed from </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy\" style=\"text-decoration: none;\"><span>Content Security Policy 2</span></a><span> since it was solely a wrapper for the </span><span>X-XSS-Protection</span><span> header and provided no additional functionality.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: #212121; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Support for the </span><span>MediaStreamTrack.getSources()</span><span> method has been removed in favor of </span><span>MediaDevices.enumerateDevices()</span><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>The CSP </span><span>referrer</span><span> directive is no longer supported in favor of the new </span><a href=\"https://www.w3.org/TR/referrer-policy/\" style=\"text-decoration: none;\"><span>Referrer-Policy</span></a><span> header.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>ShadowDOM‚Äôs </span><a href=\"https://dom.spec.whatwg.org/#signaling-slot-change\" style=\"text-decoration: none;\"><span>slotchange</span></a><span> events bubble, but no longer re-fires, at a </span><span>slot</span><span>'s </span><span>assignedSlot</span><span>. &nbsp;</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Legacy CBC-mode </span><a href=\"https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm\" style=\"text-decoration: none;\"><span>ECDSA</span></a><span> cipher suites </span><span>ECDHE_ECDSA_WITH_AES_128_CBC_SHA</span><span> and </span><span>ECDHE_ECDSA_WITH_AES_256_CBC_SHA</span><span> have been removed in favor of modern ciphers such as </span><span>ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</span><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>ECDSA with both SHA-1 and SHA-512 have been removed to reduce dependencies on SHA-1 and align with TLS 1.3's new ECDSA handling.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Chrome no longer allows opening of pop-ups during inputs which represent a touch scroll, such as </span><span>touchstart</span><span> and </span><span>touchmove</span><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Sites will no longer initiate fetches for scripts with invalid </span><span>type</span><span> or </span><span>language</span><span> attributes, such as </span><span>type=\"python\"</span><span>, unless triggered by declarative fetches using </span><span>link </span><a href=\"https://www.w3.org/TR/preload/\" style=\"text-decoration: none;\"><span>preload</span></a><span>.</span></div></li><li dir=\"ltr\" style=\"background-color: transparent; color: black; font-family: Arial; font-size: 13.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>MIDIMessageEvent.receivedTime</span><span> has been deprecated in favor of </span><span>Event.timeStamp</span><span>, since </span><span>Event.timeStamp</span><span> now supports high-resolution monotonic time instead of epoch time.</span></div></li></ul><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Posted by </span><span>Vincent Scheib, Web Bluetooth Orthodontist</span></div>", "title": "Chrome 56 Beta: ‚ÄúNot Secure‚Äù warning, Web Bluetooth, and CSS position: sticky", "source_link": "http://blog.chromium.org/", "author_link": "https://plus.google.com/106190864297512596007", "author_name": "Chrome Blog", "source_type": "rss", "link": "http://blog.chromium.org/2016/12/chrome-56-beta-not-secure-warning-web.html", "published": "2016-12-08T22:02:00", "source_title": "Chromium Blog", "tags": "browsers,chromium,tech,web"}, {"picture": "//lh6.googleusercontent.com/-9zSEBEYfwaU/AAAAAAAAAAI/AAAAAAAAB9A/QYm9SICrReI/s512-c/photo.jpg", "source_name": "V8Blog", "description": "<div style=\"text-align: justify;\"><i>Every six weeks, we create a new branch of V8 as part of our <a href=\"https://github.com/v8/v8/wiki/Release%20Process\">release process</a>. Each version is branched from V8‚Äôs git master immediately before a Chrome Beta milestone. Today we‚Äôre pleased to announce our newest branch, <a href=\"https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/5.6\">V8 version 5.6</a>, which will be in beta until it is released in coordination with Chrome 56 Stable in several weeks. V8 5.6 is filled with all sorts of developer-facing goodies, so we‚Äôd like to give you a preview of some of the highlights in anticipation of the release.</i></div><div style=\"text-align: justify;\"><br /></div><h2>Ignition and TurboFan pipeline for ES.next (and more) shipped</h2>Starting with 5.6, V8 can optimize the entirety of the JavaScript language. Moreover, many language features are sent through a new optimization pipeline in V8. This pipeline uses V8‚Äôs <a href=\"http://v8project.blogspot.de/2016/08/firing-up-ignition-interpreter.html\">Ignition interpreter</a> as a baseline and optimizes frequently executed methods with V8‚Äôs more powerful <a href=\"https://github.com/v8/v8/wiki/TurboFan\">TurboFan optimizing compiler</a>. The new pipeline activates for new language features (e.g. many of the new features from the ES2015 and ES2016 specifications) or whenever Crankshaft (<a href=\"https://blog.chromium.org/2010/12/new-crankshaft-for-v8.html\">V8‚Äôs ‚Äúclassic‚Äù optimizing compiler</a>) cannot optimize a method (e.g. try-catch, with).<br /><div><br /></div><div><i>Why are we only routing some JavaScript language features through the new pipeline?&nbsp;</i></div><br />The new pipeline is better-suited to optimizing the whole spectrum of the JS language (past and present). It's a healthier, more modern codebase, and it has been designed specifically for real-world use cases including running V8 on low-memory devices. <br /><br /><div>We've started using the Ignition/TurboFan with the newest ES.next features we've added to V8 (ES.next = JavaScript features as specified in ES2015 and later) and will route more features through it as we continue improving its performance. In the middle term, the V8 team is aiming to switch all JavaScript execution in V8 to the new pipeline. However, as long as there are still real-world use cases where Crankshaft runs JavaScript faster than the new Ignition/TurboFan pipeline, for the short term we'll support both pipelines to ensure that JavaScript code running in V8 is as fast as possible in all situations.<br /><br /><i>So, why does the new pipeline use both the new Ignition interpreter and the new Turbofan optimizing compiler?</i><br /><br />Running JavaScript fast and efficiently requires having multiple mechanisms, or tiers, under the hood in a JavaScript virtual machine to do the low-level busywork of execution. For example, it‚Äôs useful to have a first tier that starts executing code quickly, and then a second optimizing tier that spends longer compiling hot functions in order to maximize performance for longer-running code.<br /><br />Ignition and TurboFan are V8‚Äôs two new execution tiers that are most effective when used together. Due to efficiency, simplicity and size considerations, TurboFan is designed to optimize JavaScript methods starting from the <a href=\"https://en.wikipedia.org/wiki/Bytecode\">bytecode</a> produced by V8's Ignition interpreter. By designing both components to work closely together, there are optimizations that can be made to both because of the presence of the other. As a result, starting with 5.6 all functions which will be optimized by TurboFan first run through the Ignition interpreter. Using this unified Ignition/TurboFan pipeline enables the optimization of features that were not optimizable in the past, since they now can take advantage of TurboFan's optimizations passes. For example, by routing <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\">Generators</a> through both Ignition and TurboFan, Generators runtime performance has nearly tripled. <br /><br />For more information on V8's journey to adopt Ignition and TurboFan please have a look at <a href=\"http://benediktmeurer.de/2016/11/25/v8-behind-the-scenes-november-edition/\">Benedikt's dedicated blog post</a>.<br /><br /></div><div><div><h2>Performance improvements</h2>V8 5.6 delivers a number of key improvements in memory and performance footprint.<br /><br /><h3>Memory-induced jank</h3><a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=648568\">Concurrent remembered set filtering</a>&nbsp;was introduced: One step more towards <a href=\"http://v8project.blogspot.de/2016/04/jank-busters-part-two-orinoco.html\">Orinoco</a>.</div><div><br /><h3>Greatly improved ES2015 performance</h3>Developers typically start using new language features with the help of transpilers because of two challenges: backwards-compatibility and performance concerns. <br /><br />V8's goal is to reduce the performance gap between transpilers and V8‚Äôs ‚Äúnative‚Äù ES.next  performance in order to eliminate the latter challenge. We‚Äôve made great progress in bringing the performance of new language features on-par with their transpiled ES5 equivalents. In this release you will find the the performance of ES2015 features is significantly faster than in previous V8 releases, and in some cases ES2015 feature performance is approaching that of transpiled ES5 equivalents.<br /><br />Particularly the <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator\"><span>spread</span></a> operator should now be ready to be used natively. Instead of writing ... <br /><pre><code class=\"javascript\">// Like Math.max, but returns 0 instead of -‚àû for no arguments.<br />function specialMax(...args) {<br />    if (args.length === 0) return 0;<br />    return Math.max.apply(Math, args);<br />}</code></pre>‚Ä¶ you should now be able to write ... <br /><pre><code class=\"javascript\">function specialMax(...args) {<br />    if (args.length === 0) return 0;<br />    return Math.max(...args);<br />}</code></pre>‚Ä¶ and get similar performance results. In particular 5.6 includes speed-ups for the following micro-benchmarks: <br /><ul><li><a href=\"https://github.com/fhinkel/six-speed/tree/master/tests/destructuring\">destructuring</a></li><li><a href=\"https://github.com/fhinkel/six-speed/tree/master/tests/destructuring-array\">destructuring-array</a></li><li><a href=\"https://github.com/fhinkel/six-speed/tree/master/tests/destructuring-string\">destructuring-string</a></li><li><a href=\"https://github.com/fhinkel/six-speed/tree/master/tests/for-of-array\">for-of-array</a></li><li><a href=\"https://github.com/fhinkel/six-speed/tree/master/tests/generator\">generator</a></li><li><a href=\"https://github.com/fhinkel/six-speed/tree/master/tests/spread\">spread</a></li><li><a href=\"https://github.com/fhinkel/six-speed/tree/master/tests/spread-generator\">spread-generator</a></li><li><a href=\"https://github.com/fhinkel/six-speed/tree/master/tests/spread-literal\">spread-literal</a></li></ul><div>See the chart below for a comparison between V8 5.4 and 5.6.</div><div><br /></div><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://3.bp.blogspot.com/-c3o-yU3ME4M/WEHW-IKbPjI/AAAAAAAABuc/OaK0Teiwte0SH4jdvkz8iQqtlaIfbgZtQCLcB/s1600/EScomparison.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"394\" src=\"https://3.bp.blogspot.com/-c3o-yU3ME4M/WEHW-IKbPjI/AAAAAAAABuc/OaK0Teiwte0SH4jdvkz8iQqtlaIfbgZtQCLcB/s640/EScomparison.png\" width=\"640\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Comparing the ES2015 feature performance of V8 5.4 and 5.6<br />&nbsp;Source: &nbsp;<a href=\"https://fhinkel.github.io/six-speed/\">https://fhinkel.github.io/six-speed/</a>&nbsp;(Cloned from <a href=\"http://kpdecker.github.io/six-speed/\">http://kpdecker.github.io/six-speed/</a>)</td></tr></tbody></table><br />This is just the beginning, a lot more to follow in upcoming releases!</div><div><br /></div><div><h2>Language features</h2><h3><strike>String.prototype.padStart / String.prototype.padEnd</strike></h3><strike><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\">String.prototype.padStart </a>and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd\">String.prototype.padEnd</a> are the latest stage 4 additions to ECMAScript. These library functions are officially shipped in 5.6.</strike></div><div><i>Note: Unshipped again.</i></div><div><h2>WebAssembly browser preview</h2>Chromium 56 (which includes 5.6) is going to ship the WebAssembly browser preview. Please refer to <a href=\"http://v8project.blogspot.de/2016/10/webassembly-browser-preview.html\">the dedicated blog post</a> for further information.</div><div><br /></div><div><h2>V8 API</h2>Please check out our <a href=\"http://bit.ly/v8-api-changes\">summary of API changes</a>. This document is regularly updated a few weeks after each major release. <br /><br />Developers with an <a href=\"https://github.com/v8/v8/wiki/Using%20Git\">active V8 checkout</a> can use 'git checkout -b 5.6 -t branch-heads/5.6' to experiment with the new features in V8 5.6. Alternatively you can <a href=\"https://www.google.com/chrome/browser/beta.html\">subscribe to Chrome's Beta channel</a> and try the new features out yourself soon.<br /><br />Posted by the V8 team </div></div>", "title": "V8 Release 5.6", "source_link": "http://v8project.blogspot.com/", "author_link": "https://plus.google.com/112105245188441507084", "author_name": "Michael Hablich", "source_type": "rss", "link": "http://v8project.blogspot.com/2016/12/v8-release-56.html", "published": "2016-12-02T20:33:00", "source_title": "V8 JavaScript Engine", "tags": "browsers,chromium,js,tech,web"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "ChromiumBlog", "description": "<span id=\"docs-internal-guid-87ca44e3-6e4e-56aa-c875-b801e885f1fc\"></span><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Last week at the 4th annual </span><a href=\"https://developer.chrome.com/devsummit/\" style=\"text-decoration: none;\"><span>Chrome Dev Summit</span></a><span>, we were excited to share a glimpse of what‚Äôs possible with</span><span> </span><span>over 1,000 developers in person, and thousands more on the livestream. Each year this is a time to hear what developers have been building, share our vision for the future of the web platform, and celebrate </span><a href=\"https://www.youtube.com/watch?v=JoBfRokdkgY\" style=\"text-decoration: none;\"><span>what we love</span></a><span> about the web... </span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div class=\"separator\" style=\"clear: both; text-align: center;\"></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Reach of the web</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>As we've talked about before, one of the superpowers of the web is its incredible reach. There are now more than two billion active Chrome browsers worldwide, with many more web users across other browsers. The majority of these users are now on mobile devices, bringing new opportunities for us to explore as an industry.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 4pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 4pt; margin-top: 0pt;\"><span>Mobile browsers also lead the way for the internet‚Äôs newest users. Exclusively accessing the internet from mobile devices, users in emerging markets struggle with limited computing power, unreliable networks, and expensive data. For these users, native apps can be a poor match due to their large data and storage requirements. And, it‚Äôs these constraints that have resulted in the developing markets leading the charge when it comes to innovating on the web.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Progressive </span></div><h2 dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 4pt; margin-top: 0pt;\"><span>Instead, the web can fill these needs for all users through an experience we've been calling </span><a href=\"https://developers.google.com/web/progressive-web-apps\" style=\"text-decoration: none;\"><span>Progressive Web Apps</span></a><span> </span><span>(PWAs). These web apps provide the performance </span><span>users</span><span> have come to expect from their device, while also offering critical capabilities such as offlining, add-to-homescreen, and push notifications. We've been encouraged by the strong adoption of these capabilities, with push notifications recently exceeding 18 billion notifications per day across 50,000 domains. </span></h2><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><h2 dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 4pt; margin-top: 0pt;\"><span>Last year when we spoke about PWAs, things were just getting started. Now we're seeing the movement in full swing, with many large sites across the globe launching great new apps and feeling the success that PWAs can bring.</span></h2><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span id=\"docs-internal-guid-87ca44e3-6e4f-a7f7-d9e1-825465f2cb0f\"><span><img alt=\"DAY 1 - THAO LOGOS.png\" height=\"290\" src=\"https://lh6.googleusercontent.com/NqV5Zna96NlGKUMK5iy_Jwur8GN_vkiO_Og8RCNTxuEcBogPJGc-ab4TwuK0N_jecvXxF5e6RU-kT5Me2ff18sN1LKXUJ-vY9fD4wKGSXGdFux2xPN87eCFKC-o7Sgn9Y_ODqyXF\" width=\"534\" /></span></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Alibaba.com, built a PWA and saw a </span><a href=\"https://developers.google.com/web/showcase/2016/alibaba\" style=\"text-decoration: none;\"><span>76% increase in conversion rates</span></a><span> across browsers. </span><span>The investment in the mobile web increased monthly active user rates on iOS by 14 percent. On Android devices where re-engagement capabilities like push notifications and Add to Homescreen were enabled, active user rates increased by 30 percent.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Another great example is The Weather Channel. Since launching a PWA they achieved an </span><a href=\"https://developers.google.com/web/showcase/2016/weather-channel\" style=\"text-decoration: none;\"><span>80% reduction in load time</span></a><span> and within three months, saw almost 1 million users opt in to receive web push notifications.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>During the Summit, we also</span><span> </span><a href=\"https://www.youtube.com/watch?v=KSWSs9UsNpc&amp;list=PLNYkxOF6rcIBTs2KPy1E6tIYaWoFcG3uj&amp;index=27\" style=\"text-decoration: none;\"><span>heard from Lyft</span></a><span>, who shared their experience of building a PWA in less than a month, and using less than a quarter of the engineering support needed to build their native app.</span><span> </span><a href=\"https://developers.google.com/web/showcase/\" style=\"text-decoration: none;\"><span>Learn more</span></a><span> about our how partners are using PWA technologies to enhance their mobile web experience.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>What can you do?</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>We also have a variety of tools, libraries, and APIs available to help you bring the benefits of PWAs to your site. For example, </span><a href=\"https://developer.chrome.com/devtools\" style=\"text-decoration: none;\"><span>Chrome's DevTools</span></a><span> provides assistance along every step of the development flow. DevTools has a ton of new features to help you build great mobile apps, such as network simulation, CPU throttling, and a PWA audit tool powered by </span><a href=\"https://developers.google.com/web/tools/lighthouse/\" style=\"text-decoration: none;\"><span>Lighthouse</span></a><span>.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>For developers just beginning their web app or looking to rework an existing one, the </span><a href=\"https://www.polymer-project.org/1.0/toolbox/\" style=\"text-decoration: none;\"><span>Polymer App Toolbox</span></a><span> provides a set of components and tools for easily building a Progressive Web App using web components. And Polymer 2.0 is right around the corner, making it easy to take advantage of the new Web Components v1 APIs shipping cross-browser and build mobile web apps with minimal overhead.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Finally, checkout can be a complicated process to complete and in the retail sector alone there are</span><a href=\"http://www.smartinsights.com/ecommerce/ecommerce-analytics/ecommerce-conversion-rates/\" style=\"text-decoration: none;\"><span> 66% fewer conversions</span></a><span> on mobile than on desktop.</span><span> </span><span>With </span><a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/payment-request/\" style=\"text-decoration: none;\"><span>PaymentRequest</span></a><span>, you can now bring a seamless checkout experience to your website with support for both credit cards and </span><a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/payment-request/android-pay\" style=\"text-decoration: none;\"><span>Android Pay</span></a><span>, increasing odds for conversion.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Catch up</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Finally, if you didn‚Äôt catch our live stream in real time, you can always check back on our YouTube channel for all </span><a href=\"https://www.youtube.com/playlist?list=PLNYkxOF6rcIBTs2KPy1E6tIYaWoFcG3uj\" style=\"text-decoration: none;\"><span>the recordings</span></a><span> or see the highlights from the event in </span><a href=\"https://www.youtube.com/watch?v=tI2QCxbpsuI\" style=\"text-decoration: none;\"><span>57 seconds</span></a><span>. </span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>Thanks for coming, thanks for watching, and most of all, thank you for developing for the web!</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span><br /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span id=\"docs-internal-guid-87ca44e3-6e51-99c1-8d84-e15ad7bed95c\"><span>Posted by Darin Fisher, VP Engineering, Chrome</span></span></div>", "title": "Chrome Dev Summit 2016: The Mobile Web Moves Forward", "source_link": "http://blog.chromium.org/", "author_link": "https://plus.google.com/106190864297512596007", "author_name": "Chrome Blog", "source_type": "rss", "link": "http://blog.chromium.org/2016/11/chrome-dev-summit-2016-mobile-web-moves.html", "published": "2016-11-16T18:27:00", "source_title": "Chromium Blog", "tags": "browsers,chromium,tech,web"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "V8Blog", "description": "Today we‚Äôre happy to announce, in tandem with <a href=\"https://hacks.mozilla.org/2016/10/webassembly-browser-preview\">Firefox</a>&nbsp;and <a href=\"https://blogs.windows.com/msedgedev/2016/10/31/webassembly-browser-preview/\">Edge</a>, a WebAssembly Browser Preview. <a href=\"http://webassembly.org/\">WebAssembly</a> or wasm is a new runtime and compilation target for the web, designed by collaborators from Google, Mozilla, Microsoft, Apple, and the <a href=\"https://www.w3.org/community/webassembly/\">W3C WebAssembly Community Group</a>.<br /><br /><h2>What does this milestone mark?</h2>This milestone is significant because it marks:<br /><ul><li>a release candidate for our <a href=\"http://webassembly.org/docs/mvp/\">MVP</a> (minimum viable product) design (including <a href=\"http://webassembly.org/docs/semantics/\">semantics</a>, <a href=\"http://webassembly.org/docs/binary-encoding/\">binary format</a>, and <a href=\"http://webassembly.org/docs/js/\">JS API</a>)</li><li>compatible and stable implementations of WebAssembly behind a flag on trunk in V8 and SpiderMonkey, in development builds of Chakra, and in progress in JavaScriptCore</li><li>a <a href=\"http://webassembly.org/getting-started/developers-guide/\">working toolchain</a> for developers to compile WebAssembly modules from C/C++ source files</li><li>a <a href=\"http://webassembly.org/roadmap/\">roadmap</a> to ship WebAssembly on-by-default barring changes based on community feedback&nbsp;</li></ul>You can read more about WebAssembly on the <a href=\"http://webassembly.org/\">project site</a> as well as follow our <a href=\"http://webassembly.org/getting-started/developers-guide/\">developers guide</a>&nbsp;to test out WebAssembly compilation from C &amp; C++ using Emscripten. The&nbsp;<a href=\"http://webassembly.org/docs/binary-encoding/\">binary format</a>&nbsp;and&nbsp;<a href=\"http://webassembly.org/docs/js/\">JS API</a>&nbsp;documents outline the binary encoding of WebAssembly and the mechanism to instantiate WebAssembly modules in the browser, respectively. Here‚Äôs a quick sample to show what wasm looks like:<br /><br /><div dir=\"ltr\" style=\"margin-left: 0pt;\"><table style=\"border-collapse: collapse; border: none; margin-left: auto; margin-right: auto;\"><colgroup><col width=\"103\" /><col width=\"180\" /><col width=\"150\" /></colgroup><tbody><tr style=\"height: 0px;\"><td style=\"background-color: #4285f4; border-bottom: solid #000000 1px; border-left: solid #000000 1px; border-right: solid #000000 1px; border-top: solid #000000 1px; padding: 7px 7px 7px 7px; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Raw Bytes</span></div></td><td style=\"background-color: #4285f4; border-bottom: solid #000000 1px; border-left: solid #000000 1px; border-right: solid #000000 1px; border-top: solid #000000 1px; padding: 7px 7px 7px 7px; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>Text Format</span></div></td><td style=\"background-color: #4285f4; border-bottom: solid #000000 1px; border-left: solid #000000 1px; border-right: solid #000000 1px; border-top: solid #000000 1px; padding: 7px 7px 7px 7px; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>C Source</span></div></td></tr><tr style=\"height: 0px;\"><td style=\"border-bottom: solid #000000 1px; border-left: solid #000000 1px; border-right: solid #000000 1px; border-top: solid #000000 1px; padding: 7px 7px 7px 7px; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>02 40</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>03 40</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>20 </span><span>00</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>45</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>0d </span><span>01</span></div></td><td style=\"border-bottom: solid #000000 1px; border-left: solid #000000 1px; border-right: solid #000000 1px; border-top: solid #000000 1px; padding: 7px 7px 7px 7px; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>block</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span> &nbsp;loop</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span> &nbsp;&nbsp;&nbsp;get_local </span><span>0</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span> &nbsp;&nbsp;&nbsp;i32.eqz</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span> &nbsp;&nbsp;&nbsp;br_if </span><span>1</span></div></td><td style=\"border-bottom: solid #000000 1px; border-left: solid #000000 1px; border-right: solid #000000 1px; border-top: solid #000000 1px; padding: 7px 7px 7px 7px; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>while (</span><span>x</span><span> != 0) {</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div></td></tr><tr style=\"height: 0px;\"><td style=\"border-bottom: solid #000000 1px; border-left: solid #000000 1px; border-right: solid #000000 1px; border-top: solid #000000 1px; padding: 7px 7px 7px 7px; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>20 </span><span>00</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>21 </span><span>02</span></div></td><td style=\"border-bottom: solid #000000 1px; border-left: solid #000000 1px; border-right: solid #000000 1px; border-top: solid #000000 1px; padding: 7px 7px 7px 7px; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span> &nbsp;&nbsp;&nbsp;get_local </span><span>0</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span> &nbsp;&nbsp;&nbsp;set_local </span><span>2</span></div></td><td style=\"border-bottom: solid #000000 1px; border-left: solid #000000 1px; border-right: solid #000000 1px; border-top: solid #000000 1px; padding: 7px 7px 7px 7px; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span> &nbsp;</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span> &nbsp;</span><span>z</span><span> = </span><span>x</span><span>;</span></div></td></tr><tr style=\"height: 0px;\"><td style=\"border-bottom: solid #000000 1px; border-left: solid #000000 1px; border-right: solid #000000 1px; border-top: solid #000000 1px; padding: 7px 7px 7px 7px; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>20 </span><span>01</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>20 </span><span>00</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>6f</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>21 </span><span>00</span></div></td><td style=\"border-bottom: solid #000000 1px; border-left: solid #000000 1px; border-right: solid #000000 1px; border-top: solid #000000 1px; padding: 7px 7px 7px 7px; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span> &nbsp;&nbsp;&nbsp;get_local </span><span>1</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span> &nbsp;&nbsp;&nbsp;get_local </span><span>0</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span> &nbsp;&nbsp;&nbsp;i32.rem_s</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span> &nbsp;&nbsp;&nbsp;set_local </span><span>0</span></div></td><td style=\"border-bottom: solid #000000 1px; border-left: solid #000000 1px; border-right: solid #000000 1px; border-top: solid #000000 1px; padding: 7px 7px 7px 7px; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span> &nbsp;</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span> &nbsp;</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span> &nbsp;</span><span>x</span><span> = </span><span>y</span><span> % </span><span>x</span><span>;</span></div></td></tr><tr style=\"height: 0px;\"><td style=\"border-bottom: solid #000000 1px; border-left: solid #000000 1px; border-right: solid #000000 1px; border-top: solid #000000 1px; padding: 7px 7px 7px 7px; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>20 </span><span>02</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>21 </span><span>01</span></div></td><td style=\"border-bottom: solid #000000 1px; border-left: solid #000000 1px; border-right: solid #000000 1px; border-top: solid #000000 1px; padding: 7px 7px 7px 7px; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span> &nbsp;&nbsp;&nbsp;get_local </span><span>2</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span> &nbsp;&nbsp;&nbsp;set_local </span><span>1</span></div></td><td style=\"border-bottom: solid #000000 1px; border-left: solid #000000 1px; border-right: solid #000000 1px; border-top: solid #000000 1px; padding: 7px 7px 7px 7px; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span> &nbsp;</span><span>y</span><span> = </span><span>z</span><span>;</span></div></td></tr><tr style=\"height: 0px;\"><td style=\"border-bottom: solid #000000 1px; border-left: solid #000000 1px; border-right: solid #000000 1px; border-top: solid #000000 1px; padding: 7px 7px 7px 7px; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>0c </span><span>00</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>0b</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>0b</span></div></td><td style=\"border-bottom: solid #000000 1px; border-left: solid #000000 1px; border-right: solid #000000 1px; border-top: solid #000000 1px; padding: 7px 7px 7px 7px; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span> &nbsp;&nbsp;&nbsp;br </span><span>0</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span> &nbsp;end &nbsp;</span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>end</span></div></td><td style=\"border-bottom: solid #000000 1px; border-left: solid #000000 1px; border-right: solid #000000 1px; border-top: solid #000000 1px; padding: 7px 7px 7px 7px; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>}</span></div></td></tr><tr style=\"height: 0px;\"><td style=\"border-bottom: solid #000000 1px; border-left: solid #000000 1px; border-right: solid #000000 1px; border-top: solid #000000 1px; padding: 7px 7px 7px 7px; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>20 </span><span>01</span></div></td><td style=\"border-bottom: solid #000000 1px; border-left: solid #000000 1px; border-right: solid #000000 1px; border-top: solid #000000 1px; padding: 7px 7px 7px 7px; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>get_local </span><span>1</span></div></td><td style=\"border-bottom: solid #000000 1px; border-left: solid #000000 1px; border-right: solid #000000 1px; border-top: solid #000000 1px; padding: 7px 7px 7px 7px; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span>return </span><span>y</span><span>; </span></div></td></tr></tbody></table></div><br /><div style=\"text-align: center;\"><i>Greatest Common Divisor function</i></div><div><br />Since WebAssembly is still behind a flag in Chrome (<a href=\"\">chrome://flags/#enable-webassembly</a>), it is not yet recommended for production use. However, the Browser Preview period marks a time during which we are actively collecting <a href=\"http://webassembly.org/community/feedback/\">feedback</a>&nbsp;on the design and implementation of the spec. Developers are encouraged to test out compiling and porting applications and running them in the browser.<br /><br />V8 continues to optimize the implementation of WebAssembly in the <a href=\"http://v8project.blogspot.com/2015/07/digging-into-turbofan-jit.html\">TurboFan compiler</a>. Since last March when we first announced experimental support, we‚Äôve added support for parallel compilation. In addition, we‚Äôre nearing completion of an alternate asm.js pipeline, which converts asm.js to WebAssembly <a href=\"https://www.chromestatus.com/feature/5053365658583040\">under the hood</a> so that existing asm.js sites can reap some of the benefits of WebAssembly ahead-of-time compilation.<br /><br /></div><div><h2>What's next?</h2></div><div>Barring major design changes arising from community feedback, the WebAssembly Community Group plans to produce an official specification in Q1 2017, at which point browsers will be encouraged to ship WebAssembly on-by-default. From that point forward, the binary format will be reset to version 1 and WebAssembly will be versionless, feature-tested, and backwards-compatible. A more detailed <a href=\"http://webassembly.org/roadmap/\">roadmap</a> can be found on the WebAssembly project site.</div>", "title": "WebAssembly Browser Preview", "source_link": "http://v8project.blogspot.com/", "author_link": "", "author_name": "Unknown", "source_type": "rss", "link": "http://v8project.blogspot.com/2016/10/webassembly-browser-preview.html", "published": "2016-10-31T15:00:00", "source_title": "V8 JavaScript Engine", "tags": "browsers,chromium,js,tech,web"}, {"picture": "//lh6.googleusercontent.com/-9zSEBEYfwaU/AAAAAAAAAAI/AAAAAAAAB9A/QYm9SICrReI/s512-c/photo.jpg", "source_name": "V8Blog", "description": "<div style=\"text-align: justify;\"><i>Every six weeks, we create a new branch of V8 as part of our <a href=\"https://github.com/v8/v8/wiki/Release%20Process\">release process</a>. Each version is branched from V8‚Äôs git master immediately before a Chrome Beta milestone. Today we‚Äôre pleased to announce our newest branch, <a href=\"https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/5.5\">V8 version 5.5</a>, which will be in beta until it is released in coordination with Chrome 55 Stable in several weeks. V8 5.5 is filled with all sorts of developer-facing goodies, so we‚Äôd like to give you a preview of some of the highlights in anticipation of the release.</i><br /><i><br /></i></div><h2>Language features</h2><br /><h3>Async functions</h3>In 5.5, V8 ships JavaScript ES2017 <a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/async-functions\">async functions</a>, which makes it easier to write code that uses and creates Promises. Using async functions, waiting for a Promise to resolve is as simple as typing <span>await</span> before it and proceeding as if the value were synchronously available - no callbacks required. See <a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/async-functions\">this article</a> for an introduction.<br /><br />Here‚Äôs an example function which fetches a URL and returns the text of the response, written in a typical asynchronous, Promise-based style.<br /><div><pre><code class=\"javascript\">function logFetch(url) {<br />  return fetch(url)<br />    .then(response =&gt; response.text())<br />    .then(text =&gt; {<br />      console.log(text);<br />    }).catch(err =&gt; {<br />      console.error('fetch failed', err);<br />    });<br />}</code></pre></div>Here‚Äôs the same code rewritten to remove callbacks, using async functions.<br /><pre><code class=\"javascript\">async function logFetch(url) {<br />  try {<br />    const response = await fetch(url);<br />    console.log(await response.text());<br />  } catch (err) {<br />    console.log('fetch failed', err);<br />  }<br />}</code></pre><h2>Performance improvements</h2>V8 5.5 delivers a number of key improvements in memory footprint.<br /><div><br /><h3>Memory</h3>Memory consumption is an important dimension in the JavaScript virtual machine performance trade-off space. Over the last few releases, the V8 team analyzed and significantly reduced the memory footprint of several websites that were identified as representative of modern web development patterns. V8 5.5 reduces Chrome‚Äôs overall memory consumption by up to 35% on <b>low-memory devices</b> (compared to V8 5.3 in Chrome 53) due to reductions in the V8 heap size and zone memory usage. Other device segments also benefit from the zone memory reductions. Please have a look at the <a href=\"http://v8project.blogspot.de/2016/10/fall-cleaning-optimizing-v8-memory.html\">dedicated blog post</a> to get a detailed view.<br /><div><br /><h2>V8 API</h2>Please check out our <a href=\"http://bit.ly/v8-api-changes\">summary of API changes</a>. This document is regularly updated a few weeks after each major release.<br /><div><br /><h3>V8 inspector migrated</h3>The V8 inspector was migrated from Chromium to V8. The inspector code now fully resides in the <a href=\"https://chromium.googlesource.com/v8/v8/+/master/src/inspector/\">V8 repository</a>.<br /><br />Developers with an <a href=\"https://github.com/v8/v8/wiki/Using%20Git\">active V8 checkout</a> can use 'git checkout -b 5.5 -t branch-heads/5.5' to experiment with the new features in V8 5.5. Alternatively you can <a href=\"https://www.google.com/chrome/browser/beta.html\">subscribe to Chrome's Beta channel</a> and try the new features out yourself soon.<br /><br />Posted by the V8 team</div></div></div>", "title": "V8 Release 5.5", "source_link": "http://v8project.blogspot.com/", "author_link": "https://plus.google.com/112105245188441507084", "author_name": "Michael Hablich", "source_type": "rss", "link": "http://v8project.blogspot.com/2016/10/v8-release-55.html", "published": "2016-10-24T19:05:00", "source_title": "V8 JavaScript Engine", "tags": "browsers,chromium,js,tech,web"}, {"picture": "//lh6.googleusercontent.com/-9zSEBEYfwaU/AAAAAAAAAAI/AAAAAAAAB9A/QYm9SICrReI/s512-c/photo.jpg", "source_name": "V8Blog", "description": "Memory consumption is an important dimension in the JavaScript virtual machine performance trade-off space. Over the last few months the V8 team analyzed and significantly reduced the memory footprint of several websites that were identified as representative of modern web development patterns. In this blog post we present the workloads and tools we used in our analysis, outline memory optimizations in the garbage collector, and show how we reduced memory consumed by V8‚Äôs parser and its compilers.<br /><br /><h2>Benchmarks</h2>In order to profile V8 and discover optimizations that have impact for the largest number of users, it is crucial to define workloads that are reproducible, meaningful, and simulate common real-world JavaScript usage scenarios. A great tool for this task is <a href=\"https://catapult.gsrc.io/telemetry\" target=\"_blank\">Telemetry</a>, a performance testing framework that runs scripted website interactions in Chrome and records all server responses in order to enable predictable replay of these interactions in our test environment. We selected a set of popular news, social, and media websites and defined the following common user interactions for them:<br /><br />A workload for browsing news and social websites:<br /><ol><li>Open a popular news or social website, e.g. hackernews.</li><li>Click on the first link.</li><li>Wait until the new website is loaded.</li><li>Scroll down a few pages.</li><li>Click the back button.</li><li>Click on the next link on the original website and repeat steps 3-6 a few times.</li></ol>A workload for browsing media website:<br /><ol><li>Open an item on a popular media website, e.g. a video on YouTube.</li><li>Consume that item by waiting for a few seconds.</li><li>Click on the next item and repeat steps 2-3 a few times.</li></ol>Once a workflow is captured, it can be replayed as often as needed against a development version of Chrome, for example each time there is new version of V8. During playback, V8‚Äôs memory usage is sampled at fixed time intervals to obtain a meaningful average. The benchmarks can be found <a href=\"https://cs.chromium.org/chromium/src/tools/perf/page_sets/system_health/browsing_stories.py?q=browsing+news&amp;sq=package:chromium&amp;dr=CS&amp;l=11\" target=\"_blank\">here</a>.<br /><br /><h2>Memory Visualization</h2>One of the main challenges when optimizing for performance in general is to get a clear picture of internal VM state to track progress or weigh potential tradeoffs. For optimizing memory consumption, this means keeping accurate track of V8‚Äôs memory consumption during execution. There are two categories of memory that must be tracked: memory allocated to V8‚Äôs managed heap and memory allocated on the C++ heap. The <b>V8 Heap Statistics</b> feature is a mechanism used by developers working on V8 internals to get deep insight into both. When the <span>--trace-gc-object-stats</span> flag is specified when running Chrome (M54 or newer) or the d8 command line interface, V8 dumps memory-related statistics to the console. We built a custom tool, <a href=\"https://mlippautz.github.io/v8-heap-stats/\" target=\"_blank\">the v8 heap visualizer</a>, to visualize this output. The tool shows a timeline-based view for both the managed and C++ heaps. The tool also provides a detailed breakdown of the memory usage of certain internal data types and size-based histograms for each of those types.<br /><br />A common workflow during our optimization efforts involves selecting an instance type that takes up a large portion of the heap in the timeline view, as depicted in Figure 1. Once an instance type is selected, the tool then shows a distribution of uses of this type. In this example we selected V8‚Äôs internal <span>FixedArray</span> data structure, which is an untyped vector-like container used ubiquitously in all sorts of places in the VM. Figure 2 shows a typical <span>FixedArray</span> distribution, where we can see that the majority of memory can be attributed to a specific <span>FixedArray</span> usage scenario. In this case <span>FixedArrays</span> are used as the backing store for sparse JavaScript arrays (what we call <span>DICTIONARY_ELEMENTS</span>). With this information it is possible to refer back to the actual code and either verify whether this distribution is indeed the expected behavior or whether an optimization opportunity exists. We used the tool to identify inefficiencies with a number of internal types.<br /><div><br /></div><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://2.bp.blogspot.com/-d-ggQStAC8I/V_dSsiT-pDI/AAAAAAAABk0/ykOrYLg2c4Iz3VG2S7g3m3H9wzLS8a4AQCLcB/s1600/figure1.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"208\" src=\"https://2.bp.blogspot.com/-d-ggQStAC8I/V_dSsiT-pDI/AAAAAAAABk0/ykOrYLg2c4Iz3VG2S7g3m3H9wzLS8a4AQCLcB/s640/figure1.png\" width=\"640\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Figure 1: Timeline view of managed heap and off-heap memory</td></tr></tbody></table><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><br /><a href=\"https://4.bp.blogspot.com/--se3_ZdkbiU/V_dS4e-K9bI/AAAAAAAABk4/b16YamROmLwjrQPp-_UEWhTrv0TeQiL4ACLcB/s1600/figure2.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"334\" src=\"https://4.bp.blogspot.com/--se3_ZdkbiU/V_dS4e-K9bI/AAAAAAAABk4/b16YamROmLwjrQPp-_UEWhTrv0TeQiL4ACLcB/s640/figure2.png\" width=\"640\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Figure 2: Distribution of instance type</td></tr></tbody></table><div><br /></div><div>Figure 3 shows C++ heap memory consumption, which consists primarily of zone memory (temporary memory regions used by V8 used for &nbsp;a short period of time; discussed in more detail below). &nbsp;Since zone memory is used most extensively by the V8 parser and compilers, the spikes correspond to parsing and compilation events. A well-behaved execution consists only of spikes, indicating that memory is freed as soon as it is no longer needed. In contrast, plateaus (i.e. longer periods of time with higher memory consumption) indicate that there is room for optimization.<br /><br /></div><div><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://4.bp.blogspot.com/-x77BMJeJous/V_eUCptW2UI/AAAAAAAABl0/H9f_txjuQIUecdqeF5lzkOjtc6NOzJqggCLcB/s1600/figure3.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"196\" src=\"https://4.bp.blogspot.com/-x77BMJeJous/V_eUCptW2UI/AAAAAAAABl0/H9f_txjuQIUecdqeF5lzkOjtc6NOzJqggCLcB/s640/figure3.png\" width=\"640\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Figure 3: Zone memory</td></tr></tbody></table><br /></div><div><div>Early adopters can also try out the integration into <a href=\"https://www.chromium.org/developers/how-tos/trace-event-profiling-tool\" target=\"_blank\">Chrome‚Äôs tracing infrastructure</a>. Therefore you need to run the latest Chrome Canary with <span>--track-gc-object-stats</span> and <a href=\"https://www.chromium.org/developers/how-tos/trace-event-profiling-tool/recording-tracing-runs#TOC-Capture-a-trace-on-Chrome-desktop\" target=\"_blank\">capture a trace </a>including the category <span>v8.gc_stats</span>. The data will then show up as <span>V8.GC_Object_Stats</span> event.</div></div><div><br /></div><div><h2>JavaScript Heap Size Reduction</h2><div>There is an inherent trade-off between garbage collection throughput, latency, and memory consumption. For example, garbage collection latency (which causes user-visible jank) can be reduced by using more memory to avoid frequent garbage collection invocations. For low-memory mobile devices, i.e. devices with under 512M of RAM, prioritizing latency and throughput over memory consumption may result in out-of-memory crashes and suspended tabs on Android.</div><div><br /></div><div>To better balance the right tradeoffs for these low-memory mobile devices, we introduced a special memory reduction mode which tunes several garbage collection heuristics to lower memory usage of the JavaScript garbage collected heap. 1) At the end of a full garbage collection, V8‚Äôs heap growing strategy determines when the next garbage collection will happen based on the amount of live objects with some additional slack. In memory reduction mode, V8 will use less slack resulting in less memory usage due to more frequent garbage collections. 2) Moreover this estimate is treated as a hard limit, forcing unfinished incremental marking work to finalize in the main garbage collection pause. Normally, when not in memory reduction mode, unfinished incremental marking work may result in going over this limit arbitrarily to trigger the main garbage collection pause only when marking is finished. 3) Memory fragmentation is further reduced by performing more aggressive memory compaction.</div><div><br /></div><div>Figure 4 depicts some of the improvements on low memory devices since Chrome M53. Most noticeably, the average V8 heap memory consumption of the mobile New York Times benchmark reduced by about 66%. Overall, we observed a 50% reduction of average V8 heap size on this set of benchmarks.</div><div><br /></div><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://1.bp.blogspot.com/-fi7Fqf7JpBk/V_dT64b7_kI/AAAAAAAABlI/WUpgioXb6cYB4sT1xCRewYCP4uh84vPgwCLcB/s1600/figure4.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"394\" src=\"https://1.bp.blogspot.com/-fi7Fqf7JpBk/V_dT64b7_kI/AAAAAAAABlI/WUpgioXb6cYB4sT1xCRewYCP4uh84vPgwCLcB/s640/figure4.png\" width=\"640\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Figure 4: V8 heap memory reduction since M53 on low memory devices</td></tr></tbody></table><div><br /></div></div><div>Another optimization introduced recently not only reduces memory on low-memory devices but beefier mobile and desktop machines. Reducing the V8 heap page size from 1M to 512KB results in a smaller memory footprint when not many live objects are present and lower overall memory fragmentation up to 2x. It also allows V8 to perform more compaction work since smaller work chunks allow more work to be done in parallel by the memory compaction threads.</div><div><br /></div><div><h2>Zone Memory Reduction</h2><div>In addition to the JavaScript heap, V8 uses off-heap memory for internal VM operations. The largest chunk of memory is allocated through memory areas called <i>zones</i>. Zones are a type of &nbsp;region-based memory allocator which enables fast allocation and bulk deallocation where all zone allocated memory is freed at once when the zone is destroyed. Zones are used throughout V8‚Äôs parser and compilers.&nbsp;</div><div><br /></div><div>One of the major improvements in M55 comes from reducing memory consumption during background parsing. Background parsing allows V8 to parse scripts while a page is being loaded. The memory visualization tool helped us discover that the background parser would keep an entire zone alive long after the code was already compiled. By immediately freeing the zone after compilation, we reduced the lifetime of zones significantly which resulted in reduced average and peak memory usage.</div><div><br /></div><div>Another improvement results from better packing of fields in <i>abstract syntax tree</i> nodes generated by the parser. Previously we relied on the C++ compiler to pack fields together where possible. For example, two booleans just require two bits and should be located within one word or within the unused fraction of the previous word. The C++ compiler doesn‚Äôt not always find the most compressed packing, so we instead manually pack bits. This not only results in reduced peak memory usage, but also improved parser and compiler performance.</div><div><br /></div><div>Figure 5 shows the peak zone memory improvements since M54 which reduced by about 40% on average over the measured websites.&nbsp;</div></div><div><br /></div><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://2.bp.blogspot.com/-IuAzMeKK_vU/V_dUKNHA1tI/AAAAAAAABlQ/l2UoyHJ9BCA9q0KeFqI9GLIKnn_2M-FpwCLcB/s1600/figure5.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"394\" src=\"https://2.bp.blogspot.com/-IuAzMeKK_vU/V_dUKNHA1tI/AAAAAAAABlQ/l2UoyHJ9BCA9q0KeFqI9GLIKnn_2M-FpwCLcB/s640/figure5.png\" width=\"640\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Figure 5: V8 peak zone memory reduction since M54 on desktop</td></tr></tbody></table><div><br /></div><div><div>Over the next months we will continue our work on reducing the memory footprint of V8. We have more zone memory optimizations planned for the parser and we plan to focus on devices ranging from 512M-1G of memory.</div><div><br /><b>Update:</b> All the improvements discussed above reduce the Chrome 55 overall memory consumption by up to 35% on <i>low-memory devices</i> compared to Chrome 53. &nbsp;Other device segments will only benefit from the zone memory improvements.<br /><br /></div><div><i>Posted by the V8 Memory Sanitation Engineers Ulan Degenbaev, Michael Lippautz, Hannes Payer, and Toon Verwaest.</i></div></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div>", "title": "Fall cleaning: Optimizing V8 memory consumption", "source_link": "http://v8project.blogspot.com/", "author_link": "https://plus.google.com/112105245188441507084", "author_name": "Michael Hablich", "source_type": "rss", "link": "http://v8project.blogspot.com/2016/10/fall-cleaning-optimizing-v8-memory.html", "published": "2016-10-07T11:55:00", "source_title": "V8 JavaScript Engine", "tags": "browsers,chromium,js,tech,web"}, {"picture": "//lh6.googleusercontent.com/-9zSEBEYfwaU/AAAAAAAAAAI/AAAAAAAAB9A/QYm9SICrReI/s512-c/photo.jpg", "source_name": "V8Blog", "description": "Every six weeks, we create a new branch of V8 as part of our <a href=\"https://github.com/v8/v8/wiki/Release%20Process\">release process</a>. Each version is branched from V8‚Äôs git master immediately before a Chrome Beta milestone. Today we‚Äôre pleased to announce our newest branch, <a href=\"https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/5.4\">V8 version 5.4</a>, which will be in beta until it is released in coordination with Chrome 54 Stable in several weeks. V8 5.4 is filled with all sorts of developer-facing goodies, so we‚Äôd like to give you a preview of some of the highlights in anticipation of the release.<br /><div><br /><div><h2>Performance Improvements</h2>V8 5.4 delivers a number of key improvements in memory footprint and startup speed. These primarily help accelerate initial script execution and reduce page load in Chrome.</div><div><br /></div><h3>Memory</h3><div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\">When measuring V8‚Äôs memory consumption, two metrics are very important to monitor and understand: <i>Peak memory</i> consumption and <i>average memory</i> consumption. Typically, reducing peak consumption is just as important as reducing average consumption since an executing script that exhausts available memory even for a brief moment can cause an <i>Out of Memory</i> crash, even if its average memory consumption is not very high. For optimization purposes, it‚Äôs useful to divide V8's memory into two categories: <i>On-heap memory</i> containing actual JavaScript objects and <i>off-heap memory</i> containing the rest, such as internal data structures allocated by the compiler, parser and garbage collector. <br /><br />In 5.4 we tuned V8‚Äôs garbage collector for low-memory devices with 512 MB RAM or less. Depending on the website displayed this reduces <i>peak memory</i> consumption of <i>on-heap memory</i> up to <b>40%</b>.<br /><br />Memory management inside V8‚Äôs JavaScript parser was simplified to avoid unnecessary allocations, reducing <i>off-heap peak memory</i> usage by up to <b>20%</b>. This memory savings is especially helpful in reducing memory usage of large script files, including asm.js applications.</div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"></div><h3><span style=\"vertical-align: baseline;\">Startup &amp; speed</span></h3>Our work to streamline V8's parser not only helped reduce memory consumption, it also improved the parser's runtime performance. This streamlining, combined with other optimizations of JavaScript builtins and how accesses of properties on JavaScript objects use global <a href=\"https://en.wikipedia.org/wiki/Inline_caching\">inline caches</a>, resulted in notable startup performance gains. <br /><br />Our <a href=\"https://youtu.be/xCx4uC7mn6Y\">internal startup test suite</a> that measures real-world JavaScript performance improved by a median of 5%. The <a href=\"http://browserbench.org/Speedometer/\">Speedometer</a> benchmark also benefits from these optimizations, improving by  <a href=\"https://chromeperf.appspot.com/report?sid=f5414b72e864ffaa4fd4291fa74bf3fd7708118ba534187d36113d8af5772c86&amp;start_rev=393766&amp;end_rev=416239\">~ 10 to 13% compared to 5.2</a>.<br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://3.bp.blogspot.com/-pmhqweTXsgA/V9KofTl0iEI/AAAAAAAABfc/H35jkvaMsgkLriGq627hca3rf6TZqKwKACLcB/s1600/speedometer5.4.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"227\" src=\"https://3.bp.blogspot.com/-pmhqweTXsgA/V9KofTl0iEI/AAAAAAAABfc/H35jkvaMsgkLriGq627hca3rf6TZqKwKACLcB/s640/speedometer5.4.png\" width=\"640\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">~ 13% reduction on Speedometer/Mac</td></tr></tbody></table><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></div><h2>V8 API</h2>Please check out our <a href=\"http://bit.ly/v8-api-changes\">summary of API changes</a>. This document is regularly updated a few weeks after each major release. <br /><br /><br />Developers with an <a href=\"https://github.com/v8/v8/wiki/Using%20Git\">active V8 checkout</a> can use 'git checkout -b 5.4 -t branch-heads/5.4' to experiment with the new features in V8 5.4. Alternatively you can <a href=\"https://www.google.com/chrome/browser/beta.html\">subscribe to Chrome's Beta channel</a> and try the new features out yourself soon.<br /><br />Posted by the V8 team</div></div>", "title": "V8 Release 5.4", "source_link": "http://v8project.blogspot.com/", "author_link": "https://plus.google.com/112105245188441507084", "author_name": "Michael Hablich", "source_type": "rss", "link": "http://v8project.blogspot.com/2016/09/v8-release-54.html", "published": "2016-09-09T12:25:00", "source_title": "V8 JavaScript Engine", "tags": "browsers,chromium,js,tech,web"}, {"source_name": "igvita", "description": "Stop Cross-Site Timing Attacks with SameSite cookies", "author_link": "https://www.igvita.com/", "text": "<p><img class=\"left\" src=\"https://www.igvita.com/posts/16/passive-attack.png\" style=\"width: 100%;\" /> Let's say we have a client that can initiate a network request for any URL on the web but the response is opaque and cannot be inspected. <strong>What could we learn about the client or the response?</strong> As it turns out, armed with a bit of patience and rudimentary statistics, \"a lot\".</p>\n\n<p>For example, the duration of the fetch is a combination of network time of the request reaching the server, server processing time, and network time of the response. Each and every one of these steps \"leaks\" information both about the client and the server.</p>\n\n<p>For example, if the total duration is very small (say, &lt;10ms) then we can reasonably intuit that we might be talking to a local cache, which means that the client has previously fetched this resource. Alternatively, if the duration is slightly higher (say, &lt;50ms) then we can reasonably guess that the client is on a low-latency network (e.g. fast 4G or WiFi). We can also append random data to the URL to make it unique and rule out the various HTTP caches along the way. From there, we can try making more requests to the server and observe how the fetch duration changes to infer change in server processing times and/or larger responses being sent to the client.</p>\n\n<p>If we're really crafty, we can also use the properties of the network transport like CWND induced roundtrips in TCP (see <a href=\"https://hpbn.co/building-blocks-of-tcp/#slow-start\">TCP Slow Start</a>), and other quirks of local network configuration, as additional signals to infer properties (e.g. size) of the response‚Äîsee <a href=\"https://media.blackhat.com/eu-13/briefings/Beery/bh-eu-13-a-perfect-crime-beery-wp.pdf\">TIME</a>, <a href=\"https://www.blackhat.com/docs/us-16/materials/us-16-VanGoethem-HEIST-HTTP-Encrypted-Information-Can-Be-Stolen-Through-TCP-Windows-wp.pdf\">HEIST</a> attacks. If the response is compressed and also happens to reflect submitted data, then there is also the possibility of using a <a href=\"https://en.wikipedia.org/wiki/Oracle_attack\">compression oracle attack</a> (see <a href=\"https://en.wikipedia.org/wiki/BREACH_(security_exploit)\">BREACH</a>) to extract data from the response.</p>\n\n<div class=\"callout\">In theory, the client could try to stymie such attacks by making all operations take constant time, but realistically that's neither a practical nor an acceptable solution due to the user experience and performance implications of such strategy. Injecting random delays doesn't fare much better, as it carries similar implications.</div>\n\n\n<h2>\"Networking thermodynamics\"</h2>\n\n<p>Each and every step in the fetch process‚Äîfrom the client generating the request and putting on the wire, the network hops to the server, the server processing time, response properties, and the network hops back to the client‚Äî\"leaks\" information about the properties of the client, network, server, and the response. This is not a bug; it's a fact of life. Borrowing an explanation from our physicist friends: <strong>putting a system to work amounts to extracting energy from it, which we can then measure and interrogate to learn facts about said system.</strong></p>\n\n<p>Eyes glazing over yet? The practical implication is that <strong>if the necessary server precautions are missing, the use of the above techniques can reveal private information about you and your relationship to that server</strong> - e.g. login status, group affiliation, <a href=\"https://labs.tom.vg/browser-based-timing-attacks/\">and more</a>. This requires a bit more explanation‚Ä¶</p>\n\n<h2>The dangers of credentialed cross-origin \"no-cors\" requests</h2>\n\n<p>The fact that we can use side-channel information, such as the duration of a fetch, to extract information about the response is not, by itself, all that useful. After all, if I give you a URL you can just use your own HTTP client to fetch it and inspect the bytes on the wire. However, what does make it dangerous is if you can co-opt my client (my browser) to make an authenticated request on my behalf and inspect the (opaque) response that contains my private content. Then, even if you can't access the response directly, you can observe any of the aforementioned properties of the fetch and extract private information about my client and the response. Let's make it concrete‚Ä¶</p>\n\n<ol>\n<li>I like to visit <code>kittens.com</code> on which I have an account to pin my favorite images:\n\n<ul>\n<li>The authentication mechanism is a login form with all the necessary precautions (CSRF tokens, etc).</li>\n<li>Once authenticated, the server sets an HTTP cookie scoped to <code>kittens.com</code> with a private token that is used to authenticate me on future visits.</li>\n</ul>\n</li>\n<li>Someone else entices me to visit <code>shady.com</code> to view more pictures of kittens...\n\n<ul>\n<li>While I'm indulging in kitten pictures on <code>shady.com</code>, the page issues background requests on my behalf to <code>kittens.com</code> with the goal of attempting to learn something about my status on said site.</li>\n</ul>\n</li>\n</ol>\n\n\n<p><strong>How does <code>shady.com</code> make a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials\">credentialed request</a>?</strong> A simple image element is sufficient:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">&quot;https://kittens.com/favorites&quot;</span> <span class=\"na\">alt=</span><span class=\"s\">&quot;Yay authenticated kittens!&quot;</span><span class=\"nt\">&gt;</span>\n\n<span class=\"c\">&lt;!-- Image element is not the only mechanism with this behavior, others</span>\n<span class=\"c\">     include script, object, video, etc. Also, there is JavaScript... --&gt;</span>\n\n<span class=\"nt\">&lt;script&gt;</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">img</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Image</span><span class=\"p\">();</span>\n  <span class=\"nx\">img</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;https://kittens.com/favorites&quot;</span>\n<span class=\"nt\">&lt;/script&gt;</span></code></pre></div>\n\n\n<p>The browser processes the image element, initializes a request for <code>https://kittens.com/favorites</code>, attaches my HTTP cookies associated with <code>kittens.com</code>, and dispatched the request. The target server (<code>kittens.com</code>) sees a valid authentication cookie and dutifully sends back the HTML response containing my favorite kittens. Of course, the image tag will choke on the HTML and will fire an error callback, but that doesn't matter, because even though we can't inspect the response, we can still learn a lot by observing the timing of the authenticated request-response flow.</p>\n\n<p>With the benefit of a few decades of experience under our belt, and if we were rebuilding the web platform from scratch, we probably wouldn't allow such <code>\"no-cors\"</code> authenticated requests without <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\">explicit CORS opt-in from the server</a>, just as we do today for <code>XMLHttpRequest</code> and <a href=\"https://fetch.spec.whatwg.org/\">Fetch API</a>. Alas, that would be a major breaking change, so that's off the table. However, not all is lost either, because <strong><code>kittens.com</code> can deploy additional logic to protect itself, and its users, against such cross-origin attacks.</strong></p>\n\n<div class=\"callout\">\n  In this article we're focusing on cross-site timing attacks: why they exist and how to mitigate them. However, note that this is a subclass of the larger <a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet\">Cross-Site Request Forgery</a> (CSRF) type of attacks, which can wreck havoc on your site and your users data. The good news is, the mitigations are the same.\n</div>\n\n\n<h2>Declare your cookies as \"same-site\"</h2>\n\n<p>The core issue is that the browser attaches target origin's cookies on <code>\"no-cors\"</code> requests regardless of the origin that initiates the request. In theory, the target origin could look at the <code>Referrer</code> header, but the attacker could hide the initiating origin‚Äîe.g. via <a href=\"https://www.w3.org/TR/referrer-policy/#referrer-policy-no-referrer\">no-referrer policy</a>. Similarly, the <code>Origin</code> header is only sent on CORS requests, so that won't help either. However, <a href=\"https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00\">SameSite cookies</a> give us the exact behavior we want:</p>\n\n<blockquote cite=\"http://feeds.igvita.com/draft-ietf-httpbis-cookie-same-site-00\">\nHere, we update [RFC6265] with a simple mitigation strategy that allows servers to declare certain cookies as \"same-site\", meaning they should not be attached to \"cross-site\" requests‚Ä¶\n<p>Note that the mechanism outlined here is backwards compatible with the existing cookie syntax.  Servers may serve these cookies to all user agents; those that do not support the \"SameSite\" attribute will simply store a cookie which is attached to all relevant requests, just as they do today.</p>\n</blockquote>\n\n\n<p><strong>SameSite cookies have two modes: \"strict\" and \"lax\".</strong> In strict mode, the cookies are not sent in top-level navigations, which offers strong protection but requires some <a href=\"https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00#section-5.2\">additional deployment considerations</a>. In lax mode, cookies are sent for top-level navigations-e.g. navigations initiated by <code>&lt;a&gt;</code> elements, <code>window.open()</code>, <code>&lt;link rel=prerender&gt;</code>), which offers <a href=\"https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00#section-4.1.1\">reasonable protection</a>. Do read the IETF spec, it provides good guidance.</p>\n\n<div class=\"highlight\"><pre><code class=\"language-html\">200 OK HTTP/1.1\n...\nSet-Cookie: SID=31d4d96e407aad42; SameSite=Strict</code></pre></div>\n\n\n<p>Using our example above, if <code>kittens.com</code> set the <code>SameSite</code> flag on its authentication cookie, then the image request initiated by <code>shady.com</code> would not contain the authentication cookie due to mismatch of the initiating origin and the origin that set the cookie and would result in a generic unauthenticated response‚Äîe.g. a redirect to a login page. If you're <code>kittens.com</code>, enabling SameSite cookies should be a no-brainer.</p>\n\n<p>More generally, <strong>if your site or service does not intentionally provide cross-origin resources (e.g. embeddable widgets, site plugins, etc.), then you should use SameSite cookies as your default.</strong></p>\n\n<hr />\n\n\n<p>SameSite cookies are <a href=\"https://www.chromestatus.com/feature/4672634709082112\">supported in Chrome (since M51)</a> and Opera 39, and are <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=795346\">under consideration in Firefox</a>. Let's hope the other browsers will be fast followers. Last but not least, it's worth noting that you also can, as a user, <a href=\"http://www.howtogeek.com/241006/how-to-block-third-party-cookies-in-every-web-browser/\">block third party cookies</a> in your browser to protect yourself from this type of cross-origin attack.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.igvita.com/~ff/igvita?a=o1YsBba7OBc:wNNJUmDyHVc:yIl2AUoC8zA\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/igvita?d=yIl2AUoC8zA\" /></a>\n</div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/igvita/~4/o1YsBba7OBc\" width=\"1\" />", "title": "Stop Cross-Site Timing Attacks with SameSite cookies", "author_name": "Ilya Grigorik", "source_type": "rss", "link": "https://www.igvita.com/2016/08/26/stop-cross-site-timing-attacks-with-samesite-cookies/", "source_link": "https://www.igvita.com", "source_title": "igvita.com", "tags": "perf,tech,web", "published": "2016-08-26T07:00:00"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "V8Blog", "description": "V8 and other modern JavaScript engines get their speed via <a href=\"https://en.wikipedia.org/wiki/Just-in-time_compilation\">just-in-time (JIT) compilation</a> of script to native machine code immediately prior to execution. Code is initially compiled by a baseline compiler, which can generate non-optimized machine code quickly. The compiled code is analyzed during runtime and optionally re-compiled dynamically with a more advanced optimizing compiler for peak performance. In V8, this script execution pipeline has a variety of special cases and conditions which require complex machinery to switch between the baseline compiler and two optimizing compilers, Crankshaft and TurboFan.<br /><br />One of the issues with this approach (in addition to architectural complexity) is that the JITed machine code can consume a significant amount of memory, even if the code is only executed once. In order to mitigate this overhead, the V8 team has built a new JavaScript interpreter, called Ignition, which can replace V8‚Äôs baseline compiler, executing code with less memory overhead and paving the way for a simpler script execution pipeline.<br /><br />With Ignition, V8 compiles JavaScript functions to a concise bytecode, which is between 50% to 25% the size of the equivalent baseline machine code. This bytecode is then executed by a high-performance interpreter which yields execution speeds on real-world websites close to those of code generated by V8‚Äôs existing baseline compiler.<br /><br />In Chrome 53, Ignition will be enabled for Android devices which have limited RAM (512 MB or less), where memory savings are most needed. Results from early experiments in the field show that Ignition reduces the memory of each Chrome tab by around 5%.<br /><br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://3.bp.blogspot.com/-mas1Y0fJ2v0/V7yn9fzkzWI/AAAAAAAABcg/gm6b8X66L7oQ8Rw1z2kFO2RcAY9OgaszwCLcB/s1600/ignitionpipeline.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" src=\"https://3.bp.blogspot.com/-mas1Y0fJ2v0/V7yn9fzkzWI/AAAAAAAABcg/gm6b8X66L7oQ8Rw1z2kFO2RcAY9OgaszwCLcB/s1600/ignitionpipeline.png\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">V8‚Äôs compilation pipeline with Ignition enabled.</td></tr></tbody></table><br /><h2>Details</h2><br />In building Ignition‚Äôs bytecode interpreter, the team considered a number of potential implementation approaches. A traditional interpreter, written in C++ would not be able to interact efficiently with the rest of V8‚Äôs generated code. An alternative would have been to hand-code the interpreter in assembly code, however given V8 supports nine architecture ports, this would have entailed substantial engineering overhead.<br /><br />Instead, we opted for an approach which leveraged the strength of TurboFan, our new optimizing compiler, which is already tuned for optimal interaction with the V8 runtime and other generated code. The Ignition interpreter uses TurboFan‚Äôs low-level, architecture-independent macro-assembly instructions to generate bytecode handlers for each opcode. TurboFan compiles these instructions to the target architecture, performing low-level instruction selection and machine register allocation in the process. This results in highly optimized interpreter code which can execute the bytecode instructions and interact with the rest of the V8 virtual machine in a low-overhead manner, with a minimal amount of new machinery added to the codebase.<br /><br />Ignition is a register machine, with each bytecode specifying its inputs and outputs as explicit register operands, as opposed to a stack machine where each bytecode would consume inputs and push outputs on an implicit stack. A special accumulator register is an implicit input and output register for many bytecodes. This reduces the size of bytecodes by avoiding the need to specify specific register operands. Since many JavaScript expressions involve chains of operations which are evaluated from left to right, the temporary results of these operations can often remain in the accumulator throughout the expression‚Äôs evaluation, minimizing the need for operations which load and store to explicit registers.<br /><br />As the bytecode is generated, it passes through a series of inline-optimization stages. These stages perform simple analysis on the bytecode stream, replacing common patterns with faster sequences, remove some redundant operations, and minimize the number of unnecessary register loads and transfers. Together, the optimizations further reduce the size of the bytecode and improve performance.<br /><br />For further details on the implementation of Ignition, see our BlinkOn talk:<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"></div><br /><h2>Future</h2><br />Our focus for Ignition up until now has been to reduce V8‚Äôs memory overhead. However, adding Ignition to our script execution pipeline opens up a number of future possibilities. The Ignition pipeline has been designed to enable us to make smarter decisions about when to execute and optimize code to speed up loading web pages and reduce jank and to make the interchange between V8‚Äôs various components more efficient.<br /><br />Stay tuned for future developments in Ignition and V8.<br /><br />by Ross McIlroy, V8 Ignition Jump Starter", "title": "Firing up the Ignition Interpreter", "source_link": "http://v8project.blogspot.com/", "author_link": "", "author_name": "Unknown", "source_type": "rss", "link": "http://v8project.blogspot.com/2016/08/firing-up-ignition-interpreter.html", "published": "2016-08-23T19:01:00", "source_title": "V8 JavaScript Engine", "tags": "browsers,chromium,js,tech,web"}, {"picture": "https://img1.blogblog.com/img/b16-rounded.gif", "source_name": "V8Blog", "description": "BlinkOn is a biannual meeting of Blink, V8, and Chromium contributors. BlinkOn 6 was held in Munich on June 16 and June 17. The V8 team gave a number of presentations on architecture, design, performance initiatives, and language implementation.<br /><div><br /></div><div>The V8 BlinkOn talks are embedded below.</div><div><br /><h2>Real-world JavaScript Performance</h2><br /><div><i>Length: 31:41</i></div><div><a href=\"https://docs.google.com/presentation/d/14WZkWbkvtmZDEIBYP5H1GrbC9H-W3nJSg3nvpHwfG5U/edit\">Slides</a></div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"></div><div><br /></div><div><br /></div><div>Outlines the history of how V8 measures JavaScript performance, the different eras of benchmarking, and a new technique to measure page loads across real-world, popular websites with detailed breakdowns of time per V8 component.</div><br /><h2>Ignition: an interpreter for V8</h2><br /><div><i>Length: 36:39</i></div><div><a href=\"https://docs.google.com/presentation/d/1OqjVqRhtwlKeKfvMdX6HaCIu9wpZsrzqpIVIwQSuiXQ/edit\">Slides</a></div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"></div><div><br /></div><div><br /></div><div>Introduces V8‚Äôs new Ignition Interpreter, explaining the architecture of the engine as a whole, and how Ignition affects memory usage and startup performance.</div><br /><h2>How we measure and optimize for RAIL in V8‚Äôs GC</h2><br /><div><i>Length: 27:11</i></div><div><a href=\"https://docs.google.com/presentation/d/15EQ603eZWAnrf4i6QjPP7S3KF3NaL3aAaKhNUEatVzY/edit\">Slides</a></div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"></div><div><br /></div><div><br /></div><div>Explains how V8 uses the Response, Animation, Idle, Loading (RAIL) metrics to target low-latency garbage collection and the recent optimizations we‚Äôve made to reduce jank on mobile.</div><br /><h2>ECMAScript 2015 and Beyond</h2><br /><div><i>Length: 28:52</i></div><div><a href=\"https://docs.google.com/presentation/d/1o1wld5z0BM8RTqXASGYD3Rvov8PzrxySghmrGTYTgw0/edit\">Slides</a></div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"></div><div><br /></div><div><br /></div><div>Provides an update on the implementation of new language features in V8, how those features integrate with the web platform, and the standards process which continues to evolve the ECMAScript language.</div><br /><h2>Tracing Wrappers from V8 to Blink (Lightning Talk)</h2><br /><div><i>Length: 2:31</i></div><div><a href=\"https://docs.google.com/presentation/d/1I6leiRm0ysSTqy7QWh33Gfp7_y4ngygyM2tDAqdF0fI/edit\">Slides</a></div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"></div><div><br /></div><div>Highlights tracing wrappers between V8 and Blink objects and how they help prevent memory leaks and reduce latency.</div></div>", "title": "V8 at the BlinkOn 6 conference", "source_link": "http://v8project.blogspot.com/", "author_link": "", "author_name": "Unknown", "source_type": "rss", "link": "http://v8project.blogspot.com/2016/07/v8-at-blinkon-6-conference.html", "published": "2016-07-21T16:47:00", "source_title": "V8 JavaScript Engine", "tags": "browsers,chromium,js,tech,web"}, {"source_name": "igvita", "description": "Building Fast & Resilient Web Applications", "author_link": "https://www.igvita.com/", "text": "<p><img class=\"left\" src=\"https://www.igvita.com/posts/16/resilient.png\" style=\"width: 100%;\" /> You've applied all the best practices, set up audits and tests to detect performance regressions, released the new application to the world, and... lo and behold, the telemetry is showing that despite your best efforts, there are still many users‚Äîincluding those on \"fast devices\" and 4G networks‚Äîthat are falling off the fast path: janky animations and scrolling, slow loading pages and API calls, and so on. Frustrating. There must be something wrong with the device, the network, or the browser‚Äîright?</p>\n\n<p>Maybe there is. There is an infinite supply of reasons for why the application can fall off the fast path: overloaded networks and servers, transient network routing issues, device throttling due to energy or heat constraints, competition for resources with other processes on the user's device, and the list goes on and on. It is impossible to anticipate all the edge cases that can knock our applications off the fast path, but one thing we know for certain: they will happen. The question is, how are you going to deal with it?</p>\n\n<blockquote>\n  <h3>Carving out the fast path is not enough. We need to make our applications resilient.</h3>\n</blockquote>\n\n\n<p>Resilient applications provide guardrails that protect our users from the inevitable performance failures. They anticipate these problems ahead of time, have mechanisms in place to detect them, know how to adapt to them at runtime, and as a result, are able to deliver a reliable user experience despite these complications.</p>\n\n<div class=\"ytvideo\" id=\"aqvz5Oqs238\"></div>\n\n\n<p>I won't rehash every point in the video, but let's highlight the key themes:</p>\n\n<ol>\n<li><p>(<a href=\"https://youtu.be/aqvz5Oqs238?t=9m3s\">9m3s</a>) <strong>Seemingly small amounts of performance variability in critical components quickly add up to create less than ideal conditions.</strong> We must design our systems to detect and deal with such cases‚Äîe.g. set explicit SLA's on all requests and specify upfront how the violations will be handled.</p></li>\n<li><p>(<a href=\"https://youtu.be/aqvz5Oqs238?t=16m28s\">16m28s</a>) <strong>The \"performance inequality\" gap is growing.</strong> There are two market forces at play: there is a race for features and performance, and there is high demand for lower prices. These are not entirely at odds, the cheap devices are also getting faster, but the flagships are racing ahead at a much faster pace.</p></li>\n<li><p>(<a href=\"https://youtu.be/aqvz5Oqs238?t=19m45s\">19m45s</a>) <strong>\"Fast\" devices show spectacular peak performance in benchmarks, but real-world performance is more complicated:</strong> we often have to trade off raw performance against energy costs and thermal constraints, compete for shared resources with other applications, and so on.</p></li>\n<li><p>(<a href=\"https://youtu.be/aqvz5Oqs238?t=23m35s\">23m35s</a>) <strong>Mobile networks provide an infinite supply of performance entropy, regardless of the continent, country, and provider</strong>‚Äîe.g. the chances of a device connecting to a 4G network in some of the largest European countries are effectively a coin flip; just because you \"have a signal\" doesn't mean the connection will succeed; see \"<a href=\"https://www.igvita.com/2015/01/26/resilient-networking/\">Resilient Networking</a>\".</p></li>\n</ol>\n\n\n<p>If we ignore the above and only optimize for the fast path, we shouldn't be surprised when the application goes off the rails, and our users complain about unreliable performance. On the other hand, if we accept the above as \"normal\" operational constraints of a complex system, we can engineer our applications to anticipate these challenges, detect them, and adapt to them at runtime (<a href=\"https://youtu.be/aqvz5Oqs238?t=31m39s\">31m39s</a>):</p>\n\n<ol>\n<li><strong>Treat offline as the norm.</strong></li>\n<li><strong>All request must have a fallback.</strong></li>\n<li><strong>Use available API's to detect device &amp; network capabilities.</strong></li>\n<li><strong>Adapt application logic to match the device &amp; network capabilities.</strong></li>\n<li><strong>Observe real-world performance (runtime, network) at runtime, goto(4).</strong></li>\n</ol>\n\n<div class=\"feedflare\">\n<a href=\"http://feeds.igvita.com/~ff/igvita?a=fg9NwZp011k:QoYXowMMmsg:yIl2AUoC8zA\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/igvita?d=yIl2AUoC8zA\" /></a>\n</div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/igvita/~4/fg9NwZp011k\" width=\"1\" />", "title": "Building Fast & Resilient Web Applications", "author_name": "Ilya Grigorik", "source_type": "rss", "link": "https://www.igvita.com/2016/05/20/building-fast-and-resilient-web-applications/", "source_link": "https://www.igvita.com", "source_title": "igvita.com", "tags": "perf,tech,web", "published": "2016-05-20T07:00:00"}, {"source_name": "igvita", "description": "Control Groups (cgroups) for the Web?", "author_link": "https://www.igvita.com/", "text": "<p>You've optimized every aspect of your page‚Äîit's fast, and you can prove it. However, for better or worse, you also need to include a resource that you do not control (e.g. owned by a different subteam or a third-party), and by doing so you lose most, if not all, guarantees about the runtime performance of your page - e.g. an included script resource can execute any code it wants, at any point in your carefully optimized rendering loop, and for any lengths of time; it can fetch and inject other resources; all of the scheduling and execution is on par with your carefully crafted code.</p>\n\n<p><strong>We're missing primitives that enable control over how and where CPU, GPU, and network resources are allocated by the browser.</strong> To the browser, all scripts look the same. To the developer, some are more important than others. Today, the web platform lack the tools to bridge this gap, and that's at least one reason why delivering reliable performance is often an elusive goal for many.</p>\n\n<h2>We can learn from those before us...</h2>\n\n<p>Conceptually, the above problem is nothing new. For example, <a href=\"https://en.wikipedia.org/wiki/Cgroups\">Linux control groups (cgroups)</a> address the very same issues \"higher up\" in the stack: multiple processes compete for a finite number of available resources on the device, and cgroups provide a mechanism by which resource allocation (CPU, GPU, memory, network, etc) can be specified and enforced at a per-process level - e.g. this process is allowed to use at most 10% of the CPU, 128MB of RAM, is rate-limited to 500Kbps of peak bandwidth, and is only allowed to download 10Mb in total.</p>\n\n<p><img class=\"center\" src=\"https://www.igvita.com/posts/16/cgroups.png\" style=\"width: 100%;\" /></p>\n\n<p>The problem is that we, as site developers, have no way to communicate and specify similar policies for resources that run on our sites. Today, including a script or an iframe gives it the keys to the kingdom: these resources execute with the same priority and with unrestricted access to the CPU, GPU, memory, and the network. As a result, the best we can do is cross our fingers and hope for the best.</p>\n\n<div class=\"callout\">\nArguably, <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\">Content-Security-Policy</a> offers a functional subset of the larger \"cgroups for the web\" problem: it allows the developer to control which origins the browser is allowed to access, and new <a href=\"https://w3c.github.io/webappsec-csp/embedded/\">embedded enforcement</a> proposal extends this to subresources! However, this only controls the initial fetch, it does not address the resource footprint (CPU, GPU, memory, network, etc.) once it is executed by the browser.\n</div>\n\n\n<h2>Would cgroups for the web help?</h2>\n\n<p>As a thought experiment, it may be worth considering how a cgroups-like policy could look like in the browser, and what we would want to control. What follows is a handwavy sketch, based on the frequent performance failure cases found in the wild, and conversations with teams that have found themselves in these types of predicaments:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"c\">&lt;!-- &quot;background&quot; group should receive low CPU and network priority</span>\n<span class=\"c\">      and consume at most 5% of the available CPU and network resources --&gt;</span>\n<span class=\"nt\">&lt;meta</span> <span class=\"na\">http-equiv=</span><span class=\"s\">&quot;cgroup&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;background&quot;</span>\n      <span class=\"na\">content=</span><span class=\"s\">&quot;cpu-share 0.05; cpu-priority low;</span>\n<span class=\"s\">               net-share 0.05; net-priority low;&quot;</span><span class=\"nt\">&gt;</span>\n\n<span class=\"c\">&lt;!-- &quot;app&quot; group should receive high CPU priority and be allowed to</span>\n<span class=\"c\">      consume up to 80% of available CPU resources (don't hog all of CPU),</span>\n<span class=\"c\">      but be allowed to consume all of the available network resources --&gt;</span>\n<span class=\"nt\">&lt;meta</span> <span class=\"na\">http-equiv=</span><span class=\"s\">&quot;cgroup&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;app&quot;</span>\n             <span class=\"na\">content=</span><span class=\"s\">&quot;cpu-share 0.8; cpu-priority high;</span>\n<span class=\"s\">                      net-share 1.0; net-priority high&quot;</span><span class=\"nt\">&gt;</span>\n\n<span class=\"c\">&lt;!-- &quot;ads&quot; group should receive at most 20% of the cpu and have lower</span>\n<span class=\"c\">     scheduling and network priority then &quot;app&quot; content. --&gt;</span>\n<span class=\"nt\">&lt;meta</span> <span class=\"na\">http-equiv=</span><span class=\"s\">&quot;cgroup&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;ads&quot;</span>\n             <span class=\"na\">content=</span><span class=\"s\">&quot;cpu-share 0.2; cpu-priority medium;</span>\n<span class=\"s\">                      net-share 0.8; net-priority medium&quot;</span><span class=\"nt\">&gt;</span>\n\n...\n\n<span class=\"c\">&lt;!-- assign followng resources to &quot;app&quot; group --&gt;</span>\n<span class=\"nt\">&lt;link</span> <span class=\"na\">cgroup=</span><span class=\"s\">&quot;app&quot;</span> <span class=\"na\">rel=</span><span class=\"s\">&quot;stylesheet&quot;</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/style.css&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;script </span><span class=\"na\">cgroup=</span><span class=\"s\">&quot;app&quot;</span> <span class=\"na\">src=</span><span class=\"s\">&quot;/app.js&quot;</span> <span class=\"na\">async</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n\n<span class=\"c\">&lt;!-- assign followng resources to &quot;ads&quot; group --&gt;</span>\n<span class=\"nt\">&lt;script </span><span class=\"na\">cgroup=</span><span class=\"s\">&quot;ads&quot;</span> <span class=\"na\">src=</span><span class=\"s\">&quot;/ads-manager.js&quot;</span> <span class=\"na\">async</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n<span class=\"nt\">&lt;iframe</span> <span class=\"na\">cgroup=</span><span class=\"s\">&quot;ads&quot;</span> <span class=\"na\">src=</span><span class=\"s\">&quot;//3rdparty.com/widget&quot;</span><span class=\"nt\">&gt;&lt;/iframe&gt;</span>\n\n<span class=\"c\">&lt;!-- assign followng resources to &quot;background&quot; group --&gt;</span>\n<span class=\"nt\">&lt;script </span><span class=\"na\">cgroup=</span><span class=\"s\">&quot;background&quot;</span> <span class=\"na\">src=</span><span class=\"s\">&quot;analytics.js&quot;</span> <span class=\"na\">async</span><span class=\"nt\">&gt;&lt;/script&gt;</span></code></pre></div>\n\n\n<p>The above is not an exhaustive list of plausible directives; don't fixate on the syntax. The key point, and question, is whether it would be useful‚Äîboth to site developers and browser developers‚Äîto have such annotations communicate the preferred priorities and resource allocation strategy on their page - e.g. some scripts are more important than others, some network fetches should have lower relative priority, and so on.</p>\n\n<div class=\"callout\">\nBonus: control groups are hierarchical. For example, if an iframe is allocated 30% of the available CPU cycles, then subresources executing within that iframe are sub-dividing the 30% allocated to the parent.\n</div>\n\n\n<h2>How does the browser <em>enforce</em> such policies?</h2>\n\n<p>Well, it may not be able to, in the strict sense of that word. For example, if a \"background\" script is scheduled and decides to monopolize the renderer thread and run for 20 frames, there isn't much that the runtime can do‚Äîtoday, at least. However, the runtime can use the provided information to decide which callback or function to schedule next, or how to prioritize loading of resources. Some browsers may be able to do a better job of enforcing such policies, but even small scheduling optimizations can yield significant user-visible wins. Today, the browser is running blind.</p>\n\n<p>Further, <strong>once the browser knows the \"desired allocation\", it can flag and warn the developer when there is a mismatch at runtime</strong> - e.g. it can fire events via PerformanceObserver to notify the app of violations, allowing the developer to gather and act on this data. In effect, this could be the first step towards enabling attribution and visibility into the real-world runtime performance and impact of various resources.</p>\n\n<p>Perhaps an idea worth exploring?</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.igvita.com/~ff/igvita?a=RgktsKtbOmc:YaFAS14PQTU:yIl2AUoC8zA\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/igvita?d=yIl2AUoC8zA\" /></a>\n</div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/igvita/~4/RgktsKtbOmc\" width=\"1\" />", "title": "Control Groups (cgroups) for the Web?", "author_name": "Ilya Grigorik", "source_type": "rss", "link": "https://www.igvita.com/2016/03/01/control-groups-cgroups-for-the-web/", "source_link": "https://www.igvita.com", "source_title": "igvita.com", "tags": "perf,tech,web", "published": "2016-03-01T08:00:00"}, {"source_name": "igvita", "description": "The \"Average Page\" is a myth", "author_link": "https://www.igvita.com/", "text": "<p><img class=\"left\" src=\"https://www.igvita.com/posts/16/normal-distribution.png\" />As anyone and everyone in the web performance community will tell you, the size of the average page is continuously getting bigger: more JavaScript, more image and video bytes, growing use of web fonts, and so on. In fact, as of December 2015, the <a href=\"http://httparchive.org/\">HTTP Archive</a> shows that the average desktop site weighs in at <a href=\"http://httparchive.org/trends.php?s=All&amp;minlabel=Jan+1+2015&amp;maxlabel=Dec+15+2015\">2227KB</a>, and mobile is up to <a href=\"http://mobile.httparchive.org/trends.php?s=All&amp;minlabel=Jan+1+2015&amp;maxlabel=Dec+15+2015\">1253KB</a>.</p>\n\n<p><strong>Except, what is an \"average page\", exactly?</strong> Intuitively, it is a page that is representative of the web at large, in its payload size, distribution of bytes between different content types, etc. More technically, it is a <a href=\"https://en.wikipedia.org/wiki/Central_tendency\">measure of central tendency</a> of the underlying distribution - e.g. for a normal distribution the average is the central peak, with 50% values greater and 50% values smaller than its value. Which, of course, begs the question: what is the shape and type of the distribution for transferred bytes and does it match this model? Let's plot the histogram and the <a href=\"http://www.epixanalytics.com/modelassist/CrystalBall/Model_Assist.htm#Presenting_results/Cumulatve_plots/Cumulative_probability_plots.htm\">CDF plots</a>...</p>\n\n<p><img class=\"center\" src=\"https://www.igvita.com/posts/16/desktop-distribution.png\" style=\"width: 100%;\" /></p>\n\n<ul>\n<li>The x-axis shows that we have outliers weighing in at 30MB+.</li>\n<li>The quantile values are 25th: 699KB, 50th (median): 1445KB, 75th: 2697KB.</li>\n<li>The CDF plot shows that 90%+ of the pages are under 5000KB.</li>\n</ul>\n\n\n<p><img class=\"center\" src=\"https://www.igvita.com/posts/16/mobile-distribution.png\" style=\"width: 100%;\" /></p>\n\n<ul>\n<li>The x-axis shows that we have outliers weighing in at 10MB+.</li>\n<li>The quantile values are 25th: 403KB, 50th (median): 888KB, 75th: 1668KB.</li>\n<li>The CDF plot shows that 90%+ of the pages are under 3000KB.</li>\n</ul>\n\n\n<p><strong>Let's start with the obvious: the transfer size is not normally distributed, and there is no meaningful \"central value\" and talking about the mean is meaningless, if not deceiving</strong> - see \"<a href=\"https://introductorystats.wordpress.com/2011/09/04/when-bill-gates-walks-into-a-bar/\">Bill Gates walks into a bar...</a>\". We need a much richer and nuanced language and statistics to capture what's going on here, and an even richer set of tools and methods to analyze how these values change over time. The \"average page\" is a myth.</p>\n\n<div class=\"callout\">I've been as guilty as anyone in (ab)using averages when talking about this data: they're easy to get and simple to communicate. Except, they're also meaningless in this context. My 2016 resolution is to kick this habit. Join me.</div>\n\n\n<h2>Page weight as of December 2015</h2>\n\n<p>Coming up with a small set of descriptive statistics for a dataset is hard, and attempting to reduce a dataset as rich as HTTP Archive down to a single one is an act of folly. Instead, we need to visualize the data and start asking questions.</p>\n\n<p><strong>For example, why are some pages so heavy?</strong> A <a href=\"http://bigqueri.es/t/what-is-the-root-cause-of-outliers-by-page-weight/661\">cursory look shows</a> that the heaviest ~3% by page weight, both for desktop (>7374KB) and mobile (>4048KB), are often due to large (and/or heavy) number of images. Emphasis on <em>often</em>, because a deeper look at the most popular content types shows outliers in each and every category. For example, plotting the CDFs for desktop pages yields:</p>\n\n<p><img class=\"center\" src=\"https://www.igvita.com/posts/16/desktop-cdfs.png\" style=\"width: 100%;\" /></p>\n\n<p>We have pages that fetch tens of megabytes of HTML, images, video, and fonts, as well as high single-digit megabytes of JavaScript and CSS. Each of these \"obese\" outliers is worth digging into, but we'll leave that for a separate investigation. Let's compare this data to the mobile dataset.</p>\n\n<p><img class=\"center\" src=\"https://www.igvita.com/posts/16/mobile-cdfs.png\" style=\"width: 100%;\" /></p>\n\n<p>Lots of outliers as well, but the tails for mobile pages are not nearly as long. This alone explains much of the dramatic \"average page\" difference (desktop: 2227KB, mobile: 1253KB) &mdash; averages are easily skewed by a few large numbers. <strong>Focusing on the average leads us to believe that mobile pages are significantly \"lighter\", whereas in reality all we can say so far is that the desktop distribution has a longer tail with much heavier pages.</strong></p>\n\n<p>To get a better sense for the difference in distributions between the desktop and mobile pages, let's exclude the heaviest 3% that compress all of our graphs and zoom in on the [0, 97%] interval:</p>\n\n<p><img class=\"center\" src=\"https://www.igvita.com/posts/16/mobile-desktop-cdf-2015.png\" style=\"width: 100%;\" /></p>\n\n<p>Mobile pages do appear to consume fewer bytes. For example, a 1000KB budget would allow the client to fetch fully ~38% of desktop pages vs. 54% of mobile pages. However, while the savings for mobile pages are present for all content types, the absolute differences for most of them are not drastic. Most of the total byte difference is explained by fewer image bytes. <strong>Structurally, mobile pages are not dramatically different from desktop pages.</strong></p>\n\n<h2>Changes in page weight over time</h2>\n\n<p><img class=\"center\" src=\"https://www.igvita.com/posts/16/mobile-desktop-cdf-2014-2015.png\" style=\"width: 100%;\" /></p>\n\n<p>Comparing the CDFs against the year prior shows that the transfers sizes for most content types have increased for both the desktop and mobile pages. However, there are some unexpected and interesting results as well:</p>\n\n<ul>\n<li><strong>The amount of shipped HTML bytes has decreased!</strong></li>\n<li><strong>2015-mobile and 2014-desktop distributions tend to overlap.</strong></li>\n</ul>\n\n\n<p>In terms of bytes fetched, for everything but images, mobile pages are a year behind their desktop counterparts? Intuitively, this makes sense, just because we're working with a smaller screen doesn't mean the required functionality is less, or less complex.</p>\n\n<h2>Take the data out for a spin...</h2>\n\n<p><img class=\"center\" src=\"https://www.igvita.com/posts/16/datalab-workbook.png\" style=\"width: 100%;\" /></p>\n\n<p>My goal here is to raise questions, not to provide answers; this is a very shallow analysis of a very rich dataset. For a deeper and a more hands-on look at this data, take a look at <a href=\"https://github.com/igrigorik/httparchive/blob/master/datalab/histograms.ipynb\">my Datalab workbook</a>. Better, clone it, <a href=\"https://cloud.google.com/datalab/\">run your own analysis</a>, and <a href=\"http://bigqueri.es\">share</a> your results! If we want to talk about the trends, outliers, and their causes on the web, then we need to understand this data at a much deeper level.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.igvita.com/~ff/igvita?a=BdSAlUhHcWs:6SF64kBWRAg:yIl2AUoC8zA\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/igvita?d=yIl2AUoC8zA\" /></a>\n</div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/igvita/~4/BdSAlUhHcWs\" width=\"1\" />", "title": "The \"Average Page\" is a myth", "author_name": "Ilya Grigorik", "source_type": "rss", "link": "https://www.igvita.com/2016/01/12/the-average-page-is-a-myth/", "source_link": "https://www.igvita.com", "source_title": "igvita.com", "tags": "perf,tech,web", "published": "2016-01-12T08:00:00"}, {"source_name": "igvita", "description": "Don't lose user and app state, use Page Visibility", "author_link": "https://www.igvita.com/", "text": "<p><strong>Great applications do not lose user's progress and app state.</strong> They automatically save the necessary data without interrupting the user and transparently restore themselves as and when necessary - e.g. after coming back from a background state or an unexpected shutdown.</p>\n\n<p>Unfortunately, many web applications get this wrong because they fail to account for the mobile lifecycle: they're listening for the wrong events that may never fire, or ignore the problem entirely at the high cost of poor user experience. To be fair, the web platform also doesn't make this easy by exposing (too) many different events: <a href=\"http://w3c.github.io/page-visibility/#introduction\">visibilityState</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/pageshow\">pageshow</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/pagehide\">pagehide</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/beforeunload\">beforeunload</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/unload\">unload</a>. Which should we use, and when?</p>\n\n<p><img class=\"center\" src=\"https://www.igvita.com/posts/15/lifecycle-events.png\" style=\"width: 100%;\" /></p>\n\n<p><strong>You cannot rely on <code>pagehide</code>, <code>beforeunload</code>, and <code>unload</code> events to fire on mobile platforms.</strong> This is not a bug in your favorite browser; this is due to how all mobile operating systems work. An active application can transition into a \"background state\" via several routes:</p>\n\n<ul>\n<li>The user can click on a notification and switch to a different app.</li>\n<li>The user can invoke the task switcher and move to a different app.</li>\n<li>The user can hit the \"home\" button and go to homescreen.</li>\n<li>The OS can switch the app on users behalf - e.g. due to an incoming call.</li>\n</ul>\n\n\n<p>Once the application has transitioned to background state, it may be killed without any further ceremony - e.g. the OS may terminate the process to reclaim resources, the user can swipe away the app in the task manager. As a result, you should assume that \"clean shutdowns\" that fire the <code>pagehide</code>, <code>beforeunload</code>, and <code>unload</code> events are the exception, not the rule.</p>\n\n<p>To provide a reliable and consistent user experience, both on desktop and mobile, the application must use <a href=\"http://w3c.github.io/page-visibility/#introduction\">Page Visibility API</a> and execute its session save and restore logic whenever <code>visibilityChange</code> state changes. This is the only event your application can count on.</p>\n\n<div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// query current page visibility state: prerender, visible, hidden</span>\n<span class=\"kd\">var</span> <span class=\"nx\">pageVisibility</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">visibilityState</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// subscribe to visibility change events</span>\n<span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">'visibilitychange'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// fires when user switches tabs, apps, goes to homescreen, etc.</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">visibilityState</span> <span class=\"o\">==</span> <span class=\"s1\">'hidden'</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">}</span>\n\n    <span class=\"c1\">// fires when app transitions from prerender, user returns to the app / tab.</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">visibilityState</span> <span class=\"o\">==</span> <span class=\"s1\">'visible'</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">}</span>\n<span class=\"p\">});</span></code></pre></div>\n\n\n<p>If you're counting on <code>unload</code> to save state, record and report analytics data, and execute other relevant logic, then you're missing a large fraction of mobile sessions where <code>unload</code> will never fire. Similarly, if you're counting on <code>beforeunload</code> event to prompt the user about unsaved data, then you're ignoring that \"clean shutdowns\" are an exception, not the rule.</p>\n\n<p><strong>Use Page Visibility API and forget that the other events even exist.</strong> Treat every transition to <code>visible</code> as a new session: restore previous state, reset your analytics counters, and so on. Then, when the application transitions to <code>hidden</code> end the session: save user and app state, beacon your analytics, and perform all other necessary work.</p>\n\n<div class=\"callout\">\nIf necessary, with a bit of extra work you can aggregate these visibility-based sessions into larger user flows that account for app and tab switching - e.g. report each session to the server and have it aggregate multiple sessions together.\n</div>\n\n\n<h2>Practical implementation considerations</h2>\n\n<p>In the long term, all you need is the Page Visibility API. As of today, you will have to augment it with one other event &mdash; <code>pagehide</code>, to be specific &mdash; to account for the \"when the page is being unloaded\" case. For the curious, here's a full matrix of which events fire in each browser today (based on my <a href=\"http://output.jsbin.com/zubiyid/latest/quiet\">manual testing</a>):</p>\n\n<p><img class=\"center\" src=\"https://www.igvita.com/posts/15/lifecycle-events-testing.png\" style=\"width: 100%;\" /></p>\n\n<ul>\n<li><code>visibilityChange</code> works reliably for task-switching on mobile platforms.</li>\n<li><code>beforeunload</code> is of limited value as it only fires on desktop navigations.</li>\n<li><code>unload</code> does not fire on mobile and desktop Safari.</li>\n</ul>\n\n\n<p>The good news is that Page Visibility reliably covers task-switching scenarios across all platforms and browser vendors. The bad news is that today Firefox is the only implementation that fires the <code>visibilityChange</code> event when the page is unloaded &mdash; <a href=\"https://code.google.com/p/chromium/issues/detail?id=554834\">Chrome</a>, <a href=\"https://bugs.webkit.org/show_bug.cgi?id=151234\">WebKit</a>, and <a href=\"https://github.com/w3c/page-visibility/issues/18#issuecomment-156031906\">Edge</a> bugs to address this. Once those are resolved, <code>visibilityState</code> is the only event you'll need to provide a great user experience.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.igvita.com/~ff/igvita?a=gPe_hfNPb78:9-A6DqKrI2g:yIl2AUoC8zA\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/igvita?d=yIl2AUoC8zA\" /></a>\n</div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/igvita/~4/gPe_hfNPb78\" width=\"1\" />", "title": "Don't lose user and app state, use Page Visibility", "author_name": "Ilya Grigorik", "source_type": "rss", "link": "https://www.igvita.com/2015/11/20/dont-lose-user-and-app-state-use-page-visibility/", "source_link": "https://www.igvita.com", "source_title": "igvita.com", "tags": "perf,tech,web", "published": "2015-11-20T08:00:00"}, {"source_name": "igvita", "description": "Eliminating Roundtrips with Preconnect", "author_link": "https://www.igvita.com/", "text": "<p>The \"simple\" act of initiating an HTTP request can incur many roundtrips before the actual request bytes are routed to the server: the browser may have to resolve the DNS name, perform the TCP handshake, and negotiate the TLS tunnel if a secure socket is required. All accounted for, that's anywhere from one to three &mdash; and more in unoptimized cases &mdash; roundtrips of latency to set up the socket before the actual request bytes are routed to the server.</p>\n\n<p><img class=\"center\" src=\"https://www.igvita.com/posts/15/socket-setup.png\" style=\"width: 100%;\" /></p>\n\n<p>Modern browsers <a href=\"https://www.igvita.com/posa/high-performance-networking-in-google-chrome/#tcp-pre-connect\">try their best to anticipate</a> what connections the site will need before the actual request is made. By initiating early <em>\"preconnects\"</em>, the browser can set up the necessary sockets ahead of time and eliminate the costly DNS, TCP, and TLS roundtrips from the critical path of the actual request. That said, as smart as modern browsers are, they cannot reliably predict all the preconnect targets for each and every website.</p>\n\n<p><strong>The good news is that we can &mdash; finally &mdash; help the browser; we can tell the browser which sockets we will need ahead of initiating the actual requests via the new <a href=\"http://w3c.github.io/resource-hints/#preconnect\">preconnect hint</a> shipping in <a href=\"https://developer.mozilla.org/en-US/Firefox/Releases/39#HTML\">Firefox 39</a> and <a href=\"https://www.chromestatus.com/feature/5560623895150592\">Chrome 46</a>!</strong> Let's take a look at some hands-on examples of how and where you might want to use it.</p>\n\n<h2>Preconnect for dynamic request URLs</h2>\n\n<p>Your application may not know the full resource URL ahead of time due to conditional loading logic, UA adaptation, or other reasons. However, if the origin from which the resources are going to be fetched is known, then a preconnect hint is a perfect fit. Consider the following example with Google Fonts, both with and without the preconnect hint:</p>\n\n<p><img class=\"center\" src=\"https://www.igvita.com/posts/15/font-preconnect.png\" style=\"width: 100%;\" /></p>\n\n<p>In the <a href=\"https://output.jsbin.com/dacihe/quiet\">first trace</a>, the browser fetches the HTML and discovers that it needs a CSS resource residing on <code>fonts.googleapis.com</code>. With that downloaded it <a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model?hl=en\">builds the CSSOM</a>, determines that the page will need two fonts, and initiates requests for each from <code>fonts.gstatic.com</code> &mdash; first though, it needs to perform the DNS, TCP, and TLS handshakes with that origin, and once the socket is ready both requests are multiplexed over the HTTP/2 connection.</p>\n\n<div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"nt\">&lt;link</span> <span class=\"na\">href=</span><span class=\"s\">'https://fonts.gstatic.com'</span> <span class=\"na\">rel=</span><span class=\"s\">'preconnect'</span> <span class=\"na\">crossorigin</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;link</span> <span class=\"na\">href=</span><span class=\"s\">'https://fonts.googleapis.com/css?family=Roboto+Slab:700|Open+Sans'</span> <span class=\"na\">rel=</span><span class=\"s\">'stylesheet'</span><span class=\"nt\">&gt;</span></code></pre></div>\n\n\n<p>In the <a href=\"https://output.jsbin.com/pocima/1/quiet\">second trace</a>, we add the <em>preconnect hint</em> in our markup indicating that the application will fetch resources from <code>fonts.gstatic.com</code>. <strong>As a result, the browser begins the socket setup in parallel with the CSS request, completes it ahead of time, and allows the font requests to be sent immediately!</strong> In this particular scenario, preconnect removes three RTTs from the critical path and eliminates over half of second of latency.</p>\n\n<div class=\"callout\">\nThe <a href=\"http://www.w3.org/TR/css3-fonts/#font-fetching-requirements\">font-face specification requires</a> that fonts are loaded in \"anonymous mode\", which is why we must provide the <code>crossorigin</code> attribute on the preconnect hint: the browser maintains a separate pool of sockets for this mode.\n</div>\n\n\n<h2>Initiating preconnect via Link HTTP header</h2>\n\n<p>In addition to declaring the preconnect hints via HTML markup, we can also deliver them via an HTTP <code>Link</code> header. For example, to achieve <a href=\"http://www.webpagetest.org/result/150812_9H_10VA/1/details/\">the same preconnect benefits</a> as above, the server could have delivered the preconnect hint without modifying the page markup - see below. <strong>The <code>Link</code> header mechanism allows <em>each response</em> to indicate to the browser which other origins it should connect to ahead of time.</strong> For example, included widgets and dependencies can help optimize performance by indicating which other origins they will need, and so on.</p>\n\n<p><img class=\"center\" src=\"https://www.igvita.com/posts/15/preconnect-header.png\" style=\"width: 100%;\" /></p>\n\n<h2>Preconnect with JavaScript</h2>\n\n<p>We don't have to declare all preconnect origins upfront. <strong>The application can invoke preconnects in response to user input, anticipated activity, or other user signals with the help of JavaScript.</strong> For example, consider the case where an application anticipates the likely navigation target and issues an early preconnect:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">preconnectTo</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">hint</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s2\">&quot;link&quot;</span><span class=\"p\">);</span>\n    <span class=\"nx\">hint</span><span class=\"p\">.</span><span class=\"nx\">rel</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;preconnect&quot;</span><span class=\"p\">;</span>\n    <span class=\"nx\">hint</span><span class=\"p\">.</span><span class=\"nx\">href</span> <span class=\"o\">=</span> <span class=\"nx\">url</span><span class=\"p\">;</span>\n    <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">head</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">hint</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div>\n\n\n<p><img class=\"center\" src=\"https://www.igvita.com/posts/15/reactive-preconnect.png\" style=\"width: 100%;\" /></p>\n\n<p>The user starts on <code>jsbin.com</code>; at ~3.0 second mark the page determines that the user might be navigating to <code>engineering.linkedin.com</code> and initiates a preconnect for that origin; at ~5.0 second mark the user initiates the navigation, and the request is dispatched without blocking on DNS, TCP, or TLS handshakes &mdash; nearly a second saved for the navigation!</p>\n\n<h2>Preconnect often, Preconnect wisely</h2>\n\n<p>Preconnect is an important tool in your optimization toolbox. As above examples illustrate, it can eliminate many costly roundtrips from your request path &mdash; in some cases reducing the request latency by hundreds and even thousands of milliseconds. That said, use it wisely: <strong>each open socket incurs costs both on the client and server, and you want to avoid opening sockets that might go unused.</strong> As always, apply, measure real-world impact, and iterate to get the best performance mileage from this feature.</p>\n\n<p>Finally, for debugging purposes, do note that preconnect directives are treated as <em>optimization hints:</em> the browser might not act on each directive each and every time, and the browser is allowed to adjust its logic to perform a partial handshake - e.g. fall back to DNS lookup only, or DNS+TCP for TLS connections.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.igvita.com/~ff/igvita?a=nOBl0G2GAHI:2TxHbDIWzho:yIl2AUoC8zA\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/igvita?d=yIl2AUoC8zA\" /></a>\n</div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/igvita/~4/nOBl0G2GAHI\" width=\"1\" />", "title": "Eliminating Roundtrips with Preconnect", "author_name": "Ilya Grigorik", "source_type": "rss", "link": "https://www.igvita.com/2015/08/17/eliminating-roundtrips-with-preconnect/", "source_link": "https://www.igvita.com", "source_title": "igvita.com", "tags": "perf,tech,web", "published": "2015-08-17T07:00:00"}, {"source_name": "igvita", "description": "Browser Progress Bar is an Anti-pattern", "author_link": "https://www.igvita.com/", "text": "<p><img class=\"left\" src=\"https://www.igvita.com/posts/15/progressbar.png\" /> The user initiates a navigation, and the browser gets busy: it'll likely have to resolve a dozen DNS names, establish an even larger number of connections, and then dispatch one or more requests over each. In turn, for each request, it often does not know the response size (chunked transfers), and even when it does, it is still unable to reliably predict the download time due to variable network weather, server processing times, and so on. Finally, fetching and processing one resource might trigger an entire subtree of new requests.</p>\n\n<p>Ok, so loading a page is complicated business, so what? Well, <strong>if there is no way to reliably predict how long the load might take, then why do so many browsers still use and show the <a href=\"https://en.wikipedia.org/wiki/Progress_bar\">progress bar</a>?</strong> At best, the 0-100 indicator is a lie that misleads the user; worse, the success criteria is forcing developers to optimize for \"onload time\", which misses the <a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/index?hl=en\">progressive rendering experience</a> that modern applications are aiming to deliver. <strong>Browser progress bars fail both the users and the developers; we can and should do better.</strong></p>\n\n<h2>Indeterminate indicators in post-onload era</h2>\n\n<p>To be clear, <a href=\"https://en.wikipedia.org/wiki/Progress_indicator\">progress indicators</a> are vital to helping the user understand that an operation is in progress. The browser <em>needs</em> to show some form of a busy indicator, and the important questions are: what type of indicator, whether progress can be estimated, and what criteria are used to trigger its display.</p>\n\n<p>Some browsers have already replaced \"progress bars\" with \"indeterminate indicators\" that address the pretense of attempting to predict and estimate something that they can't. However, this treatment is inconsistent between different browser vendors, and even same browsers on different platforms &mdash; e.g. many mobile browsers use progress bars, whereas their desktop counterparts use indeterminate indicators. We need to fix this.</p>\n\n<p><img class=\"center\" src=\"https://www.igvita.com/posts/15/progressive-rendering.png\" style=\"width: 100%;\" /></p>\n\n<p>Also, while we're on the subject, what are the conditions that trigger the browser's busy indicator anyway? Today the indicator is shown only while the page is loading: it is active until the <code>onload</code> event fires, which is supposed to indicate that the page has finished fetching all of the resources and is now \"ready\". However, in a world optimized for progressive rendering, this is an increasingly less than useful concept: the presence of an outstanding request does not mean the user can't or shouldn't interact with the page; many pages defer fetching and further processing until after <code>onload</code>; many pages trigger fetching and processing based on user input.</p>\n\n<p>Time to <code>onload</code> is <a href=\"http://www.stevesouders.com/blog/2013/05/13/moving-beyond-window-onload/\">bad performance metric</a> and one that developers have been gaming for a while. Making that the success criteria for the busy indicator seems like a decision worth revisiting. For example, instead of relying on what is now an arbitrary initialization milestone, what if it represented the pages ability to accept and process user input?</p>\n\n<ul>\n<li>Does the page have visible content and is it ready to accept input (e.g. touch, scroll)? Hide the busy indicator.</li>\n<li>Is the UI thread busy (see <a href=\"http://jankfree.org/\">jank</a>) due to long-running JavaScript or other work? Show the busy indicator until this condition is resolved; the busy indicator may be shown at any point in the application lifecycle.</li>\n</ul>\n\n\n<p>The initial page load is simply a special case of painting the first frame (ideally in &lt;1000ms), at which time the page is unable to process user input. Post first frame, if the UI thread is busy once again, then the browser can and should show the same indicator. Changing the busy indicator to signal interactivity would address our existing issues with penalizing progressive rendering, remove the need to continue gaming <code>onload</code>, and create direct incentives for developers to build and optimize for smooth and <a href=\"https://developers.google.com/web/fundamentals/performance/rendering/index?hl=en\">jank-free experiences</a>.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.igvita.com/~ff/igvita?a=Jw5xGqXK-JE:7c8OA0o5n6g:yIl2AUoC8zA\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/igvita?d=yIl2AUoC8zA\" /></a>\n</div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/igvita/~4/Jw5xGqXK-JE\" width=\"1\" />", "title": "Browser Progress Bar is an Anti-pattern", "author_name": "Ilya Grigorik", "source_type": "rss", "link": "https://www.igvita.com/2015/06/25/browser-progress-bar-is-an-anti-pattern/", "source_link": "https://www.igvita.com", "source_title": "igvita.com", "tags": "perf,tech,web", "published": "2015-06-25T07:00:00"}, {"source_name": "igvita", "description": "Fixing the 'Blank Text' Problem", "author_link": "https://www.igvita.com/", "text": "<blockquote cite=\"http://feeds.igvita.com/CSS Fonts Module Level 3\">In cases where textual content is loaded before downloadable fonts are available, user agents may render text as it would be rendered if downloadable font resources are not available or they may render text transparently with fallback fonts to avoid a flash of text using a fallback font - <a href=\"http://dev.w3.org/csswg/css-fonts/#font-face-loading\">Font loading guidelines</a>.</blockquote>\n\n\n<p>The ambiguity and lack of developer override in above spec language is a big gap and a performance problem. First, the ambiguity leaves us with <a href=\"https://www.igvita.com/2014/01/31/optimizing-web-font-rendering-performance/#timeouts\">inconsistent behavior</a> across different browsers, and second, the lack of developer override means that we are either rendering content that should be blocked, or unnecessarily blocking rendering where a fallback would have been acceptable. There isn't a single strategy that works best in all cases.</p>\n\n<h2>Let's quantify the problem</h2>\n\n<p>How often does the above algorithm get invoked? What's the delta between the time the browser was first ready to render text and the font became available? Speaking of which, how long does it typically take the font download to complete? Can we just initiate the font fetch earlier to solve the problem?</p>\n\n<p>As it happens, Chrome already tracks the necessary metrics to answer all of the above. Open a new tab and head to <code>chrome://histograms</code> to inspect the metrics (for the curious, check out <a href=\"https://code.google.com/p/chromium/codesearch#chromium/src/tools/metrics/histograms/histograms.xml\">histograms.xml in Chromium source</a>) for your profile and navigation history. The specific metrics we are interested in are:</p>\n\n<ul>\n    <li><code>WebFont.HadBlankText</code>: count of times text rendering was blocked.</li>\n    <li><code>WebFont.BlankTextShownTime</code>: duration of blank text due to blocked rendering.</li>\n    <li><code>WebFont.DownloadTime.*</code>: time to fetch the font, segmented by filesize.</li>\n    <li><code>PLT.NT_Request</code>: time to first response byte (TTFB).</li>\n</ul>\n\n\n<h2>Text rendering performance on Chrome for Android</h2>\n\n<p>Inspecting your own histograms will, undoubtedly, reveal some interesting insights. However, is your profile data representative of the global population? Chrome aggregates <a href=\"https://www.google.com/chrome/browser/privacy/whitepaper.html#usagestats\">anonymized usage statistics</a> from opted-in users to help the engineering team improve Chrome's features and performance, and I've pulled the same global metrics for Chrome for Android. Let's take a look...</p>\n\n<table>\n  <tbody>\n    <tr>\n      <td class=\"header\"></td>\n      <td class=\"header\">50th</td>\n      <td class=\"header\">75th</td>\n      <td class=\"header\">95th</td>\n    </tr>\n\n    <tr>\n      <td class=\"header\">WebFont.DownloadTime.0.Under10KB</td>\n      <td>~400 ms</td>\n      <td>~750 ms</td>\n      <td>~2300 ms</td>\n    </tr>\n    <tr>\n      <td class=\"header\">WebFont.DownloadTime.1.10KBTo50KB</td>\n      <td>~500 ms</td>\n      <td>~900 ms</td>\n      <td>~2600 ms</td>\n    </tr>\n    <tr>\n      <td class=\"header\">WebFont.DownloadTime.2.50KBTo100KB</td>\n      <td>~600 ms</td>\n      <td>~1100 ms</td>\n      <td>~3800 ms</td>\n    </tr>\n    <tr>\n      <td class=\"header\">WebFont.DownloadTime.3.100KBTo1MB</td>\n      <td>~800 ms</td>\n      <td>~1500 ms</td>\n      <td>~5000 ms</td>\n    </tr>\n\n    <tr class=\"header\">\n      <td colspan=\"4\" style=\"height: 0px; background: #dbdbdb;\"></td>\n    </tr>\n    <tr>\n      <td class=\"header\">WebFont.BlankTextShownTime</td>\n      <td>~350 ms</td>\n      <td>~750 ms</td>\n      <td>~2300 ms</td>\n    </tr>\n\n    <tr class=\"header\">\n      <td colspan=\"4\" style=\"height: 0px; background: #dbdbdb;\"></td>\n    </tr>\n    <tr>\n      <td class=\"header\">PLT.NT_Request</td>\n      <td>~150 ms</td>\n      <td>~380 ms</td>\n      <td>~1300 ms</td>\n    </tr>\n\n    <tr class=\"header\">\n      <td colspan=\"4\" style=\"height: 0px; background: #dbdbdb;\"></td>\n    </tr>\n    <tr>\n      <td class=\"header\"></td>\n      <td class=\"header\">No blank text</td>\n      <td class=\"header\">Had blank text</td>\n    </tr>\n    <tr>\n      <td class=\"header\">WebFont.HadBlankText</td>\n      <td>~71%</td>\n      <td>~29%</td>\n    </tr>\n  </tbody>\n</table>\n\n\n<p><strong>29% of page loads on Chrome for Android displayed blank text:</strong> the user agent knew the text it needed to paint, but was blocked from doing so due to the unavailable font resource. In the median case the blank text time was ~350 ms, ~750 ms for the 75th percentile, and a scary ~2300 ms for the 95th.</p>\n\n<p>Looking at the font download times, it is also clear that even the smallest fonts (&lt;10KB) can take multiple seconds to complete. Further, the time to fetch the font is significantly higher than the time to the first HTML response byte (see <code>PLT.NT_Request</code>) that may contain text that can be rendered. As a result, even if we were able to start the font fetch <em>in parallel</em> with the HTML request, there are still many cases where we would have to block text rendering. More realistically, the font fetch would be delayed until we know it is required, which means waiting for the HTML response, building the DOM, and resolving styles, all of which defer text rendering even further.</p>\n\n<h2>Developers need control of the text rendering strategy</h2>\n\n<p>As the above data illustrates, fetching the font sooner and optimizing the resource filesize are both important but not sufficient to eliminate the \"blank text problem\". The network fetch may take a while, and we can't control that.</p>\n\n<p>That said, knowing this, we can provide the necessary controls to developers to specify the desired text rendering strategy: there are cases where using a fallback is a valid strategy, and there are cases when rendering should be blocked. Both strategies are valid and can coexist on the same page depending on the content being rendered.</p>\n\n<p><strong>In short, text is almost always the single most important asset on the page, and we need to give developers control over how and when it's rendered.</strong> The <a href=\"https://lists.w3.org/Archives/Public/www-style/2015Mar/0381.html\">CSS font rendering proposal</a> should, I hope, resolve this.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.igvita.com/~ff/igvita?a=kFV0bBaPq6c:F-_CNmNU79U:yIl2AUoC8zA\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/igvita?d=yIl2AUoC8zA\" /></a>\n</div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/igvita/~4/kFV0bBaPq6c\" width=\"1\" />", "title": "Fixing the 'Blank Text' Problem", "author_name": "Ilya Grigorik", "source_type": "rss", "link": "https://www.igvita.com/2015/04/10/fixing-the-blank-text-problem/", "source_link": "https://www.igvita.com", "source_title": "igvita.com", "tags": "perf,tech,web", "published": "2015-04-10T07:00:00"}, {"source_name": "igvita", "description": "Resilient Networking: Planning for Failure", "author_link": "https://www.igvita.com/", "text": "<p>A 4G user will experience a much better median experience both in terms of bandwidth and latency than a 3G user, but the same 4G user will also fall back to the 3G network for some of the time due to coverage, capacity, or other reasons. Case in point, <a href=\"http://opensignal.com/reports/state-of-lte-q1-2014/\">OpenSignal data shows</a> that an average \"4G user\" in the US gets LTE service only ~67% of the time. In fact, in some cases the same \"4G user\" will even find themselves on 2G, or worse, with no service at all.</p>\n\n<p><img class=\"center\" src=\"https://www.igvita.com/posts/15/time-on-lte.png\" style=\"width: 100%;\" /></p>\n\n<p><strong>All connections are slow some of the time. All connections fail some of the time. All users experience these behaviors on their devices regardless of their carrier, geography, or underlying technology &mdash; 4G, 3G, or 2G.</strong></p>\n\n<div class=\"callout\">\nYou can use the <a href=\"http://opensignal.com/android/\">OpenSignal Android app</a> to track own stats for 4G/3G/2G time, plus many other metrics. \n</div>\n\n\n<h2>Why does this matter?</h2>\n\n<p>Networks are not reliable, latency is not zero, and bandwidth is not infinite. Most applications ignore these simple truths and design for the best-case scenario, which leads to broken experiences whenever the network deviates from its optimal case. We treat these cases as exceptions but in reality they are the norm.</p>\n\n<ul>\n<li>All 4G users are 3G users some of the time.</li>\n<li>All 3G users are 2G users some of the time.</li>\n<li>All 2G users are offline some of the time.</li>\n</ul>\n\n\n<p>Building a product for a market dominated by 2G vs. 3G vs. 4G users might require an entirely different architecture and set of features. However, a 3G user is also a 2G user some of the time; a 4G user is both a 3G and a 2G user some of the time; all users are offline some of the time. <strong>A successful application is one that is resilient to fluctuations in network availability and performance: it can take advantage of the peak performance, but it plans for and continues to work when conditions degrade.</strong></p>\n\n<h2>So what do we do?</h2>\n\n<p>Failing to plan for variability in network performance is planning to fail. Instead, we need to accept this condition as a normal operational case and design our applications accordingly. A simple, but effective strategy is to adopt a \"<a href=\"http://techblog.netflix.com/2012/07/chaos-monkey-released-into-wild.html\">Chaos Monkey</a> approach\" within our development cycle:</p>\n\n<ul>\n<li><strong>Define an acceptable SLA for each network request</strong>\n\n<ul>\n<li>Interactive requests should respect <a href=\"http://chimera.labs.oreilly.com/books/1230000000545/ch10.html#SPEED_PERFORMANCE_HUMAN_PERCEPTION\">perceptual time constants</a>.</li>\n<li>Background requests can take longer but should not be unbounded.</li>\n</ul>\n</li>\n<li><strong>Make failure the norm, instead of an exception</strong>\n\n<ul>\n<li>Force offline mode for some periods of time.</li>\n<li>Force some fraction of requests to exceed the defined SLA.</li>\n<li>Deal with SLA failures instead of ignoring them.</li>\n</ul>\n</li>\n</ul>\n\n\n<p>Degraded network performance and offline are the norm not an exception. You can't bolt-on an offline mode, or add a \"degraded network experience\" after the fact, just as you can't add performance or security as an afterthought. To succeed, we need to design our applications with these constraints from the beginning.</p>\n\n<h2>Tooling and API's</h2>\n\n<p>Are you using a network proxy to emulate a slow network? That's a start, but it doesn't capture the real experience of your average user: a 4G user is fast most of the time and slow or offline some of the time. We need better tools that can emulate and force these behaviors when we develop our applications. Testing against <code>localhost</code>, where latency is zero and bandwidth is infinite, is a recipe for failure.</p>\n\n<p>We need API's and frameworks that can facilitate and guide us to make the right design choices to account for variability in network performance. For the web, ServiceWorker is going to be a <a href=\"http://jakearchibald.com/2014/offline-cookbook/\">critical piece</a>: it enables offline, and it allows full control over the request lifecycle, such as controlling SLA's, background updates, and more.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.igvita.com/~ff/igvita?a=_ODyIwQ0JLo:w518gctDUkA:yIl2AUoC8zA\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/igvita?d=yIl2AUoC8zA\" /></a>\n</div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/igvita/~4/_ODyIwQ0JLo\" width=\"1\" />", "title": "Resilient Networking: Planning for Failure", "author_name": "Ilya Grigorik", "source_type": "rss", "link": "https://www.igvita.com/2015/01/26/resilient-networking/", "source_link": "https://www.igvita.com", "source_title": "igvita.com", "tags": "perf,tech,web", "published": "2015-01-26T08:00:00"}, {"source_name": "igvita", "description": "Capability Reporting with Service Worker", "author_link": "https://www.igvita.com/", "text": "<p><em>Some people, when confronted with a problem, think: ‚ÄúI'll use UA/device detection!‚Äù Now they have two problems...</em></p>\n\n<p>But, despite all of its pitfalls, <a href=\"http://www.otsukare.info/2014/03/31/ua-detection-use-cases\">UA/device detection</a> is a <a href=\"https://etherpad.mozilla.org/uadetection-usecases\">fact of life</a>, a <a href=\"http://www.brucelawson.co.uk/2014/device-detection-responsive-web-design/\">growing business</a>, and an enabling business requirement for many. The problem is that UA/device detection often frequently misclassifies capable clients (e.g. <a href=\"http://msdn.microsoft.com/en-us/library/ie/hh869301%28v=vs.85%29.aspx#ie11\">IE11 was forced to change their UA</a>); leads to compatibility nightmares; can't account for continually changing user and runtime preferences. That said, when used correctly it <a href=\"http://calendar.perfplanet.com/2014/support-the-old-optimise-for-the-new/\">can also be used for good</a>.</p>\n\n<p>Browser vendors would love to drop the User-Agent string entirely, but that would break too many things. However, while it is fashionable to demonize UA/device detection, the root problem is not in the intent behind it, but in how it is currently deployed. <strong>Instead of \"detecting\" (i.e. guessing) the client capabilities through an opaque version string, we need to change the model to allow the user agent to \"report\" the necessary capabilities.</strong></p>\n\n<p>Granted, this is <a href=\"http://www.w3.org/TR/2004/REC-CCPP-struct-vocab-20040115/\">not a new idea</a>, but previous attempts seem to introduce as many issues as they solve: they seek to standardize the list of capabilities; they require agreement between multiple slow-moving parties (UA vendors, device manufacturers, etc); they are over-engineered - RDF, seriously? Instead, what we need is a platform primitive that is:</p>\n\n<ul>\n<li><em><strong>Flexible:</strong> browser vendors cannot anticipate all the use cases, nor do they want or need to be in this business beyond providing implementation guidance and documenting the best-practices.</em></li>\n<li><em><strong>Easy to deploy:</strong> developers must be in control over which capabilities are reported. No blocking on UA consensus or other third parties.</em></li>\n<li><em><strong>Cheap to operate:</strong> compatible and deployable with existing infrastructure. No need for third-party databases, service contracts, or other dependencies in the serving path.</em></li>\n</ul>\n\n\n<p><strong>Here is the good news: this mechanism exists, it's Service Worker.</strong> Let's take a closer look...</p>\n\n<blockquote>Service worker is an event-driven Web Worker, which responds to events dispatched from documents and other sources‚Ä¶ The service worker is a generic entry point for event-driven background processing in the Web Platform that is extensible by other specifications - see <a href=\"https://github.com/slightlyoff/ServiceWorker/blob/master/explainer.md\">explainer</a>, <a href=\"http://jakearchibald.com/2014/using-serviceworker-today/\">starter</a>, and <a href=\"http://jakearchibald.com/2014/offline-cookbook/\">cookbook</a> docs.</blockquote>\n\n\n<p><img class=\"center\" src=\"https://www.igvita.com/posts/14/serviceworker.png\" style=\"width: 100%;\" /></p>\n\n<p>A simple way to understand Service Worker is to think of it as a scriptable proxy that runs in your browser and is able to see, modify, and respond to, all requests initiated by the page it is installed on. As a result, the developer can use it to annotate outbound requests (via HTTP request headers, URL rewriting) with relevant capability advertisements:</p>\n\n<ol>\n<li>Developer defines what capabilities are reported and on which requests.</li>\n<li>Capability checks are executed on the client - no guessing on the server.</li>\n<li>Reported values are dynamic and able to reflect changes in user preference and runtime environment.</li>\n</ol>\n\n\n<p><strong>This is not a proposal or a wishlist, this is <a href=\"http://blog.chromium.org/2014/12/chrome-40-beta-powerful-offline-and.html\">possible today</a>, and is a direct result of enabling powerful low-level primitives in the browser - hooray.</strong> As such, now it's only a question of establishing the best practices: what do we report, in what format, and how to we optimize interoperability? Let's consider a real-world example...</p>\n\n<h2>E.g. optimizing video startup experience</h2>\n\n<p>Our goal is to deliver the optimal &mdash; fast and visually pleasing &mdash; video startup experience to our users. Simply starting with the lowest bitrate is suboptimal: fast, but consistently poor visual quality for all users, even for those with a fast connection. Instead, we want to pick a starting bitrate that can deliver the best visual experience from the start, while minimizing playback delays and rebuffers. We don't need to be perfect, but we should account for the current network weather on the client. Once the video starts playing, the adaptive bitrate streaming will take over and adjust the stream quality up or down as necessary.</p>\n\n<p>The combination of Service Worker and <a href=\"http://w3c.github.io/netinfo/\">Network Information API</a> make this trivial to implement:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// register the service worker</span>\n<span class=\"nx\">navigator</span><span class=\"p\">.</span><span class=\"nx\">serviceWorker</span><span class=\"p\">.</span><span class=\"nx\">register</span><span class=\"p\">(</span><span class=\"s1\">'/worker.js'</span><span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span>\n    <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">reg</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Installed successfully'</span><span class=\"p\">,</span> <span class=\"nx\">reg</span><span class=\"p\">)</span> <span class=\"p\">},</span>\n    <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Worker installation failed'</span><span class=\"p\">,</span> <span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n<span class=\"p\">);</span>\n\n<span class=\"c1\">// ... worker.js</span>\n<span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">'fetch'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">requestURL</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">URL</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// Intercept same origin /video/* requests</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">requestURL</span><span class=\"p\">.</span><span class=\"nx\">origin</span> <span class=\"o\">==</span> <span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">origin</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"sr\">/^\\/video\\//</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"nx\">requestURL</span><span class=\"p\">.</span><span class=\"nx\">pathname</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// append the MD header, set value to NetInfo's downlinkMax:</span>\n            <span class=\"c1\">// http://w3c.github.io/netinfo/#downlinkmax-attribute</span>\n            <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">respondWith</span><span class=\"p\">(</span>\n                <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">headers</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"s1\">'MD'</span><span class=\"o\">:</span> <span class=\"nx\">navigator</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">downlinkMax</span> <span class=\"p\">}</span>\n                <span class=\"p\">})</span>\n            <span class=\"p\">);</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span></code></pre></div>\n\n\n<ol>\n<li>Site installs a Service Worker script that is scoped to capture <code>/video/*</code> requests.</li>\n<li>When a video request is intercepted, the worker appends the <a href=\"http://igrigorik.github.io/http-client-hints/#rfc.section.5\">MD header</a> and sets its value to the current <a href=\"http://w3c.github.io/netinfo/#downlinkmax-attribute\">maximum downlink speed</a>. Note: current plan is to enable <code>downlinkMax</code> in Chrome 41.</li>\n<li>Server receives the video request, consults the advertised <code>MD</code> value to determine the starting bitrate, and responds with the appropriate video chunk.</li>\n</ol>\n\n\n<p>We have full control over the request flow and are able to add additional data to the request prior to dispatching it to the server. Best of all, this logic is transparent to the application, and you are free to customize it further. For example, want to add an explicit user override to set a starting bitrate? Prompt the user, send the value to the worker, and have it annotate requests with whatever value you feel is optimal.</p>\n\n<div class=\"callout\">\nTired of writing out srcset rules for every image? Service Worker can help deliver DPR-aware &lt;img&gt;'s: use <a href=\"https://github.com/igrigorik/http-client-hints#delivering-dpr-aware-images\">content negotiation</a>, or <a href=\"https://github.com/agektmr/responsive-resource-loader\">rewrite the image URL's</a>. Note that device DPR is a dynamic value: zooming on desktop browsers affects the DPR value! Existing device detection methods cannot account for that.\n</div>\n\n\n<h2>Implementation best practices</h2>\n\n<p>Service Worker enables us (web developers) to define, customize, and deploy new capability reports at will: we can rewrite requests, implement content-type or origin specific rules, account for user preferences, and <a href=\"http://jakearchibald.com/2014/offline-cookbook/\">more</a>. The new open questions are: what capabilities do our servers need to know about, and what's the best way to deliver them?</p>\n\n<p>It will be tempting to report every plausibly useful property about a client. Please think twice before doing this, as it can add significant overhead to each request - be judicious. Similarly, it makes sense to optimize for interoperability: use parameter names and format that works well with existing infrastructure and services - caches and CDN's, optimization services, and so on. For example, the <code>MD</code> and <code>DPR</code> request headers used in above examples <a href=\"https://github.com/igrigorik/http-client-hints#http-client-hints-internet-draft\">come from Client-Hints</a>, the goals for which are:</p>\n\n<ul>\n<li>To document the best practices for communicating client capabilities via HTTP request header fields.</li>\n<li>Acts as a registry for common header fields to help interoperability between different services.\n\n<ul>\n<li><em>e.g. you can already use <code>DPR</code> and <code>RW</code> hints to optimize images with <a href=\"https://github.com/igrigorik/http-client-hints#hands-on-example\">resrc.it service</a>.</em></li>\n</ul>\n</li>\n</ul>\n\n\n<p>Now is the time to experiment. There will be missteps and poor initial implementations, but good patterns and best practices will emerge. Most importantly, the learning cycle for testing and improving this infrastructure is now firmly in the hands of web developers: deploy Service Worker, experiment, learn, and iterate.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.igvita.com/~ff/igvita?a=jzFfOOO19yE:v0xKHdaOhr4:yIl2AUoC8zA\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/igvita?d=yIl2AUoC8zA\" /></a>\n</div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/igvita/~4/jzFfOOO19yE\" width=\"1\" />", "title": "Capability Reporting with Service Worker", "author_name": "Ilya Grigorik", "source_type": "rss", "link": "https://www.igvita.com/2014/12/15/capability-reporting-with-service-worker/", "source_link": "https://www.igvita.com", "source_title": "igvita.com", "tags": "perf,tech,web", "published": "2014-12-15T08:00:00"}]